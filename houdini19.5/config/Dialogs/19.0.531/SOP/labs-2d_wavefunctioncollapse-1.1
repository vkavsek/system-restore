// Magic: cad7738b
// Automatically generated PSI dialog (PSI version 19.0.531)
// Fri May 20 21:01:57 2022


f_tmp = FLOAT_FIELD;	// dialog.top.ui

bAutomaticInputSizeDetection.gad = ROW
{
    HSTRETCH
    { WIDTH(0.18) }

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("bAutomaticInputSizeDetection", "Automatic Input Size Detection") toggle VALUE(bAutomaticInputSizeDetection.val);

    { HSTRETCH }

    { WIDTH(0.1) }
}

i2SampleGridSize.gad = ROW
{
   HSTRETCH
   { WIDTH(0.18) }

   i2SampleGridSize.label = PARM_LABEL("Sample Grid Size", "i2SampleGridSize") WIDTH(1.5);
   PARM(integer, 2, "i2SampleGridSize", none, none, "X,Y")
	RANGE(-1,1)  LABELREF(i2SampleGridSize.label)
	HSTRETCH;

    { WIDTH(0.1) }
}

iPatternSearchSize.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 iPatternSearchSize.label = PARM_LABEL("Pattern Search Size", "iPatternSearchSize") WIDTH(1.5);
 PARM(integer, 1, "iPatternSearchSize", none, none) RANGE(1,5)
	LOCK_RANGE_MIN LABELREF(iPatternSearchSize.label) HSTRETCH;

  { WIDTH(0.1) }
}

bPeriodicInputPatterns.gad = ROW
{
    HSTRETCH
    { WIDTH(0.18) }

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("bPeriodicInputPatterns", "Find Wrapping Input Patterns") toggle VALUE(bPeriodicInputPatterns.val);

    { HSTRETCH }

    { WIDTH(0.1) }
}

bAutomaticOutputSizeDetection.gad = ROW
{
    HSTRETCH
    { WIDTH(0.18) }

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("bAutomaticOutputSizeDetection", "Automatic Output Size Detection") toggle VALUE(bAutomaticOutputSizeDetection.val);

    { HSTRETCH }

    { WIDTH(0.1) }
}

i2OutputGridSize.gad = ROW
{
   HSTRETCH
   { WIDTH(0.18) }

   i2OutputGridSize.label = PARM_LABEL("Output Grid Size", "i2OutputGridSize") WIDTH(1.5);
   PARM(integer, 2, "i2OutputGridSize", none, none, "X,Y")
	RANGE(-1,1)  LABELREF(i2OutputGridSize.label)
	HSTRETCH;

    { WIDTH(0.1) }
}

bGenerateRotations.gad = ROW
{
    HSTRETCH
    { WIDTH(0.18) }

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("bGenerateRotations", "Allow Rotations") toggle VALUE(bGenerateRotations.val);

    { HSTRETCH }

    { WIDTH(0.1) }
}

bUserConstraints.gad = ROW
{
    HSTRETCH
    { WIDTH(0.18) }

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("bUserConstraints", "Respect User Provided Constraints") toggle VALUE(bUserConstraints.val);

    { HSTRETCH }

    { WIDTH(0.1) }
}

bTileableOutput.gad = ROW
{
    HSTRETCH
    { WIDTH(0.18) }

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("bTileableOutput", "Produce Tileable Output") toggle VALUE(bTileableOutput.val);

    { HSTRETCH }

    { WIDTH(0.1) }
}

iSeed.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 iSeed.label = PARM_LABEL("Seed", "iSeed") WIDTH(1.5);
 PARM(integer, 1, "iSeed", none, none) RANGE(0,1000)
	LOCK_RANGE_MIN LABELREF(iSeed.label) HSTRETCH;

  { WIDTH(0.1) }
}

bObservedPatternFreq.gad = ROW
{
    HSTRETCH
    { WIDTH(0.18) }

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("bObservedPatternFreq", "Use Observed Sample Pattern Frequency") toggle VALUE(bObservedPatternFreq.val);

    { HSTRETCH }

    { WIDTH(0.1) }
}

iNumSolveAttempts.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 iNumSolveAttempts.label = PARM_LABEL("Number Of Solve Attempts", "iNumSolveAttempts") WIDTH(1.5);
 PARM(integer, 1, "iNumSolveAttempts", none, none) RANGE(1,100)
	LOCK_RANGE_MIN LABELREF(iNumSolveAttempts.label) HSTRETCH;

  { WIDTH(0.1) }
}
bStartingPoint.row.join =		
{

  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
bStartingPoint.join =		
{

  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)

{ WIDTH(0.18) }
bStartingPoint.gad = PARM_BUTTON("bStartingPoint", "") toggle VALUE(bStartingPoint.val) RETAIN_SIZE_WHEN_HIDDEN;

iStartingPoint.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 {  }

 iStartingPoint.label = PARM_LABEL("Starting Point", "iStartingPoint") WIDTH(1.32);
 PARM(integer, 1, "iStartingPoint", none, none) RANGE(0,10)
	LOCK_RANGE_MIN LABELREF(iStartingPoint.label) HSTRETCH;

  { WIDTH(0.1) }
}
}	
}	// Template join.bot


folder1.gad = 
GROUP collapsible "Advanced" flat  
{
    VALUE(folder1.gad.val) LAYOUT(vertical) HSTRETCH
	    bObservedPatternFreq.gad;		
	    iNumSolveAttempts.gad;		
	    bStartingPoint.row.join;		
} 

folder0.gad = 

GROUP simple "WFC Settings" flat 
{ 
    VALUE(folder0.gad.val) LAYOUT(vertical) HSTRETCH 
	    iSeed.gad;		
	    folder1.gad;		
} 

folder3.gad = 

GROUP simple "Output" flat 
{ 
    VALUE(folder3.gad.val) LAYOUT(vertical) HSTRETCH 
	    bAutomaticOutputSizeDetection.gad;		
	    i2OutputGridSize.gad;		
	    bGenerateRotations.gad;		
	    bUserConstraints.gad;		
	    bTileableOutput.gad;		
} 

folder2.gad = 

GROUP simple "Input" flat 
{ 
    VALUE(folder2.gad.val) LAYOUT(vertical) HSTRETCH 
	    bAutomaticInputSizeDetection.gad;		
	    i2SampleGridSize.gad;		
	    iPatternSearchSize.gad;		
	    bPeriodicInputPatterns.gad;		
} 

dialog_norm.gad = 
{
    LAYOUT(vertical) SPACING(0.02) HSTRETCH 
    folder2.gad; 
    folder3.gad; 
    folder0.gad; 
} 
// dialog.bot.ui

extrastuffstowbar_minimize.val := 1;

dialog = OPENNOTIFIER
{
    LAYOUT(vertical) SPACING(0.02) LOOK(bg) VALUE(open.val_) HSTRETCH

    { HEIGHT(1p) LOOK(bg) HSTRETCH }

    dialog_norm.gad;
}
