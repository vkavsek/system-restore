// Magic: 29d789dd
// Automatically generated PSI dialog (PSI version 19.5.303)
// Wed Oct  5 17:47:29 2022


f_tmp = FLOAT_FIELD;	// dialog.top.ui
loadfromdisk.row.join =		
{

  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
  HMARGIN(0.18, 0.1)

loadfromdisk.gad = ROW
{
    
    {  }

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("loadfromdisk", "Load from Disk             ") toggle VALUE(loadfromdisk.val);

    {  }

    {  }
}

reload.gad = ROW
{
    JUSTIFY(left, center)
    {  }

    PARM_BUTTON("reload", "Reload Geometry")
	push VALUE(reload.val);

    {  }
}

buttonspacer.sval := 1;

buttonspacer.gad = 
{
    LAYOUT(vertical) SPACING(1p) HSTRETCH VMARGIN(0.05, 0)
    HMARGIN(0, 0) NO_MARGIN_SPACING_SCALE

    SWITCHER tight
    {
	VALUE(buttonspacer.sval) HSTRETCH

        {
            LAYOUT(horizontal) HSTRETCH

        }

        {
            LAYOUT(horizontal) HSTRETCH

            LABEL VALUE(buttonspacer.val[0]) JUSTIFY(center,center) HSTRETCH;
        }

        {
            LAYOUT(horizontal) HSTRETCH

            LABEL VALUE(buttonspacer.val[0]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[1]) JUSTIFY(center,center) HSTRETCH;
        }

        {
            LAYOUT(horizontal) HSTRETCH

            LABEL VALUE(buttonspacer.val[0]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[1]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[2]) JUSTIFY(center,center) HSTRETCH;
        }

        {
            LAYOUT(horizontal) HSTRETCH

            LABEL VALUE(buttonspacer.val[0]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[1]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[2]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[3]) JUSTIFY(center,center) HSTRETCH;
        }

        {
            LAYOUT(horizontal) HSTRETCH

            LABEL VALUE(buttonspacer.val[0]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[1]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[2]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[3]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[4]) JUSTIFY(center,center) HSTRETCH;
        }

        {
            LAYOUT(horizontal) HSTRETCH

            LABEL VALUE(buttonspacer.val[0]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[1]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[2]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[3]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[4]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[5]) JUSTIFY(center,center) HSTRETCH;
        }

        {
            LAYOUT(horizontal) HSTRETCH

            LABEL VALUE(buttonspacer.val[0]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[1]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[2]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[3]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[4]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[5]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[6]) JUSTIFY(center,center) HSTRETCH;
        }

        {
            LAYOUT(horizontal) HSTRETCH

            LABEL VALUE(buttonspacer.val[0]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[1]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[2]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[3]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[4]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[5]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[6]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[7]) JUSTIFY(center,center) HSTRETCH;
        }

        {
            LAYOUT(horizontal) HSTRETCH

            LABEL VALUE(buttonspacer.val[0]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[1]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[2]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[3]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[4]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[5]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[6]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[7]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[8]) JUSTIFY(center,center) HSTRETCH;
        }

        {
            LAYOUT(horizontal) HSTRETCH

            LABEL VALUE(buttonspacer.val[0]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[1]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[2]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[3]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[4]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[5]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[6]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[7]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[8]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[9]) JUSTIFY(center,center) HSTRETCH;
        }

        {
            LAYOUT(horizontal) HSTRETCH

            LABEL VALUE(buttonspacer.val[0]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[1]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[2]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[3]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[4]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[5]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[6]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[7]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[8]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[9]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[10]) JUSTIFY(center,center) HSTRETCH;
        }

        {
            LAYOUT(horizontal) HSTRETCH

            LABEL VALUE(buttonspacer.val[0]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[1]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[2]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[3]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[4]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[5]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[6]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[7]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[8]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[9]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[10]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[11]) JUSTIFY(center,center) HSTRETCH;
        }

        {
            LAYOUT(horizontal) HSTRETCH

            LABEL VALUE(buttonspacer.val[0]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[1]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[2]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[3]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[4]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[5]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[6]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[7]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[8]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[9]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[10]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[11]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[12]) JUSTIFY(center,center) HSTRETCH;
        }

        {
            LAYOUT(horizontal) HSTRETCH

            LABEL VALUE(buttonspacer.val[0]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[1]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[2]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[3]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[4]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[5]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[6]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[7]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[8]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[9]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[10]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[11]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[12]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[13]) JUSTIFY(center,center) HSTRETCH;
        }

        {
            LAYOUT(horizontal) HSTRETCH

            LABEL VALUE(buttonspacer.val[0]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[1]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[2]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[3]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[4]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[5]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[6]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[7]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[8]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[9]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[10]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[11]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[12]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[13]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[14]) JUSTIFY(center,center) HSTRETCH;
        }

        {
            LAYOUT(horizontal) HSTRETCH

            LABEL VALUE(buttonspacer.val[0]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[1]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[2]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[3]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[4]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[5]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[6]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[7]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[8]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[9]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[10]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[11]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[12]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[13]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[14]) JUSTIFY(center,center) HSTRETCH;
            LABEL VALUE(buttonspacer.val[15]) JUSTIFY(center,center) HSTRETCH;
        }

    }
}

createrendergeo.gad = ROW
{
    JUSTIFY(left, center)
    {  }

    PARM_BUTTON("createrendergeo", "", "NETWORKS_sop")
	push VALUE(createrendergeo.val) UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

    {  }
}

createlopfilecache.gad = ROW
{
    JUSTIFY(left, center)
    {  }

    PARM_BUTTON("createlopfilecache", "", "NETWORKS_lop")
	push VALUE(createlopfilecache.val) UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

    {  }
}
createlopgeo.gad = NULL { }

createtopfilecache.gad = ROW
{
    JUSTIFY(left, center)
    {  }

    PARM_BUTTON("createtopfilecache", "", "NETWORKS_top")
	push VALUE(createtopfilecache.val) UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

    {  }
}
}	// Template join.bot

filemethod.row.join =		
{

  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
  HMARGIN(0.18, 0.1)

filemethod.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) 
    {  }

    filemethod.label = PARM_LABEL_SIMPLE("File Path", "filemethod") WIDTH(1.5);
    { WIDTH(0.09) }

    filemethod.menu;

    {  }

    {  }
}

timedependent.gad = ROW
{
    
    {  }

    PARM_BUTTON("timedependent", "Time Dependent Cache") toggle VALUE(timedependent.val);

    {  }

    {  }
}
}	// Template join.bot

basename.row.join =		
{

  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
  HMARGIN(0.18, 0.1)

basename.gad = ROW
{
    HSTRETCH JUSTIFY(left, center)

    {  }

    basename.label = PARM_LABEL("Base Name", "basename") WIDTH(1.5);
    PARM_FIELD(string, "basename") VALUE(basename.val) 
	LABELREF(basename.label) HSTRETCH;

    basename.menu SIZE(0.26, 0.26) LOOK(menuiconbutton);

    {  }
}

filetype.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) 
    {  }

    filetype.menu;

    {  }

    {  }
}
}	// Template join.bot

file.row.join =		
{

  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
  HMARGIN(0.18, 0.1)

file.gad = 
{
 LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
 {  }

 file.label = PARM_LABEL("Geometry File", "file") WIDTH(1.5);

 PARM_FIELD (pathstring, "file") LABELREF(file.label)
	VALUE(file.val) HSTRETCH;

    file.menu SIZE(0.26, 0.26) LOOK(menuiconbutton);

 ACTION_ICONBUTTON "BUTTONS_chooser_file" VALUE(file.plus) LOOKFLAT
    HELP("Open floating file chooser") UI_FLAT_ICON_BTN_SIZE_SMALL;

 {  }
}

openfiledir.gad = ROW
{
    JUSTIFY(left, center)
    {  }

    PARM_BUTTON("openfiledir", "", "BUTTONS_folder")
	push VALUE(openfiledir.val) UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

    {  }
}
}	// Template join.bot

basedir.row.join =		
{

  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
  HMARGIN(0.18, 0.1)

basedir.gad = 
{
 LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
 {  }

 basedir.label = PARM_LABEL("Base Folder", "basedir") WIDTH(1.5);

 PARM_FIELD (pathstring, "basedir") LABELREF(basedir.label)
	VALUE(basedir.val) HSTRETCH;

    basedir.menu SIZE(0.26, 0.26) LOOK(menuiconbutton);

 ACTION_ICONBUTTON "BUTTONS_chooser_file" VALUE(basedir.plus) LOOKFLAT
    HELP("Open floating file chooser") UI_FLAT_ICON_BTN_SIZE_SMALL;

 {  }
}

openbasedir.gad = ROW
{
    JUSTIFY(left, center)
    {  }

    PARM_BUTTON("openbasedir", "", "BUTTONS_folder")
	push VALUE(openbasedir.val) UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

    {  }
}
}	// Template join.bot

enableversion.row.join =		
{

  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
  HMARGIN(0.18, 0.1)
enableversion.join =		
{

  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
  HMARGIN(0, 0)

enableversion.gad = PARM_BUTTON("enableversion", "") toggle VALUE(enableversion.val) RETAIN_SIZE_WHEN_HIDDEN;

version.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 {  }

 version.label = PARM_LABEL("Version", "version") WIDTH(1.32);
 PARM(integer, 1, "version", none, none) RANGE(1,25)
	LOCK_RANGE_MIN LABELREF(version.label) HSTRETCH;

  {  }
}
}	

versiondown.gad = ROW
{
    JUSTIFY(left, center)
    {  }

    PARM_BUTTON("versiondown", "", "BUTTONS_minus")
	push VALUE(versiondown.val) UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

    {  }
}

versionup.gad = ROW
{
    JUSTIFY(left, center)
    {  }

    PARM_BUTTON("versionup", "", "BUTTONS_add")
	push VALUE(versionup.val) UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

    {  }
}

cleanversion.gad = ROW
{
    JUSTIFY(left, center)
    {  }

    PARM_BUTTON("cleanversion", "", "BUTTONS_clear")
	push VALUE(cleanversion.val) UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

    {  }
}
}	// Template join.bot


sepparm6.gad = 

{

    LAYOUT(vertical) HSTRETCH

    { HEIGHT(0.070590) }
}

overwriteexisting.gad = ROW
{
    HSTRETCH
    { WIDTH(0.18) }

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("overwriteexisting", "Overwrite Existing Cache") toggle VALUE(overwriteexisting.val);

    { HSTRETCH }

    { WIDTH(0.1) }
}
execute.row.join =		
{

  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
  HMARGIN(0.18, 0.1)

execute.gad = ROW
{
    JUSTIFY(left, center)
    {  }

    { WIDTH(1.5) }
    { WIDTH(0.1) }

    PARM_BUTTON("execute", "Save to Disk")
	push VALUE(execute.val);

    {  }
}

generatestaticworkitems.gad = ROW
{
    JUSTIFY(left, center)
    {  }

    PARM_BUTTON("generatestaticworkitems", "Generate Static")
	push VALUE(generatestaticworkitems.val);

    {  }
}

cookoutputnode.gad = ROW
{
    JUSTIFY(left, center)
    {  }

    PARM_BUTTON("cookoutputnode", "Save in Background")
	push VALUE(cookoutputnode.val);

    {  }
}

dirtyall.gad = ROW
{
    JUSTIFY(left, center)
    {  }

    PARM_BUTTON("dirtyall", "Cancel")
	push VALUE(dirtyall.val);

    {  }
}
}	// Template join.bot

trange.row.join =		
{

  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
  HMARGIN(0.18, 0.1)

trange.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) 
    {  }

    trange.label = PARM_LABEL_SIMPLE("Evaluate As", "trange") WIDTH(1.5);
    { WIDTH(0.09) }

    trange.menu;

    {  }

    {  }
}

cachesim.gad = ROW
{
    
    {  }

    PARM_BUTTON("cachesim", "Simulation") toggle VALUE(cachesim.val);

    {  }

    {  }
}
}	// Template join.bot

f.row.join =		
{

  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
  HMARGIN(0.18, 0.1)

f.gad = ROW
{
   HSTRETCH
   {  }

   f.label = PARM_LABEL("Start/End/Inc", "f") WIDTH(1.5);
   PARM(float, 3, "f", none, none, "#1,#2,#3")
	RANGE(0,10)  LABELREF(f.label)
	HSTRETCH;

    {  }
}

fmenu.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center)
    {  }

    fmenu.menu LOOK(menuiconbutton) SIZE(0.26, 0.26);

}
}	// Template join.bot


substeps.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 substeps.label = PARM_LABEL("Substeps", "substeps") WIDTH(1.5);
 PARM(integer, 1, "substeps", none, none) RANGE(1,10)
	LOCK_RANGE_MIN LABELREF(substeps.label) HSTRETCH;

  { WIDTH(0.1) }
}
useframeoverride.row.join =		
{

  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
  HMARGIN(0.18, 0.1)
useframeoverride.join =		
{

  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
  HMARGIN(0, 0)

useframeoverride.gad = PARM_BUTTON("useframeoverride", "") toggle VALUE(useframeoverride.val) RETAIN_SIZE_WHEN_HIDDEN;

frameoverride.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 {  }

 frameoverride.label = PARM_LABEL("Override Frame", "frameoverride") WIDTH(1.32);
 PARM(float, 1, "frameoverride", none, SNAP) RANGE(1,240)
	 LABELREF(frameoverride.label) HSTRETCH;

  {  }
}
}	
}	// Template join.bot


specificrange.gad = ROW
{
    HSTRETCH JUSTIFY(left, center)

    { WIDTH(0.18) }

    specificrange.label = PARM_LABEL("List of Frames", "specificrange") WIDTH(1.5);
    PARM_FIELD(string, "specificrange") VALUE(specificrange.val) 
	LABELREF(specificrange.label) HSTRETCH;

    { WIDTH(0.1) }
}

enablewedging.gad = ROW
{
    HSTRETCH
    { WIDTH(0.18) }

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("enablewedging", "Enable Wedging") toggle VALUE(enablewedging.val);

    { HSTRETCH }

    { WIDTH(0.1) }
}

wrange.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) HSTRETCH
    { WIDTH(0.18) }

    wrange.label = PARM_LABEL_SIMPLE("Evaluate As", "wrange") WIDTH(1.5);
    { WIDTH(0.09) }

    wrange.menu;

    { HSTRETCH }

    { WIDTH(0.1) }
}

wedgeoverride.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 wedgeoverride.label = PARM_LABEL("Single Wedge", "wedgeoverride") WIDTH(1.5);
 PARM(integer, 1, "wedgeoverride", none, SNAP) RANGE(0,49)
	LOCK_RANGE_MIN LABELREF(wedgeoverride.label) HSTRETCH;

  { WIDTH(0.1) }
}

specificwedges.gad = ROW
{
    HSTRETCH JUSTIFY(left, center)

    { WIDTH(0.18) }

    specificwedges.label = PARM_LABEL("List of Wedges", "specificwedges") WIDTH(1.5);
    PARM_FIELD(string, "specificwedges") VALUE(specificwedges.val) 
	LABELREF(specificwedges.label) HSTRETCH;

    { WIDTH(0.1) }
}

wedgerange.gad = ROW
{
   HSTRETCH
   { WIDTH(0.18) }

   wedgerange.label = PARM_LABEL("Wedge Range", "wedgerange") WIDTH(1.5);
   PARM(integer, 2, "wedgerange", none, none, "Min,Max")
	RANGE(0,100) LOCK_RANGE_MIN LABELREF(wedgerange.label)
	HSTRETCH;

    { WIDTH(0.1) }
}
wedgecount.row.join =		
{

  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
  HMARGIN(0.18, 0.1)

wedgecount.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 {  }

 wedgecount.label = PARM_LABEL("Wedge Count", "wedgecount") WIDTH(1.5);
 PARM(integer, 1, "wedgecount", none, none) RANGE(1,50)
	LOCK_RANGE_MIN LABELREF(wedgecount.label) HSTRETCH;

    ACTION_ICONBUTTON "TOP_wedge" VALUE(wedgecount.script_action)
	HELP("Sets the parameter value based on the number of upstream wedges.")
	UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

  {  }
}

cleanwedges.gad = ROW
{
    JUSTIFY(left, center)
    {  }

    PARM_BUTTON("cleanwedges", "", "BUTTONS_clear")
	push VALUE(cleanwedges.val) UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

    {  }
}
}	// Template join.bot


nwedgeattribs.parm =
{
    LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)

    PARM_LABEL_SIMPLE("Number of Attributes", "nwedgeattribs") WIDTH(1.5);
    { WIDTH(0.1) }

    ROW
    {
	HSTRETCH(0.5) JUSTIFY(left, center) VALUE(nwedgeattribs.val)

        nwedgeattribs.field = PARM_FIELD (integer, "nwedgeattribs")
				VALUE(nwedgeattribs.val) HSTRETCH(0.5)
				 PREF_WIDTH(0.5);

        ROW
        {
	     LOOK(lightline) VMARGIN(1p)

   	     INCREMENT_ICONBUTTON VALUE(nwedgeattribs.more.val)	
	    	HELP("Add Another Instance") SIZE(0.2, 0.24);
	     DECREMENT_ICONBUTTON VALUE(nwedgeattribs.less.val)	
	        HELP("Remove Last Instance") SIZE(0.2, 0.24);

	}

	ACTION_BUTTON "Clear" VALUE(nwedgeattribs.clear.val);
    }

    { HSTRETCH }
}

nwedgeattribs.multilist = 
{
    LAYOUT(vertical) HSTRETCH MARGIN(0.05)
}

nwedgeattribs.gad =
{
    LAYOUT(vertical) HSTRETCH
    HMARGIN(0.18, 0.1) NO_MARGIN_SPACING_SCALE
    SWITCHER tight
    {
	LAYOUT(overlap!)
        VALUE(nwedgeattribs.multilist_hide_buttons.val)
	{
	    LAYOUT(vertical) HSTRETCH
	    nwedgeattribs.parm;
	    {LOOK(none) HEIGHT(0.02)}
	}
	{
	}
    }
    nwedgeattribs.multilist;
}
doclampfirst.row.join =		
{

  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
  HMARGIN(0.18, 0.1)
doclampfirst.join =		
{

  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
  HMARGIN(0, 0)

doclampfirst.gad = PARM_BUTTON("doclampfirst", "") toggle VALUE(doclampfirst.val) RETAIN_SIZE_WHEN_HIDDEN;

clampfirst.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 {  }

 clampfirst.label = PARM_LABEL("Clamp First Frame", "clampfirst") WIDTH(1.32);
 PARM(float, 1, "clampfirst", none, SNAP) RANGE(1,240)
	 LABELREF(clampfirst.label) HSTRETCH;

  {  }
}
}	
}	// Template join.bot

doclamplast.row.join =		
{

  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
  HMARGIN(0.18, 0.1)
doclamplast.join =		
{

  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
  HMARGIN(0, 0)

doclamplast.gad = PARM_BUTTON("doclamplast", "") toggle VALUE(doclamplast.val) RETAIN_SIZE_WHEN_HIDDEN;

clamplast.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 {  }

 clamplast.label = PARM_LABEL("Clamp Last Frame", "clamplast") WIDTH(1.32);
 PARM(float, 1, "clamplast", none, SNAP) RANGE(1,240)
	 LABELREF(clamplast.label) HSTRETCH;

  {  }
}
}	
}	// Template join.bot

domergeframes.row.join =		
{

  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
  HMARGIN(0.18, 0.1)
domergeframes.join =		
{

  LAYOUT(horizontal)  JUSTIFY(left, center)
  HMARGIN(0, 0)

domergeframes.gad = PARM_BUTTON("domergeframes", "") toggle VALUE(domergeframes.val) RETAIN_SIZE_WHEN_HIDDEN;

mergeframes.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) HSTRETCH
    {  }

    mergeframes.label = PARM_LABEL_SIMPLE("Frames to Merge", "mergeframes") WIDTH(1.32);
    { WIDTH(0.09) }

    mergeframes.menu;

    { HSTRETCH }

    {  }
}
}	
}	// Template join.bot


mergeframerange.gad = ROW
{
   HSTRETCH
   { WIDTH(0.18) }

   mergeframerange.label = PARM_LABEL("Frame Range", "mergeframerange") WIDTH(1.5);
   PARM(float, 3, "mergeframerange", none, none, "#1,#2,#3")
	RANGE(0,10)  LABELREF(mergeframerange.label)
	HSTRETCH;

    { WIDTH(0.1) }
}

mergesubsteps.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 mergesubsteps.label = PARM_LABEL("Substeps", "mergesubsteps") WIDTH(1.5);
 PARM(integer, 1, "mergesubsteps", none, none) RANGE(1,10)
	LOCK_RANGE_MIN LABELREF(mergesubsteps.label) HSTRETCH;

  { WIDTH(0.1) }
}

mergespecificrange.gad = ROW
{
    HSTRETCH JUSTIFY(left, center)

    { WIDTH(0.18) }

    mergespecificrange.label = PARM_LABEL("List of Frames", "mergespecificrange") WIDTH(1.5);
    PARM_FIELD(string, "mergespecificrange") VALUE(mergespecificrange.val) 
	LABELREF(mergespecificrange.label) HSTRETCH;

    { WIDTH(0.1) }
}
domergewedges.row.join =		
{

  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
  HMARGIN(0.18, 0.1)
domergewedges.join =		
{

  LAYOUT(horizontal)  JUSTIFY(left, center)
  HMARGIN(0, 0)

domergewedges.gad = PARM_BUTTON("domergewedges", "") toggle VALUE(domergewedges.val) RETAIN_SIZE_WHEN_HIDDEN;

mergewedges.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) HSTRETCH
    {  }

    mergewedges.label = PARM_LABEL_SIMPLE("Wedges to Merge", "mergewedges") WIDTH(1.32);
    { WIDTH(0.09) }

    mergewedges.menu;

    { HSTRETCH }

    {  }
}
}	
}	// Template join.bot


mergewedgeidxrange.gad = ROW
{
   HSTRETCH
   { WIDTH(0.18) }

   mergewedgeidxrange.label = PARM_LABEL("Wedge Range", "mergewedgeidxrange") WIDTH(1.5);
   PARM(integer, 2, "mergewedgeidxrange", none, none, "Min,Max")
	RANGE(0,100) LOCK_RANGE_MIN LABELREF(mergewedgeidxrange.label)
	HSTRETCH;

    { WIDTH(0.1) }
}

mergespecificwedges.gad = ROW
{
    HSTRETCH JUSTIFY(left, center)

    { WIDTH(0.18) }

    mergespecificwedges.label = PARM_LABEL("List of Wedges", "mergespecificwedges") WIDTH(1.5);
    PARM_FIELD(string, "mergespecificwedges") VALUE(mergespecificwedges.val) 
	LABELREF(mergespecificwedges.label) HSTRETCH;

    { WIDTH(0.1) }
}

loadtype.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) HSTRETCH
    { WIDTH(0.18) }

    loadtype.label = PARM_LABEL_SIMPLE("Load", "loadtype") WIDTH(1.5);
    { WIDTH(0.09) }

    loadtype.menu;

    { HSTRETCH }

    { WIDTH(0.1) }
}

packedviewedit.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) HSTRETCH
    { WIDTH(0.18) }

    packedviewedit.label = PARM_LABEL_SIMPLE("Display Packed As", "packedviewedit") WIDTH(1.5);
    { WIDTH(0.09) }

    packedviewedit.menu;

    { HSTRETCH }

    { WIDTH(0.1) }
}

packexpanded.gad = ROW
{
    HSTRETCH
    { WIDTH(0.18) }

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("packexpanded", "Pack Using Expanded/Absolute File Path") toggle VALUE(packexpanded.val);

    { HSTRETCH }

    { WIDTH(0.1) }
}

delayload.gad = ROW
{
    HSTRETCH
    { WIDTH(0.18) }

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("delayload", "Delay Load Geometry") toggle VALUE(delayload.val);

    { HSTRETCH }

    { WIDTH(0.1) }
}
targettopnetwork.gad = NULL { }
usecustomtopscheduler.row.join =		
{

  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
  HMARGIN(0.18, 0.1)
usecustomtopscheduler.join =		
{

  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
  HMARGIN(0, 0)

usecustomtopscheduler.gad = PARM_BUTTON("usecustomtopscheduler", "") toggle VALUE(usecustomtopscheduler.val) RETAIN_SIZE_WHEN_HIDDEN;

topscheduler.gad = 
{
 LAYOUT(horizontal) HSTRETCH JUSTIFY(left,center)
 {  }

 topscheduler.label = PARM_LABEL("Scheduler Override", "topscheduler") WIDTH(1.32);
 PARM_FIELD(pathstring, "topscheduler") VALUE(topscheduler.val) 
	LABELREF(topscheduler.label) HSTRETCH;

 ACTION_ICONBUTTON "BUTTONS_jump" VALUE(topscheduler.jump)
    HELP("Jump to operator\nCtrl+LMB: Open parameters popup dialog")
    UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

 ACTION_ICONBUTTON "BUTTONS_chooser_node" VALUE(topscheduler.plus)
    HELP("Open floating operator chooser") UI_FLAT_ICON_BTN_SIZE_SMALL 
    LOOKFLAT;

 {  }
}
}	
}	// Template join.bot

framesperbatch.row.join =		
{

  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
  HMARGIN(0.18, 0.1)

framesperbatch.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 {  }

 framesperbatch.label = PARM_LABEL("Frames per Batch", "framesperbatch") WIDTH(1.5);
 PARM(integer, 1, "framesperbatch", none, none) RANGE(1,25)
	LOCK_RANGE_MIN LABELREF(framesperbatch.label) HSTRETCH;

  {  }
}

local_single.gad = ROW
{
    
    {  }

    PARM_BUTTON("local_single", "One Batch at a Time") toggle VALUE(local_single.val);

    {  }

    {  }
}
}	// Template join.bot

local_is_CPU_number_set.row.join =		
{

  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
  HMARGIN(0.18, 0.1)
local_is_CPU_number_set.join =		
{

  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
  HMARGIN(0, 0)

local_is_CPU_number_set.gad = PARM_BUTTON("local_is_CPU_number_set", "") toggle VALUE(local_is_CPU_number_set.val) RETAIN_SIZE_WHEN_HIDDEN;

local_CPUs_to_use.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 {  }

 local_CPUs_to_use.label = PARM_LABEL("CPUs per Batch", "local_CPUs_to_use") WIDTH(1.32);
 PARM(integer, 1, "local_CPUs_to_use", none, none) RANGE(1,128)
	LOCK_RANGE_MIN LABELREF(local_CPUs_to_use.label) HSTRETCH;

  {  }
}
}	
}	// Template join.bot

maxprocsmenu.row.join =		
{

  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
  HMARGIN(0.18, 0.1)

maxprocsmenu.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) 
    {  }

    maxprocsmenu.label = PARM_LABEL_SIMPLE("CPU Count to Use", "maxprocsmenu") WIDTH(1.5);
    { WIDTH(0.09) }

    maxprocsmenu.menu;

    {  }

    {  }
}

corecount.gad =
{
    LAYOUT(vertical) SPACING(1p) HSTRETCH VMARGIN(0.05, 0)
    HMARGIN(0, 0) NO_MARGIN_SPACING_SCALE
    {
        LAYOUT(horizontal) HSTRETCH
        {  }
        { WIDTH(0.08) }
        LABEL VALUE(corecount.val[0]) HSTRETCH;
    }
    { HEIGHT(0.05) }
}
}	// Template join.bot


maxprocs.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 maxprocs.label = PARM_LABEL("CPU Count", "maxprocs") WIDTH(1.5);
 PARM(integer, 1, "maxprocs", none, none) RANGE(1,128)
	LOCK_RANGE_MIN LABELREF(maxprocs.label) HSTRETCH;

  { WIDTH(0.1) }
}
numlogicalcores.gad = NULL { }

sepparm13.gad = 

{

    LAYOUT(vertical) HSTRETCH

    { HEIGHT(0.070590) }
}

local_useminfreemem.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) HSTRETCH
    { WIDTH(0.18) }

    local_useminfreemem.label = PARM_LABEL_SIMPLE("Memory", "local_useminfreemem") WIDTH(1.5);
    { WIDTH(0.09) }

    local_useminfreemem.menu;

    { HSTRETCH }

    { WIDTH(0.1) }
}

local_minfreemem.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 local_minfreemem.label = PARM_LABEL("MB", "local_minfreemem") WIDTH(1.5);
 PARM(integer, 1, "local_minfreemem", none, none) RANGE(0,32768)
	LOCK_RANGE_MIN LABELREF(local_minfreemem.label) HSTRETCH;

  { WIDTH(0.1) }
}

local_minfreemempct.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 local_minfreemempct.label = PARM_LABEL("Percent", "local_minfreemempct") WIDTH(1.5);
 PARM(float, 1, "local_minfreemempct", none, none) RANGE(0,100)
	LOCK_RANGE LABELREF(local_minfreemempct.label) HSTRETCH;

  { WIDTH(0.1) }
}

filtergeo.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) HSTRETCH
    { WIDTH(0.18) }

    filtergeo.label = PARM_LABEL_SIMPLE("Filter Geometry by", "filtergeo") WIDTH(1.5);
    { WIDTH(0.09) }

    filtergeo.menu;

    { HSTRETCH }

    { WIDTH(0.1) }
}

filtertype.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) HSTRETCH
    { WIDTH(0.18) }

    filtertype.label = PARM_LABEL_SIMPLE("Attribute Type", "filtertype") WIDTH(1.5);
    { WIDTH(0.09) }

    filtertype.menu;

    { HSTRETCH }

    { WIDTH(0.1) }
}

pieceattrib.gad = ROW
{
    HSTRETCH JUSTIFY(left, center)

    { WIDTH(0.18) }

    pieceattrib.label = PARM_LABEL("Piece Attribute", "pieceattrib") WIDTH(1.5);
    PARM_FIELD(string, "pieceattrib") VALUE(pieceattrib.val) 
	LABELREF(pieceattrib.label) HSTRETCH;

    { WIDTH(0.1) }
}

sepparm12.gad = 

{

    LAYOUT(vertical) HSTRETCH

    { HEIGHT(0.070590) }
}

deleteattributes.gad = ROW
{
    HSTRETCH JUSTIFY(left, center)

    { WIDTH(0.18) }

    deleteattributes.label = PARM_LABEL("Delete Attributes", "deleteattributes") WIDTH(1.5);
    PARM_FIELD(string, "deleteattributes") VALUE(deleteattributes.val) 
	LABELREF(deleteattributes.label) HSTRETCH;

    deleteattributes.menu SIZE(0.26, 0.26) LOOK(menuiconbutton);

    { WIDTH(0.1) }
}

deletegroups.gad = ROW
{
    HSTRETCH JUSTIFY(left, center)

    { WIDTH(0.18) }

    deletegroups.label = PARM_LABEL("Delete Groups", "deletegroups") WIDTH(1.5);
    PARM_FIELD(string, "deletegroups") VALUE(deletegroups.val) 
	LABELREF(deletegroups.label) HSTRETCH;

    deletegroups.menu SIZE(0.26, 0.26) LOOK(menuiconbutton);

    { WIDTH(0.1) }
}

numcasts.parm =
{
    LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)

    PARM_LABEL_SIMPLE("Number of Casts", "numcasts") WIDTH(1.5);
    { WIDTH(0.1) }

    ROW
    {
	HSTRETCH(0.5) JUSTIFY(left, center) VALUE(numcasts.val)

        numcasts.field = PARM_FIELD (integer, "numcasts")
				VALUE(numcasts.val) HSTRETCH(0.5)
				 PREF_WIDTH(0.5);

        ROW
        {
	     LOOK(lightline) VMARGIN(1p)

   	     INCREMENT_ICONBUTTON VALUE(numcasts.more.val)	
	    	HELP("Add Another Instance") SIZE(0.2, 0.24);
	     DECREMENT_ICONBUTTON VALUE(numcasts.less.val)	
	        HELP("Remove Last Instance") SIZE(0.2, 0.24);

	}

	ACTION_BUTTON "Clear" VALUE(numcasts.clear.val);
    }

    { HSTRETCH }
}

numcasts.multilist = 
{
    LAYOUT(vertical) HSTRETCH MARGIN(0.05)
}

numcasts.gad =
{
    LAYOUT(vertical) HSTRETCH
    HMARGIN(0.18, 0.1) NO_MARGIN_SPACING_SCALE
    SWITCHER tight
    {
	LAYOUT(overlap!)
        VALUE(numcasts.multilist_hide_buttons.val)
	{
	    LAYOUT(vertical) HSTRETCH
	    numcasts.parm;
	    {LOOK(none) HEIGHT(0.02)}
	}
	{
	}
    }
    numcasts.multilist;
}
setfilename.row.join =		
{

  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
  HMARGIN(0.18, 0.1)
setfilename.join =		
{

  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
  HMARGIN(0, 0)

setfilename.gad = PARM_BUTTON("setfilename", "") toggle VALUE(setfilename.val) RETAIN_SIZE_WHEN_HIDDEN;

filenameattrib.gad = ROW
{
    HSTRETCH JUSTIFY(left, center)

    {  }

    filenameattrib.label = PARM_LABEL("File Name Attribute", "filenameattrib") WIDTH(1.32);
    PARM_FIELD(string, "filenameattrib") VALUE(filenameattrib.val) 
	LABELREF(filenameattrib.label) HSTRETCH;

    ACTION_ICONBUTTON "VIEW_visualization" VALUE(filenameattrib.script_action)
	HELP("Toggle visualization Ctrl-LMB: Open the visualization editor")
	UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

    {  }
}
}	
}	// Template join.bot

setfilepath.row.join =		
{

  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
  HMARGIN(0.18, 0.1)
setfilepath.join =		
{

  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
  HMARGIN(0, 0)

setfilepath.gad = PARM_BUTTON("setfilepath", "") toggle VALUE(setfilepath.val) RETAIN_SIZE_WHEN_HIDDEN;

filepathattrib.gad = ROW
{
    HSTRETCH JUSTIFY(left, center)

    {  }

    filepathattrib.label = PARM_LABEL("File Path Attribute", "filepathattrib") WIDTH(1.32);
    PARM_FIELD(string, "filepathattrib") VALUE(filepathattrib.val) 
	LABELREF(filepathattrib.label) HSTRETCH;

    ACTION_ICONBUTTON "VIEW_visualization" VALUE(filepathattrib.script_action)
	HELP("Toggle visualization Ctrl-LMB: Open the visualization editor")
	UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

    {  }
}
}	
}	// Template join.bot

setfileindex.row.join =		
{

  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
  HMARGIN(0.18, 0.1)
setfileindex.join =		
{

  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
  HMARGIN(0, 0)

setfileindex.gad = PARM_BUTTON("setfileindex", "") toggle VALUE(setfileindex.val) RETAIN_SIZE_WHEN_HIDDEN;

fileindexattrib.gad = ROW
{
    HSTRETCH JUSTIFY(left, center)

    {  }

    fileindexattrib.label = PARM_LABEL("File Index Attribute", "fileindexattrib") WIDTH(1.32);
    PARM_FIELD(string, "fileindexattrib") VALUE(fileindexattrib.val) 
	LABELREF(fileindexattrib.label) HSTRETCH;

    ACTION_ICONBUTTON "VIEW_visualization" VALUE(fileindexattrib.script_action)
	HELP("Toggle visualization Ctrl-LMB: Open the visualization editor")
	UI_FLAT_ICON_BTN_SIZE_SMALL LOOKFLAT;

    {  }
}
}	
}	// Template join.bot


loadfromdiskonsave.gad = ROW
{
    HSTRETCH
    { WIDTH(0.18) }

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("loadfromdiskonsave", "Enable Load from Disk on Save") toggle VALUE(loadfromdiskonsave.val);

    { HSTRETCH }

    { WIDTH(0.1) }
}

hardenbasename.gad = ROW
{
    HSTRETCH
    { WIDTH(0.18) }

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("hardenbasename", "Harden Base Name on Save") toggle VALUE(hardenbasename.val);

    { HSTRETCH }

    { WIDTH(0.1) }
}

sepparm3.gad = 

{

    LAYOUT(vertical) HSTRETCH

    { HEIGHT(0.070590) }
}

mkpath.gad = ROW
{
    HSTRETCH
    { WIDTH(0.18) }

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("mkpath", "Create Intermediate Directories") toggle VALUE(mkpath.val);

    { HSTRETCH }

    { WIDTH(0.1) }
}

initsim.gad = ROW
{
    HSTRETCH
    { WIDTH(0.18) }

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("initsim", "Initialize Simulation OPs") toggle VALUE(initsim.val);

    { HSTRETCH }

    { WIDTH(0.1) }
}

alfprogress.gad = ROW
{
    HSTRETCH
    { WIDTH(0.18) }

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("alfprogress", "Alfred Style Progress") toggle VALUE(alfprogress.val);

    { HSTRETCH }

    { WIDTH(0.1) }
}

savebackground.gad = ROW
{
    HSTRETCH
    { WIDTH(0.18) }

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("savebackground", "Save in Background") toggle VALUE(savebackground.val);

    { HSTRETCH }

    { WIDTH(0.1) }
}

saveretry.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 saveretry.label = PARM_LABEL("Save Retries", "saveretry") WIDTH(1.5);
 PARM(integer, 1, "saveretry", none, none) RANGE(0,5)
	LOCK_RANGE_MIN LABELREF(saveretry.label) HSTRETCH;

  { WIDTH(0.1) }
}
savebackuphip.gad = NULL { }
savethumbnails.gad = NULL { }

sepparm2.gad = 

{

    LAYOUT(vertical) HSTRETCH

    { HEIGHT(0.070590) }
}

take.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) HSTRETCH
    { WIDTH(0.18) }

    take.label = PARM_LABEL_SIMPLE("Render With Take", "take") WIDTH(1.5);
    { WIDTH(0.09) }

    take.menu;

    { HSTRETCH }

    { WIDTH(0.1) }
}

missingframe.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) HSTRETCH
    { WIDTH(0.18) }

    missingframe.label = PARM_LABEL_SIMPLE("Missing Frame", "missingframe") WIDTH(1.5);
    { WIDTH(0.09) }

    missingframe.menu;

    { HSTRETCH }

    { WIDTH(0.1) }
}

loadretry.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 loadretry.label = PARM_LABEL("Load Retries", "loadretry") WIDTH(1.5);
 PARM(integer, 1, "loadretry", none, none) RANGE(0,5)
	LOCK_RANGE_MIN LABELREF(loadretry.label) HSTRETCH;

  { WIDTH(0.1) }
}

cachesize.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 cachesize.label = PARM_LABEL("Cache Frames", "cachesize") WIDTH(1.5);
 PARM(integer, 1, "cachesize", none, none) RANGE(0,10)
	LOCK_RANGE_MIN LABELREF(cachesize.label) HSTRETCH;

  { WIDTH(0.1) }
}

prefetch.gad = ROW
{
    HSTRETCH
    { WIDTH(0.18) }

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("prefetch", "Pre-fetch Geometry") toggle VALUE(prefetch.val);

    { HSTRETCH }

    { WIDTH(0.1) }
}
tprerender.row.join =		
{

  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
  HMARGIN(0.18, 0.1)
tprerender.join =		
{

  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
  HMARGIN(0, 0)

tprerender.gad = PARM_BUTTON("tprerender", "") toggle VALUE(tprerender.val) RETAIN_SIZE_WHEN_HIDDEN;

prerender.gad = 
{
 LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
 {  }

 prerender.label = PARM_LABEL("Pre-Render Script", "prerender") WIDTH(1.32);

 PARM_FIELD (pathstring, "prerender") LABELREF(prerender.label)
	VALUE(prerender.val) HSTRETCH;

    prerender.menu SIZE(0.26, 0.26) LOOK(menuiconbutton);

 ACTION_ICONBUTTON "BUTTONS_chooser_file" VALUE(prerender.plus) LOOKFLAT
    HELP("Open floating file chooser") UI_FLAT_ICON_BTN_SIZE_SMALL;

 {  }
}
}	

lprerender.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) 
    {  }

    lprerender.menu;

    {  }

    {  }
}
}	// Template join.bot

tpreframe.row.join =		
{

  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
  HMARGIN(0.18, 0.1)
tpreframe.join =		
{

  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
  HMARGIN(0, 0)

tpreframe.gad = PARM_BUTTON("tpreframe", "") toggle VALUE(tpreframe.val) RETAIN_SIZE_WHEN_HIDDEN;

preframe.gad = 
{
 LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
 {  }

 preframe.label = PARM_LABEL("Pre-Frame Script", "preframe") WIDTH(1.32);

 PARM_FIELD (pathstring, "preframe") LABELREF(preframe.label)
	VALUE(preframe.val) HSTRETCH;

    preframe.menu SIZE(0.26, 0.26) LOOK(menuiconbutton);

 ACTION_ICONBUTTON "BUTTONS_chooser_file" VALUE(preframe.plus) LOOKFLAT
    HELP("Open floating file chooser") UI_FLAT_ICON_BTN_SIZE_SMALL;

 {  }
}
}	

lpreframe.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) 
    {  }

    lpreframe.menu;

    {  }

    {  }
}
}	// Template join.bot

tpostframe.row.join =		
{

  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
  HMARGIN(0.18, 0.1)
tpostframe.join =		
{

  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
  HMARGIN(0, 0)

tpostframe.gad = PARM_BUTTON("tpostframe", "") toggle VALUE(tpostframe.val) RETAIN_SIZE_WHEN_HIDDEN;

postframe.gad = 
{
 LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
 {  }

 postframe.label = PARM_LABEL("Post-Frame Script", "postframe") WIDTH(1.32);

 PARM_FIELD (pathstring, "postframe") LABELREF(postframe.label)
	VALUE(postframe.val) HSTRETCH;

    postframe.menu SIZE(0.26, 0.26) LOOK(menuiconbutton);

 ACTION_ICONBUTTON "BUTTONS_chooser_file" VALUE(postframe.plus) LOOKFLAT
    HELP("Open floating file chooser") UI_FLAT_ICON_BTN_SIZE_SMALL;

 {  }
}
}	

lpostframe.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) 
    {  }

    lpostframe.menu;

    {  }

    {  }
}
}	// Template join.bot

tpostwrite.row.join =		
{

  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
  HMARGIN(0.18, 0.1)
tpostwrite.join =		
{

  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
  HMARGIN(0, 0)

tpostwrite.gad = PARM_BUTTON("tpostwrite", "") toggle VALUE(tpostwrite.val) RETAIN_SIZE_WHEN_HIDDEN;

postwrite.gad = 
{
 LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
 {  }

 postwrite.label = PARM_LABEL("Post-Write Script", "postwrite") WIDTH(1.32);

 PARM_FIELD (pathstring, "postwrite") LABELREF(postwrite.label)
	VALUE(postwrite.val) HSTRETCH;

    postwrite.menu SIZE(0.26, 0.26) LOOK(menuiconbutton);

 ACTION_ICONBUTTON "BUTTONS_chooser_file" VALUE(postwrite.plus) LOOKFLAT
    HELP("Open floating file chooser") UI_FLAT_ICON_BTN_SIZE_SMALL;

 {  }
}
}	

lpostwrite.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) 
    {  }

    lpostwrite.menu;

    {  }

    {  }
}
}	// Template join.bot

tpostrender.row.join =		
{

  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
  HMARGIN(0.18, 0.1)
tpostrender.join =		
{

  LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
  HMARGIN(0, 0)

tpostrender.gad = PARM_BUTTON("tpostrender", "") toggle VALUE(tpostrender.val) RETAIN_SIZE_WHEN_HIDDEN;

postrender.gad = 
{
 LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
 {  }

 postrender.label = PARM_LABEL("Post-Render Script", "postrender") WIDTH(1.32);

 PARM_FIELD (pathstring, "postrender") LABELREF(postrender.label)
	VALUE(postrender.val) HSTRETCH;

    postrender.menu SIZE(0.26, 0.26) LOOK(menuiconbutton);

 ACTION_ICONBUTTON "BUTTONS_chooser_file" VALUE(postrender.plus) LOOKFLAT
    HELP("Open floating file chooser") UI_FLAT_ICON_BTN_SIZE_SMALL;

 {  }
}
}	

lpostrender.gad = 
{
    LAYOUT(horizontal) JUSTIFY(left, center) 
    {  }

    lpostrender.menu;

    {  }

    {  }
}
}	// Template join.bot


rendergeopath.gad = 
{
 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 rendergeopath.label = PARM_LABEL("Render Geometry In", "rendergeopath") WIDTH(1.5);
 PARM_FIELD (pathstring, "rendergeopath") LABELREF(rendergeopath.label) 
	VALUE(rendergeopath.val) HSTRETCH;

 ACTION_ICONBUTTON "BUTTONS_chooser_node" VALUE(rendergeopath.plus) LOOKFLAT
    HELP("Open floating bundle chooser") UI_FLAT_ICON_BTN_SIZE_SMALL;

 { WIDTH(0.1) }
}

topfilecachepath.gad = 
{
 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 topfilecachepath.label = PARM_LABEL("Top File Cache In", "topfilecachepath") WIDTH(1.5);
 PARM_FIELD (pathstring, "topfilecachepath") LABELREF(topfilecachepath.label) 
	VALUE(topfilecachepath.val) HSTRETCH;

 ACTION_ICONBUTTON "BUTTONS_chooser_node" VALUE(topfilecachepath.plus) LOOKFLAT
    HELP("Open floating bundle chooser") UI_FLAT_ICON_BTN_SIZE_SMALL;

 { WIDTH(0.1) }
}

topmantrapath.gad = 
{
 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 topmantrapath.label = PARM_LABEL("Top Mantra In", "topmantrapath") WIDTH(1.5);
 PARM_FIELD (pathstring, "topmantrapath") LABELREF(topmantrapath.label) 
	VALUE(topmantrapath.val) HSTRETCH;

 ACTION_ICONBUTTON "BUTTONS_chooser_node" VALUE(topmantrapath.plus) LOOKFLAT
    HELP("Open floating bundle chooser") UI_FLAT_ICON_BTN_SIZE_SMALL;

 { WIDTH(0.1) }
}

enableperfmon.gad = ROW
{
    HSTRETCH
    { WIDTH(0.18) }

    { WIDTH(1.5) }
    { WIDTH(0.08) }

    PARM_BUTTON("enableperfmon", "Enable Performance Monitor Logging") toggle VALUE(enableperfmon.val);

    { HSTRETCH }

    { WIDTH(0.1) }
}

openperffile.gad = ROW
{
    JUSTIFY(left, center)
    { WIDTH(0.18) }

    { WIDTH(1.5) }
    { WIDTH(0.1) }

    PARM_BUTTON("openperffile", "Open Current Profile")
	push VALUE(openperffile.val);

    { WIDTH(0.1) }
}

frame.gad = 
{

 LAYOUT(horizontal) HSTRETCH
 { WIDTH(0.18) }

 frame.label = PARM_LABEL("Frame", "frame") WIDTH(1.5);
 PARM(float, 1, "frame", none, none) RANGE(1,240)
	 LABELREF(frame.label) HSTRETCH;

  { WIDTH(0.1) }
}

framestr.gad = ROW
{
    HSTRETCH JUSTIFY(left, center)

    { WIDTH(0.18) }

    framestr.label = PARM_LABEL("Frame String", "framestr") WIDTH(1.5);
    PARM_FIELD(string, "framestr") VALUE(framestr.val) 
	LABELREF(framestr.label) HSTRETCH;

    { WIDTH(0.1) }
}

versionstr.gad = ROW
{
    HSTRETCH JUSTIFY(left, center)

    { WIDTH(0.18) }

    versionstr.label = PARM_LABEL("Version String", "versionstr") WIDTH(1.5);
    PARM_FIELD(string, "versionstr") VALUE(versionstr.val) 
	LABELREF(versionstr.label) HSTRETCH;

    { WIDTH(0.1) }
}

wedgestr.gad = ROW
{
    HSTRETCH JUSTIFY(left, center)

    { WIDTH(0.18) }

    wedgestr.label = PARM_LABEL("Wedge String", "wedgestr") WIDTH(1.5);
    PARM_FIELD(string, "wedgestr") VALUE(wedgestr.val) 
	LABELREF(wedgestr.label) HSTRETCH;

    { WIDTH(0.1) }
}

sepparm9.gad = 

{

    LAYOUT(vertical) HSTRETCH

    { HEIGHT(0.070590) }
}

cachedir.gad = ROW
{
    HSTRETCH JUSTIFY(left, center)

    { WIDTH(0.18) }

    cachedir.label = PARM_LABEL("Cache Folder", "cachedir") WIDTH(1.5);
    PARM_FIELD(string, "cachedir") VALUE(cachedir.val) 
	LABELREF(cachedir.label) HSTRETCH;

    { WIDTH(0.1) }
}

cachename.gad = ROW
{
    HSTRETCH JUSTIFY(left, center)

    { WIDTH(0.18) }

    cachename.label = PARM_LABEL("Cache Name", "cachename") WIDTH(1.5);
    PARM_FIELD(string, "cachename") VALUE(cachename.val) 
	LABELREF(cachename.label) HSTRETCH;

    { WIDTH(0.1) }
}

descriptivelabel.gad = 
{
 LAYOUT(horizontal) HSTRETCH JUSTIFY(left, center)
 { WIDTH(0.18) }

 descriptivelabel.label = PARM_LABEL("Descriptive Label", "descriptivelabel") WIDTH(1.5);

 PARM_FIELD (pathstring, "descriptivelabel") LABELREF(descriptivelabel.label)
	VALUE(descriptivelabel.val) HSTRETCH;

    descriptivelabel.menu SIZE(0.26, 0.26) LOOK(menuiconbutton);

 ACTION_ICONBUTTON "BUTTONS_chooser_file" VALUE(descriptivelabel.plus) LOOKFLAT
    HELP("Open floating file chooser") UI_FLAT_ICON_BTN_SIZE_SMALL;

 { WIDTH(0.1) }
}

perffile.gad = ROW
{
    HSTRETCH JUSTIFY(left, center)

    { WIDTH(0.18) }

    perffile.label = PARM_LABEL("Performance Profile", "perffile") WIDTH(1.5);
    PARM_FIELD(string, "perffile") VALUE(perffile.val) 
	LABELREF(perffile.label) HSTRETCH;

    { WIDTH(0.1) }
}

sopoutput.gad = ROW
{
    HSTRETCH JUSTIFY(left, center)

    { WIDTH(0.18) }

    sopoutput.label = PARM_LABEL("Output File", "sopoutput") WIDTH(1.5);
    PARM_FIELD(string, "sopoutput") VALUE(sopoutput.val) 
	LABELREF(sopoutput.label) HSTRETCH;

    { WIDTH(0.1) }
}

folder12.gad = 
GROUP collapsible "Path Construction" flat  PARMREF(sopoutput.gad) 
{
    VALUE(folder12.gad.val) LAYOUT(vertical) HSTRETCH
	    frame.gad;		
	    framestr.gad;		
	    versionstr.gad;		
	    wedgestr.gad;		
	    sepparm9.gad;		
	    cachedir.gad;		
	    cachename.gad;		
	    descriptivelabel.gad;		
	    perffile.gad;		
	    sopoutput.gad;		
} 

folder4.gad = 
GROUP collapsible "Performance Logging" flat TOGGLEREF(enableperfmon.gad)  
{
    VALUE(folder4.gad.val) LAYOUT(vertical) HSTRETCH
	    enableperfmon.gad;		
	    openperffile.gad;		
} 

folder6.gad = 
GROUP collapsible "Node Generation" flat   
{
    VALUE(folder6.gad.val) LAYOUT(vertical) HSTRETCH
	    rendergeopath.gad;		
	    topfilecachepath.gad;		
	    topmantrapath.gad;		
} 

folder9.gad = 
GROUP collapsible "Scripts" flat   
{
    VALUE(folder9.gad.val) LAYOUT(vertical) HSTRETCH
	    tprerender.row.join;		
	    tpreframe.row.join;		
	    tpostframe.row.join;		
	    tpostwrite.row.join;		
	    tpostrender.row.join;		
} 

folder11.gad = 
GROUP collapsible "Load" flat   
{
    VALUE(folder11.gad.val) LAYOUT(vertical) HSTRETCH
	    missingframe.gad;		
	    loadretry.gad;		
	    cachesize.gad;		
	    prefetch.gad;		
} 

folder5.gad = 
GROUP collapsible "Save" flat   
{
    VALUE(folder5.gad.val) LAYOUT(vertical) HSTRETCH
	    loadfromdiskonsave.gad;		
	    hardenbasename.gad;		
	    sepparm3.gad;		
	    mkpath.gad;		
	    initsim.gad;		
	    alfprogress.gad;		
	    savebackground.gad;		
	    saveretry.gad;		
	    savebackuphip.gad;		
	    savethumbnails.gad;		
	    sepparm2.gad;		
	    take.gad;		
} 

folder0.gad = 
GROUP collapsible "Create Load Attributes" flat   
{
    VALUE(folder0.gad.val) LAYOUT(vertical) HSTRETCH
	    setfilename.row.join;		
	    setfilepath.row.join;		
	    setfileindex.row.join;		
} 

folder8.gad = 
GROUP collapsible "Save Filters" flat   
{
    VALUE(folder8.gad.val) LAYOUT(vertical) HSTRETCH
	    filtergeo.gad;		
	    filtertype.gad;		
	    pieceattrib.gad;		
	    sepparm12.gad;		
	    deleteattributes.gad;		
	    deletegroups.gad;		
	    numcasts.gad;		
} 

local.gad = 
GROUP collapsible "Local" flat   
{
    VALUE(local.gad.val) LAYOUT(vertical) HSTRETCH
	    framesperbatch.row.join;		
	    local_is_CPU_number_set.row.join;		
	    maxprocsmenu.row.join;		
	    maxprocs.gad;		
	    numlogicalcores.gad;		
	    sepparm13.gad;		
	    local_useminfreemem.gad;		
	    local_minfreemem.gad;		
	    local_minfreemempct.gad;		
} 

Local.gad = 
GROUP collapsible "Scheduling" flat  PARMREF(topscheduler.gad) 
{
    VALUE(Local.gad.val) LAYOUT(vertical) HSTRETCH
	    usecustomtopscheduler.row.join;		
} 

topnetworkcookcontrols.gad = 

GROUP simple "TOP Network Cook Controls" flat 
{ 
    VALUE(topnetworkcookcontrols.gad.val) LAYOUT(vertical) HSTRETCH 
} 

folder2.gad = 
GROUP collapsible "Load" flat  PARMREF(loadtype.gad) 
{
    VALUE(folder2.gad.val) LAYOUT(vertical) HSTRETCH
	    doclampfirst.row.join;		
	    doclamplast.row.join;		
	    domergeframes.row.join;		
	    mergeframerange.gad;		
	    mergesubsteps.gad;		
	    mergespecificrange.gad;		
	    domergewedges.row.join;		
	    mergewedgeidxrange.gad;		
	    mergespecificwedges.gad;		
	    loadtype.gad;		
	    packedviewedit.gad;		
	    packexpanded.gad;		
	    delayload.gad;		
} 

folder10.gad = 
GROUP collapsible "Wedging" flat TOGGLEREF(enablewedging.gad) PARMREF(wedgecount.gad) 
{
    VALUE(folder10.gad.val) LAYOUT(vertical) HSTRETCH
	    enablewedging.gad;		
	    wrange.gad;		
	    wedgeoverride.gad;		
	    specificwedges.gad;		
	    wedgerange.gad;		
	    wedgecount.row.join;		
	    nwedgeattribs.gad;		
} 

folder3.gad = 
GROUP collapsible "Sequence" flat   
{
    VALUE(folder3.gad.val) LAYOUT(vertical) HSTRETCH
	    trange.row.join;		
	    f.row.join;		
	    substeps.gad;		
	    useframeoverride.row.join;		
	    specificrange.gad;		
} 

folder15.gad = 
GROUP collapsible "Overwrite Existing Cache" flat TOGGLEREF(overwriteexisting.gad)  
{
    VALUE(folder15.gad.val) LAYOUT(vertical) HSTRETCH
	    execute.row.join;		
} 

folder1.gad = 
{
    LAYOUT(vertical) HSTRETCH

    TABDIALOG2 flat "folder1.gad"
    { 
	VALUE(folder1.gad.val) STRETCH(1,0)

	TAB "Caching"
	{
	    LAYOUT(vertical) STRETCH

            HMARGIN(0) VMARGIN(2p) SPACING(0, 2p)
	    overwriteexisting.gad;		
	    folder15.gad;		
	    folder3.gad;		
	    folder10.gad;		
	    folder2.gad;		

	    { STRETCH(1,1) }
	}

	TAB "Scheduling"
	{
	    LAYOUT(vertical) STRETCH

            HMARGIN(0) VMARGIN(2p) SPACING(0, 2p)
	    Local.gad;		
	    local.gad;		

	    { STRETCH(1,1) }
	}

	TAB "Geometry"
	{
	    LAYOUT(vertical) STRETCH

            HMARGIN(0) VMARGIN(2p) SPACING(0, 2p)
	    folder8.gad;		
	    folder0.gad;		

	    { STRETCH(1,1) }
	}

	TAB "Advanced"
	{
	    LAYOUT(vertical) STRETCH

            HMARGIN(0) VMARGIN(2p) SPACING(0, 2p)
	    folder5.gad;		
	    folder11.gad;		
	    folder9.gad;		
	    folder6.gad;		
	    folder4.gad;		
	    folder12.gad;		

	    { STRETCH(1,1) }
	}
    } 
}

dialog_norm.gad = 
{
    LAYOUT(vertical) SPACING(0.02) HSTRETCH 
    loadfromdisk.row.join; 
    filemethod.row.join; 
    basename.row.join; 
    file.row.join; 
    basedir.row.join; 
    enableversion.row.join; 
    sepparm6.gad; 
    folder1.gad; 
} 
// dialog.bot.ui

extrastuffstowbar_minimize.val := 1;

dialog = OPENNOTIFIER
{
    LAYOUT(vertical) SPACING(0.02) LOOK(bg) VALUE(open.val_) HSTRETCH

    { HEIGHT(1p) LOOK(bg) HSTRETCH }

    dialog_norm.gad;
}
