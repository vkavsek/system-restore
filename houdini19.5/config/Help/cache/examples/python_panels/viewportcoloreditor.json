{"type": "root", "attrs": {}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["Viewport color editor"], "extent": [0, 26]}, {"type": "summary", "indent": 0, "text": ["A PySide interface for editing viewport colors."], "extent": [26, 82]}, {"type": "pre", "text": ["<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<pythonPanelDocument>\n  <!--\n    This file contains the definition for the viewport color editor panel\n  -->\n  <interface name=\"viewport_color_editor\" label=\"Viewport Color Editor\" icon=\"MISC_python\">\n    <script><![CDATA[########################################################################\n# Replace the sample code below with your own to create a\n# PyQt or PySide interface.  Your code must define a 'onCreateInterface()'\n# function that returns the root widget of your interface.\n########################################################################\n\nimport os\nfrom hutil.Qt import QtCore, QtGui, QtWidgets\n\nclass ColorInfo:\n    theDialog = None\n\n    def __init__(self, name, values, comment):\n        self.myName = name\n        self.myValues = values\n        self.myOrigValues = values\n        self.myComment = comment\n\n    def __str__(self):\n        if isinstance(self.myValues, str):\n            return self.myName + \":\\t@\" + \\\n                   self.myValues + \"\\t# \" + \\\n                   self.myComment\n        elif self.isAlpha():\n            return self.myName + \":\\tALPHA \" + \\\n                   str(self.myValues[0]) + \"\\t# \" + \\\n                   self.myComment\n        else:\n            return self.myName + \":\\t\" + \\\n                   str(self.myValues[0]) + \" \" + \\\n                   str(self.myValues[1]) + \" \" + \\\n                   str(self.myValues[2]) + \"\\t# \" + \\\n                   self.myComment\n\n    def getValueStr(self):\n        if isinstance(self.myValues, str):\n            return \"@\" + self.myValues\n        elif self.isAlpha():\n            valuestr = str(self.myValues[0])\n        else:\n            valuestr = str(self.myValues)\n        return valuestr\n\n    def isAlpha(self):\n        if isinstance(self.myValues, str):\n            return self.findReference(self.myValues).isAlpha()\n        else:\n            return len(self.myValues) == 1\n\n    def getAlpha(self):\n        if isinstance(self.myValues, str):\n            return self.findReference(self.myValues).getAlpha()\n        else:\n            return self.myValues[0]\n\n    def getColor(self):\n        if isinstance(self.myValues, str):\n            return self.findReference(self.myValues).getColor()\n        else:\n            return QtGui.QColor.fromRgbF(self.myValues[0], \\\n                                         self.myValues[1], \\\n                                         self.myValues[2])\n\n    def getColorStyleStr(self):\n        if isinstance(self.myValues, str):\n            return self.findReference(self.myValues).getColorStyleStr()\n        elif not self.isAlpha() and \\\n            (self.myValues[0] + self.myValues[1] + self.myValues[2]) < 0.75:\n            return \"background-color: rgb(\" + \\\n                   str(int(self.myValues[0] * 255.0)) + \", \" + \\\n                   str(int(self.myValues[1] * 255.0)) + \", \" + \\\n                   str(int(self.myValues[2] * 255.0)) + \"); \" + \\\n                   \"color: white;\"\n        else:\n            return \"background-color: rgb(\" + \\\n                   str(int(self.myValues[0] * 255.0)) + \", \" + \\\n                   str(int(self.myValues[1] * 255.0)) + \", \" + \\\n                   str(int(self.myValues[2] * 255.0)) + \");\"\n\n    def twoDigits(self, val):\n        if isinstance(val, float):\n            return float(int(val * 100.0)) / 100.0\n        else:\n            l = []\n            for v in val:\n                l.append(float(int(v * 100.0)) / 100.0)\n            return l\n\n    def setAlpha(self, value):\n        try:\n            self.myValues[0] = float(value)\n            for info in ColorInfo.theDialog.myInfos:\n                if (info == self or info.mySelected.isChecked()) and \\\n                    info.myShown and info.isAlpha():\n                    if info != self:\n                        info.myValues = self.myName\n                    ColorInfo.theDialog.myChanged = True\n        except:\n            pass\n\n    def doneAlpha(self):\n        for info in ColorInfo.theDialog.myInfos:\n            if (info == self or info.mySelected.isChecked()) and \\\n                info.myShown and info.isAlpha():\n                info.myAlphaValue.setText(info.getValueStr())\n\n    def setColor(self):\n        color = QtWidgets.QColorDialog.getColor(self.getColor())\n        if color.isValid():\n            self.myValues = list(self.twoDigits(color.getRgbF()))\n            for info in ColorInfo.theDialog.myInfos:\n                if (info == self or info.mySelected.isChecked()) and \\\n                    info.myShown and not info.isAlpha():\n                    if info != self:\n                        info.myValues = self.myName\n                    info.myColorValue.setText(info.getValueStr())\n                    info.myColorValue.setStyleSheet(info.getColorStyleStr())\n                    ColorInfo.theDialog.myChanged = True\n\n    def setComment(self, comment):\n        self.myComment = comment\n\n    def findReference(self, reference):\n        return ColorInfo.theDialog.findColor(reference)\n\nclass Dialog(QtWidgets.QFrame):\n    def __init__(self, parent=None):\n        super(Dialog, self).__init__(parent)\n\n        ColorInfo.theDialog = self\n\n        # Create the filter input field and add the widgets to a scrolling\n        # list in the dialog.\n        self.myFilterRow = QtWidgets.QHBoxLayout()\n        self.myFilterLabel = QtWidgets.QLabel(\"Filter:\")\n        self.myFilter = QtWidgets.QLineEdit()\n        self.myFilter.textChanged.connect(self.doFilterUpdated)\n        self.myFilterChanged = QtWidgets.QCheckBox(\"Changed Values\")\n        self.myFilterChanged.stateChanged.connect(self.doFilterChangedUpdated)\n        self.myFilterRow.addWidget(self.myFilterLabel)\n        self.myFilterRow.addWidget(self.myFilter)\n        self.myFilterRow.addWidget(self.myFilterChanged)\n\n        self.myScroller = QtWidgets.QScrollArea()\n        self.myScroller.setWidgetResizable(True)\n\n        self.myActionRow = QtWidgets.QHBoxLayout()\n        self.myClearSelectionButton = QtWidgets.QPushButton(\"Clear Selection\")\n        self.myClearSelectionButton.clicked.connect(self.doClearSelection)\n        self.mySchemeMenu = QtWidgets.QComboBox()\n        self.mySchemeMenu.setEditable(False)\n        self.mySchemeMenu.addItem(\"Light\", \"config/3DSceneColors.light\")\n        self.mySchemeMenu.addItem(\"Dark\", \"config/3DSceneColors.dark\")\n        self.mySchemeMenu.addItem(\"Grey\", \"config/3DSceneColors.bw\")\n        self.mySchemeMenu.currentIndexChanged.connect(self.doSchemeChanged)\n        self.mySaveButton = QtWidgets.QPushButton(\"Save\")\n        self.mySaveButton.clicked.connect(self.doSave)\n        self.myQuitButton = QtWidgets.QPushButton(\"Revert\")\n        self.myQuitButton.clicked.connect(self.doLoad)\n        self.myActionRow.addWidget(self.myClearSelectionButton)\n        self.myActionRow.addStretch(1)\n        self.myActionRow.addWidget(QtWidgets.QLabel(\"Color Scheme:\"))\n        self.myActionRow.addWidget(self.mySchemeMenu)\n        self.myActionRow.addStretch(1)\n        self.myActionRow.addWidget(self.mySaveButton)\n        self.myActionRow.addWidget(self.myQuitButton)\n\n        # Create the initial dialog layout.\n        mainLayout = QtWidgets.QBoxLayout(QtWidgets.QBoxLayout.Direction.TopToBottom)\n        mainLayout.addLayout(self.myFilterRow)\n        mainLayout.addWidget(self.myScroller)\n        mainLayout.addLayout(self.myActionRow)\n        self.setLayout(mainLayout)\n\n        self.doLoad()\n\n    def findColor(self, name):\n        for info in self.myInfos:\n            if info.myName == name:\n                return info\n        return ColorInfo(name, [0.0, 0.0, 0.0], \"\")\n\n    def doFilterUpdated(self, state):\n        self.fillColorList(self.myFilter.text(), \\\n                           self.myFilterChanged.isChecked())\n\n    def doFilterChangedUpdated(self, state):\n        self.fillColorList(self.myFilter.text(), \\\n                           self.myFilterChanged.isChecked())\n\n    def fillColorList(self, filterStr = None, changedOnly = False):\n        # Sort widgets into shown or hidden containers. The hidden container\n        # exists to make sure the underlying QT widgets don't get deleted.\n        hiddenWidget = QtWidgets.QWidget()\n        hidden = QtWidgets.QGridLayout()\n        shownWidget = QtWidgets.QWidget()\n        shown = QtWidgets.QGridLayout()\n        shown.setColumnStretch(4, 1)\n        shown.setColumnMinimumWidth(4, 250)\n        i = 0\n        for info in self.myInfos:\n            info.myShown = self.matchFilter(filterStr, changedOnly, info)\n            if not info.myShown:\n                info.mySelected.setChecked(False)\n            layout = shown if info.myShown else hidden\n            layout.addWidget(info.mySelected, i, 0)\n            layout.addWidget(info.myNameLabel, i, 1)\n            if info.isAlpha():\n                layout.addWidget(info.myAlphaValue, i, 2)\n                layout.addWidget(info.myOrigAlphaValue, i, 3)\n            else:\n                layout.addWidget(info.myColorValue, i, 2)\n                layout.addWidget(info.myOrigColorValue, i, 3)\n            layout.addWidget(info.myCommentText, i, 4)\n            i = i + 1\n        shownWidget.setLayout(shown)\n        hiddenWidget.setLayout(hidden)\n        self.myScroller.setWidget(shownWidget)\n        self.myHidden = hiddenWidget\n        self.myContainer = shownWidget;\n\n    def matchFilter(self, filterStr, changedOnly, info):\n        # First thing to chec is if he value is changed\n        if changedOnly and info.myValues == info.myOrigValues:\n            return False\n\n        # Empty string matches anything\n        if filterStr is None or filterStr == \"\":\n            return True\n\n        # With a string, look for each word individually.\n        words = filterStr.split()\n        for word in words:\n            if info.myName.lower().find(word.lower()) != -1 or \\\n               info.myComment.lower().find(word.lower()) != -1:\n                return True\n\n        return False\n\n    def doSchemeChanged(self, menu_index):\n        if self.myChanged:\n            if hou.displayMessage(\"You have unsaved changes.\",\n                                  button = (\"Save\", \"Discard\")) == 0:\n                self.doSave()\n        self.doLoad()\n\n    def doClearSelection(self):\n        for info in self.myInfos:\n            info.mySelected.setChecked(False)\n\n    def doSave(self):\n        colorFilePath = hou.findFile(self.mySchemeMenu.itemData(self.mySchemeMenu.currentIndex()))\n        try:\n            colorFile = open(colorFilePath, \"w\")\n        except IOError:\n            colorFilePath = hou.homeHoudiniDirectory() + \"/\" + \\\n                            self.mySchemeMenu.itemData(self.mySchemeMenu.currentIndex())\n            try:\n                os.mkdir(colorFilePath[0:colorFilePath.rfind(\"/\")])\n            except OSError:\n                pass\n            colorFile = open(colorFilePath, \"w\")\n\n        for info in self.myInfos:\n            colorFile.write(str(info))\n            colorFile.write(\"\\n\")\n        colorFile.close()\n        hou.ui.reloadViewportColorSchemes()\n        self.myChanged = False\n\n    def doLoad(self):\n        # Read the scene colors file.\n        colorFilePath = hou.findFile(self.mySchemeMenu.itemData(self.mySchemeMenu.currentIndex()))\n        colorFile = open(colorFilePath)\n        colorLines = colorFile.readlines()\n        # Strip out empty lines and leading and trailing spaces.\n        for i in reversed(range(0, len(colorLines))):\n            colorLines[i] = colorLines[i].strip()\n            if len(colorLines[i]) == 0:\n                colorLines.pop(i)\n        # Put the lines in alphabetical order by color name.\n        colorLines.sort()\n        # Convert the lines into a list of ColorInfo structures.\n        self.myInfos = []\n        for i in range(0, len(colorLines)):\n            (rest, comment) = colorLines[i].split(\"#\", 1)\n            if len(rest) > 0:\n                comment = comment.strip()\n                (name, value) = rest.split(\":\", 1)\n                name = name.strip()\n                value = value.strip()\n                if value.startswith(\"ALPHA\"):\n                    values = [float(value.split()[1])]\n                elif value.startswith(\"@\"):\n                    values = value[1:len(value)]\n                else:\n                    values = value.split()\n                    values = [float(values[0]), float(values[1]), float(values[2])]\n                self.myInfos.append(ColorInfo(name, values, comment))\n\n        # Build Qt widgets for displaying and editing the color information.\n        frameStyle = QtWidgets.QFrame.Sunken | QtWidgets.QFrame.Panel\n        for info in self.myInfos:\n            info.mySelected = QtWidgets.QCheckBox()\n            info.myNameLabel = QtWidgets.QLabel()\n            info.myNameLabel.setText(info.myName)\n            info.myNameLabel.setFrameStyle(frameStyle)\n            if info.isAlpha():\n                info.myAlphaValue = QtWidgets.QLineEdit()\n                info.myAlphaValue.setText(info.getValueStr())\n                info.myAlphaValue.textEdited.connect(info.setAlpha)\n                info.myAlphaValue.editingFinished.connect(info.doneAlpha)\n                info.myOrigAlphaValue = QtWidgets.QLabel()\n                info.myOrigAlphaValue.setText(info.getValueStr())\n            else:\n                info.myColorValue = QtWidgets.QPushButton(info.getValueStr())\n                info.myColorValue.setStyleSheet(info.getColorStyleStr())\n                info.myColorValue.clicked.connect(info.setColor)\n                info.myOrigColorValue = QtWidgets.QLabel()\n                info.myOrigColorValue.setStyleSheet(info.getColorStyleStr())\n                info.myOrigColorValue.setAlignment(QtCore.Qt.AlignCenter)\n                info.myOrigColorValue.setText(info.getValueStr())\n            info.myCommentText = QtWidgets.QLineEdit()\n            info.myCommentText.setText(info.myComment)\n            info.myCommentText.textChanged.connect(info.setComment)\n        self.fillColorList()\n        self.myChanged = False\n\ndef onCreateInterface():\n    # Create the dialog to display and edit the color information.\n    root = Dialog()\n    return root\n]]></script>\n  </interface>\n</pythonPanelDocument>\n"]}], "title": ["Viewport color editor"], "summary": ["A PySide interface for editing viewport colors."], "examplefile": "/examples/python_panels/viewportcoloreditor.pypanel"}