{"type": "root", "attrs": {"type": "expression", "group": "parameters"}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["ch"], "extent": [0, 7]}, {"type": "summary", "indent": 0, "text": ["Returns the value of a parameter."], "extent": [45, 86]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Overview"], "extent": [86, 101], "body": [{"type": "para", "indent": 0, "text": ["The ", {"type": "code", "text": ["ch"]}, " family of functions gets the value of a parameter. This lets you make the values of certain parameters automatically identical to or relative to the value of other parameters."], "extent": [101, 288]}, {"type": "para", "indent": 0, "text": ["For example, if you have two ", {"scheme": "Node", "value": "/nodes/obj/geo", "type": "link", "text": ["Geometry object nodes"], "fullpath": "/nodes/obj/geo"}, " named ", {"type": "code", "text": ["geo1"]}, " and ", {"type": "code", "text": ["geo2"]}, ", you can make ", {"type": "code", "text": ["geo2"]}, " always be 2 units higher than ", {"type": "code", "text": ["geo"]}, " by setting ", {"type": "code", "text": ["geo2"]}, "'s ", {"type": "ui", "text": ["Translate Y"]}, " parameter to:"], "extent": [288, 486]}, {"lang": "hscript", "type": "pre", "indent": 0, "text": ["\nch(\"../geo1/ty\") + 2\n"], "extent": [486, 525]}, {"type": "para", "indent": 0, "text": ["Now when you move ", {"type": "code", "text": ["geo1"]}, ", ", {"type": "code", "text": ["geo2"]}, "'s Y position will always be 2 units higher."], "extent": [525, 604]}, {"type": "para", "indent": 0, "text": ["Channel references let you create custom ", {"scheme": null, "value": "/network/spare", "type": "link", "text": ["spare parameters"], "fullpath": "/network/spare"}, " and ", {"scheme": null, "value": "/assets/", "type": "link", "text": ["digital asset interfaces"], "fullpath": "/assets/index"}, " and have them control other nodes, by using channel references to have the nodes inside the subnetwork/asset reference the ", {"type": "q", "text": ["interface"]}, " parameters at the higher level."], "extent": [604, 887]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Path argument"], "extent": [887, 907], "body": [{"type": "para", "indent": 0, "text": ["The first argument to the channel functions is a string ", {"type": "em", "text": ["path"]}, " to the parameter whose value you want to get."], "extent": [907, 1018]}, {"type": "para", "indent": 0, "text": ["For parameters on the same node, you can just use the parameter\u2019s ", {"type": "em", "text": ["internal name"]}, ". For example, in an object, you could make the object\u2019s X position always match the Y position by setting the ", {"type": "ui", "text": ["Translate Y"]}, " to the expression:"], "extent": [1018, 1246]}, {"lang": "hscript", "type": "pre", "indent": 0, "text": ["\nch(\"ty\")\n"], "extent": [1246, 1273]}, {"type": "tip_group", "body": [{"type": "tip", "indent": 0, "role": "item", "extent": [1273, 1279], "body": [{"type": "para", "indent": 4, "text": ["You can find the internal name of a parameter in the tooltip when you hover the mouse over the parameter in the parameter editor."], "extent": [1279, 1414]}], "container": true}], "container": true, "role": "item_group"}, {"type": "para", "indent": 0, "text": ["To get a parameter on a different node, you need to make a ", {"type": "em", "text": ["path"]}, " to the parameter, similar to UNIX directory paths."], "extent": [1414, 1532]}, {"type": "para", "indent": 0, "text": ["For example, to reference the ", {"type": "code", "text": ["ty"]}, " parameter of a node named ", {"type": "code", "text": ["geo2"]}, " in the same network:"], "extent": [1532, 1622]}, {"lang": "hscript", "type": "pre", "indent": 0, "text": ["\nch(\"../geo2/ty\")\n"], "extent": [1622, 1657]}, {"type": "para", "indent": 0, "text": ["To reference the ", {"type": "code", "text": ["tx"]}, " parameter of the parent network node:"], "extent": [1657, 1719]}, {"lang": "hscript", "type": "pre", "indent": 0, "text": ["\nch(\"../tx\")\n"], "extent": [1719, 1749]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Getting numbers"], "extent": [1749, 1772], "body": [{"type": "usage_group", "body": [{"ext": null, "type": "usage", "indent": 0, "text": [" ", {"type": "code", "text": ["ch(\"path\")"]}], "role": "item", "extent": [1772, 1795], "body": [{"type": "para", "indent": 4, "text": ["Returns the ", {"type": "em", "text": ["floating point"]}, " value of the given parameter."], "extent": [1795, 1863]}, {"type": "para", "indent": 4, "text": ["For example, to get the ", {"type": "ui", "text": ["Origin X"]}, " of the ", {"type": "code", "text": ["font1"]}, " node:"], "extent": [1863, 1930]}, {"lang": "hscript", "type": "pre", "indent": 4, "text": ["\n    ch(\"../font1/tx\")\n    "], "extent": [1930, 1982]}], "container": true}, {"ext": null, "type": "usage", "indent": 0, "text": [" ", {"type": "code", "text": ["chf(\"path\", frame_num)"]}], "role": "item", "extent": [1982, 2017], "body": [{"type": "para", "indent": 4, "text": ["Returns the floating point value of the given parameter, as computed at the given frame number."], "extent": [2017, 2122]}, {"type": "para", "indent": 4, "text": ["Getting a value from a future time requires ", {"scheme": null, "value": "/basics/cooking", "type": "link", "text": ["cooking"], "fullpath": "/basics/cooking"}, " some or all of the scene up to that time, so this function is potentially expensive."], "extent": [2122, 2286]}, {"type": "para", "indent": 4, "text": ["For example, to get the ", {"type": "ui", "text": ["Origin X"]}, " of the ", {"type": "code", "text": ["font1"]}, " node from ten frames previous:"], "extent": [2286, 2378]}, {"lang": "hscript", "type": "pre", "indent": 4, "text": ["\n    chf(\"../font1/text\", $F - 10)\n    "], "extent": [2378, 2442]}], "container": true}, {"ext": null, "type": "usage", "indent": 0, "text": [" ", {"type": "code", "text": ["cht(\"path\", seconds)"]}], "role": "item", "extent": [2442, 2475], "body": [{"type": "para", "indent": 4, "text": ["Returns the floating point value of the given parameter, as computed at the given time (in seconds)."], "extent": [2475, 2585]}, {"type": "para", "indent": 4, "text": ["Getting a value from a future time requires ", {"scheme": null, "value": "/basics/cooking", "type": "link", "text": ["cooking"], "fullpath": "/basics/cooking"}, " some or all of the scene up to that time, so this function is potentially expensive."], "extent": [2585, 2749]}, {"type": "para", "indent": 4, "text": ["For example, to get the ", {"type": "ui", "text": ["Origin X"]}, " of the ", {"type": "code", "text": ["font1"]}, " node from 2 seconds previous:"], "extent": [2749, 2840]}, {"lang": "hscript", "type": "pre", "indent": 4, "text": ["\n    chf(\"../font1/text\", $T - 2)\n    "], "extent": [2840, 2903]}], "container": true}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Getting strings"], "extent": [2903, 2926], "body": [{"type": "usage_group", "body": [{"ext": null, "type": "usage", "indent": 0, "text": [" ", {"type": "code", "text": ["chs(\"path\")"]}], "role": "item", "extent": [2926, 2954], "body": [{"type": "para", "indent": 4, "text": ["Returns the ", {"type": "em", "text": ["string"]}, " value of the given parameter."], "extent": [2954, 3014]}, {"type": "para", "indent": 4, "text": ["For example, to get the ", {"type": "ui", "text": ["Text"]}, " of the ", {"type": "code", "text": ["font1"]}, " node:"], "extent": [3014, 3077]}, {"lang": "hscript", "type": "pre", "indent": 4, "text": ["\n    chs(\"../font1/text\")\n    "], "extent": [3077, 3132]}], "container": true}, {"ext": null, "type": "usage", "indent": 0, "text": [" ", {"type": "code", "text": ["chsraw(\"path\")"]}], "role": "item", "extent": [3132, 3163], "body": [{"type": "para", "indent": 4, "text": ["Returns the ", {"type": "q", "text": ["raw"]}, " string value of the given parameter, without expanding quotes or variable names. For example, if the parameter contains an expression ", {"type": "code", "text": ["$F - 10"]}, ", you will get the string ", {"type": "code", "text": ["\"$F - 10\""]}, " (instead of the computed value of the current frame minus ten)."], "extent": [3163, 3431]}], "container": true}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Getting a node path"], "extent": [3431, 3457], "body": [{"type": "para", "indent": 0, "text": ["See ", {"scheme": "Exp", "value": "/expressions/chsop", "type": "link", "text": "", "fallback_text": "chsop()", "fullpath": "/expressions/chsop"}, "."], "extent": [3457, 3476]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Getting ramp values"], "extent": [3476, 3502], "body": [{"type": "para", "indent": 0, "text": ["See ", {"scheme": "Exp", "value": "/expressions/chramp", "type": "link", "text": "", "fallback_text": "chramp()", "fullpath": "/expressions/chramp"}, ", ", {"scheme": "Exp", "value": "/expressions/chrampf", "type": "link", "text": "", "fallback_text": "chrampf()", "fullpath": "/expressions/chrampf"}, ", and ", {"scheme": "Exp", "value": "/expressions/chrampt", "type": "link", "text": "", "fallback_text": "chrampt()", "fullpath": "/expressions/chrampt"}, "."], "extent": [3502, 3556]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Tips"], "extent": [3556, 3567], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": ["You can automatically create channel-references using the ", {"type": "q", "text": ["Copy"]}, " and ", {"type": "q", "text": ["Paste reference"]}, " commands on the parameter ", {"keys": ["RMB"], "type": "keys", "text": null}, " right-click menu."], "extent": [3567, 3710]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["See ", {"scheme": null, "value": "/network/parms#link", "type": "link", "text": ["linking parameter values"], "fullpath": "/network/parms#link", "fragment": "#link"}, " for more information."], "extent": [3710, 3786]}], "container": true}]}, {"level": 1, "id": "related", "container": true, "type": "related_section", "indent": 0, "role": "section", "extent": [3786, 3795], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Exp", "value": "/expressions/chramp", "type": "link", "text": "", "fallback_text": "chramp()", "fullpath": "/expressions/chramp"}], "extent": [3795, 3811]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Exp", "value": "/expressions/chexist", "type": "link", "text": "", "fallback_text": "chexist()", "fullpath": "/expressions/chexist"}], "extent": [3811, 3828]}], "container": true}], "text": "Related"}], "title": ["ch"], "summary": ["Returns the value of a parameter."]}