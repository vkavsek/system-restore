{"type": "root", "attrs": {"type": "hommodule", "cppname": "HOM_ui", "group": "ui"}, "body": [{"level": 0, "type": "title", "indent": 0, "text": [{"type": "supertitle", "text": "hou."}, "ui"], "extent": [0, 11]}, {"type": "summary", "indent": 0, "text": ["Module containing user interface related functions."], "extent": [57, 116]}, {"level": 1, "id": "functions", "container": true, "type": "functions_section", "indent": 0, "role": "section", "extent": [116, 127], "body": [{"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Pane layout"], "extent": [127, 146], "body": [{"type": "functions_item_group", "body": [{"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["curDesktop()"]}, "  \u2192 ", {"scheme": "Hom", "value": "/hom/hou/Desktop", "type": "link", "text": "", "fallback_text": "hou.Desktop", "fullpath": "/hom/hou/Desktop"}], "role": "item", "extent": [146, 186], "body": [{"type": "para", "indent": 4, "text": ["Return the current desktop."], "extent": [249, 282]}], "container": true, "attrs": {"cppname": "HOM_ui::curDesktop", "replaces": "/commands/desk"}, "id": "curDesktop"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["desktop(name)"]}, "  \u2192 ", {"scheme": "Hom", "value": "/hom/hou/Desktop", "type": "link", "text": "", "fallback_text": "hou.Desktop", "fullpath": "/hom/hou/Desktop"}], "role": "item", "extent": [282, 322], "body": [{"type": "para", "indent": 4, "text": ["Return the desktop with the specified name.\n    Return None if no such desktop exists."], "extent": [382, 474]}], "container": true, "attrs": {"cppname": "HOM_ui::desktop", "replaces": "/commands/desk"}, "id": "desktop"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["desktops()"]}, "  \u2192 ", {"type": "code", "text": ["tuple"]}, " of ", {"scheme": "Hom", "value": "/hom/hou/Desktop", "type": "link", "text": "", "fallback_text": "hou.Desktop", "fullpath": "/hom/hou/Desktop"}], "role": "item", "extent": [474, 522], "body": [{"type": "para", "indent": 4, "text": ["Return all the desktops."], "extent": [583, 613]}, {"type": "para", "indent": 4, "text": ["See ", {"scheme": "Hom", "value": "/hom/hou/Desktop#setAsCurrent", "type": "link", "text": "", "fallback_text": "hou.Desktop.setAsCurrent", "fullpath": "/hom/hou/Desktop#setAsCurrent", "fragment": "#setAsCurrent"}, " for an example."], "extent": [613, 669]}], "container": true, "attrs": {"cppname": "HOM_ui::desktops", "replaces": "/commands/desk"}, "id": "desktops"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["radialMenu(name)"]}, "  \u2192 ", {"scheme": "Hom", "value": "/hom/hou/RadialMenu", "type": "link", "text": "", "fallback_text": "hou.RadialMenu", "fullpath": "/hom/hou/RadialMenu"}], "role": "item", "extent": [771, 817], "body": [{"type": "para", "indent": 4, "text": ["Returns a ", {"scheme": "Hom", "value": "/hom/hou/RadialMenu", "type": "link", "text": "", "fallback_text": "hou.RadialMenu", "fullpath": "/hom/hou/RadialMenu"}, " object representing the named menu,\n    or ", {"type": "code", "text": ["None"]}, " if the menu does not exist."], "extent": [851, 965]}], "container": true, "attrs": {"cppname": "HOM_ui::radialMenu"}, "id": "radialMenu"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["radialMenus()"]}, "  \u2192 ", {"type": "code", "text": ["tuple"]}, " of ", {"scheme": "Hom", "value": "/hom/hou/RadialMenu", "type": "link", "text": "", "fallback_text": "hou.RadialMenu", "fullpath": "/hom/hou/RadialMenu"}], "role": "item", "extent": [965, 1019], "body": [{"type": "para", "indent": 4, "text": ["Returns a tuple of ", {"scheme": "Hom", "value": "/hom/hou/RadialMenu", "type": "link", "text": "", "fallback_text": "hou.RadialMenu", "fullpath": "/hom/hou/RadialMenu"}, " objects representing existing menus."], "extent": [1054, 1136]}], "container": true, "attrs": {"cppname": "HOM_ui::radialMenus"}, "id": "radialMenus"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["createRadialMenu(name, label)"]}, "  \u2192 ", {"scheme": "Hom", "value": "/hom/hou/RadialMenu", "type": "link", "text": "", "fallback_text": "hou.RadialMenu", "fullpath": "/hom/hou/RadialMenu"}], "role": "item", "extent": [1136, 1195], "body": [{"type": "para", "indent": 4, "text": ["Creates a new radial menu object with the given name and label."], "extent": [1235, 1304]}], "container": true, "attrs": {"cppname": "HOM_ui::createRadialMenu"}, "id": "createRadialMenu"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["createRadialItem(submenu=False, callback=false)"]}, "  \u2192 ", {"scheme": "Hom", "value": "/hom/hou/RadialScriptItem", "type": "link", "text": "", "fallback_text": "hou.RadialScriptItem", "fullpath": "/hom/hou/RadialScriptItem"}], "role": "item", "extent": [1304, 1387], "body": [{"type": "para", "indent": 4, "text": ["Creates a temporary radial menu item."], "extent": [1427, 1470]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["submenu"], "extent": [1470, 1483], "body": [{"type": "para", "indent": 12, "text": ["Whether this item is a submenu or action."], "extent": [1483, 1538]}], "container": true}, {"type": "dt", "indent": 4, "text": ["callback"], "extent": [1538, 1552], "body": [{"type": "para", "indent": 12, "text": ["Whether this item is uses python callback or script (text)."], "extent": [1552, 1625]}], "container": true}], "container": true}], "container": true, "attrs": {"cppname": "HOM_ui::createRadialItem"}, "id": "createRadialItem"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["injectRadialItem(location, item)"]}], "role": "item", "extent": [1625, 1663], "body": [{"type": "para", "indent": 4, "text": ["Injects a temporary radial menu item into the current menu."], "extent": [1703, 1768]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["location"], "extent": [1768, 1782], "body": [{"type": "para", "indent": 12, "text": ["The location on the radial menu (0 - 7, counterclockwise from top)."], "extent": [1782, 1863]}], "container": true}, {"type": "dt", "indent": 4, "text": ["item"], "extent": [1863, 1873], "body": [{"type": "para", "indent": 12, "text": ["The radial menu item created by ", {"type": "code", "text": ["createRadialItem"]}, "."], "extent": [1873, 1938]}], "container": true}], "container": true}], "container": true, "attrs": {"cppname": "HOM_ui::injectRadialItem"}, "id": "injectRadialItem"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["injectRadialMenu(name)"]}], "role": "item", "extent": [1938, 1966], "body": [{"type": "para", "indent": 4, "text": ["Injects a registered menu and override the current menu."], "extent": [2006, 2068]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["name"], "extent": [2068, 2078], "body": [{"type": "para", "indent": 12, "text": ["The name of the menu."], "extent": [2078, 2113]}], "container": true}], "container": true}], "container": true, "attrs": {"cppname": "HOM_ui::injectRadialItem"}, "id": "injectRadialMenu"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["updateMainMenuBar()"]}], "role": "item", "extent": [2113, 2138], "body": [{"type": "para", "indent": 4, "text": ["Forces label expressions to be re-evaluated for the main Houdini menu bar.\n    These top level menu items are never automatically refreshed, so it is up\n    to the creator of these menus to also install handlers that detect when a\n    condition has changed that might affect the menu, and call this method to\n    force a refresh."], "extent": [2178, 2513]}], "container": true, "attrs": {"cppname": "HOM_ui::updateMainMenuBar"}, "id": "updateMainMenuBar"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["panes(self)"]}, "  \u2192 ", {"type": "code", "text": ["tuple"]}, " of ", {"scheme": "Hom", "value": "/hom/hou/Pane", "type": "link", "text": "", "fallback_text": "hou.Pane", "fullpath": "/hom/hou/Pane"}], "role": "item", "extent": [2513, 2559], "body": [{"type": "para", "indent": 4, "text": ["Return a tuple of all visible panes, including those in all floating\n    windows."], "extent": [2587, 2674]}, {"type": "para", "indent": 4, "text": ["See also ", {"scheme": "Hom", "value": "/hom/hou/Desktop#panes", "type": "link", "text": "", "fallback_text": "hou.Desktop.panes", "fullpath": "/hom/hou/Desktop#panes", "fragment": "#panes"}, "."], "extent": [2674, 2713]}], "container": true, "attrs": {"cppname": "HOM_ui::panes"}, "id": "panes"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["paneTabs(self)"]}, "  \u2192 ", {"type": "code", "text": ["tuple"]}, " of ", {"scheme": "Hom", "value": "/hom/hou/PaneTab", "type": "link", "text": "", "fallback_text": "hou.PaneTab", "fullpath": "/hom/hou/PaneTab"}], "role": "item", "extent": [2713, 2765], "body": [{"type": "para", "indent": 4, "text": ["Return a tuple of all visible pane tabs, including those in all floating\n    windows."], "extent": [2796, 2887]}, {"type": "para", "indent": 4, "text": ["See also ", {"scheme": "Hom", "value": "/hom/hou/Desktop#paneTabs", "type": "link", "text": "", "fallback_text": "hou.Desktop.paneTabs", "fullpath": "/hom/hou/Desktop#paneTabs", "fragment": "#paneTabs"}, "."], "extent": [2887, 2929]}], "container": true, "attrs": {"cppname": "HOM_ui::paneTabs"}, "id": "paneTabs"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["currentPaneTabs(self)"]}, "  \u2192 ", {"type": "code", "text": ["tuple"]}, " of ", {"scheme": "Hom", "value": "/hom/hou/PaneTab", "type": "link", "text": "", "fallback_text": "hou.PaneTab", "fullpath": "/hom/hou/PaneTab"}], "role": "item", "extent": [2929, 2988], "body": [{"type": "para", "indent": 4, "text": ["Return a tuple of all visible pane tabs that are selected in their\n    containing panes, including those in all floating windows."], "extent": [3026, 3161]}, {"type": "para", "indent": 4, "text": ["See also ", {"scheme": "Hom", "value": "/hom/hou/Desktop#currentPaneTabs", "type": "link", "text": "", "fallback_text": "hou.Desktop.currentPaneTabs", "fullpath": "/hom/hou/Desktop#currentPaneTabs", "fragment": "#currentPaneTabs"}, "."], "extent": [3161, 3210]}], "container": true, "attrs": {"cppname": "HOM_ui::currentPaneTabs"}, "id": "currentPaneTabs"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["floatingPaneTabs(self)"]}, "  \u2192 ", {"type": "code", "text": ["tuple"]}, " of ", {"scheme": "Hom", "value": "/hom/hou/PaneTab", "type": "link", "text": "", "fallback_text": "hou.PaneTab", "fullpath": "/hom/hou/PaneTab"}], "role": "item", "extent": [3210, 3270], "body": [{"type": "para", "indent": 4, "text": ["Return all the pane tabs in floating panels."], "extent": [3309, 3359]}, {"type": "para", "indent": 4, "text": ["See also ", {"scheme": "Hom", "value": "/hom/hou/Desktop#floatingPaneTabs", "type": "link", "text": "", "fallback_text": "hou.Desktop.floatingPaneTabs", "fullpath": "/hom/hou/Desktop#floatingPaneTabs", "fragment": "#floatingPaneTabs"}, "."], "extent": [3359, 3409]}], "container": true, "attrs": {"cppname": "HOM_ui::floatingPaneTabs"}, "id": "floatingPaneTabs"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["paneTabOfType(self, type, index=0)"]}, "  \u2192 ", {"scheme": "Hom", "value": "/hom/hou/PaneTab", "type": "link", "text": "", "fallback_text": "hou.PaneTab", "fullpath": "/hom/hou/PaneTab"}, " or ", {"type": "code", "text": ["None"]}], "role": "item", "extent": [3409, 3480], "body": [{"type": "para", "indent": 4, "text": ["Find and return the pane tab with the desired type.  If no such tab\n    exists, return None."], "extent": [3516, 3614]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["type"], "extent": [3614, 3624], "body": [{"type": "para", "indent": 8, "text": ["A ", {"scheme": "Hom", "value": "/hom/hou/paneTabType", "type": "link", "text": "", "fallback_text": "hou.paneTabType", "fullpath": "/hom/hou/paneTabType"}, " enumerated variable."], "extent": [3624, 3678]}], "container": true}, {"type": "dt", "indent": 4, "text": ["index"], "extent": [3678, 3689], "body": [{"type": "para", "indent": 8, "text": ["If there are multiple tabs with the desired type, this parameter\n        determines which one is returned.  Use ", {"type": "code", "text": ["index=0"]}, " to return the first\n        found tab, ", {"type": "code", "text": ["index=1"]}, " to return the second found tab, etc.  By default,\n        index is 0."], "extent": [3689, 3939]}], "container": true}], "container": true}, {"type": "para", "indent": 4, "text": ["See also ", {"scheme": "Hom", "value": "/hom/hou/Desktop#paneTabOfType", "type": "link", "text": "", "fallback_text": "hou.Desktop.paneTabOfType", "fullpath": "/hom/hou/Desktop#paneTabOfType", "fragment": "#paneTabOfType"}, "."], "extent": [3939, 3986]}], "container": true, "attrs": {"cppname": "HOM_ui::paneTabOfType"}, "id": "paneTabOfType"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["findPane(self, pane_id)"]}, "  \u2192 ", {"scheme": "Hom", "value": "/hom/hou/Pane", "type": "link", "text": "", "fallback_text": "hou.Pane", "fullpath": "/hom/hou/Pane"}, " or None"], "role": "item", "extent": [3986, 4041], "body": [{"type": "para", "indent": 4, "text": ["Return the pane with the given unique id, or ", {"type": "code", "text": ["None"]}, " if no such pane exists."], "extent": [4072, 4153]}, {"type": "para", "indent": 4, "text": ["See also ", {"scheme": "Hom", "value": "/hom/hou/Desktop#findPane", "type": "link", "text": "", "fallback_text": "hou.Desktop.findPane", "fullpath": "/hom/hou/Desktop#findPane", "fragment": "#findPane"}, "."], "extent": [4153, 4195]}], "container": true, "attrs": {"cppname": "HOM_ui::findPane"}, "id": "findPane"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["findPaneTab(self, name)"]}, "  \u2192 ", {"scheme": "Hom", "value": "/hom/hou/PaneTab", "type": "link", "text": "", "fallback_text": "hou.PaneTab", "fullpath": "/hom/hou/PaneTab"}, " or None"], "role": "item", "extent": [4195, 4253], "body": [{"type": "para", "indent": 4, "text": ["Return the pane tab with the given name, or ", {"type": "code", "text": ["None"]}, " if no such tab exists."], "extent": [4287, 4366]}, {"type": "para", "indent": 4, "text": ["The name may optionally be prefixed by the desktop name and a period."], "extent": [4366, 4441]}, {"type": "para", "indent": 4, "text": ["See also ", {"scheme": "Hom", "value": "/hom/hou/Desktop#findPaneTab", "type": "link", "text": "", "fallback_text": "hou.Desktop.findPaneTab", "fullpath": "/hom/hou/Desktop#findPaneTab", "fragment": "#findPaneTab"}, "."], "extent": [4441, 4486]}], "container": true, "attrs": {"cppname": "HOM_ui::findPaneTab"}, "id": "findPaneTab"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["floatingPanels(self)"]}, "  \u2192 ", {"type": "code", "text": ["tuple"]}, " of ", {"scheme": "Hom", "value": "/hom/hou/FloatingPanel", "type": "link", "text": "", "fallback_text": "hou.FloatingPanel", "fullpath": "/hom/hou/FloatingPanel"}], "role": "item", "extent": [4486, 4550], "body": [{"type": "para", "indent": 4, "text": ["Return all the visible floating panels."], "extent": [4587, 4632]}, {"type": "para", "indent": 4, "text": ["See also ", {"scheme": "Hom", "value": "/hom/hou/Desktop#floatingPanels", "type": "link", "text": "", "fallback_text": "hou.Desktop.floatingPanels", "fullpath": "/hom/hou/Desktop#floatingPanels", "fragment": "#floatingPanels"}, "."], "extent": [4632, 4680]}], "container": true, "attrs": {"cppname": "HOM_ui::floatingPanels"}, "id": "floatingPanels"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["paneUnderCursor(self)"]}], "role": "item", "extent": [4680, 4707], "body": [{"type": "para", "indent": 4, "text": ["Return the ", {"scheme": "Hom", "value": "/hom/hou/Pane", "type": "link", "text": "", "fallback_text": "hou.Pane", "fullpath": "/hom/hou/Pane"}, " object located under the mouse cursor.  Return\n    ", {"type": "code", "text": ["None"]}, " if no pane is located under the mouse cursor."], "extent": [4745, 4884]}, {"type": "para", "indent": 4, "text": ["This method searches all visible panes including panes not attached to the\n    current desktop."], "extent": [4884, 4985]}], "container": true, "attrs": {"cppname": "HOM_ui::paneUnderCursor"}, "id": "paneUnderCursor"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["paneTabUnderCursor(self)"]}], "role": "item", "extent": [4985, 5015], "body": [{"type": "para", "indent": 4, "text": ["Similar to ", {"scheme": "Hom", "value": "/hom/hou/ui#paneUnderCursor", "type": "link", "text": "", "fallback_text": "hou.ui.paneUnderCursor", "fullpath": "/hom/hou/ui#paneUnderCursor", "fragment": "#paneUnderCursor"}, " but return the\n    ", {"scheme": "Hom", "value": "/hom/hou/PaneTab", "type": "link", "text": "", "fallback_text": "hou.PaneTab", "fullpath": "/hom/hou/PaneTab"}, " object instead located under the mouse cursor.  Return\n    ", {"type": "code", "text": ["None"]}, " if no pane tab is located under the mouse cursor."], "extent": [5056, 5254]}, {"type": "para", "indent": 4, "text": ["This method searches all visible pane tabs including pane tabs not attached\n    to the current desktop."], "extent": [5254, 5363]}], "container": true, "attrs": {"cppname": "HOM_ui::paneTabUnderCursor"}, "id": "paneTabUnderCursor"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["hideAllMinimizedStowbars(self)"]}, "  \u2192 ", {"type": "code", "text": ["bool"]}], "role": "item", "extent": [5363, 5409], "body": [{"type": "para", "indent": 4, "text": ["Return the value of a global flag that hides all the minimized stowbars and\n    split panes."], "extent": [5456, 5554]}], "container": true, "attrs": {"cppname": "HOM_ui::hideAllMinimizedStowbars"}, "id": "hideAllMinimizedStowbars"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["setHideAllMinimizedStowbars(self,on)"]}, "  \u2192 ", {"type": "code", "text": ["bool"]}], "role": "item", "extent": [5554, 5606], "body": [{"type": "para", "indent": 4, "text": ["Set the value of a global flag that hides all the minimized stowbars and\n    split panes.  When the flag is on, the minimized stowbars of all pane tabs \n    ,menus , the shelf dock or toolbars will be hidden. It also affect the split\n    bars of split panes, in which case, the split is rendered using a single\n    pixel line."], "extent": [5656, 5988]}], "container": true, "attrs": {"cppname": "HOM_ui::setHideAllMinimizedStowbars"}, "id": "setHideAllMinimizedStowbars"}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Scripted UI"], "extent": [5988, 6006], "body": [{"type": "functions_item_group", "body": [{"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["displayConfirmation(text, severity=hou.severityType.Message, help=None, title=None, details=None, details_label=None, suppress=hou.confirmType.OverwriteFile)"]}, "  \u2192 bool"], "role": "item", "extent": [6006, 6178], "body": [{"type": "para", "indent": 4, "text": ["Pop up a window with a message, OK and Cancel buttons, and wait for\n    the user to press a button.  Return ", {"type": "code", "text": ["True"]}, " if the user hits OK, otherwise\n    return ", {"type": "code", "text": ["False"]}, ". The ", {"type": "code", "text": ["suppress"]}, " parameter is used to skip the display of\n    this dialog if the user requested not to be shown this confirmation\n    dialog again. This dialog also presents the user with a check box to\n    indicate that they don\u2019t want to be presented with this dialog in the\n    future."], "extent": [6220, 6678]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["text"], "extent": [6678, 6688], "body": [{"type": "para", "indent": 8, "text": ["The message to display."], "extent": [6688, 6721]}], "container": true}, {"type": "dt", "indent": 4, "text": ["severity"], "extent": [6721, 6735], "body": [{"type": "para", "indent": 8, "text": ["A ", {"scheme": "Hom", "value": "/hom/hou/severityType", "type": "link", "text": "", "fallback_text": "hou.severityType", "fullpath": "/hom/hou/severityType"}, " value that determines which icon to display\n        on the dialog.  Note that using ", {"type": "code", "text": ["hou.severityType.Fatal"]}, " will exit\n        Houdini after the user closes the dialog."], "extent": [6735, 6938]}], "container": true}, {"type": "dt", "indent": 4, "text": ["help"], "extent": [6938, 6948], "body": [{"type": "para", "indent": 8, "text": ["Additional help information to display below the main message."], "extent": [6948, 7020]}], "container": true}, {"type": "dt", "indent": 4, "text": ["title"], "extent": [7020, 7031], "body": [{"type": "para", "indent": 8, "text": ["The window\u2019s title.  If ", {"type": "code", "text": ["None"]}, ", the title is ", {"type": "q", "text": ["Houdini"]}, "."], "extent": [7031, 7096]}], "container": true}, {"type": "dt", "indent": 4, "text": ["details"], "extent": [7096, 7109], "body": [{"type": "para", "indent": 8, "text": ["A string containing extra messages that is not visible unless the\n        user clicks ", {"type": "q", "text": ["Show Details"]}, "."], "extent": [7109, 7220]}], "container": true}, {"type": "dt", "indent": 4, "text": ["details_label"], "extent": [7220, 7239], "body": [{"type": "para", "indent": 8, "text": ["A string containing the label for the expand/collapse button that\n        controls whether or not the detail text is visible."], "extent": [7239, 7374]}], "container": true}], "container": true}, {"lang": "python", "type": "pre", "indent": 4, "text": ["\n    '''Prompt the user if they want to overwrite a file, and save it if they\nchoose OK.'''\n    if hou.ui.displayConfirmation(\"Overwrite the current hip file?\", suppress=hou.confirmType.OverwriteFile):\n        hou.hipFile.save()\n    "], "extent": [7374, 7631]}], "container": true, "attrs": {"cppname": "HOM_ui::displayconfirmation"}, "id": "displayConfirmation"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["displayCustomConfirmation(text, buttons=(), severity=hou.severityType.Message, default_choice=0, close_choice=-1, help=None, title=None, details=None, details_label=None, suppress=hou.confirmType.OverwriteFile)"]}, "  \u2192 int"], "role": "item", "extent": [7631, 7855], "body": [{"type": "para", "indent": 4, "text": ["This method is the same as ", {"type": "code", "text": ["displayConfirmation"]}, ", except it also accepts a\n    list of custom button labels and returns the selected button index instead\n    of a boolean value. The button index corresponds to the entry in the label\n    array that was selected in the pop up dialog. If fewer than two button labels\n    are specified, the default labels ", {"type": "q", "text": ["OK"]}, " and ", {"type": "q", "text": ["Cancel"]}, " will be added as\n    necessary to achieve the required length of at least two labels."], "extent": [7904, 8366]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["text"], "extent": [8366, 8376], "body": [{"type": "para", "indent": 8, "text": ["The message to display."], "extent": [8376, 8409]}], "container": true}, {"type": "dt", "indent": 4, "text": ["buttons"], "extent": [8409, 8422], "body": [{"type": "para", "indent": 8, "text": ["The labels for the buttons that appear in the dialog. If fewer than two\n        labels are passed in, ", {"type": "q", "text": ["OK"]}, " and ", {"type": "q", "text": ["Cancel"]}, " will be added as needed. For\n        example, if the method is called with ", {"type": "code", "text": ["buttons=(\"Continue\",)"]}, " the dialog\n        will display a ", {"type": "q", "text": ["Continue"]}, " and ", {"type": "q", "text": ["Cancel"]}, " button."], "extent": [8422, 8716]}], "container": true}, {"type": "dt", "indent": 4, "text": ["severity"], "extent": [8716, 8730], "body": [{"type": "para", "indent": 8, "text": ["A ", {"scheme": "Hom", "value": "/hom/hou/severityType", "type": "link", "text": "", "fallback_text": "hou.severityType", "fullpath": "/hom/hou/severityType"}, " value that determines which icon to display\n        on the dialog.  Note that using ", {"type": "code", "text": ["hou.severityType.Fatal"]}, " will exit\n        Houdini after the user closes the dialog."], "extent": [8730, 8933]}], "container": true}, {"type": "dt", "indent": 4, "text": ["default_choice"], "extent": [8933, 8953], "body": [{"type": "para", "indent": 8, "text": ["The index of the button that is selected if the user presses enter."], "extent": [8953, 9030]}], "container": true}, {"type": "dt", "indent": 4, "text": ["close_choice"], "extent": [9030, 9048], "body": [{"type": "para", "indent": 8, "text": ["The index of the button that is selected if the user presses escape\n        or closes the dialog."], "extent": [9048, 9155]}], "container": true}, {"type": "dt", "indent": 4, "text": ["help"], "extent": [9155, 9165], "body": [{"type": "para", "indent": 8, "text": ["Additional help information to display below the main message."], "extent": [9165, 9237]}], "container": true}, {"type": "dt", "indent": 4, "text": ["title"], "extent": [9237, 9248], "body": [{"type": "para", "indent": 8, "text": ["The window\u2019s title.  If ", {"type": "code", "text": ["None"]}, ", the title is ", {"type": "q", "text": ["Houdini"]}, "."], "extent": [9248, 9313]}], "container": true}, {"type": "dt", "indent": 4, "text": ["details"], "extent": [9313, 9326], "body": [{"type": "para", "indent": 8, "text": ["A string containing extra messages that is not visible unless the\n        user clicks ", {"type": "q", "text": ["Show Details"]}, "."], "extent": [9326, 9437]}], "container": true}, {"type": "dt", "indent": 4, "text": ["details_label"], "extent": [9437, 9456], "body": [{"type": "para", "indent": 8, "text": ["A string containing the label for the expand/collapse button that\n        controls whether or not the detail text is visible."], "extent": [9456, 9591]}], "container": true}], "container": true}, {"lang": "python", "type": "pre", "indent": 4, "text": ["\n    '''Before cooking the TOP network, prompts the user to either save the .hip\n    file, cook without saving the file, or cancel the cook operation completely.'''\n\n    def save_and_cook(top_network):\n        buttons = (\"Save and Continue\", \"Continue Without Saving\", \"Cancel\")\n        selected_button = hou.ui.displayCustomConfirmation(\"Save before cooking?\", suppress=hou.confirmType.TopCookSave, buttons=buttons)\n\n        if selected_button == 0:\n            hou.hipFile.save()\n\n        if selected_button != 2:\n            top_network.cookWorkItems(block=True)\n    "], "extent": [9591, 10185]}], "container": true, "attrs": {"cppname": "HOM_ui::displayCustomConfirmation"}, "id": "displayCustomConfirmation"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["displayMessage(text, buttons=('OK',), severity=hou.severityType.Message, default_choice=0, close_choice=-1, help=None, title=None, details=None, details_label=None, details_expanded=False)"]}, "  \u2192 int"], "role": "item", "extent": [10185, 10388], "body": [{"type": "para", "indent": 4, "text": ["Pop up a small window with a message and one or more buttons and wait for\n    the user to press a button.  Return the index of the button the user\n    pressed."], "extent": [10458, 10623]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["text"], "extent": [10623, 10633], "body": [{"type": "para", "indent": 12, "text": ["The message to display."], "extent": [10633, 10670]}], "container": true}, {"type": "dt", "indent": 4, "text": ["buttons"], "extent": [10670, 10683], "body": [{"type": "para", "indent": 12, "text": ["A sequence of strings containing the names of the buttons.  By default\n            the message window contains a single OK button."], "extent": [10683, 10827]}], "container": true}, {"type": "dt", "indent": 4, "text": ["severity"], "extent": [10827, 10841], "body": [{"type": "para", "indent": 12, "text": ["A ", {"scheme": "Hom", "value": "/hom/hou/severityType", "type": "link", "text": "", "fallback_text": "hou.severityType", "fullpath": "/hom/hou/severityType"}, " value that determines which icon to display\n            on the dialog.  Note that using ", {"type": "code", "text": ["hou.severityType.Fatal"]}, " will exit\n            Houdini after the user closes the dialog."], "extent": [10841, 11056]}], "container": true}, {"type": "dt", "indent": 4, "text": ["default_choice"], "extent": [11056, 11076], "body": [{"type": "para", "indent": 12, "text": ["The index of the button that is selected if the user presses enter."], "extent": [11076, 11157]}], "container": true}, {"type": "dt", "indent": 4, "text": ["close_choice"], "extent": [11157, 11175], "body": [{"type": "para", "indent": 12, "text": ["The index of the button that is selected if the user presses Escape\n            or closes the dialog."], "extent": [11175, 11294]}], "container": true}, {"type": "dt", "indent": 4, "text": ["help"], "extent": [11294, 11304], "body": [{"type": "para", "indent": 12, "text": ["Additional help information to display below the main message."], "extent": [11304, 11380]}], "container": true}, {"type": "dt", "indent": 4, "text": ["title"], "extent": [11380, 11391], "body": [{"type": "para", "indent": 12, "text": ["The window\u2019s title.  If ", {"type": "code", "text": ["None"]}, ", the title is ", {"type": "q", "text": ["Houdini"]}, "."], "extent": [11391, 11460]}], "container": true}, {"type": "dt", "indent": 4, "text": ["details"], "extent": [11460, 11473], "body": [{"type": "para", "indent": 12, "text": ["A string containing extra messages that is not visible unless the\n            user clicks ", {"type": "q", "text": ["Show Details"]}, "."], "extent": [11473, 11592]}], "container": true}, {"type": "dt", "indent": 4, "text": ["details_label"], "extent": [11592, 11611], "body": [{"type": "para", "indent": 12, "text": ["A string containing the label for the expand/collapse button that controls\n            whether or not the detail text is visible. If ", {"type": "code", "text": ["details_expanded"]}, " is set\n            to true this parameter has no effect."], "extent": [11611, 11833]}], "container": true}, {"type": "dt", "indent": 4, "text": ["details_expanded"], "extent": [11833, 11855], "body": [{"type": "para", "indent": 12, "text": ["A boolean, if true then the text area where the detail messages appear\n            is always shown and cannot be collapsed. If false, the detail message\n            area is initially folded when the message box is popped up and the\n            user can expand to read the details."], "extent": [11855, 12149]}], "container": true}], "container": true}, {"lang": "python", "type": "pre", "indent": 4, "text": ["\n    def saveIfNeeded():\n            '''Prompt the user if they want to save, and save the hip file if they choose Yes.'''\n            if hou.ui.displayMessage(\"Save the current hip file?\", buttons=(\"Yes\", \"No\")) == 0:\n                hou.hipFile.save()\n    "], "extent": [12149, 12431]}], "container": true, "attrs": {"cppname": "HOM_ui::displayMessage", "replaces": "/commands/message"}, "id": "displayMessage"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["readInput(message, buttons=('OK',), severity=hou.severityType.Message, default_choice=0, close_choice=-1, help=None, title=None, initial_contents=None)"]}, "  \u2192 (", {"type": "code", "text": ["int"]}, ", ", {"type": "code", "text": ["str"]}, ")"], "role": "item", "extent": [12431, 12607], "body": [{"type": "para", "indent": 4, "text": ["Pop up a small window with a textbox and wait for the user to enter a line\n    of text.  Return a tuple containing an integer and the text they entered.\n    The integer is the index of the pressed button.  If ", {"type": "code", "text": ["close_choice"]}, " is not\n    None and the user closed the dialog by clicking on its close button or by\n    pressing Escape, then the returned integer is set to ", {"type": "code", "text": ["close_choice"]}, "."], "extent": [12639, 13026]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["message"], "extent": [13026, 13039], "body": [{"type": "para", "indent": 12, "text": ["The message to display above the text field."], "extent": [13039, 13097]}], "container": true}, {"type": "dt", "indent": 4, "text": ["buttons"], "extent": [13097, 13110], "body": [{"type": "para", "indent": 12, "text": ["A sequence of strings containing the names of the buttons.  By default\n            the message window contains a single OK button."], "extent": [13110, 13254]}], "container": true}, {"type": "dt", "indent": 4, "text": ["severity"], "extent": [13254, 13268], "body": [{"type": "para", "indent": 12, "text": ["A ", {"scheme": "Hom", "value": "/hom/hou/severityType", "type": "link", "text": "", "fallback_text": "hou.severityType", "fullpath": "/hom/hou/severityType"}, " value that determines which icon to display\n            on the dialog.  Note that using ", {"type": "code", "text": ["hou.severityType.Fatal"]}, " will exit\n            Houdini after the user closes the dialog."], "extent": [13268, 13483]}], "container": true}, {"type": "dt", "indent": 4, "text": ["default_choice"], "extent": [13483, 13503], "body": [{"type": "para", "indent": 12, "text": ["The index of the button that is selected if the user presses enter."], "extent": [13503, 13588]}], "container": true}, {"type": "dt", "indent": 4, "text": ["close_choice"], "extent": [13588, 13606], "body": [{"type": "para", "indent": 12, "text": ["The index of the button that is selected if the user presses Escape\n            or clicks on the dialog\u2019s close button.  If there is more than one\n            button and ", {"type": "code", "text": ["close_choice"]}, " is -1, then the user cannot close the\n            dialog with Escape or the dialog\u2019s close button.  If there is\n            only one button and ", {"type": "code", "text": ["close_choice"]}, " is -1, then the user can close the\n            dialog with Escape or the dialog\u2019s close button, and the button\u2019s index\n            is returned."], "extent": [13606, 14107]}], "container": true}, {"type": "dt", "indent": 4, "text": ["help"], "extent": [14107, 14117], "body": [{"type": "para", "indent": 12, "text": ["Additional help information to display below the main message."], "extent": [14117, 14193]}], "container": true}, {"type": "dt", "indent": 4, "text": ["title"], "extent": [14193, 14204], "body": [{"type": "para", "indent": 12, "text": ["The window\u2019s title.  If ", {"type": "code", "text": ["None"]}, ", the title is ", {"type": "q", "text": ["Houdini"]}, "."], "extent": [14204, 14273]}], "container": true}, {"type": "dt", "indent": 4, "text": ["initial_contents"], "extent": [14273, 14295], "body": [{"type": "para", "indent": 12, "text": ["The initial contents of the text field.  If ", {"type": "code", "text": ["None"]}, ", the text field is\n            initially empty."], "extent": [14295, 14407]}], "container": true}], "container": true}, {"type": "para", "indent": 4, "text": ["See also ", {"scheme": "Hom", "value": "/hom/hou/ui#readMultiInput", "type": "link", "text": "", "fallback_text": "hou.ui.readMultiInput", "fullpath": "/hom/hou/ui#readMultiInput", "fragment": "#readMultiInput"}, " "], "extent": [14407, 14450]}], "container": true, "attrs": {"cppname": "HOM_ui::readInput"}, "id": "readInput"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["readMultiInput(message, input_labels, password_input_indices=(), buttons=('OK',), severity=hou.severityType.Message, default_choice=0, close_choice=-1, help=None, title=None, initial_contents=(\"\",))"]}, "  \u2192 (", {"type": "code", "text": ["int"]}, ", ", {"type": "code", "text": ["tuple"]}, " of ", {"type": "code", "text": ["str"]}, ")"], "role": "item", "extent": [14450, 14683], "body": [{"type": "para", "indent": 4, "text": ["Pop up a small window with a textbox and wait for the user to enter a text\n    into several input fields.\n    Return a tuple containing an integer and the tuple of strings they entered,\n    one for each input field.\n    The integer is the index of the pressed button.  If ", {"type": "code", "text": ["close_choice"]}, " is not\n    -1 and the user closed the dialog by clicking on its close button or by\n    pressing Escape, then the returned integer is set to ", {"type": "code", "text": ["close_choice"]}, "."], "extent": [14720, 15168]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["message"], "extent": [15168, 15181], "body": [{"type": "para", "indent": 12, "text": ["The message to display above the text field."], "extent": [15181, 15239]}], "container": true}, {"type": "dt", "indent": 4, "text": ["input_labels"], "extent": [15239, 15257], "body": [{"type": "para", "indent": 12, "text": ["A sequence of labels to appear in front of each input field. The\n            length of the sequence determines the number of input fields that will\n            appear in the window."], "extent": [15257, 15452]}], "container": true}, {"type": "dt", "indent": 4, "text": ["password_input_indices"], "extent": [15452, 15480], "body": [{"type": "para", "indent": 12, "text": ["A sequence of indices of which input fields are password fields.\n            Fields whose index is not in this sequence will not be password fields."], "extent": [15480, 15642]}], "container": true}, {"type": "dt", "indent": 4, "text": ["buttons"], "extent": [15642, 15655], "body": [{"type": "para", "indent": 12, "text": ["A sequence of strings containing the names of the buttons.  By default\n            the message window contains a single OK button."], "extent": [15655, 15799]}], "container": true}, {"type": "dt", "indent": 4, "text": ["severity"], "extent": [15799, 15813], "body": [{"type": "para", "indent": 12, "text": ["A ", {"scheme": "Hom", "value": "/hom/hou/severityType", "type": "link", "text": "", "fallback_text": "hou.severityType", "fullpath": "/hom/hou/severityType"}, " value that determines which icon to display\n            on the dialog.  Note that using ", {"type": "code", "text": ["hou.severityType.Fatal"]}, " will exit\n            Houdini after the user closes the dialog."], "extent": [15813, 16028]}], "container": true}, {"type": "dt", "indent": 4, "text": ["default_choice"], "extent": [16028, 16048], "body": [{"type": "para", "indent": 12, "text": ["The index of the button that is selected if the user presses enter."], "extent": [16048, 16129]}], "container": true}, {"type": "dt", "indent": 4, "text": ["close_choice"], "extent": [16129, 16147], "body": [{"type": "para", "indent": 12, "text": ["The index of the button that is selected if the user presses Escape\n            or clicks the dialog\u2019s close button.  If there is more than one\n            button and ", {"type": "code", "text": ["close_choice"]}, " is -1, then the user cannot close the\n            dialog with Escape or the dialog\u2019s close button.  If there is\n            only one button and ", {"type": "code", "text": ["close_choice"]}, " is -1, then the user can close the\n            dialog with Escape or the dialog\u2019s close button, and the button\u2019s index\n            is returned."], "extent": [16147, 16649]}], "container": true}, {"type": "dt", "indent": 4, "text": ["help"], "extent": [16649, 16659], "body": [{"type": "para", "indent": 12, "text": ["Additional help information to display below the main message."], "extent": [16659, 16735]}], "container": true}, {"type": "dt", "indent": 4, "text": ["title"], "extent": [16735, 16746], "body": [{"type": "para", "indent": 12, "text": ["The window\u2019s title.  If this is ", {"type": "code", "text": ["None"]}, ", the title is ", {"type": "code", "text": ["\"Houdini\""]}, "."], "extent": [16746, 16825]}], "container": true}, {"type": "dt", "indent": 4, "text": ["initial_contents"], "extent": [16825, 16847], "body": [{"type": "para", "indent": 8, "text": ["A sequence of strings specifying the initial value of each text box\n        specified by the ", {"type": "code", "text": ["input_labels"]}, " argument. If this sequence is shorter\n        than ", {"type": "code", "text": ["input_labels"]}, ", the rest of the fields are left blank.\n        The default is to start with all fields blank."], "extent": [16847, 17125]}], "container": true}], "container": true}, {"type": "para", "indent": 4, "text": ["The ", {"type": "code", "text": ["initial_contents"]}, " values must be strings. If you use another type (for example, integers), the function will raise a ", {"type": "code", "text": ["TypeError"]}, ".\n    If you want to prompt the user for integers, convert the initial values into strings,\n    and convert the results back into integers.\n    For example:"], "extent": [17125, 17420]}, {"lang": "python", "type": "pre", "indent": 4, "text": ["\n    start_int, end_int = hou.playbar.frameRange()\n    button_idx, values = hou.ui.readMultiInput(\n        \"Set the new frame range\", (\"Start Frame\", \"End Frame\"),\n        initial_contents=(str(start_int), str(end_int)),\n        title=\"Frame Range\",\n        buttons=(\"OK\", \"Cancel\"),\n        default_choice=0, close_choice=1,\n    )\n    new_start_int = int(values[0])\n    new_end_int = int(values[1])\n    "], "extent": [17420, 17848]}, {"type": "para", "indent": 4, "text": ["See also ", {"scheme": "Hom", "value": "/hom/hou/ui#readInput", "type": "link", "text": "", "fallback_text": "hou.ui.readInput", "fullpath": "/hom/hou/ui#readInput", "fragment": "#readInput"}, " "], "extent": [17848, 17887]}], "container": true, "attrs": {"cppname": "HOM_ui::readMultiInput"}, "id": "readMultiInput"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["selectFile(start_directory=None, title=None, collapse_sequences=False, file_type=hou.fileType.Any, pattern=None, default_value=None, multiple_select=False, image_chooser=None, chooser_mode=hou.fileChooserMode.ReadAndWrite, width=0, height=0)"]}, "  \u2192 ", {"type": "code", "text": ["str"]}], "role": "item", "extent": [17887, 18143], "body": [{"type": "para", "indent": 4, "text": ["Pop up a window with a file chooser dialog and wait for the user to\n    choose a file name.  Return the path to the file that was selected."], "extent": [18213, 18358]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["start_directory"], "extent": [18358, 18379], "body": [{"type": "para", "indent": 12, "text": ["The directory the dialog should initially start in."], "extent": [18379, 18443]}, {"type": "para", "indent": 8, "text": ["On Windows you must use ", {"type": "strong", "text": ["forward slashes"]}, " (", {"type": "code", "text": ["/"]}, ") in this path instead of backslashes (", {"type": "code", "text": ["\\"]}, "). For example, ", {"type": "code", "text": ["start_directory=\"D:/temp\""]}, "."], "extent": [18443, 18585]}], "container": true}, {"type": "dt", "indent": 4, "text": ["title"], "extent": [18585, 18596], "body": [{"type": "para", "indent": 12, "text": ["The window title for the dialog."], "extent": [18596, 18642]}], "container": true}, {"type": "dt", "indent": 4, "text": ["collapse_sequences"], "extent": [18642, 18666], "body": [{"type": "para", "indent": 12, "text": ["Whether sequences of files with common numeric patterns should be\n            collapsed into patterns containing $F."], "extent": [18666, 18796]}], "container": true}, {"type": "dt", "indent": 4, "text": ["file_type"], "extent": [18796, 18811], "body": [{"type": "para", "indent": 12, "text": ["A ", {"scheme": "Hom", "value": "/hom/hou/fileType", "type": "link", "text": "", "fallback_text": "hou.fileType", "fullpath": "/hom/hou/fileType"}, " enumerated value to say what type of file to\n            select.  The set of visible files is determined by this file type\n            and the pattern."], "extent": [18811, 18997]}], "container": true}, {"type": "dt", "indent": 4, "text": ["pattern"], "extent": [18997, 19010], "body": [{"type": "para", "indent": 12, "text": ["Only files matching this pattern (and anything restricted by the file\n            type) will be listed.  By default, everything matches the pattern."], "extent": [19010, 19172]}, {"type": "warning_group", "body": [{"type": "warning", "indent": 12, "role": "item", "extent": [19172, 19193], "body": [{"type": "para", "indent": 16, "text": ["When a default value of ", {"type": "code", "text": ["None"]}, " is used, the pattern will be the\n                same as what the file dialog of the given ", {"type": "var", "text": ["file_type"]}, " last\n                used. Always use an explicit value for ", {"type": "var", "text": ["pattern"]}, " if you want\n                it to be predictable."], "extent": [19193, 19468]}], "container": true}], "container": true, "role": "item_group"}], "container": true}, {"type": "dt", "indent": 4, "text": ["default_value"], "extent": [19468, 19487], "body": [{"type": "para", "indent": 12, "text": ["The default contents of the file name field in the dialog."], "extent": [19487, 19559]}], "container": true}, {"type": "dt", "indent": 4, "text": ["multiple_select"], "extent": [19559, 19580], "body": [{"type": "para", "indent": 12, "text": ["Whether the user may select multiple files."], "extent": [19580, 19637]}], "container": true}, {"type": "dt", "indent": 4, "text": ["image_chooser"], "extent": [19637, 19656], "body": [{"type": "para", "indent": 12, "text": ["Whether the dialog shows image thumbnails (True/False). If ", {"type": "code", "text": ["None"]}, "\n            ", {"type": "code", "text": ["Show Images for Image Files in File Browsers"]}, " setting\n            (", {"type": "ui", "text": ["Edit \u25b8 Preferences \u25b8 General User Interface"]}, ") will be used."], "extent": [19656, 19878]}], "container": true}, {"type": "dt", "indent": 4, "text": ["chooser_mode"], "extent": [19878, 19896], "body": [{"type": "para", "indent": 12, "text": ["A ", {"scheme": "Hom", "value": "/hom/hou/fileChooserMode", "type": "link", "text": "", "fallback_text": "hou.fileChooserMode", "fullpath": "/hom/hou/fileChooserMode"}, " enumeration value to say if the user is\n            being prompted for a file to read from, write to, or either."], "extent": [19896, 20050]}], "container": true}, {"type": "dt", "indent": 4, "text": ["width"], "extent": [20050, 20061], "body": [{"type": "para", "indent": 12, "text": ["The chooser dialog\u2019s width.  If 0, then the chooser dialog uses a\n            default width."], "extent": [20061, 20167]}], "container": true}, {"type": "dt", "indent": 4, "text": ["height"], "extent": [20167, 20179], "body": [{"type": "para", "indent": 12, "text": ["The chooser dialog\u2019s height.  If 0, then the chooser dialog uses a\n            default height."], "extent": [20179, 20287]}], "container": true}], "container": true}], "container": true, "attrs": {"cppname": "HOM_ui::selectFile", "replaces": "/commands/filechooser"}, "id": "selectFile"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["selectFromList(choices, default_choices=(), exclusive=False, message=None, title=None, column_header=\"Choices\", num_visible_rows=10, clear_on_cancel=False, width=0, height=0)"]}, "  \u2192 ", {"type": "code", "text": ["tuple"]}, " of ", {"type": "code", "text": ["int"]}], "role": "item", "extent": [20287, 20487], "body": [{"type": "para", "indent": 4, "text": ["Pop up a window with a set of choices in a list box and prompt the user to\n    choose zero or more of them.  If selection is accepted then the list of\n    selected row indices are returned.  If selection is canceled then the\n    initial selection (default choices) is returned."], "extent": [20561, 20844]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["choices"], "extent": [20844, 20857], "body": [{"type": "para", "indent": 12, "text": ["A sequence of strings containing the possible choices."], "extent": [20857, 20925]}], "container": true}, {"type": "dt", "indent": 4, "text": ["default_choices"], "extent": [20925, 20946], "body": [{"type": "para", "indent": 12, "text": ["A sequence of integers containing the indices of the choices that\n            are initially selected."], "extent": [20946, 21061]}], "container": true}, {"type": "dt", "indent": 4, "text": ["exclusive"], "extent": [21061, 21076], "body": [{"type": "para", "indent": 12, "text": ["Whether or not the user must choose exactly one of the possible choices."], "extent": [21076, 21162]}], "container": true}, {"type": "dt", "indent": 4, "text": ["message"], "extent": [21162, 21175], "body": [{"type": "para", "indent": 12, "text": ["The message to display above the list box."], "extent": [21175, 21231]}], "container": true}, {"type": "dt", "indent": 4, "text": ["title"], "extent": [21231, 21242], "body": [{"type": "para", "indent": 12, "text": ["The window\u2019s title.  If ", {"type": "code", "text": ["None"]}, ", the title is ", {"type": "q", "text": ["Houdini"]}, "."], "extent": [21242, 21311]}], "container": true}, {"type": "dt", "indent": 4, "text": ["column_header"], "extent": [21311, 21330], "body": [{"type": "para", "indent": 12, "text": ["The column header for the list of choices.  Users can click this header\n            label to sort the list.  If ", {"type": "code", "text": ["None"]}, ", then the header is removed.  Note that\n            the tuple of integers represents the original order of items,\n            regardless of the displayed sort order."], "extent": [21330, 21628]}], "container": true}, {"type": "dt", "indent": 4, "text": ["num_visible_rows"], "extent": [21628, 21650], "body": [{"type": "para", "indent": 12, "text": ["The number of rows of entries that are visible at a time.  If there\n            are more possible choices than visible rows, Houdini will use a\n            scrollbar."], "extent": [21650, 21830]}], "container": true}, {"type": "dt", "indent": 4, "text": ["clear_on_cancel"], "extent": [21830, 21851], "body": [{"type": "para", "indent": 12, "text": ["If set to True then an empty tuple is returned when selection is canceled.\n            Otherwise the initial selection (default_choices) is returned when\n            selection is canceled."], "extent": [21851, 22053]}], "container": true}, {"type": "dt", "indent": 4, "text": ["width"], "extent": [22053, 22064], "body": [{"type": "para", "indent": 12, "text": ["The chooser dialog\u2019s width.  If 0, then the chooser dialog uses a\n            default width."], "extent": [22064, 22170]}], "container": true}, {"type": "dt", "indent": 4, "text": ["height"], "extent": [22170, 22182], "body": [{"type": "para", "indent": 12, "text": ["The chooser dialog\u2019s height.  If 0, then the chooser dialog uses a\n            default height."], "extent": [22182, 22290]}], "container": true}], "container": true}], "container": true, "attrs": {"cppname": "HOM_ui::selectFromList", "replaces": "/commands/listchooser"}, "id": "selectFromList"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["selectFromTree(choices, picked=(), exclusive=False, message=None, title=None, clear_on_cancel=False, width=0, height=0)"]}, "  \u2192 ", {"type": "code", "text": ["tuple"]}, " of ", {"type": "code", "text": ["str"]}], "role": "item", "extent": [22290, 22435], "body": [{"type": "para", "indent": 4, "text": ["Pop up a window with a set of choices in a tree chooser and prompt the user\n    to choose zero or more of them.  The choices are arranged into a tree using\n    a forward slash as a path separator.  If selection is accepted then the\n    list of selected paths are returned.  If selection is canceled then\n    the initial selection (picked) is returned."], "extent": [22509, 22866]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["choices"], "extent": [22866, 22879], "body": [{"type": "para", "indent": 12, "text": ["A sequence of strings containing the possible choices."], "extent": [22879, 22947]}], "container": true}, {"type": "dt", "indent": 4, "text": ["picked"], "extent": [22947, 22959], "body": [{"type": "para", "indent": 12, "text": ["A sequence of strings containing the items that should be\n            initially selected."], "extent": [22959, 23062]}], "container": true}, {"type": "dt", "indent": 4, "text": ["exclusive"], "extent": [23062, 23077], "body": [{"type": "para", "indent": 12, "text": ["Whether or not the user must choose exactly one of the possible choices."], "extent": [23077, 23163]}], "container": true}, {"type": "dt", "indent": 4, "text": ["message"], "extent": [23163, 23176], "body": [{"type": "para", "indent": 12, "text": ["The message to display above the list box."], "extent": [23176, 23232]}], "container": true}, {"type": "dt", "indent": 4, "text": ["title"], "extent": [23232, 23243], "body": [{"type": "para", "indent": 12, "text": ["The window\u2019s title.  If ", {"type": "code", "text": ["None"]}, ", the title is ", {"type": "q", "text": ["Make Selection"]}, "."], "extent": [23243, 23319]}], "container": true}, {"type": "dt", "indent": 4, "text": ["clear_on_cancel"], "extent": [23319, 23340], "body": [{"type": "para", "indent": 12, "text": ["If set to True then an empty tuple is returned when selection is canceled.\n            Otherwise the initial selection (picked) is returned when\n            selection is canceled."], "extent": [23340, 23533]}], "container": true}, {"type": "dt", "indent": 4, "text": ["width"], "extent": [23533, 23544], "body": [{"type": "para", "indent": 12, "text": ["The chooser dialog\u2019s width.  If 0, then the chooser dialog uses a\n            default width."], "extent": [23544, 23650]}], "container": true}, {"type": "dt", "indent": 4, "text": ["height"], "extent": [23650, 23662], "body": [{"type": "para", "indent": 12, "text": ["The chooser dialog\u2019s height.  If 0, then the chooser dialog uses a\n            default height."], "extent": [23662, 23770]}], "container": true}], "container": true}], "container": true, "attrs": {"cppname": "HOM_ui::selectFromTree", "replaces": "/commands/treechooser"}, "id": "selectFromTree"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["selectNode(relative_to_node=None, initial_node=None, node_type_filter=None, title=None, width=0, height=0, multiple_select=False, custom_node_filter_callback=None)"]}, "  \u2192 ", {"type": "code", "text": ["str"]}, ", ", {"type": "code", "text": ["list of str"]}, ", or ", {"type": "code", "text": ["None"]}], "role": "item", "extent": [23770, 23975], "body": [{"type": "para", "indent": 4, "text": ["Pop up a window with a node tree view and prompt the user to choose a node."], "extent": [24008, 24089]}, {"type": "para", "indent": 4, "text": ["If the user selects a node, returns a string containing the path to the\n    node.  If the user presses clear, returns ", {"type": "code", "text": ["None"]}, ".  If the user\n    presses cancel, returns ", {"type": "code", "text": ["None"]}, ". If the user sets multiple_select to ", {"type": "code", "text": ["True"]}, ",\n    returns a list of strings containing the selected paths, or ", {"type": "code", "text": ["None"]}, " if clear or\n    cancel were pressed."], "extent": [24089, 24421]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["relative_to_node"], "extent": [24421, 24443], "body": [{"type": "para", "indent": 12, "text": ["A ", {"scheme": "Hom", "value": "/hom/hou/Node", "type": "link", "text": "", "fallback_text": "hou.Node", "fullpath": "/hom/hou/Node"}, " for relative paths, or ", {"type": "code", "text": ["None"]}, " if relative paths are\n            not supported.  Passing in a node enables the Use Relative Paths\n            checkbox."], "extent": [24443, 24624]}, {"type": "para", "indent": 12, "text": ["If this parameter is supplied and the user checks the Use Relative\n            Paths checkbox, this function returns a relative path to the node."], "extent": [24624, 24783]}], "container": true}, {"type": "dt", "indent": 4, "text": ["initial_node"], "extent": [24783, 24801], "body": [{"type": "para", "indent": 12, "text": ["The ", {"scheme": "Hom", "value": "/hom/hou/Node", "type": "link", "text": "", "fallback_text": "hou.Node", "fullpath": "/hom/hou/Node"}, " that is initially selected."], "extent": [24801, 24861]}], "container": true}, {"type": "dt", "indent": 4, "text": ["node_type_filter"], "extent": [24861, 24883], "body": [{"type": "para", "indent": 12, "text": ["An optional ", {"scheme": "Hom", "value": "/hom/hou/nodeTypeFilter", "type": "link", "text": "", "fallback_text": "hou.nodeTypeFilter", "fullpath": "/hom/hou/nodeTypeFilter"}, " enumerated value that determines\n            which types of nodes appear in the tree view."], "extent": [24883, 25028]}], "container": true}, {"type": "dt", "indent": 4, "text": ["title"], "extent": [25028, 25039], "body": [{"type": "para", "indent": 12, "text": ["The chooser dialog\u2019s window title.  If set to ", {"type": "code", "text": ["None"]}, " then the window\n            title defaults to ", {"type": "q", "text": ["Choose Operator"]}, "."], "extent": [25039, 25170]}], "container": true}, {"type": "dt", "indent": 4, "text": ["width"], "extent": [25170, 25181], "body": [{"type": "para", "indent": 12, "text": ["The chooser dialog\u2019s width.  If 0, then the chooser dialog uses a\n            default width."], "extent": [25181, 25287]}], "container": true}, {"type": "dt", "indent": 4, "text": ["height"], "extent": [25287, 25299], "body": [{"type": "para", "indent": 12, "text": ["The chooser dialog\u2019s height.  If 0, then the chooser dialog uses a\n            default height."], "extent": [25299, 25407]}], "container": true}, {"type": "dt", "indent": 4, "text": ["multiple_select"], "extent": [25407, 25428], "body": [{"type": "para", "indent": 12, "text": ["Whether or not multiple nodes can be selected in the chooser. If set to\n            ", {"type": "code", "text": ["True"]}, " then the return type will be a list of paths. If set to ", {"type": "code", "text": ["False"]}, " \n            the return type will be a string containing the name of the path."], "extent": [25428, 25675]}], "container": true}, {"type": "dt", "indent": 4, "text": ["custom_node_filter_callback"], "extent": [25675, 25708], "body": [{"type": "para", "indent": 8, "text": ["A Python callback function that is invoked for each node in the chooser\n        dialog. The callback accepts a single ", {"scheme": "Hom", "value": "/hom/hou/Node", "type": "link", "text": "", "fallback_text": "hou.Node", "fullpath": "/hom/hou/Node"}, " argument and\n        returns a boolean of whether or not the node should be shown in the \n        chooser dialog."], "extent": [25708, 25964]}], "container": true}], "container": true}, {"type": "para", "indent": 4, "text": ["The following function takes a ", {"scheme": "Hom", "value": "/hom/hou/Parm", "type": "link", "text": "", "fallback_text": "hou.Parm", "fullpath": "/hom/hou/Parm"}, ", prompts the user to choose\n    a node, and sets the value of the parameter as long as the user does not\n    click cancel."], "extent": [25964, 26137]}, {"lang": "python", "type": "pre", "indent": 4, "text": ["\n    def setParmOnNode(parm, node_type_filter=None):\n            path = hou.ui.selectNode(relative_to_node=parm.node(), node_type_filter=node_type_filter)\n            if path is not None:\n                parm.set(path)\n    "], "extent": [26137, 26384]}, {"type": "para", "indent": 4, "text": ["You might call this function as follows:"], "extent": [26384, 26430]}, {"lang": "pycon", "type": "pre", "indent": 4, "text": ["\n    >>> setParmOnNode(hou.parm(\"/obj/box_object1/shop_materialpath\"), hou.nodeTypeFilter.Shop)\n    "], "extent": [26430, 26553]}, {"type": "para", "indent": 4, "text": ["Here is an example of specifying a custom node filter:"], "extent": [26553, 26613]}, {"lang": "python", "type": "pre", "indent": 4, "text": ["\n    # Define the callback for filtering nodes.\n    def hasNumberInName(node):\n        # Only show nodes with numbers in the name.\n        for letter in node.name():\n            if letter in \"1234567890\":\n                return True\n\n        # Don't show nodes without a number in the name.\n        return False\n\n    # Prompt the user to select node data.\n    selected_data = hou.ui.selectNode(custom_node_filter_callback=hasNumberInName)\n\n    # Output the selected data.\n    print selected_data\n    "], "extent": [26613, 27137]}], "container": true, "attrs": {"cppname": "HOM_ui::selectNode"}, "id": "selectNode"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["selectMultipleNodes(relative_to_node=None, initial_node=None, node_type_filter=None, title=None, width=0, height=0, custom_node_filter_callback=None)"]}, "  \u2192 ", {"type": "code", "text": ["tuple"]}, " of ", {"type": "code", "text": ["str"]}, " or ", {"type": "code", "text": ["None"]}], "role": "item", "extent": [27137, 27324], "body": [{"type": "para", "indent": 4, "text": ["This method is deprecated in favor of ", {"scheme": "Hom", "value": "/hom/hou/ui#selectNode", "type": "link", "text": "", "fallback_text": "hou.ui.selectNode", "fullpath": "/hom/hou/ui#selectNode", "fragment": "#selectNode"}, ".\n    Same behavior as selectNode however if the user holds 'Ctrl' they\n    can select multiple nodes which are returned as a list of paths."], "extent": [27367, 27574]}], "container": true, "attrs": {"cppname": "HOM_ui::selectMultipleNodes"}, "id": "selectMultipleNodes"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["selectAttrib(initial_selection=(), multiple_select=False, expand_components=True, width=0, height=0)"]}, "  \u2192 ", {"type": "code", "text": ["tuple"]}, " of ", {"type": "code", "text": ["([Hom:hou.Attrib], int)"]}], "role": "item", "extent": [27574, 27719], "body": [{"type": "para", "indent": 4, "text": ["Pop up a chooser dialog that prompts the user to select a geometry\n    attribute in the scene.  Return a tuple of the selected attributes\n    represented as pairs of ", {"scheme": "Hom", "value": "/hom/hou/Attrib", "type": "link", "text": "", "fallback_text": "hou.Attrib", "fullpath": "/hom/hou/Attrib"}, " and integer values.  Return\n    an empty tuple if the selection operation was canceled."], "extent": [27754, 28030]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["initial_selection"]}], "extent": [28030, 28055], "body": [{"type": "para", "indent": 8, "text": ["Optionally set this argument to a tuple of attributes to be\n        pre-selected when the chooser dialog opens.  The tuple must contain\n        pairs of ", {"scheme": "Hom", "value": "/hom/hou/Attrib", "type": "link", "text": "", "fallback_text": "hou.Attrib", "fullpath": "/hom/hou/Attrib"}, " and integer pairs.  This matches the\n        structure of the tuple that is returned by the function.  If\n        ", {"type": "code", "text": ["expand_components"]}, " is set to True then the integer values in the tuple\n        must be set to -1."], "extent": [28055, 28447]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["multiple_select"]}], "extent": [28447, 28470], "body": [{"type": "para", "indent": 8, "text": ["If set to True then the user can select multiple attributes from the\n        chooser dialog."], "extent": [28470, 28572]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["expand_components"]}], "extent": [28572, 28597], "body": [{"type": "para", "indent": 8, "text": ["If set to True then the chooser dialog displays the components of the\n        attributes (i.e. ", {"type": "code", "text": ["P[0]"]}, ", ", {"type": "code", "text": ["P[1]"]}, ", ", {"type": "code", "text": ["P[2]"]}, ") and the user is prompted to\n        select an attribute component.  In this case the integer values in the\n        returned tuple are set to selected component indices."], "extent": [28597, 28894]}, {"type": "para", "indent": 8, "text": ["If set to False then the user is prompted to select attributes and the\n        integer values in the returned tuple are set to -1."], "extent": [28894, 29034]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["width"]}], "extent": [29034, 29047], "body": [{"type": "para", "indent": 12, "text": ["The chooser dialog\u2019s width.  If 0, then the chooser dialog uses a\n            default width."], "extent": [29047, 29153]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["height"]}], "extent": [29153, 29167], "body": [{"type": "para", "indent": 12, "text": ["The chooser dialog\u2019s height.  If 0, then the chooser dialog uses a\n            default height."], "extent": [29167, 29275]}], "container": true}], "container": true}, {"type": "para", "indent": 4, "text": ["Example:"], "extent": [29275, 29288]}, {"lang": "python", "type": "pre", "indent": 4, "text": ["\n    # Pre-select the 2nd component of the 'myAttr' point attribute on the\n    # /obj/geo1/OUT Sop node.\n    attrib = hou.node(\"/obj/geo1/OUT\").geometry().findPointAttrib(\"myAttr\")\n    attrib_component_index = 1\n    preselected_attribs=((attrib, attrib_component_index), )\n\n    # Prompt the user to select an attribute.\n    selected_attribs = hou.ui.selectAttrib(\n        initial_selection=preselected_attribs)\n\n    # Output the selected attribute.\n    print selected_attribs\n    "], "extent": [29288, 29792]}, {"type": "para", "indent": 4, "text": ["Example with ", {"type": "code", "text": ["expand_components"]}, " set to False:"], "extent": [29792, 29844]}, {"lang": "python", "type": "pre", "indent": 4, "text": ["\n    # Pre-select the 'myAttr' point attribute on the\n    # /obj/geo1/OUT Sop node.\n    attrib = hou.node(\"/obj/geo1/OUT\").geometry().findPointAttrib(\"myAttr\")\n    attrib_component_index = -1\n    preselected_attribs=((attrib, attrib_component_index), )\n\n    # Prompt the user to select an attribute.\n    selected_attribs = hou.ui.selectAttrib(\n        initial_selection=preselected_attribs,\n        expand_components=False)\n\n    # Output the selected attribute.\n    print selected_attribs\n    "], "extent": [29844, 30361]}], "container": true, "attrs": {"cppname": "HOM_ui::selectAttrib"}, "id": "selectAttrib"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["selectNodeData(title=None, message=None, width=0, height=0, initial_selection=0, node_type_filter=None, multiple_select=False, include_data_type_headers=True, include_parms=True, include_object_transforms=True, include_geometry_bounding_boxes=True, include_geometry_attributes=True, expand_components=True, custom_data_callback=None, custom_node_filter_callback=None, help_url=None)"]}, "  \u2192 ", {"type": "code", "text": ["dict"]}], "role": "item", "extent": [30361, 30759], "body": [{"type": "para", "indent": 4, "text": ["Pop up a chooser dialog that prompts the user to select data from a node.\n    The data can be a parameter, a component from an object node\u2019s transform,\n    a geometry node\u2019s bounding box property, a geometry attribute, or even\n    custom data defined by the ", {"type": "code", "text": ["custom_data_callback"]}, " argument.  Return a\n    dictionary of selected data organized by the following keys :"], "extent": [30805, 31185]}, {"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": ["Parameters"], "extent": [31185, 31202], "body": [{"type": "para", "indent": 8, "text": ["Contains a tuple of selected parameters.  The elements in the tuple\n        are ", {"scheme": "Hom", "value": "/hom/hou/Parm", "type": "link", "text": "", "fallback_text": "hou.Parm", "fullpath": "/hom/hou/Parm"}, " objects.  If ", {"type": "code", "text": ["expand_components"]}, " is False then\n        the elements are ", {"scheme": "Hom", "value": "/hom/hou/ParmTuple", "type": "link", "text": "", "fallback_text": "hou.ParmTuple", "fullpath": "/hom/hou/ParmTuple"}, " objects."], "extent": [31202, 31406]}], "container": true}, {"blevel": 6, "type": "bullet", "indent": 4, "text": ["Transforms"], "extent": [31406, 31423], "body": [{"type": "para", "indent": 8, "text": ["Contains a tuple of selected object node transforms or \n        transform components.  The elements in the tuple are 3-tuples of the\n        form ", {"type": "code", "text": ["(node, transform_type, transform_component)"]}, " where ", {"type": "code", "text": ["node"]}, " is the\n        ", {"scheme": "Hom", "value": "/hom/hou/Node", "type": "link", "text": "", "fallback_text": "hou.Node", "fullpath": "/hom/hou/Node"}, " object that the selected transform is pulled from,\n        ", {"type": "code", "text": ["transform_type"]}, " is the type of transform (either Local or World), and\n        ", {"type": "code", "text": ["transform_component"]}, " is the specific component selected from the\n        transform (i.e. ", {"type": "code", "text": ["Rotate[X]"]}, ").  If the whole transform is selected\n        instead of a component then ", {"type": "code", "text": ["transform_component"]}, " is ", {"type": "code", "text": ["None"]}, "."], "extent": [31423, 32013]}], "container": true}, {"blevel": 6, "type": "bullet", "indent": 4, "text": ["Bounding Boxes"], "extent": [32013, 32034], "body": [{"type": "para", "indent": 8, "text": ["Contains a tuple of selected geometry node bounding box properties.\n        The elements in the tuple are 2-tuples of the form \n        ", {"type": "code", "text": ["(node, bbox_property)"]}, " where ", {"type": "code", "text": ["node"]}, " is the ", {"scheme": "Hom", "value": "/hom/hou/Node", "type": "link", "text": "", "fallback_text": "hou.Node", "fullpath": "/hom/hou/Node"}, " object\n        that the selected bounding box property is pulled from, and\n        ", {"type": "code", "text": ["bbox_property"]}, " is the specific bounding box property (i.e. ", {"type": "code", "text": ["Size[X]"]}, ")."], "extent": [32034, 32392]}], "container": true}, {"blevel": 6, "type": "bullet", "indent": 4, "text": ["Attributes"], "extent": [32392, 32409], "body": [{"type": "para", "indent": 8, "text": ["Contains a tuple of selected geometry attributes or attribute\n        components.  The elements in the tuple are 2-tuples of the form\n        ", {"type": "code", "text": ["(attrib, attrib_index)"]}, " where ", {"type": "code", "text": ["attrib"]}, " is the selected \n        ", {"scheme": "Hom", "value": "/hom/hou/Attrib", "type": "link", "text": "", "fallback_text": "hou.Attrib", "fullpath": "/hom/hou/Attrib"}, " object and ", {"type": "code", "text": ["attrib_index"]}, " is the index of the selected\n        attribute component.  If ", {"type": "code", "text": ["expand_components"]}, " is False then\n        ", {"type": "code", "text": ["attrib_index"]}, " is always -1."], "extent": [32409, 32800]}], "container": true}, {"blevel": 6, "type": "bullet", "indent": 4, "text": ["Custom"], "extent": [32800, 32813], "body": [{"type": "para", "indent": 8, "text": ["Contains a tuple of selected custom data as specified by the\n        ", {"type": "code", "text": ["custom_data_callback"]}, " argument.  The elements in the tuple are\n        2-tuples of the form ", {"type": "code", "text": ["(node, custom_data)"]}, " where ", {"type": "code", "text": ["node"]}, " is the selected\n        ", {"scheme": "Hom", "value": "/hom/hou/Node", "type": "link", "text": "", "fallback_text": "hou.Node", "fullpath": "/hom/hou/Node"}, " object that the custom data is attached to and\n        ", {"type": "code", "text": ["custom_data"]}, " is the actual data."], "extent": [32813, 33147]}], "container": true}], "container": true}, {"type": "note_group", "body": [{"type": "note", "indent": 4, "role": "item", "extent": [33147, 33157], "body": [{"type": "para", "indent": 8, "text": ["If no data is selected for a specific key then the key does not exist\n        in the dictionary.  For example, if no parameters are selected then\n        the Parameters key does not exist."], "extent": [33157, 33355]}], "container": true}], "container": true, "role": "item_group"}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["title"]}], "extent": [33355, 33368], "body": [{"type": "para", "indent": 8, "text": ["The chooser dialog\u2019s window title.  If set to ", {"type": "code", "text": ["None"]}, " then the window\n        title defaults to ", {"type": "q", "text": ["Choose Node Data"]}, "."], "extent": [33368, 33492]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["message"]}], "extent": [33492, 33507], "body": [{"type": "para", "indent": 8, "text": ["Optional messaging to appear in the chooser dialog below the node data\n        tree."], "extent": [33507, 33601]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["width"]}], "extent": [33601, 33614], "body": [{"type": "para", "indent": 8, "text": ["The chooser dialog\u2019s width.  If 0, then the chooser dialog uses a\n        default width."], "extent": [33614, 33712]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["height"]}], "extent": [33712, 33726], "body": [{"type": "para", "indent": 8, "text": ["The chooser dialog\u2019s height.  If 0, then the chooser dialog uses a\n        default height."], "extent": [33726, 33826]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["initial_selection"]}], "extent": [33826, 33851], "body": [{"type": "para", "indent": 8, "text": ["Optionally set this argument to a dictionary of node data to be\n        pre-selected when the chooser dialog opens.  The dictionary must\n        contain at least one of the Parameters, Transforms, Attributes,\n        Custom keys.  The values of the keys must be tuples of elements that\n        match the elements of the returned dictionary.  For example, the\n        Parameters tuple must contain ", {"scheme": "Hom", "value": "/hom/hou/Parm", "type": "link", "text": "", "fallback_text": "hou.Parm", "fullpath": "/hom/hou/Parm"}, " or ", {"scheme": "Hom", "value": "/hom/hou/ParmTuple", "type": "link", "text": "", "fallback_text": "hou.ParmTuple", "fullpath": "/hom/hou/ParmTuple"}, "\n        objects.  The Transforms tuple must contain ", {"type": "code", "text": ["(node, transform_type,\n        transform_component)"]}, " tuples.  The Attributes tuple must contain\n        ", {"type": "code", "text": ["(attrib, attrib_index)"]}, " tuples.  The Custom tuple must contain\n        ", {"type": "code", "text": ["(node, custom_data)"]}, " tuples."], "extent": [33851, 34554]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["node_type_filter"]}], "extent": [34554, 34578], "body": [{"type": "para", "indent": 8, "text": ["An optional ", {"scheme": "Hom", "value": "/hom/hou/nodeTypeFilter", "type": "link", "text": "", "fallback_text": "hou.nodeTypeFilter", "fullpath": "/hom/hou/nodeTypeFilter"}, " enumerated value that determines\n        which types of nodes appear in the tree view."], "extent": [34578, 34711]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["multiple_select"]}], "extent": [34711, 34734], "body": [{"type": "para", "indent": 8, "text": ["If set to True then the user can select multiple node data from the\n        chooser dialog."], "extent": [34734, 34835]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["include_data_type_headers"]}], "extent": [34835, 34868], "body": [{"type": "para", "indent": 8, "text": ["If set to True then headers appear in the node data tree for each of the\n        data types (i.e. Parameters, Transforms, Attributes) except for the\n        Custom data type."], "extent": [34868, 35052]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["include_parms"]}], "extent": [35052, 35073], "body": [{"type": "para", "indent": 8, "text": ["Include parameters in the node data tree."], "extent": [35073, 35124]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["include_object_transforms"]}], "extent": [35124, 35157], "body": [{"type": "para", "indent": 8, "text": ["Include object transforms in the node data tree."], "extent": [35157, 35215]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["include_geometry_bounding_boxes"]}], "extent": [35215, 35254], "body": [{"type": "para", "indent": 8, "text": ["Include geometry bounding boxes in the node data tree."], "extent": [35254, 35318]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["include_geometry_attributes"]}], "extent": [35318, 35353], "body": [{"type": "para", "indent": 8, "text": ["Include geometry attributes in the node data tree."], "extent": [35353, 35413]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["expand_components"]}], "extent": [35413, 35438], "body": [{"type": "para", "indent": 8, "text": ["If set to True then the chooser dialog displays the sub-components of\n        parameters (i.e. ", {"type": "code", "text": ["tx"]}, " instead of ", {"type": "code", "text": ["t"]}, "), transforms (i.e.  ", {"type": "code", "text": ["Rotate[X]"]}, "\n        instead of ", {"type": "code", "text": ["Rotate"]}, ") and attributes (i.e. ", {"type": "code", "text": ["P[0]"]}, " instead of ", {"type": "code", "text": ["P"]}, ").  The\n        user is prompted to select sub-components instead of the complete data."], "extent": [35438, 35753]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["custom_data_callback"]}], "extent": [35753, 35781], "body": [{"type": "para", "indent": 8, "text": ["A Python callback function that is invoked for each node in the chooser\n        dialog.  The callback accepts a single ", {"scheme": "Hom", "value": "/hom/hou/Node", "type": "link", "text": "", "fallback_text": "hou.Node", "fullpath": "/hom/hou/Node"}, " argument and\n        returns a string tuple of custom data to appear in the node."], "extent": [35781, 36006]}, {"type": "para", "indent": 8, "text": ["You can specify subpaths for the custom data to organize them into\n        a tree hierarchy.  For example, if the callback returns\n        ", {"type": "code", "text": ["(\"Fruits/Apples\", \"Fruits/Bananas\", \"Fruits/Oranges\")"]}, " then a Fruits\n        row will appear in the node with Apples, Bananas and Oranges inside of\n        Fruits."], "extent": [36006, 36319]}, {"type": "para", "indent": 8, "text": ["Note that the non-leaf parts of a custom data path are not selectable.\n        If you want those parts to be selectable then return them as separate\n        entries in the tuple.  For example, if you want Fruits to also be\n        selectable then the callback should return ", {"type": "code", "text": ["(\"Fruits\", \"Fruits/Apples\",\n        \"Fruits/Bananas\", \"Fruits/Oranges\")"]}, "."], "extent": [36319, 36677]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["custom_node_filter_callback"]}], "extent": [36677, 36712], "body": [{"type": "para", "indent": 8, "text": ["A Python callback function that is invoked for each node in the chooser\n        dialog. The callback accepts a single ", {"scheme": "Hom", "value": "/hom/hou/Node", "type": "link", "text": "", "fallback_text": "hou.Node", "fullpath": "/hom/hou/Node"}, " argument and\n        returns a boolean of whether or not the node should be shown in the \n        chooser dialog."], "extent": [36712, 36968]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["help_url"]}], "extent": [36968, 36984], "body": [{"type": "para", "indent": 8, "text": ["Optional argument for associating a help page with the node data\n        chooser.  If this argument is specified then a '?' help button appears\n        in the chooser dialog."], "extent": [36984, 37168]}], "container": true}], "container": true}, {"type": "para", "indent": 4, "text": ["Basic Example:"], "extent": [37168, 37196]}, {"lang": "python", "type": "pre", "indent": 4, "text": ["\n    # Prompt to select node data.  Show all types of data.\n    selected_data = hou.ui.selectNodeData()\n\n    # Print out selected parameters (if any).\n    if \"Parameters\" in selected_data:\n        for parm in selected_data[\"Parameters\"]:\n            print \"Selected Parm: \", parm\n\n    # Print out selected object transforms (if any).\n    if \"Transforms\" in selected_data:\n        for xform_info in selected_data[\"Transforms\"]:\n            print \"Selected Node: \", xform_info[0]\n            print \"Selected Transform Type: \", xform_info[1]\n            print \"Selected Transform Component: \", xform_info[2]\n\n    # Print out selected geometry bounding boxes (if any).\n    if \"Bounding Boxes\" in selected_data:\n        for bbox_info in selected_data[\"Bounding Boxes\"]:\n            print \"Selected Node: \", bbox_info[0]\n            print \"Selected Bounding Box Property: \", bbox_info[1]\n\n    # Print out selected geometry attributes (if any).\n    if \"Attributes\" in selected_data:\n        for attr_info in selected_data[\"Attributes\"]:\n            print \"Selected Attribute: \", attr_info[0]\n            print \"Selected Attribute Index: \", attr_info[1]\n    "], "extent": [37196, 38370]}, {"type": "para", "indent": 4, "text": ["Here is an example of setting an initial selection:"], "extent": [38370, 38436]}, {"lang": "python", "type": "pre", "indent": 4, "text": ["\n    # Pre-select the 'tx', 'ty' and 'tz' parameters on /obj/geo1.\n    preselected_parms = (\n        hou.parm(\"/obj/geo1/tx\"), hou.parm(\"/obj/geo1/ty\"), \n        hou.parm(\"/obj/geo1/tz\"))\n\n    # Pre-select the scale z world transform component on /obj/geo1.\n    preselected_xforms = (\n        (hou.node(\"/obj/geo1\"), \"World\", \"Scale[Z]\"),\n    )\n\n    # Pre-select the centroid y bounding box property on /obj/geo1/OUT.\n    preselected_bboxes = (\n        (hou.node(\"/obj/geo1/OUT\"), \"Centroid[Y]\"),\n    )\n\n    # Pre-select the 2nd component of the 'myAttr' point attribute on the\n    # /obj/geo1/OUT Sop node.\n    attrib = hou.node(\"/obj/geo1/OUT\").geometry().findPointAttrib(\"myAttr\")\n    attrib_component_index = 1\n    preselected_attribs=((attrib, attrib_component_index), )\n\n    # Build up the initial selection dictionary.\n    initial_selection = {\n        \"Parameters\" : preselected_parms,\n        \"Transforms\" : preselected_xforms,\n        \"Bounding Boxes\" : preselected_bboxes,\n        \"Attributes\" : preselected_attribs,\n    }\n\n    # Prompt the user to select node data.\n    selected_data = hou.ui.selectNodeData(\n        initial_selection=initial_selection,\n        multiple_select=True)\n\n    # Output the selected data.\n    print selected_data\n    "], "extent": [38436, 39717]}, {"type": "para", "indent": 4, "text": ["Here is an example of specifying custom data:"], "extent": [39717, 39768]}, {"lang": "python", "type": "pre", "indent": 4, "text": ["\n    # Define the callback for returning custom data.\n    def getCustomData(node):\n        # Add custom data only on Object nodes.\n        if node.type().category().name() == \"Object\":\n            return [\"Fruits/Apples\", \"Fruits/Bananas\", \"Fruits/Oranges\"]\n\n        # Don't add custom data on all other nodes.\n        return []\n\n    # Prompt the user to select node data.\n    selected_data = hou.ui.selectNodeData(custom_data_callback=getCustomData)\n\n    # Output the selected data.\n    print selected_data\n    "], "extent": [39768, 40304]}, {"type": "para", "indent": 4, "text": ["Here is an example of specifying a custom node filter:"], "extent": [40304, 40364]}, {"lang": "python", "type": "pre", "indent": 4, "text": ["\n    # Define the callback for filtering nodes.\n    def hasNumberInName(node):\n        # Only show nodes with numbers in the name.\n        for letter in node.name():\n            if letter in \"1234567890\":\n                return True\n\n        # Don't show nodes without a number in the name.\n        return False\n\n    # Prompt the user to select node data.\n    selected_data = hou.ui.selectNodeData(custom_node_filter_callback=hasNumberInName)\n\n    # Output the selected data.\n    print selected_data\n    "], "extent": [40364, 40892]}], "container": true, "attrs": {"cppname": "HOM_ui::selectNodeData"}, "id": "selectNodeData"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["selectParmTag(width=0, height=0)"]}, "  \u2192 ", {"type": "code", "text": ["tuple"]}, " of ", {"type": "code", "text": ["str"]}], "role": "item", "extent": [40892, 40951], "body": [{"type": "para", "indent": 4, "text": ["Pop up a window with a tree view of recognized parameter tags and prompt\n    the user to choose a tag.  Parameter tags are metadata that can be attached\n    to a parameter template with ", {"scheme": "Hom", "value": "/hom/hou/ParmTemplate#setTags", "type": "link", "text": "", "fallback_text": "hou.ParmTemplate.setTags", "fullpath": "/hom/hou/ParmTemplate#setTags", "fragment": "#setTags"}, " and queried\n    with ", {"scheme": "Hom", "value": "/hom/hou/ParmTemplate#tags", "type": "link", "text": "", "fallback_text": "hou.ParmTemplate.tags", "fullpath": "/hom/hou/ParmTemplate#tags", "fragment": "#tags"}, "."], "extent": [40987, 41259]}, {"type": "para", "indent": 4, "text": ["Tags listed in the window are recognized by Houdini.  For example, choosing\n    the GL Diffuse tag and assigning it to a parameter template causes the\n    viewport to recognize the parameter as the diffuse color."], "extent": [41259, 41477]}, {"type": "para", "indent": 4, "text": ["This method returns a 2-tuple where the first element is the selected tag\n    name and the second element is the selected tag value.  If no tag is\n    selected or if the selection operation is canceled, then a 2-tuple of\n    empty strings is returned."], "extent": [41477, 41734]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["width"], "extent": [41734, 41745], "body": [{"type": "para", "indent": 12, "text": ["The chooser dialog\u2019s width.  If 0, then the chooser dialog uses a\n            default width."], "extent": [41745, 41851]}], "container": true}, {"type": "dt", "indent": 4, "text": ["height"], "extent": [41851, 41863], "body": [{"type": "para", "indent": 12, "text": ["The chooser dialog\u2019s height.  If 0, then the chooser dialog uses a\n            default height."], "extent": [41863, 41971]}], "container": true}], "container": true}], "container": true, "attrs": {"cppname": "HOM_ui::selectParmTag"}, "id": "selectParmTag"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["selectParm(category=None, bound_parms_only=False, relative_to_node=None, message=None, title=None, initial_parms=(), multiple_select=True, width=0, height=0)"]}, "  \u2192 ", {"type": "code", "text": ["tuple"]}, " of ", {"type": "code", "text": ["str"]}], "role": "item", "extent": [41971, 42154], "body": [{"type": "para", "indent": 4, "text": ["Pop up a window with a parameter tree view and prompts the user to select\n    parameters, populated initially with ", {"type": "code", "text": ["initial_parms"]}, ".  \n    If selection is accepted then a list of selected parameter paths are\n    returned.  If selection is canceled then the initial selection (initial\n    parameters) is returned."], "extent": [42187, 42504]}, {"type": "para", "indent": 4, "text": ["category:\n    A ", {"scheme": "Hom", "value": "/hom/hou/NodeTypeCategory", "type": "link", "text": "", "fallback_text": "hou.NodeTypeCategory", "fullpath": "/hom/hou/NodeTypeCategory"}, " if filtering by node type, otherwise ", {"type": "code", "text": ["None"]}, " \n    if all parameters should be shown"], "extent": [42504, 42635]}, {"type": "para", "indent": 4, "text": ["bound_parms_only:\n    True if the dialog should only display parameters that are bound to a default\n    handle. False is all parameters should be shown."], "extent": [42635, 42793]}, {"type": "para", "indent": 4, "text": ["relative_to_node:\n    A ", {"scheme": "Hom", "value": "/hom/hou/Node", "type": "link", "text": "", "fallback_text": "hou.Node", "fullpath": "/hom/hou/Node"}, " that you want the selected parameters paths to be relative to."], "extent": [42793, 42900]}, {"type": "para", "indent": 4, "text": ["message:\n    The message to display in the dialog."], "extent": [42900, 42956]}, {"type": "para", "indent": 4, "text": ["title:\n    The title of the dialog."], "extent": [42956, 43009]}, {"type": "para", "indent": 4, "text": ["multiple_select:\n    Whether the user may select multiple parameters."], "extent": [43009, 43084]}, {"type": "para", "indent": 4, "text": ["width:\n    The chooser dialog\u2019s width.  If 0, then the chooser dialog uses a\n    default width."], "extent": [43084, 43185]}, {"type": "para", "indent": 4, "text": ["height:\n    The chooser dialog\u2019s height.  If 0, then the chooser dialog uses a\n    default height."], "extent": [43185, 43289]}], "container": true, "attrs": {"cppname": "HOM_ui::selectParm"}, "id": "selectParm"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["selectParmTuple(category=None, bound_parms_only=False, relative_to_node=None, message=None, title=None, initial_parm_tuples=(), multiple_select=True, width=0, height=0)"]}, "  \u2192 ", {"type": "code", "text": ["tuple"]}, " of ", {"type": "code", "text": ["str"]}], "role": "item", "extent": [43289, 43483], "body": [{"type": "para", "indent": 4, "text": ["Pop up a window with a parameter tree view and prompts the user to select\n    parameter tuples, populated initially with ", {"type": "code", "text": ["initial_parm_tuples"]}, "."], "extent": [43521, 43670]}, {"type": "para", "indent": 4, "text": ["See ", {"scheme": "Hom", "value": "/hom/hou/ui#selectParm", "type": "link", "text": "", "fallback_text": "hou.ui.selectParm", "fullpath": "/hom/hou/ui#selectParm", "fragment": "#selectParm"}, " for documentation on the arguments."], "extent": [43670, 43739]}], "container": true, "attrs": {"cppname": "HOM_ui::selectParmTuple"}, "id": "selectParmTuple"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["selectColor(initial_color=None)"]}, "  \u2192 ", {"scheme": "Hom", "value": "/hom/hou/Color", "type": "link", "text": "", "fallback_text": "hou.Color", "fullpath": "/hom/hou/Color"}, " or ", {"type": "code", "text": ["None"]}], "role": "item", "extent": [43739, 43805], "body": [{"type": "para", "indent": 4, "text": ["Pop up a window with a color chooser, and waits for the user to choose a\n    color and hit the OK or Cancel button. If the user hits the OK button,\n    this method returns the color chosen in the dialog. If the user hits\n    Cancel, this method returns ", {"type": "code", "text": ["None"]}, "."], "extent": [43839, 44105]}, {"type": "para", "indent": 4, "text": ["The ", {"type": "code", "text": ["initial_color"]}, " parameter specifies a ", {"scheme": "Hom", "value": "/hom/hou/Color", "type": "link", "text": "", "fallback_text": "hou.Color", "fullpath": "/hom/hou/Color"}, " that will appear\n    in the dialog when it first opens. If not set, the initial color will be\n    white."], "extent": [44105, 44273]}], "container": true, "attrs": {"cppname": "HOM_ui::selectColor"}, "id": "selectColor"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["openColorEditor( color_change_callback, include_alpha=False, initial_color=None, initial_alpha=1.0)"]}], "role": "item", "extent": [44273, 44378], "body": [{"type": "para", "indent": 4, "text": ["Open the Houdini color editor and return immediately."], "extent": [44416, 44475]}, {"type": "para", "indent": 4, "text": ["When a change is made in the editor then the ", {"type": "code", "text": ["color_change_callback"]}, "\n    function is invoked and passed the editor\u2019s current color and alpha value."], "extent": [44475, 44628]}, {"type": "para", "indent": 4, "text": ["If ", {"type": "code", "text": ["include_alpha"]}, " is True then the color editor shows controls for editing\n    the color\u2019s alpha value."], "extent": [44628, 44738]}, {"type": "para", "indent": 4, "text": ["The ", {"type": "code", "text": ["initial_color"]}, " parameter specifies a ", {"scheme": "Hom", "value": "/hom/hou/Color", "type": "link", "text": "", "fallback_text": "hou.Color", "fullpath": "/hom/hou/Color"}, " that will appear\n    in the editor when it first opens. If not set, the initial color will be\n    white."], "extent": [44738, 44906]}, {"type": "para", "indent": 4, "text": ["The ", {"type": "code", "text": ["initial_alpha"]}, " parameter specifies an alpha value to use when\n    the editor first opens.  If not set, the initial alpha will be 1.0.\n    Note that the ", {"type": "code", "text": ["initial_alpha"]}, " parameter only applies if ", {"type": "code", "text": ["include_alpha"]}, "\n    is set to True."], "extent": [44906, 45146]}, {"type": "para", "indent": 4, "text": ["The ", {"type": "code", "text": ["color_change_callback"]}, " argument must be a function that accepts\n    two parameters \u2013 a ", {"scheme": "Hom", "value": "/hom/hou/Color", "type": "link", "text": "", "fallback_text": "hou.Color", "fullpath": "/hom/hou/Color"}, " object and an alpha value."], "extent": [45146, 45287]}, {"type": "para", "indent": 4, "text": ["Here is an example:"], "extent": [45287, 45311]}, {"lang": "python", "type": "pre", "indent": 4, "text": ["\n    def handleColorChange(color, alpha):\n        print \"Current color in editor:\", color, \", alpha=\", alpha\n\n    hou.ui.openColorEditor(handleColorChange)\n    "], "extent": [45311, 45495]}], "container": true, "attrs": {"cppname": "HOM_ui::openColorEditor"}, "id": "openColorEditor"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["openValueLadder(initial_value, value_changed_callback, type=hou.valueLadderType.Generic, data_type=hou.valueLadderDataType.Float)"]}], "role": "item", "extent": [45495, 45631], "body": [{"type": "para", "indent": 4, "text": ["Displays a ", {"type": "q", "text": ["value ladder"]}, " control, the UI that typically appears when you\n    press ", {"keys": ["MMB"], "type": "keys", "text": null}, " on a field in Houdini. This lets you display ladder controls\n    on your own custom UI, such as Qt edit fields."], "extent": [45670, 45879]}, {"type": "para", "indent": 4, "text": ["The typical workflow is:"], "extent": [45879, 45909]}, {"type": "ord_group", "body": [{"blevel": 6, "type": "ord", "indent": 4, "text": ["You should listen for ", {"keys": ["MMB"], "type": "keys", "text": null}, " press and release events on your field."], "extent": [45909, 45986]}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["When the user presses ", {"keys": ["MMB"], "type": "keys", "text": null}, " on the field, call this function to show\n      the ladder. The function returns immediately but the ladder stays visible."], "extent": [45986, 46145]}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["As the user moves the mouse with ", {"keys": ["MMB"], "type": "keys", "text": null}, " pressed down, you must call\n      ", {"scheme": "Hom", "value": "/hom/hou/ui#updateValueLadder", "type": "link", "text": "", "fallback_text": "hou.ui.updateValueLadder", "fullpath": "/hom/hou/ui#updateValueLadder", "fragment": "#updateValueLadder"}, " with the mouse pointer coordinates."], "extent": [46145, 46294]}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["The ladder calls the ", {"type": "code", "text": ["value_changed_callback"]}, " function you supplied as\n      the user changes the value."], "extent": [46294, 46412]}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["When the user releases ", {"keys": ["MMB"], "type": "keys", "text": null}, ", call ", {"scheme": "Hom", "value": "/hom/hou/ui#closeValueLadder", "type": "link", "text": "", "fallback_text": "hou.ui.closeValueLadder", "fullpath": "/hom/hou/ui#closeValueLadder", "fragment": "#closeValueLadder"}, "."], "extent": [46412, 46487]}], "container": true}, {"type": "para", "indent": 4, "text": ["Only one value ladder window can be open at a time.  This function raises\n    ", {"scheme": "Hom", "value": "/hom/hou/OperationFailed", "type": "link", "text": "", "fallback_text": "hou.OperationFailed", "fullpath": "/hom/hou/OperationFailed"}, " if another ladder window is currently open."], "extent": [46487, 46640]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["initial_value"]}], "extent": [46640, 46661], "body": [{"type": "para", "indent": 8, "text": ["The initial numeric value the ladder is set to when it opens."], "extent": [46661, 46732]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["value_changed_callback"]}], "extent": [46732, 46762], "body": [{"type": "para", "indent": 8, "text": ["A function that takes a single argument. As the user edits the number\n        with the ladder, the ladder calls this function with each new\n        value."], "extent": [46762, 46926]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["type"]}], "extent": [46926, 46938], "body": [{"type": "para", "indent": 8, "text": ["One of the values in ", {"scheme": "Hom", "value": "/hom/hou/valueLadderType", "type": "link", "text": "", "fallback_text": "hou.valueLadderType", "fullpath": "/hom/hou/valueLadderType"}, ". The available types\n        are ", {"type": "q", "text": ["Generic"]}, " and ", {"type": "q", "text": ["Angle"]}, ". This affects the increments on the ladder."], "extent": [46938, 47093]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["data_type"]}], "extent": [47093, 47110], "body": [{"type": "para", "indent": 8, "text": ["One of the values in ", {"scheme": "Hom", "value": "/hom/hou/valueLadderDataType", "type": "link", "text": "", "fallback_text": "hou.valueLadderDataType", "fullpath": "/hom/hou/valueLadderDataType"}, ". Integer and Float\n        ladders have different increments."], "extent": [47110, 47232]}], "container": true}], "container": true}, {"type": "para", "indent": 4, "text": ["This examples demonstrates how to add value ladder window support to an input\n    field class that derives from Qt\u2019s QLineEdit class:"], "extent": [47232, 47371]}, {"lang": "python", "type": "pre", "indent": 4, "text": ["\n\n    from PySide2 import QtWidgets\n    from PySide2.QtCore import Qt\n    import hou\n\n\n    class LineEditWithValueLadder(QtWidgets.QLineEdit):\n        def __init__(self, parent=None):\n            super(LineEditWithValueLadder, self).__init__(parent)\n            self._pressed = False\n\n        def mousePressEvent(self, event):\n            # Show the value ladder window if MMB was pressed.\n            if event.button() == Qt.MiddleButton:\n                try:\n                    hou.ui.openValueLadder(\n                        float(self.text()),\n                        self._ladderchange,\n                        data_type=hou.valueLadderDataType.Float\n                    )\n                except hou.OperationFailed:\n                    # A ladder is already open somewhere\n                    return\n                else:\n                    self._pressed = True\n\n        def mouseMoveEvent(self, event):\n            if self._pressed:\n                hou.ui.updateValueLadder(\n                    event.globalX(),\n                    event.globalY(),\n                    bool(event.modifiers() & Qt.AltModifier),\n                    bool(event.modifiers() & Qt.ShiftModifier)\n                )\n\n        def mouseReleaseEvent(self, event):\n            if event.button() == Qt.MiddleButton and self._pressed:\n                hou.ui.closeValueLadder()\n                self._pressed = False\n\n        def _ladderchange(self, new_value):\n            self.setText(str(new_value))\n    "], "extent": [47371, 48879]}], "container": true, "attrs": {"cppname": "HOM_ui::openValueLadder"}, "id": "openValueLadder"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["updateValueLadder(cursor_x, cursor_y, alt_key, shift_key)"]}], "role": "item", "extent": [48879, 48943], "body": [{"type": "para", "indent": 4, "text": ["Updates the value in the currently opened ladder value window based on the\n    given cursor position and boolean arguments."], "extent": [48984, 49113]}, {"type": "para", "indent": 4, "text": ["This function only works if ", {"scheme": "Hom", "value": "/hom/hou/ui#openValueLadder", "type": "link", "text": "", "fallback_text": "hou.ui.openValueLadder", "fullpath": "/hom/hou/ui#openValueLadder", "fragment": "#openValueLadder"}, " was previously\n    called.  Raises ", {"scheme": "Hom", "value": "/hom/hou/OperationFailed", "type": "link", "text": "", "fallback_text": "hou.OperationFailed", "fullpath": "/hom/hou/OperationFailed"}, " if no value ladder window is\n    currently open."], "extent": [49113, 49285]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["cursor_x"]}], "extent": [49285, 49301], "body": [{"type": "para", "indent": 8, "text": ["The horizontal coordinate of the current mouse cursor position."], "extent": [49301, 49374]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["cursor_y"]}], "extent": [49374, 49390], "body": [{"type": "para", "indent": 8, "text": ["The vertical coordinate of the current mouse cursor position."], "extent": [49390, 49461]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["alt_key"]}], "extent": [49461, 49476], "body": [{"type": "para", "indent": 8, "text": ["Whether the ", {"keys": ["Alt"], "type": "keys", "text": null}, " modifier key is currently held.\n        This scales the ladder value."], "extent": [49476, 49575]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["shift_key"]}], "extent": [49575, 49592], "body": [{"type": "para", "indent": 8, "text": ["Whether the ", {"keys": ["Shift"], "type": "keys", "text": null}, " modifier key is currently held.\n        This changes the ladder\u2019s active level."], "extent": [49592, 49703]}], "container": true}], "container": true}, {"type": "para", "indent": 4, "text": ["See ", {"scheme": "Hom", "value": "/hom/hou/ui#openValueLadder", "type": "link", "text": "", "fallback_text": "hou.ui.openValueLadder", "fullpath": "/hom/hou/ui#openValueLadder", "fragment": "#openValueLadder"}, " for more information."], "extent": [49703, 49763]}], "container": true, "attrs": {"cppname": "HOM_ui::updateValueLadder"}, "id": "updateValueLadder"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["closeValueLadder()"]}], "role": "item", "extent": [49763, 49787], "body": [{"type": "para", "indent": 4, "text": ["Closes the current value ladder window that was open by a previous call\n    to ", {"scheme": "Hom", "value": "/hom/hou/ui#openValueLadder", "type": "link", "text": "", "fallback_text": "hou.ui.openValueLadder", "fullpath": "/hom/hou/ui#openValueLadder", "fragment": "#openValueLadder"}, "."], "extent": [49827, 49941]}, {"type": "para", "indent": 4, "text": ["Raises ", {"scheme": "Hom", "value": "/hom/hou/OperationFailed", "type": "link", "text": "", "fallback_text": "hou.OperationFailed", "fullpath": "/hom/hou/OperationFailed"}, " if no value ladder window is open."], "extent": [49941, 50014]}, {"type": "para", "indent": 4, "text": ["See ", {"scheme": "Hom", "value": "/hom/hou/ui#openValueLadder", "type": "link", "text": "", "fallback_text": "hou.ui.openValueLadder", "fullpath": "/hom/hou/ui#openValueLadder", "fragment": "#openValueLadder"}, " for more information."], "extent": [50014, 50074]}], "container": true, "attrs": {"cppname": "HOM_ui::closeValueLadder"}, "id": "closeValueLadder"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["openParameterExpressionEditor(parm)"]}], "role": "item", "extent": [50074, 50115], "body": [{"type": "para", "indent": 4, "text": ["Open the expression editor to edit the expression of the given parameter."], "extent": [50168, 50247]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["parm"]}], "extent": [50247, 50259], "body": [{"type": "para", "indent": 8, "text": [{"scheme": "Hom", "value": "/hom/hou/Parm", "type": "link", "text": "", "fallback_text": "hou.Parm", "fullpath": "/hom/hou/Parm"}, " The parm whose expression to edit."], "extent": [50259, 50318]}], "container": true}], "container": true}], "container": true, "attrs": {"cppname": "HOM_ui::openParameterExpressionEditor"}, "id": "openParameterExpressionEditor"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["openPreferences(page)"]}], "role": "item", "extent": [50318, 50345], "body": [{"type": "para", "indent": 4, "text": ["Open the preferences dialog and show the given page."], "extent": [50384, 50442]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["page"]}], "extent": [50442, 50454], "body": [{"type": "para", "indent": 8, "text": ["A string that specifies the preference page to open. When\n        there are tabs under the page, ", {"type": "code", "text": ["page:tab"]}, " notation is used."], "extent": [50454, 50589]}, {"type": "para", "indent": 8, "text": ["The following values are supported:"], "extent": [50589, 50634]}, {"type": "table", "thead": [{"type": "row", "body": [{"type": "cell", "indent": 8, "text": [{"type": "code", "text": ["page"]}, " "], "role": "th", "extent": [50634, 50652], "container": true}, {"type": "cell", "indent": 12, "text": ["Page/Tab "], "role": "th", "extent": [50652, 50676]}], "divider": false}], "body": [{"type": "row", "body": [{"type": "cell", "indent": 8, "text": [{"type": "code", "text": ["ui"]}, " "], "role": "td", "extent": [50676, 50692], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 12, "text": ["General User Interface"], "extent": [50692, 50727]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 8, "text": [{"type": "code", "text": ["network"]}, " "], "role": "td", "extent": [50727, 50747], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 12, "text": ["Network Editor"], "extent": [50747, 50774]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 8, "text": [{"type": "code", "text": ["viewport"]}, " "], "role": "td", "extent": [50774, 50795], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 12, "text": ["3D Viewports"], "extent": [50795, 50820]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 8, "text": [{"type": "code", "text": ["shelves"]}, " "], "role": "td", "extent": [50820, 50840], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 13, "text": ["Shelf Tools and Tab Menu"], "extent": [50840, 50878]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 8, "text": [{"type": "code", "text": ["takes"]}, " "], "role": "td", "extent": [50878, 50896], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 12, "text": ["Takes"], "extent": [50896, 50914]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 8, "text": [{"type": "code", "text": ["anim"]}, " "], "role": "td", "extent": [50914, 50931], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 12, "text": ["Animation"], "extent": [50931, 50953]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 8, "text": [{"type": "code", "text": ["lighting"]}, " "], "role": "td", "extent": [50953, 50974], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 12, "text": ["Lighting"], "extent": [50974, 50995]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 8, "text": [{"type": "code", "text": ["rendering"]}, " "], "role": "td", "extent": [50995, 51017], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 12, "text": ["Rendering"], "extent": [51017, 51039]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 8, "text": [{"type": "code", "text": ["handles"]}, " "], "role": "td", "extent": [51039, 51059], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 12, "text": ["Handles"], "extent": [51059, 51079]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 8, "text": [{"type": "code", "text": ["states"]}, " "], "role": "td", "extent": [51079, 51098], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 12, "text": ["Interactive Tools"], "extent": [51098, 51128]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 8, "text": [{"type": "code", "text": ["objsops"]}, " "], "role": "td", "extent": [51128, 51148], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 12, "text": ["Objects and Geometry"], "extent": [51148, 51181]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 8, "text": [{"type": "code", "text": ["objsops:preferences"]}, " "], "role": "td", "extent": [51181, 51213], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 12, "text": ["Objects and Geometry > Preferences"], "extent": [51213, 51260]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 8, "text": [{"type": "code", "text": ["objsops:sop_cache"]}, " "], "role": "td", "extent": [51260, 51290], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 12, "text": ["Objects and Geometry > SOP Cache"], "extent": [51290, 51335]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 8, "text": [{"type": "code", "text": ["objsops:obj_cache"]}, " "], "role": "td", "extent": [51335, 51365], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 12, "text": ["Objects and Geometry > OBJ Cache"], "extent": [51365, 51410]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 8, "text": [{"type": "code", "text": ["chops"]}, " "], "role": "td", "extent": [51410, 51428], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 12, "text": ["Motion and Audio"], "extent": [51428, 51457]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 8, "text": [{"type": "code", "text": ["composites"]}, " "], "role": "td", "extent": [51457, 51480], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 12, "text": ["Compositing"], "extent": [51480, 51504]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 8, "text": [{"type": "code", "text": ["composites:cache"]}, " "], "role": "td", "extent": [51504, 51533], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 12, "text": ["Compositing > Cache"], "extent": [51533, 51565]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 8, "text": [{"type": "code", "text": ["composites:cooking"]}, " "], "role": "td", "extent": [51565, 51596], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 12, "text": ["Compositing > Cooking"], "extent": [51596, 51630]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 8, "text": [{"type": "code", "text": ["composites:interactive"]}, " "], "role": "td", "extent": [51630, 51665], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 12, "text": ["Compositing > Interactive"], "extent": [51665, 51703]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 8, "text": [{"type": "code", "text": ["composites:selectors"]}, " "], "role": "td", "extent": [51703, 51736], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 12, "text": ["Compositing > Selectors"], "extent": [51736, 51772]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 8, "text": [{"type": "code", "text": ["composites:names"]}, " "], "role": "td", "extent": [51772, 51801], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 12, "text": ["Compositing > Names"], "extent": [51801, 51833]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 8, "text": [{"type": "code", "text": ["composites:colors"]}, " "], "role": "td", "extent": [51833, 51863], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 12, "text": ["Compositing > Colors"], "extent": [51863, 51896]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 8, "text": [{"type": "code", "text": ["composites:cineon"]}, " "], "role": "td", "extent": [51896, 51926], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 12, "text": ["Compositing > Cineon"], "extent": [51926, 51959]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 8, "text": [{"type": "code", "text": ["scripting"]}, " "], "role": "td", "extent": [51959, 51981], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 12, "text": ["Scripting"], "extent": [51981, 52003]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 8, "text": [{"type": "code", "text": ["resmgr"]}, " "], "role": "td", "extent": [52003, 52022], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 12, "text": ["Desktops and Toolbars"], "extent": [52022, 52056]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 8, "text": [{"type": "code", "text": ["persistence"]}, " "], "role": "td", "extent": [52056, 52080], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 12, "text": ["Save and Load Options"], "extent": [52080, 52114]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 8, "text": [{"type": "code", "text": ["hipoptions"]}, " "], "role": "td", "extent": [52114, 52137], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 12, "text": ["Hip File Options"], "extent": [52137, 52166]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 8, "text": [{"type": "code", "text": ["warnings"]}, " "], "role": "td", "extent": [52166, 52187], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 12, "text": ["Warning Dialogs"], "extent": [52187, 52215]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 8, "text": [{"type": "code", "text": ["notifications"]}, " "], "role": "td", "extent": [52215, 52241], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 12, "text": ["Notifications"], "extent": [52241, 52267]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 8, "text": [{"type": "code", "text": ["perfmon"]}, " "], "role": "td", "extent": [52267, 52287], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 12, "text": ["Performance Options"], "extent": [52287, 52319]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 8, "text": [{"type": "code", "text": ["exttools"]}, " "], "role": "td", "extent": [52319, 52340], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 12, "text": ["External Tools"], "extent": [52340, 52367]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 8, "text": [{"type": "code", "text": ["misc"]}, " "], "role": "td", "extent": [52367, 52384], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 12, "text": ["Miscellaneous"], "extent": [52384, 52411]}]}], "divider": false}]}], "container": true}], "container": true}], "container": true, "attrs": {"cppname": "HOM_ui::openPreferences"}, "id": "openPreferences"}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Help"], "extent": [52411, 52422], "body": [{"type": "functions_item_group", "body": [{"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["displayNodeHelp(node_type)"]}], "role": "item", "extent": [52422, 52455], "body": [{"type": "para", "indent": 4, "text": ["Display the help for the specified node type.  If no help browser is open,\n    this function will create a new one."], "extent": [52525, 52646]}, {"type": "para", "indent": 4, "text": ["If you want to display the help for a node instance, it is easy to access\n    the ", {"scheme": "Hom", "value": "/hom/hou/NodeType", "type": "link", "text": "", "fallback_text": "hou.NodeType", "fullpath": "/hom/hou/NodeType"}, " from the node, as illustrated in this example:"], "extent": [52646, 52798]}, {"lang": "python", "type": "pre", "indent": 4, "text": ["\n    def displayHelpForNode(node):\n    '''Given a hou.Node, display its help.'''\n    hou.ui.displayNodeHelp(node.type())\n    "], "extent": [52798, 52947]}], "container": true, "attrs": {"cppname": "HOM_ui::displayNodeHelp", "replaces": "/commands/ophelp"}, "id": "displayNodeHelp"}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Windows"], "extent": [52947, 52962], "body": [{"type": "functions_item_group", "body": [{"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["openTypePropertiesDialog(node_or_node_type, promote_spare_parms=False, immediately_save=False)"]}], "role": "item", "extent": [52962, 53063], "body": [{"type": "para", "indent": 4, "text": ["Given a ", {"scheme": "Hom", "value": "/hom/hou/Node", "type": "link", "text": "", "fallback_text": "hou.Node", "fullpath": "/hom/hou/Node"}, " or ", {"scheme": "Hom", "value": "/hom/hou/NodeType", "type": "link", "text": "", "fallback_text": "hou.NodeType", "fullpath": "/hom/hou/NodeType"}, " instance, open the type\n    properties dialog."], "extent": [53166, 53263]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["promote_spare_parms"]}], "extent": [53263, 53290], "body": [{"type": "para", "indent": 12, "text": ["If this parameter is True and you passed in a node instance,\n            automatically promote any spare parameters on the node into\n            parameters on the node type."], "extent": [53290, 53477]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["immediately_save"]}], "extent": [53477, 53501], "body": [{"type": "para", "indent": 12, "text": ["When true, immediately save the current state of the node type,\n            as if you clicked ", {"type": "q", "text": ["Apply"]}, " in the type properties dialog."], "extent": [53501, 53647]}], "container": true}], "container": true}], "container": true, "attrs": {"cppname": "HOM_ui::openTypePropertiesDialog", "replaces": "/commands/otedit /commands/propertyedit"}, "id": "openTypePropertiesDialog"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["openParameterInterfaceDialog(node, open_tab = None, open_tab_tree_path = '')"]}], "role": "item", "extent": [53647, 53729], "body": [{"type": "para", "indent": 4, "text": ["Given a ", {"scheme": "Hom", "value": "/hom/hou/Node", "type": "link", "text": "", "fallback_text": "hou.Node", "fullpath": "/hom/hou/Node"}, ", open the parameter interface editor dialog. This\n    dialog is can be used to add or remove spare parameters, or rearrange the\n    parameter layout for a node."], "extent": [53780, 53969]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["open_tab"]}], "extent": [53969, 53985], "body": [{"type": "para", "indent": 12, "text": ["A ", {"scheme": "Hom", "value": "/hom/hou/parameterInterfaceTabType", "type": "link", "text": "", "fallback_text": "hou.parameterInterfaceTabType", "fullpath": "/hom/hou/parameterInterfaceTabType"}, " enum value that causes the\n            dialog to appear with a particular parameter source tab displayed."], "extent": [53985, 54142]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["open_tab_tree_path"]}], "extent": [54142, 54168], "body": [{"type": "para", "indent": 12, "text": ["If an ", {"type": "code", "text": ["open_tab"]}, " is specified, this parameter can further control\n            the state of the dialog when it opens. This string can specify a\n            full path to a branch in the tree of the open tab which will be\n            expanded and set as current."], "extent": [54168, 54441]}], "container": true}], "container": true}], "container": true, "attrs": {"cppname": "HOM_ui::openParameterInterfaceDialog"}, "id": "openParameterInterfaceDialog"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["openRenderDialog(rop_node)"]}], "role": "item", "extent": [54441, 54473], "body": [{"type": "para", "indent": 4, "text": ["Given a ", {"scheme": "Hom", "value": "/hom/hou/RopNode", "type": "link", "text": "", "fallback_text": "hou.RopNode", "fullpath": "/hom/hou/RopNode"}, " instance, open the render control dialog for\n    the node. This dialog can be used to override certain render parameters,\n    and launch a render."], "extent": [54512, 54690]}], "container": true, "attrs": {"cppname": "HOM_ui::openRenderDialog"}, "id": "openRenderDialog"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["openRenameSelectedDialog(node)"]}], "role": "item", "extent": [54690, 54726], "body": [{"type": "para", "indent": 4, "text": ["Given a ", {"scheme": "Hom", "value": "/hom/hou/Node", "type": "link", "text": "", "fallback_text": "hou.Node", "fullpath": "/hom/hou/Node"}, " which contains other nodes, open a dialog for\n    renaming all selected children of the node. The dialog uses pattern\n    matching to rename all the selected nodes in one operation."], "extent": [54773, 54983]}], "container": true, "attrs": {"cppname": "HOM_ui::openRenameSelectedDialog"}, "id": "openRenameSelectedDialog"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["displayFileDependencyDialog(rop_node=None, uploaded_files=(), forced_unselected_patterns=(), project_dir_variable='HIP', is_standalone=true)"]}, "  \u2192 (", {"type": "code", "text": ["bool"]}, ", tuple of Parm and string tuples)"], "role": "item", "extent": [54983, 55174], "body": [{"type": "para", "indent": 4, "text": ["Open a dialog displaying the file dependencies in the current .hip file."], "extent": [55224, 55302]}, {"type": "para", "indent": 4, "text": ["Return a 2-tuple where the first element in the tuple is True if the dialog\n    was closed with the OK button and False otherwise, and the second element\n    is a tuple of the selected file patterns.  Each selected file pattern is\n    represented as a <", {"scheme": "Hom", "value": "/hom/hou/Parm", "type": "link", "text": "", "fallback_text": "hou.Parm", "fullpath": "/hom/hou/Parm"}, ", string> pair which stores the source\n    parameter that contains the file pattern and the file pattern itself."], "extent": [55302, 55687]}, {"type": "note_group", "body": [{"type": "note", "indent": 4, "role": "item", "extent": [55687, 55697], "body": [{"type": "para", "indent": 12, "text": ["If the source parameter is not None then it is recommended that file\n            pattern expansion be performed by evaluating the parameter\u2019s value\n            instead of calling ", {"scheme": "Hom", "value": "/hom/hou/expandString", "type": "link", "text": "", "fallback_text": "hou.expandString", "fullpath": "/hom/hou/expandString"}, ".  Evaluating the source\n            parameter is far more accurate since it accounts for channel references\n            and context-specific variables like $OS."], "extent": [55697, 56073]}], "container": true}], "container": true, "role": "item_group"}], "container": true, "attrs": {"cppname": "HOM_ui::displayFileDependencyDialog"}, "id": "displayFileDependencyDialog"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["parameterPaneTabs(node,include_node_editors=True)"]}, "  \u2192 ", {"type": "code", "text": ["tuple"]}, " of ", {"scheme": "Hom", "value": "/hom/hou/ParameterEditor", "type": "link", "text": "", "fallback_text": "hou.ParameterEditor", "fullpath": "/hom/hou/ParameterEditor"}, " or ", {"scheme": "Hom", "value": "/hom/hou/NetworkEditor", "type": "link", "text": "", "fallback_text": "hou.NetworkEditor", "fullpath": "/hom/hou/NetworkEditor"}], "role": "item", "extent": [56217, 56339], "body": [{"type": "para", "indent": 4, "text": ["Return parameter editors displaying a given node. You can also choose to include node editors\n    with a displayed embedded parameter editor."], "extent": [56381, 56528]}], "container": true, "attrs": {"cppname": "HOM_Node::parameterPaneTabs"}, "id": "parameterPaneTabs"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["scrollToParmsInEditors(parms,pos=hou.scrollPosition.Center)"]}, "  \u2192 ", {"type": "code", "text": ["bool"]}], "role": "item", "extent": [56528, 56603], "body": [{"type": "para", "indent": 4, "text": ["Given a list or a single instance of ", {"scheme": "Hom", "value": "/hom/hou/Parm", "type": "link", "text": "", "fallback_text": "hou.Parm", "fullpath": "/hom/hou/Parm"}, " or ", {"scheme": "Hom", "value": "/hom/hou/ParmTuple", "type": "link", "text": "", "fallback_text": "hou.ParmTuple", "fullpath": "/hom/hou/ParmTuple"}, " adjust the \n    matching parameter editor scroll bars to make the parameters visible in the parameter editor scroll region. Returns True if valid parameter editors were found."], "extent": [56650, 56906]}], "container": true, "attrs": {"cppname": "HOM_Node::scrollToParmsInEditors"}, "id": "scrollToParmsInEditors"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["setMultiParmTabInEditors(parm,tab_index)"]}, "  \u2192 ", {"type": "code", "text": ["bool"]}], "role": "item", "extent": [56906, 56962], "body": [{"type": "para", "indent": 4, "text": ["Given a ", {"scheme": "Hom", "value": "/hom/hou/Parm", "type": "link", "text": "", "fallback_text": "hou.Parm", "fullpath": "/hom/hou/Parm"}, " representing a multi parameter parent, set the \n    multi parameter tab index in the parameter editor dialogs. The tab index\n    doesn\u2019t map to a node parameter.\n    Returns True if the parameter was found in opened parameter editors."], "extent": [57011, 57274]}], "container": true, "attrs": {"cppname": "HOM_Node::setMultiParmTabInEditors"}, "id": "setMultiParmTabInEditors"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["switchTabsToParmInEditors(parm)"]}, "  \u2192 ", {"type": "code", "text": ["bool"]}], "role": "item", "extent": [57274, 57321], "body": [{"type": "para", "indent": 4, "text": ["Given a ", {"scheme": "Hom", "value": "/hom/hou/Parm", "type": "link", "text": "", "fallback_text": "hou.Parm", "fullpath": "/hom/hou/Parm"}, " switch all the parent tabs folder to show the\n    parameter in the opened parameter editors.\n    Returns True if the parameter was found in opened parameter editors."], "extent": [57371, 57565]}], "container": true, "attrs": {"cppname": "HOM_Node::switchTabsToParmInEditors"}, "id": "switchTabsToParmInEditors"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["setParmFilterInEditors(node, parm_names)"]}, "  \u2192 ", {"type": "code", "text": ["bool"]}], "role": "item", "extent": [57565, 57621], "body": [{"type": "para", "indent": 4, "text": ["Given a node and a list of comma separated parameter names apply a search filter on the corresponding parameter editors. The string can also include wildcards. Returns True if valid parameter editors were found."], "extent": [57668, 57885]}], "container": true, "attrs": {"cppname": "HOM_Node::setParmFilterInEditors"}, "id": "setParmFilterInEditors"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["showFloatingParameterEditor(node,reuse)"]}, "  \u2192 ", {"scheme": "Hom", "value": "/hom/hou/ParameterEditor", "type": "link", "text": "", "fallback_text": "hou.ParameterEditor", "fullpath": "/hom/hou/ParameterEditor"}], "role": "item", "extent": [57885, 57959], "body": [{"type": "para", "indent": 4, "text": ["Show a floating ", {"scheme": "Hom", "value": "/hom/hou/ParameterEditor", "type": "link", "text": "", "fallback_text": "hou.ParameterEditor", "fullpath": "/hom/hou/ParameterEditor"}, " for a given ", {"scheme": "Hom", "value": "/hom/hou/Node", "type": "link", "text": "", "fallback_text": "hou.Node", "fullpath": "/hom/hou/Node"}, "."], "extent": [58043, 58118]}], "container": true, "attrs": {"cppname": "HOM_Node::showFloatingParameterEditor", "replaces": "/commands/oppane"}, "id": "showFloatingParameterEditor"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["openCaptureWeightSpreadsheet(node, pattern=None)"]}], "role": "item", "extent": [58253, 58307], "body": [{"type": "para", "indent": 4, "text": ["Given an instance of a ", {"scheme": "Hom", "value": "/hom/hou/SopNode", "type": "link", "text": "", "fallback_text": "hou.SopNode", "fullpath": "/hom/hou/SopNode"}, " that is a ", {"type": "code", "text": ["captureoverride"]}, " type, \n    open the edit capture weight spreadsheet for the node. If a string is passed \n    for pattern, then only the points specified by the pattern will be shown, \n    otherwise all the points for the node will be displayed in the spreadsheet."], "extent": [58358, 58680]}], "container": true, "attrs": {"cppname": "HOM_ui::openCaptureWeightSpreadsheet"}, "id": "openCaptureWeightSpreadsheet"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["openFileEditor(title, file_path, action_callback=None, params=None)"]}], "role": "item", "extent": [58680, 58753], "body": [{"type": "para", "indent": 4, "text": ["Open a window for editing and saving a text file."], "extent": [58790, 58845]}, {"type": "para", "indent": 4, "text": ["The editor buttons:"], "extent": [58845, 58870]}, {"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["Apply"]}, ": Save the file only if the source has changed."], "extent": [58870, 58931]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["Accept"]}, ": Save the file if the source has changed and close the window."], "extent": [58931, 59009]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["Cancel"]}, ": Close the window without saving the file and prompting the user."], "extent": [59009, 59091]}], "container": true}, {"type": "note_group", "body": [{"type": "note", "indent": 4, "role": "item", "extent": [59091, 59101], "body": [{"type": "para", "indent": 8, "text": ["When applying unsaved changes, the editor prompts the user if \n        the file being edited is not in sync with the file on disk. At \n        this point the user is asked to load the new file (overriding \n        its current changes) or save its current changes (overriding the \n        file on disk) or cancel the operation."], "extent": [59101, 59437]}], "container": true}], "container": true, "role": "item_group"}, {"type": "para", "indent": 4, "text": ["An optional callback and a dictionary of user-defined parameters can \n    be specified to customize the ", {"type": "code", "text": ["Apply"]}, " and ", {"type": "code", "text": ["Accept"]}, " operations. "], "extent": [59437, 59580]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["title"]}], "extent": [59580, 59593], "body": [{"type": "para", "indent": 8, "text": ["Name of the window title."], "extent": [59593, 59628]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["file_path"]}], "extent": [59628, 59645], "body": [{"type": "para", "indent": 8, "text": ["A string set with a full path to the file to edit. Exception is raised if the string is empty."], "extent": [59645, 59749]}, {"type": "para", "indent": 8, "text": ["The file extension determines the language settings used by the editor. The following file types are supported:"], "extent": [59749, 59870]}, {"type": "table", "thead": [{"type": "row", "body": [{"type": "cell", "indent": 8, "text": ["Extension "], "role": "th", "extent": [59870, 59891], "container": true}, {"type": "cell", "indent": 12, "text": ["Language "], "role": "th", "extent": [59891, 59915]}], "divider": false}], "body": [{"type": "row", "body": [{"type": "cell", "indent": 8, "text": [".py "], "role": "td", "extent": [59915, 59930], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 12, "text": ["Python"], "extent": [59930, 59949]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 8, "text": [".cmd "], "role": "td", "extent": [59949, 59964], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 12, "text": ["hscript"], "extent": [59964, 59984]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 8, "text": [".txt/no extension "], "role": "td", "extent": [59984, 60012], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 12, "text": ["Text document"], "extent": [60012, 60039]}]}], "divider": false}]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["action_callback"]}], "extent": [60039, 60062], "body": [{"type": "para", "indent": 8, "text": ["An optional callback triggered by the editor when either the ", {"type": "code", "text": ["Apply"]}, " or ", {"type": "code", "text": ["Accept"]}, " button is clicked. The callback can be used \n        to perform a custom operation. The editor saves the file being edited, if required, before calling the callback. "], "extent": [60062, 60327]}, {"type": "para", "indent": 8, "text": ["The callback name is user-defined and takes a dictionary argument as input:"], "extent": [60327, 60411]}, {"lang": "python", "type": "pre", "indent": 8, "text": ["\n        def myApplyAction( **kwargs )\n        "], "extent": [60411, 60490]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["params"]}], "extent": [60490, 60505], "body": [{"type": "para", "indent": 8, "text": ["A dictionary mapping user-defined entries to values of type ", {"type": "code", "text": ["int"]}, ", ", {"type": "code", "text": ["double"]}, ", ", {"type": "code", "text": ["bool"]}, " and ", {"type": "code", "text": ["string"]}, ". The dictionary is passed as argument to the callback specified with ", {"type": "code", "text": ["action_callback"]}, "."], "extent": [60505, 60699]}], "container": true}], "container": true}, {"type": "para", "indent": 4, "text": ["Example:"], "extent": [60699, 60712]}, {"lang": "python", "type": "pre", "indent": 4, "text": ["\n    \n    def myAction(**kwargs):\n        hou.ui.printResourceMessage(kwargs['msg'] + ' saved.', kwargs['msg_type'])\n\n    file_path = '/var/tmp/main.py'\n    hou.ui.openFileEditor( 'My Editor Title', file_path, action_callback=myAction, \n        params={ 'msg' : file_path, 'msg_type' : hou.severityType.Message })\n    "], "extent": [60712, 61054]}], "container": true, "attrs": {"cppname": "HOM_ui::openFileEditor"}, "id": "openFileEditor"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["showInFileBrowser(file_path)"]}], "role": "item", "extent": [61054, 61089], "body": [{"type": "para", "indent": 4, "text": ["Launch the system\u2019s file browser, navigating to the parent directory of the specified file and selecting it."], "extent": [61129, 61243]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["file_path"]}], "extent": [61243, 61260], "body": [{"type": "para", "indent": 8, "text": ["A string representing the full path to the file (or directory) to select."], "extent": [61260, 61351]}, {"type": "tip_group", "body": [{"type": "tip", "indent": 8, "role": "item", "extent": [61351, 61364], "body": [{"type": "para", "indent": 12, "text": ["If you do not want any file selected, simply ensure the filepath ends with a ", {"type": "code", "text": ["/"]}, "."], "extent": [61364, 61467]}], "container": true}], "container": true, "role": "item_group"}, {"type": "para", "indent": 8, "text": ["Examples:"], "extent": [61467, 61485]}, {"lang": "python", "type": "pre", "indent": 8, "text": ["\n        # Launch the browser in /home/me/myDocs and select doc1.txt\n        hou.ui.showInFileBrowser('/home/me/myDocs/doc1.txt')\n        \n        # Launch the browser in /home/me/myDocs and select nothing\n        hou.ui.showInFileBrowser('/home/me/myDocs/')\n\n        # Launch the browser in /home/me and select myDocs\n        hou.ui.showInFileBrowser('/home/me/myDocs')\n        "], "extent": [61485, 61896]}], "container": true}], "container": true}], "container": true, "attrs": {"cppname": "HOM_ui::showInFileBrowser"}, "id": "showInFileBrowser"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["openViewerStateCodeGenDialog(category, action_callback, operator_name=None)"]}], "role": "item", "extent": [61896, 61978], "body": [{"type": "para", "indent": 4, "text": ["Open a modal dialog window for generating a template implementation and registration code for a \n    python viewer state. The input name of the viewer state is mandatory for generating the code. \n    Other fields such as the state label and icon name are optional. "], "extent": [62029, 62304]}, {"type": "para", "indent": 4, "text": ["The dialog ", {"type": "code", "text": ["Sample"]}, " options can be selected to generate the viewer state code with predefined \n    handlers and bindings. The ", {"type": "code", "text": ["Handler"]}, " options can also be selected to generate the viewer state \n    code with empty handlers."], "extent": [62304, 62534]}, {"type": "para", "indent": 4, "text": ["The dialog buttons:"], "extent": [62534, 62559]}, {"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["Accept"]}, ": Generate the code template with the input fields and selected options."], "extent": [62559, 62646]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["Cancel"]}, ": Close the dialog and abort the code template generation.    "], "extent": [62646, 62724]}], "container": true}, {"type": "para", "indent": 4, "text": ["This dialog is used by the ", {"type": "code", "text": ["Viewer State Browser"]}, " panel and the ", {"type": "code", "text": ["Digital Asset Viewer State editor"]}, "."], "extent": [62724, 62830]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["category"]}], "extent": [62830, 62846], "body": [{"type": "para", "indent": 8, "text": ["A ", {"scheme": "Hom", "value": "/hom/hou/NodeTypeCategory", "type": "link", "text": "", "fallback_text": "hou.NodeTypeCategory", "fullpath": "/hom/hou/NodeTypeCategory"}, " object to specify the type of viewer state to register."], "extent": [62846, 62940]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["action_callback"]}], "extent": [62940, 62963], "body": [{"type": "para", "indent": 8, "text": ["A mandatory callback required for handling the result when the ", {"type": "code", "text": ["Accept"]}, " button is clicked. "], "extent": [62963, 63072]}, {"type": "para", "indent": 8, "text": ["The callback name is user-defined and takes a dictionary argument as input:"], "extent": [63072, 63156]}, {"lang": "python", "type": "pre", "indent": 8, "text": ["\n        def myAcceptAction( **kwargs )\n        "], "extent": [63156, 63236]}, {"type": "para", "indent": 8, "text": ["The ", {"type": "code", "text": ["kwargs"]}, " dictionary contains the results of the code generation:"], "extent": [63236, 63314]}, {"type": "bullet_group", "body": [{"blevel": 10, "type": "bullet", "indent": 8, "text": [{"type": "code", "text": ["valid"]}, ": Returns ", {"type": "code", "text": ["True"]}, " if the operation succeeded, ", {"type": "code", "text": ["False"]}, " otherwise."], "extent": [63314, 63395]}, {"blevel": 10, "type": "bullet", "indent": 8, "text": [{"type": "code", "text": ["state_type"]}, ": The name of the new state."], "extent": [63395, 63446]}, {"blevel": 10, "type": "bullet", "indent": 8, "text": [{"type": "code", "text": ["state_type_expr"]}, ": Expression representing the name of the new state: either a python "], "extent": [63446, 63543], "body": [{"type": "para", "indent": 11, "text": ["function call to get the HDA node\u2019s default state or a string literal."], "extent": [63543, 63625]}], "container": true}, {"blevel": 10, "type": "bullet", "indent": 8, "text": [{"type": "code", "text": ["state_label"]}, ": The state label."], "extent": [63625, 63667]}, {"blevel": 10, "type": "bullet", "indent": 8, "text": [{"type": "code", "text": ["state_description"]}, ": The state description which is only displayed in the code header."], "extent": [63667, 63764]}, {"blevel": 10, "type": "bullet", "indent": 8, "text": [{"type": "code", "text": ["state_category"]}, ": The name of the state category type."], "extent": [63764, 63829]}, {"blevel": 10, "type": "bullet", "indent": 8, "text": [{"type": "code", "text": ["state_code"]}, ": The generated python code."], "extent": [63829, 63880]}, {"blevel": 10, "type": "bullet", "indent": 8, "text": [{"type": "code", "text": ["state_icon_name"]}, ": The name of the icon selected. The name can be either a single icon name, a "], "extent": [63880, 63986], "body": [{"type": "para", "indent": 11, "text": ["file path or an ", {"type": "code", "text": ["opdef"]}, " path to refer to an icon embedded in a ", {"type": "code", "text": ["Digital Asset"]}, "."], "extent": [63986, 64077]}], "container": true}, {"blevel": 10, "type": "bullet", "indent": 8, "text": [{"type": "code", "text": ["state_icon_filename"]}, ": The icon file path if any."], "extent": [64077, 64137]}, {"blevel": 10, "type": "bullet", "indent": 8, "text": [{"type": "code", "text": ["state_icon_section_name"]}, ": The section name of the icon used by the ", {"type": "code", "text": ["Digital Asset viewer state editor"]}, "."], "extent": [64137, 64253]}], "container": true}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["operator_name"]}], "extent": [64253, 64274], "body": [{"type": "para", "indent": 8, "text": ["The name of the operator if the viewer state to generate is embedded in a ", {"type": "code", "text": ["Digital Asset"]}, ". \n        This argument is optional and mostly used by the ", {"type": "code", "text": ["Digital Asset"]}, " viewer state editor."], "extent": [64274, 64469]}], "container": true}], "container": true}], "container": true, "attrs": {"cppname": "HOM_ui::openViewerStateCodeGenDialog"}, "id": "openViewerStateCodeGenDialog"}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Status line"], "extent": [64469, 64487], "body": [{"type": "functions_item_group", "body": [{"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["setStatusMessage(message, severity=hou.severityType.Message)"]}], "role": "item", "extent": [64487, 64554], "body": [{"type": "para", "indent": 4, "text": ["Display a message in Houdini\u2019s status bar."], "extent": [64593, 64641]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["severity"]}], "extent": [64641, 64657], "body": [{"type": "para", "indent": 12, "text": ["A ", {"scheme": "Hom", "value": "/hom/hou/severityType", "type": "link", "text": "", "fallback_text": "hou.severityType", "fullpath": "/hom/hou/severityType"}, " enum value that determines the background\n            color of the message."], "extent": [64657, 64771]}], "container": true}], "container": true}, {"type": "para", "indent": 4, "text": ["To clear the status bar, call ", {"type": "code", "text": ["hou.ui.setStatusMessage(\"\")"]}, "."], "extent": [64771, 64837]}], "container": true, "attrs": {"cppname": "HOM_ui::setStatusMessage"}, "id": "setStatusMessage"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["statusMessage()"]}, "  \u2192 (", {"type": "code", "text": ["string"]}, ", ", {"scheme": "Hom", "value": "/hom/hou/severityType", "type": "link", "text": "", "fallback_text": "hou.severityType", "fullpath": "/hom/hou/severityType"}, ")"], "role": "item", "extent": [64837, 64896], "body": [{"type": "para", "indent": 4, "text": ["Return the current message and severity from the status bar. This may not\n    match the value most recently passed to ", {"type": "code", "text": ["setStatusMessage"]}, " because Houdini\n    itself often changes the message in the status bar."], "extent": [64932, 65146]}], "container": true, "attrs": {"cppname": "HOM_ui::statusMessage"}, "id": "statusMessage"}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Callbacks"], "extent": [65146, 65162], "body": [{"type": "functions_item_group", "body": [{"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["addEventLoopCallback(callback)"]}], "role": "item", "extent": [65162, 65199], "body": [{"type": "para", "indent": 4, "text": ["Register a Python callback to be called whenever Houdini\u2019s event loop is\n    idle.  This callback is called approximately every 50ms, unless Houdini\n    is busy processing events."], "extent": [65242, 65427]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["callback"], "extent": [65427, 65441], "body": [{"type": "para", "indent": 8, "text": ["Any callable Python object that expects no parameters.  It could be\n        a Python function, a bound method, or any object implementing\n        ", {"type": "code", "text": ["__call__"]}, "."], "extent": [65441, 65608]}], "container": true}], "container": true}, {"lang": "python", "type": "pre", "indent": 4, "text": ["\n    def checkForAndProcessEvents():\n        # Here is where you would check for and process any events.\n        pass\n\n    hou.ui.addEventLoopCallback(checkForAndProcessEvents)\n    "], "extent": [65608, 65813]}, {"type": "para", "indent": 4, "text": ["You might use this function to integrate another user interface toolkit\n    into Houdini\u2019s event loop.  See the ", {"scheme": null, "value": "/hom/cookbook/pyqt/part1", "type": "link", "text": ["PyQt"], "fullpath": "/hom/cookbook/pyqt/part1"}, " and\n    ", {"scheme": null, "value": "/hom/cookbook/wxPython", "type": "link", "text": ["wxPython"], "fullpath": "/hom/cookbook/wxPython"}, " cookbook examples for example usages."], "extent": [65813, 66043]}], "container": true, "attrs": {"cppname": "HOM_ui::addEventLoopCallback"}, "id": "addEventLoopCallback"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["postEventCallback(callback)"]}], "role": "item", "extent": [66043, 66076], "body": [{"type": "para", "indent": 4, "text": ["Register a Python callback to be called next in Houdini\u2019s event\n    loop.  This will be called only once."], "extent": [66116, 66227]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["callback"], "extent": [66227, 66241], "body": [{"type": "para", "indent": 8, "text": ["Any callable Python object that expects no parameters.  It could be\n        a Python function, a bound method, or any object implementing\n        ", {"type": "code", "text": ["__call__"]}, "."], "extent": [66241, 66408]}], "container": true}], "container": true}], "container": true, "attrs": {"cppname": "HOM_ui::postEventCallback"}, "id": "postEventCallback"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["removePostedEventCallback(callback)"]}], "role": "item", "extent": [66408, 66449], "body": [{"type": "para", "indent": 4, "text": ["Remove a posted event callback from the queue if it is still there. "], "extent": [66497, 66571]}, {"type": "para", "indent": 4, "text": ["If the callback is not present, nothing is done."], "extent": [66571, 66625]}], "container": true, "attrs": {"cppname": "HOM_ui::removePostedEventCallback"}, "id": "removePostedEventCallback"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["addTriggerUpdateCallback(callback)"]}], "role": "item", "extent": [66625, 66665], "body": [{"type": "para", "indent": 4, "text": ["Add a callback to be run when the ", {"type": "code", "text": ["Update Once"]}, " button is clicked in\n    Houdini, or the ", {"scheme": "Hom", "value": "/hom/hou/ui#triggerUpdate", "type": "link", "text": "", "fallback_text": "hou.ui.triggerUpdate", "fullpath": "/hom/hou/ui#triggerUpdate", "fragment": "#triggerUpdate"}, " method is called. This callback\n    will only be called when in the ", {"type": "code", "text": ["Manual"]}, " update mode."], "extent": [66712, 66923]}], "container": true, "attrs": {"cppname": "HOM_ui::addTriggerUpdateCallback"}, "id": "addTriggerUpdateCallback"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["removeTriggerUpdateCallback(callback)"]}], "role": "item", "extent": [66923, 66966], "body": [{"type": "para", "indent": 4, "text": ["Remove a callback previously added with the\n    ", {"scheme": "Hom", "value": "/hom/hou/ui#addTriggerUpdateCallback", "type": "link", "text": "", "fallback_text": "hou.ui.addTriggerUpdateCallback", "fullpath": "/hom/hou/ui#addTriggerUpdateCallback", "fragment": "#addTriggerUpdateCallback"}, " method."], "extent": [67013, 67112]}], "container": true, "attrs": {"cppname": "HOM_ui::addTriggerUpdateCallback"}, "id": "removeTriggerUpdateCallback"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["addSelectionCallback(callback)"]}], "role": "item", "extent": [67112, 67148], "body": [{"type": "para", "indent": 4, "text": ["Register a Python callback to be called whenever Houdini\u2019s global network\n    item selection changes."], "extent": [67191, 67298]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["callback"], "extent": [67298, 67312], "body": [{"type": "para", "indent": 8, "text": ["Any callable Python object that expects a single parameter. This\n        parameter will be a list of all selection ", {"scheme": "Hom", "value": "/hom/hou/NetworkMovableItem", "type": "link", "text": "", "fallback_text": "hou.NetworkMovableItem", "fullpath": "/hom/hou/NetworkMovableItem"}, "\n        objects that are now selected. It could be a Python function, a bound\n        method, or any object implementing ", {"type": "code", "text": ["__call__"]}, "."], "extent": [67312, 67598]}], "container": true}], "container": true}, {"lang": "python", "type": "pre", "indent": 4, "text": ["\n    def selectionCallback(selection):\n        # Here is where you would respond to the selection change.\n        pass\n    hou.ui.addSelectionCallback(selectionCallback)\n    "], "extent": [67598, 67796]}], "container": true, "attrs": {"cppname": "HOM_ui::addSelectionCallback"}, "id": "addSelectionCallback"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["waitUntil(condition_callback)"]}], "role": "item", "extent": [67796, 67832], "body": [{"type": "para", "indent": 4, "text": ["Keep calling the supplied callback until it returns True.  In the meantime,\n    Houdini will continue to be responsive, allowing you to continue to\n    interact with it."], "extent": [67869, 68044]}, {"type": "para", "indent": 4, "text": ["For example, start a blank Houdini session and put the following in a shelf\n    tool.  It will wait until you create an object node before finishing\n    running the tool."], "extent": [68044, 68224]}, {"lang": "python", "type": "pre", "indent": 4, "text": ["\n    print \"waiting until you create an object...\"\n    hou.ui.waitUntil(lambda: len(hou.node(\"/obj\").children()) > 0)\n    print \"you created\", hou.node(\"/obj\").children()\n    "], "extent": [68224, 68423]}, {"type": "para", "indent": 4, "text": ["If you find that your callback function is too slow to be run frequently, you can try only making it do work every so often:"], "extent": [68423, 68558]}, {"lang": "python", "type": "pre", "indent": 4, "text": ["\n    import time\n    \n    def throttle(callback, delay=2.0):\n        # Returns a wrapper function around `callback`, which only calls\n        # `callback` every `delay` seconds (default 2.0), no matter\n        # how often the wrapper function is called.\n        \n        # This can be useful if the condition function is expensive to run,\n        # so you want to limit how often it is called.\n        \n        # Store in a list, since Python 2.x doesn't have full nonlocal keyword\n        last_check = [0.0]\n        \n        def wrapper():\n            now = time.time()\n            if now < _last_check[0] + delay:\n                # Since we return False when we're inside the delay, Houdini\n                # will continue to call the condition function\n                return False\n            else:\n                _last_check[0] = now\n                return callback()\n    \n    \n    # Then you could use this with hou.waitUntil like this:\n    \n    def my_callback():\n        return len(hou.node(\"/obj\").children()) > 0\n    \n    hou.waitUntil(throttle(my_callback, delay=0.5))\n    "], "extent": [68558, 69667]}], "container": true, "attrs": {"cppname": "HOM_ui::waitUntil"}, "id": "waitUntil"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["eventLoopCallbacks()"]}, "  \u2192 ", {"type": "code", "text": ["tuple"]}, " of callback"], "role": "item", "extent": [69667, 69717], "body": [{"type": "para", "indent": 4, "text": ["Return a tuple of all the Python callbacks that have been registered with\n    ", {"scheme": "Hom", "value": "/hom/hou/ui#addEventLoopCallback", "type": "link", "text": "", "fallback_text": "hou.ui.addEventLoopCallback", "fullpath": "/hom/hou/ui#addEventLoopCallback", "fragment": "#addEventLoopCallback"}, "."], "extent": [69758, 69876]}], "container": true, "attrs": {"cppname": "HOM_ui::eventLoopCallbacks"}, "id": "eventLoopCallbacks"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["removeEventLoopCallback(callback)"]}], "role": "item", "extent": [69974, 70013], "body": [{"type": "para", "indent": 4, "text": ["Remove a Python callback that was previously registered with\n    ", {"scheme": "Hom", "value": "/hom/hou/ui#addEventLoopCallback", "type": "link", "text": "", "fallback_text": "hou.ui.addEventLoopCallback", "fullpath": "/hom/hou/ui#addEventLoopCallback", "fragment": "#addEventLoopCallback"}, ".  See ", {"scheme": "Hom", "value": "/hom/hou/ui#addEventLoopCallback", "type": "link", "text": "", "fallback_text": "hou.ui.addEventLoopCallback", "fullpath": "/hom/hou/ui#addEventLoopCallback", "fragment": "#addEventLoopCallback"}, "\n    for more information."], "extent": [70059, 70229]}, {"type": "para", "indent": 4, "text": ["Raises ", {"scheme": "Hom", "value": "/hom/hou/OperationFailed", "type": "link", "text": "", "fallback_text": "hou.OperationFailed", "fullpath": "/hom/hou/OperationFailed"}, " if the callback was not previously\n    registered."], "extent": [70229, 70318]}], "container": true, "attrs": {"cppname": "HOM_ui::removeEventLoopCallback"}, "id": "removeEventLoopCallback"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["removeAllSelectionCallbacks()"]}], "role": "item", "extent": [70318, 70353], "body": [{"type": "para", "indent": 4, "text": ["Remove all Python callbacks previously registered with\n    ", {"scheme": "Hom", "value": "/hom/hou/ui#addSelectionCallback", "type": "link", "text": "", "fallback_text": "hou.ui.addSelectionCallback", "fullpath": "/hom/hou/ui#addSelectionCallback", "fragment": "#addSelectionCallback"}, ".  See ", {"scheme": "Hom", "value": "/hom/hou/ui#addSelectionCallback", "type": "link", "text": "", "fallback_text": "hou.ui.addSelectionCallback", "fullpath": "/hom/hou/ui#addSelectionCallback", "fragment": "#addSelectionCallback"}, "\n    for more information."], "extent": [70403, 70567]}], "container": true, "attrs": {"cppname": "HOM_ui::removeAllSelectionCallbacks"}, "id": "removeAllSelectionCallbacks"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["removeSelectionCallback(callback)"]}], "role": "item", "extent": [70567, 70606], "body": [{"type": "para", "indent": 4, "text": ["Remove a Python callback that was previously registered with\n    ", {"scheme": "Hom", "value": "/hom/hou/ui#addSelectionCallback", "type": "link", "text": "", "fallback_text": "hou.ui.addSelectionCallback", "fullpath": "/hom/hou/ui#addSelectionCallback", "fragment": "#addSelectionCallback"}, ".  See ", {"scheme": "Hom", "value": "/hom/hou/ui#addSelectionCallback", "type": "link", "text": "", "fallback_text": "hou.ui.addSelectionCallback", "fullpath": "/hom/hou/ui#addSelectionCallback", "fragment": "#addSelectionCallback"}, "\n    for more information."], "extent": [70652, 70822]}], "container": true, "attrs": {"cppname": "HOM_ui::removeSelectionCallback"}, "id": "removeSelectionCallback"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["selectionCallbacks()"]}, "  \u2192 ", {"type": "code", "text": ["tuple"]}, " of callback"], "role": "item", "extent": [70822, 70871], "body": [{"type": "para", "indent": 4, "text": ["Return a tuple of all the Python callbacks that have been registered with\n    ", {"scheme": "Hom", "value": "/hom/hou/ui#addSelectionCallback", "type": "link", "text": "", "fallback_text": "hou.ui.addSelectionCallback", "fullpath": "/hom/hou/ui#addSelectionCallback", "fragment": "#addSelectionCallback"}, "."], "extent": [70912, 71030]}], "container": true, "attrs": {"cppname": "HOM_ui::selectionCallbacks"}, "id": "selectionCallbacks"}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Updating the viewport"], "extent": [71030, 71058], "body": [{"type": "functions_item_group", "body": [{"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["triggerUpdate()"]}], "role": "item", "extent": [71058, 71080], "body": [{"type": "para", "indent": 4, "text": ["Force the viewports to update and perform any cooks necessary.  You might\n    call this function when Houdini\u2019s Auto Update mode is on Manual."], "extent": [71152, 71300]}], "container": true, "attrs": {"cppname": "HOM_ui::triggerUpdate", "replaces": "/commands/viewupdate"}, "id": "triggerUpdate"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["reloadViewportColorSchemes()"]}], "role": "item", "extent": [71300, 71334], "body": [{"type": "para", "indent": 4, "text": ["Reloads all ", {"type": "code", "text": ["3DSceneColors"]}, " configuration files (in ", {"type": "code", "text": ["$HFS/houdini/config"]}, ").\n    You must cause the viewport to redraw (for example, by tumbling)\n    to see the new colors."], "extent": [71375, 71556]}, {"type": "para", "indent": 4, "text": ["This function may be useful if you are implementing a new color scheme:\n    you can map to a hotkey or call it in the Python console so you can check\n    your changes."], "extent": [71556, 71729]}], "container": true, "attrs": {"cppname": "HOM_ui::triggerUpdate"}, "id": "reloadViewportColorSchemes"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["updateMode()"]}, "  \u2192 ", {"scheme": "Hom", "value": "/hom/hou/updateMode", "type": "link", "text": "", "fallback_text": "hou.updateMode", "fullpath": "/hom/hou/updateMode"}, " enum value"], "role": "item", "extent": [71729, 71782], "body": [{"type": "para", "indent": 4, "text": ["This method is deprecated in favor of ", {"scheme": "Hom", "value": "/hom/hou/updateModeSetting", "type": "link", "text": "", "fallback_text": "hou.updateModeSetting", "fullpath": "/hom/hou/updateModeSetting"}, "."], "extent": [71815, 71887]}], "container": true, "attrs": {"cppname": "HOM_ui::updateMode"}, "id": "updateMode"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["setUpdateMode(mode)"]}], "role": "item", "extent": [71887, 71912], "body": [{"type": "para", "indent": 4, "text": ["This method is deprecated in favor of ", {"scheme": "Hom", "value": "/hom/hou/setUpdateMode", "type": "link", "text": "", "fallback_text": "hou.setUpdateMode", "fullpath": "/hom/hou/setUpdateMode"}, "."], "extent": [71948, 72016]}], "container": true, "attrs": {"cppname": "HOM_ui::setUpdateMode"}, "id": "setUpdateMode"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["isAutoKey() -> "]}, "bool`"], "role": "item", "extent": [72016, 72042], "body": [{"type": "para", "indent": 4, "text": ["Returns if auto-key is currently enabled (changing an animated parameter will create a key at the current frame if it doesn\u2019t exist)."], "extent": [72075, 72214]}], "container": true, "attrs": {"cppname": "HOM_ui::isAutoKey"}, "id": "isAutoKey"}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Settings"], "extent": [72214, 72229], "body": [{"type": "functions_item_group", "body": [{"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["resourceValueFromName(self, name)"]}, "  \u2192 ", {"type": "code", "text": ["str"]}], "role": "item", "extent": [72229, 72278], "body": [{"type": "para", "indent": 4, "text": ["Return a string value from a symbolic resource name. The resource name\n    should correspond to one of the entries in the ", {"type": "code", "text": ["$HH/config/*.hcs"]}, " file\n    for the currently selected color scheme."], "extent": [72323, 72519]}, {"type": "para", "indent": 4, "text": ["Raises: ", {"scheme": "Hom", "value": "/hom/hou/ValueError", "type": "link", "text": "", "fallback_text": "hou.ValueError", "fullpath": "/hom/hou/ValueError"}, " if the provided symbolic name doesn\u2019t exist."], "extent": [72519, 72598]}], "container": true, "attrs": {"cppname": "HOM_ui::resourceValueFromName"}, "id": "resourceValueFromName"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["colorFromName(self, name)"]}, "  \u2192 ", {"scheme": "Hom", "value": "/hom/hou/Color", "type": "link", "text": "", "fallback_text": "hou.Color", "fullpath": "/hom/hou/Color"}], "role": "item", "extent": [72598, 72648], "body": [{"type": "para", "indent": 4, "text": ["Return a color value from a symbolic color name. The color name should\n    correspond to one of the entries in the ", {"type": "code", "text": ["$HH/config/*.hcs"]}, " file for the\n    currently selected color scheme."], "extent": [72685, 72874]}, {"type": "para", "indent": 4, "text": ["Raises: ", {"scheme": "Hom", "value": "/hom/hou/ValueError", "type": "link", "text": "", "fallback_text": "hou.ValueError", "fullpath": "/hom/hou/ValueError"}, " if the provided symbolic name doesn\u2019t exist."], "extent": [72874, 72953]}, {"type": "para", "indent": 4, "text": ["For example:"], "extent": [72953, 72970]}, {"lang": "python", "type": "pre", "indent": 4, "text": ["\n    >>> hou.ui.colorFromName(\"DisplayOnColor\")\n    <hou.Color r=0.3, g=0.5, b=1>\n    "], "extent": [72970, 73080]}, {"type": "tip_group", "body": [{"type": "tip", "indent": 4, "role": "item", "extent": [73080, 73094], "body": [{"type": "para", "indent": 8, "text": ["You can use ", {"scheme": "Hom", "value": "/hom/hou/qt/getColor", "type": "link", "text": "", "fallback_text": "hou.qt.getColor", "fullpath": "/hom/hou/qt/getColor"}, " to get a Qt color object instead\n        of a HOM color object."], "extent": [73094, 73201]}], "container": true}], "container": true, "role": "item_group"}], "container": true, "attrs": {"cppname": "HOM_ui::colorFromName"}, "id": "colorFromName"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["orientationUpAxis(self)"]}, "  \u2192 ", {"scheme": "Hom", "value": "/hom/hou/orientUpAxis", "type": "link", "text": "", "fallback_text": "hou.orientUpAxis", "fullpath": "/hom/hou/orientUpAxis"}, " enum value"], "role": "item", "extent": [73201, 73267], "body": [{"type": "para", "indent": 4, "text": ["Return a hou.orientUpAxis indicating the current orientation mode\u2019s up axis."], "extent": [73308, 73390]}], "container": true, "attrs": {"cppname": "HOM_ui::orientationUpAxis"}, "id": "orientationUpAxis"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["handleOrientToNormalAxis(self)"]}, "  \u2192 ", {"scheme": "Hom", "value": "/hom/hou/handleOrientToNormalAxis", "type": "link", "text": "", "fallback_text": "hou.handleOrientToNormalAxis", "fullpath": "/hom/hou/handleOrientToNormalAxis"}, " enum value"], "role": "item", "extent": [73390, 73475], "body": [{"type": "para", "indent": 4, "text": ["Return a hou.handleOrientToNormalAxis indicating the handle axis that is to be aligned to component normals when orienting."], "extent": [73523, 73653]}], "container": true, "attrs": {"cppname": "HOM_ui::handleOrientToNormalAxis"}, "id": "handleOrientToNormalAxis"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["inchesToPixels(self, inches)"]}, "  \u2192 ", {"type": "code", "text": ["float"]}], "role": "item", "extent": [73653, 73698], "body": [{"type": "para", "indent": 4, "text": ["Return the supplied ", {"type": "code", "text": ["inches"]}, " argument, expressing a distance on the\n    screen, converted to a number of pixels. This calculation combines the\n    number of dots per inch reported by the operating system, the\n    ", {"type": "code", "text": ["Global UI Size"]}, " setting accessible from\n    ", {"type": "ui", "text": ["Edit \u25b8 Preferences \u25b8 General User Interface"]}, ",\n    and the ", {"type": "code", "text": ["HOUDINI_UISCALE"]}, " environment variable, if it has been set. As\n    such, this value may not be accurate, but is consistent with the way\n    the rest of Houdini converts distances from inches to pixels."], "extent": [73736, 74262]}], "container": true, "attrs": {"cppname": "HOM_ui::inchesToPixels"}, "id": "inchesToPixels"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["pixelsToInches(self, pixels)"]}, "  \u2192 ", {"type": "code", "text": ["float"]}], "role": "item", "extent": [74262, 74307], "body": [{"type": "para", "indent": 4, "text": ["Return the supplied ", {"type": "code", "text": ["pixels"]}, " argument, expressing a number of pixels on the\n    screen, converted to a distance in inches. This calculation combines the\n    number of dots per inch reported by the operating system, the\n    ", {"type": "code", "text": ["Global UI Size"]}, " setting accessible from\n    ", {"type": "ui", "text": ["Edit \u25b8 Preferences \u25b8 General User Interface"]}, ",\n    and the ", {"type": "code", "text": ["HOUDINI_UISCALE"]}, " environment variable, if it has been set. As\n    such, this value may not be accurate, but is consistent with the way\n    the rest of Houdini converts distances from pixels to inches."], "extent": [74345, 74881]}], "container": true, "attrs": {"cppname": "HOM_ui::pixelsToInches"}, "id": "pixelsToInches"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["globalScaleFactor(self)"]}, "  \u2192 ", {"type": "code", "text": ["float"]}], "role": "item", "extent": [74881, 74921], "body": [{"type": "para", "indent": 4, "text": ["Return the scale factor that is set by Houdini\u2019s Global UI Size preference.\n    For example, this function returns 1.0 when Houdini is set to the Normal UI\n    size."], "extent": [74961, 75132]}, {"type": "para", "indent": 4, "text": ["The scale factor can be used to scale components in a PySide or PyQt built\n    UI where ", {"scheme": "Hom", "value": "/hom/hou/ui#scaledSize", "type": "link", "text": "", "fallback_text": "hou.ui.scaledSize", "fullpath": "/hom/hou/ui#scaledSize", "fragment": "#scaledSize"}, " cannot be called.  For example, the scale\n    factor can be used to set the zoom factor of a QWebEngineView object so\n    that the web contents match the Global UI Size:"], "extent": [75132, 75418]}, {"lang": "python", "type": "pre", "indent": 4, "text": ["\n    web_view = QWebEngineWidgets.QWebEngineView()\n    web_view.setZoomFactor(hou.ui.globalScaleFactor())\n    "], "extent": [75418, 75552]}], "container": true, "attrs": {"cppname": "HOM_ui::globalScaleFactor"}, "id": "globalScaleFactor"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["scaledSize(self, size)"]}, "  \u2192 ", {"type": "code", "text": ["int"]}], "role": "item", "extent": [75552, 75590], "body": [{"type": "para", "indent": 4, "text": ["Scale the specified size by the global UI scale factor and return the\n    scaled size.  The scale factor is determined by Houdini\u2019s Global UI Size\n    preference.  For example, the factor is 1.0 when Houdini is set to the\n    Normal UI size."], "extent": [75623, 75870]}, {"type": "para", "indent": 4, "text": ["This function is useful for scaling hard-coded sizes in PySide or PyQt\n    code.  Here is an example of using scaled sizes when setting a widget\n    to a fixed size that is 640\u00d7480 with the Normal UI size:"], "extent": [75870, 76089]}, {"lang": "python", "type": "pre", "indent": 4, "text": ["\n    widget = QtWidgets.QWidget()\n    widget.resize(hou.ui.scaledSize(640), hou.ui.scaledSize(480))\n    "], "extent": [76089, 76217]}, {"type": "para", "indent": 4, "text": ["Here is another example of creating a scaled icon using the\n    ", {"scheme": "Hom", "value": "/hom/hou/qt#createIcon", "type": "link", "text": "", "fallback_text": "hou.qt.createIcon", "fullpath": "/hom/hou/qt#createIcon", "fragment": "#createIcon"}, " function:"], "extent": [76217, 76320]}, {"lang": "python", "type": "pre", "indent": 4, "text": ["\n    icon = hou.qt.createIcon(hou.ui.scaledSize(32), hou.ui.scaledSize(32))\n    "], "extent": [76320, 76424]}], "container": true, "attrs": {"cppname": "HOM_ui::scaledSize"}, "id": "scaledSize"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["loadPaletteFile(self, file)"]}, "  \u2192 ", {"type": "code", "text": ["tuple"]}, " of ", {"scheme": "Hom", "value": "/hom/hou/Color", "type": "link", "text": "", "fallback_text": "hou.Color", "fullpath": "/hom/hou/Color"}], "role": "item", "extent": [76424, 76488], "body": [{"type": "para", "indent": 4, "text": ["Load a palette file and return the colors listed in the palette. The\n    ", {"type": "code", "text": ["file"]}, " parameter can be a full path, or just a file name. In the latter\n    case, the Houdini path is searched for the first instance of the named\n    file under the ", {"type": "code", "text": ["config"]}, " subdirectory."], "extent": [76526, 76793]}], "container": true, "attrs": {"cppname": "HOM_ui::loadPaletteFile"}, "id": "loadPaletteFile"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["savePaletteFile(self, file, colors)"]}], "role": "item", "extent": [76793, 76834], "body": [{"type": "para", "indent": 4, "text": ["Save a palette file with the contents of the ", {"type": "code", "text": ["colors"]}, " parameter, a tuple\n    of ", {"scheme": "Hom", "value": "/hom/hou/Color", "type": "link", "text": "", "fallback_text": "hou.Color", "fullpath": "/hom/hou/Color"}, " objects. The ", {"type": "code", "text": ["file"]}, " parameter must be a full path to\n    the file where the palette should be saved."], "extent": [76872, 77074]}, {"type": "para", "indent": 4, "text": ["Raises ", {"scheme": "Hom", "value": "/hom/hou/OperationFailed", "type": "link", "text": "", "fallback_text": "hou.OperationFailed", "fullpath": "/hom/hou/OperationFailed"}, " if the file could not be written."], "extent": [77074, 77146]}], "container": true, "attrs": {"cppname": "HOM_ui::savePaletteFile"}, "id": "savePaletteFile"}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Clipboard"], "extent": [77146, 77162], "body": [{"type": "functions_item_group", "body": [{"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["copyTextToClipboard(self, text)"]}], "role": "item", "extent": [77162, 77200], "body": [{"type": "para", "indent": 4, "text": ["Sets the supplied text into the system clipboard."], "extent": [77243, 77298]}], "container": true, "attrs": {"cppname": "HOM_ui::copyTextToClipboard"}, "id": "copyTextToClipboard"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["getTextFromClipboard(self)"]}, "  \u2192 ", {"type": "code", "text": ["str"]}], "role": "item", "extent": [77298, 77339], "body": [{"type": "para", "indent": 4, "text": ["Returns any text currently copied into the system clipboard. If the\n    clipboard is empty or contains non-text data, an empty string is returned."], "extent": [77383, 77535]}], "container": true, "attrs": {"cppname": "HOM_ui::getTextFromClipboard"}, "id": "getTextFromClipboard"}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Python shell"], "extent": [77535, 77554], "body": [{"type": "functions_item_group", "body": [{"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["writePythonShellHistoryFile(filename=None)"]}], "role": "item", "extent": [77554, 77603], "body": [{"type": "para", "indent": 4, "text": ["Save the command history from the current Python Shell to disk.\n    If ", {"type": "code", "text": ["filename"]}, " is None, then the history is written to \n    ", {"type": "code", "text": ["$HOME/houdiniX.Y/pyshell.history"]}, ".  If this function is invoked\n    outside of a Python Shell, then the history is taken from the \n    last active shell (i.e. the last shell that was opened or accepted input)."], "extent": [77653, 77996]}, {"type": "para", "indent": 4, "text": ["Raises ", {"scheme": "Hom", "value": "/hom/hou/OperationFailed", "type": "link", "text": "", "fallback_text": "hou.OperationFailed", "fullpath": "/hom/hou/OperationFailed"}, " if no Python Shell has been opened.\n    Raises ", {"scheme": "Hom", "value": "/hom/hou/OperationFailed", "type": "link", "text": "", "fallback_text": "hou.OperationFailed", "fullpath": "/hom/hou/OperationFailed"}, " if ", {"type": "code", "text": ["filename"]}, " cannot be created."], "extent": [77996, 78140]}], "container": true, "attrs": {"cppname": "HOM_ui::writePythonShellHistoryFile"}, "id": "writePythonShellHistoryFile"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["readPythonShellHistoryFile(filename=None)"]}], "role": "item", "extent": [78140, 78187], "body": [{"type": "para", "indent": 4, "text": ["Load the contents from the specified file into the command history\n    of the Python Shell.  If ", {"type": "code", "text": ["filename"]}, " is None, then the history is read\n    from ", {"type": "code", "text": ["$HOME/houdiniX.Y/pyshell.history"]}, ".  If this function is invoked\n    outside of a Python Shell, then the history is loaded into the\n    the last active shell (i.e. the last shell that was opened \n    or accepted input)."], "extent": [78236, 78611]}, {"type": "para", "indent": 4, "text": ["Raises ", {"scheme": "Hom", "value": "/hom/hou/OperationFailed", "type": "link", "text": "", "fallback_text": "hou.OperationFailed", "fullpath": "/hom/hou/OperationFailed"}, " if no Python Shell has been opened.\n    Raises ", {"scheme": "Hom", "value": "/hom/hou/OperationFailed", "type": "link", "text": "", "fallback_text": "hou.OperationFailed", "fullpath": "/hom/hou/OperationFailed"}, " if ", {"type": "code", "text": ["filename"]}, " does not exist or cannot\n    be read."], "extent": [78611, 78774]}], "container": true, "attrs": {"cppname": "HOM_ui::readPythonShellHistoryFile"}, "id": "readPythonShellHistoryFile"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["shellIO()"]}, "  \u2192 ", {"scheme": "Hom", "value": "/hom/hou/ShellIO", "type": "link", "text": "", "fallback_text": "hou.ShellIO", "fullpath": "/hom/hou/ShellIO"}], "role": "item", "extent": [78774, 78810], "body": [{"type": "para", "indent": 4, "text": ["Return the ", {"scheme": "Hom", "value": "/hom/hou/ShellIO", "type": "link", "text": "", "fallback_text": "hou.ShellIO", "fullpath": "/hom/hou/ShellIO"}, " object used to implement Houdini\u2019s graphical\n    Python shell.  This function is used internally by Houdini, and you\n    shouldn\u2019t need to access the ShellIO directly."], "extent": [78840, 79042]}], "container": true, "attrs": {"cppname": "HOM_ui::shellIO"}, "id": "shellIO"}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Drag and drop"], "extent": [79042, 79062], "body": [{"type": "functions_item_group", "body": [{"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["hasDragSourceData(label)"]}, "  \u2192 ", {"type": "code", "text": ["bool"]}], "role": "item", "extent": [79062, 79103], "body": [{"type": "para", "indent": 4, "text": ["Query the current drag source to determine if the specified data type is\n    available."], "extent": [79143, 79236]}, {"type": "para", "indent": 4, "text": ["Raises ", {"scheme": "Hom", "value": "/hom/hou/NotAvailable", "type": "link", "text": "", "fallback_text": "hou.NotAvailable", "fullpath": "/hom/hou/NotAvailable"}, " if no drag operation is currently active."], "extent": [79236, 79313]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["label"]}], "extent": [79313, 79326], "body": [{"type": "para", "indent": 8, "text": ["Specifies the content type (MIME type) of the source event.   "], "extent": [79326, 79398]}, {"type": "note_group", "body": [{"type": "note", "indent": 8, "role": "item", "extent": [79398, 79412], "body": [{"type": "para", "indent": 12, "text": ["Use ", {"type": "code", "text": ["text/plain"]}, " for file drop event or ", {"scheme": null, "value": "/hom/hou/qt/mimeType", "type": "link", "text": ["hou.qt.mimeType"], "fullpath": "/hom/hou/qt/mimeType"}, " \n            for the Houdini supported types."], "extent": [79412, 79551]}], "container": true}], "container": true, "role": "item_group"}], "container": true}], "container": true}], "container": true, "attrs": {"cppname": "HOM_ui::hasDragSourceData"}, "id": "hasDragSourceData"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["getDragSourceData(label, index)"]}, "  \u2192 ", {"type": "code", "text": ["data"]}], "role": "item", "extent": [79551, 79598], "body": [{"type": "para", "indent": 4, "text": ["Query the current drag source to obtain the dragged data.  Returns\n    None when the specified data in unavailable (or unsupported by HOM)."], "extent": [79638, 79783]}, {"type": "para", "indent": 4, "text": ["Raises ", {"scheme": "Hom", "value": "/hom/hou/NotAvailable", "type": "link", "text": "", "fallback_text": "hou.NotAvailable", "fullpath": "/hom/hou/NotAvailable"}, " if no drag operation is currently active."], "extent": [79783, 79860]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["label"]}], "extent": [79860, 79873], "body": [{"type": "para", "indent": 8, "text": ["Specifies the type of the source event to query. See ", {"scheme": "Hom", "value": "/hom/hou/ui#hasDragSourceData", "type": "link", "text": "", "fallback_text": "hou.ui.hasDragSourceData", "fullpath": "/hom/hou/ui#hasDragSourceData", "fragment": "#hasDragSourceData"}, " \n        for the label types to use. "], "extent": [79873, 80004]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["index"]}], "extent": [80004, 80017], "body": [{"type": "para", "indent": 8, "text": ["Index of the data in the source. Defaults to 0."], "extent": [80017, 80087]}], "container": true}], "container": true}], "container": true, "attrs": {"cppname": "HOM_ui::hasDragSourceData"}, "id": "getDragSourceData"}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Qt integration"], "extent": [80087, 80108], "body": [{"type": "functions_item_group", "body": [{"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["mainQtWindow(self)"]}], "role": "item", "extent": [80108, 80133], "body": [{"type": "para", "indent": 4, "text": ["This method is deprecated.  Call ", {"scheme": "Hom", "value": "/hom/hou/qt#mainWindow", "type": "link", "text": "", "fallback_text": "hou.qt.mainWindow", "fullpath": "/hom/hou/qt#mainWindow", "fragment": "#mainWindow"}, " instead."], "extent": [80169, 80240]}], "container": true, "attrs": {"cppname": "HOM_ui::_mainQtWindow"}, "id": "mainQtWindow"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["createQtIcon(name, width=32, height=32)"]}], "role": "item", "extent": [80240, 80285], "body": [{"type": "para", "indent": 4, "text": ["This method is deprecated.  Call ", {"scheme": "Hom", "value": "/hom/hou/qt#Icon", "type": "link", "text": "", "fallback_text": "hou.qt.Icon", "fullpath": "/hom/hou/qt#Icon", "fragment": "#Icon"}, " instead."], "extent": [80321, 80386]}], "container": true, "attrs": {"cppname": "HOM_ui::_createQtIcon"}, "id": "createQtIcon"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["qtStyleSheet()"]}], "role": "item", "extent": [80386, 80406], "body": [{"type": "para", "indent": 4, "text": ["This method is deprecated.  Call ", {"scheme": "Hom", "value": "/hom/hou/qt#styleSheet", "type": "link", "text": "", "fallback_text": "hou.qt.styleSheet", "fullpath": "/hom/hou/qt#styleSheet", "fragment": "#styleSheet"}, " instead."], "extent": [80441, 80512]}], "container": true, "attrs": {"cppname": "HOM_ui::qtStyleSheet"}, "id": "qtStyleSheet"}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Dialog scripts"], "extent": [80512, 80533], "body": [{"type": "functions_item_group", "body": [{"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["createDialog(ui_file_name)"]}, "  \u2192 ", {"scheme": "Hom", "value": "/hom/hou/Dialog", "type": "link", "text": "", "fallback_text": "hou.Dialog", "fullpath": "/hom/hou/Dialog"}], "role": "item", "extent": [80533, 80586], "body": [{"type": "para", "indent": 4, "text": ["Parse the given .ui file and return the dialog defined in the file."], "extent": [80621, 80694]}, {"type": "para", "indent": 4, "text": ["The dialog must be written with Houdini\u2019s User Interface Script Language.\n    An overview of the language can be found in the Houdini Development Kit\n    (HDK) documentation, specifically in the ", {"type": "q", "text": ["Houdini User Interface  \u2192 The .ui\n    Script Language"]}, " section."], "extent": [80694, 80959]}, {"type": "para", "indent": 4, "text": [{"type": "code", "text": ["ui_file_name"]}, " is the basename of the .ui file.  The file must be located\n    in a directory registered with the HOUDINI_UI_APP_PATH search path.  For a\n    list of HOUDINI_UI_APP_PATH search directories, run ", {"type": "code", "text": ["hconfig -ap"]}, "\n    from a terminal."], "extent": [80959, 81208]}, {"type": "para", "indent": 4, "text": ["Raises ", {"scheme": "Hom", "value": "/hom/hou/OperationFailed", "type": "link", "text": "", "fallback_text": "hou.OperationFailed", "fullpath": "/hom/hou/OperationFailed"}, " if the .ui file contains errors and the\n    dialog could not be created.\n    Raises ", {"type": "code", "text": ["TypeError"]}, " if ", {"type": "code", "text": ["ui_file_name"]}, " is ", {"type": "code", "text": ["None"]}, "."], "extent": [81208, 81371]}], "container": true, "attrs": {"cppname": "HOM_ui::createDialog"}, "id": "createDialog"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["findDialog(ui_file_name)"]}, "  \u2192 ", {"scheme": "Hom", "value": "/hom/hou/Dialog", "type": "link", "text": "", "fallback_text": "hou.Dialog", "fullpath": "/hom/hou/Dialog"}], "role": "item", "extent": [81371, 81421], "body": [{"type": "para", "indent": 4, "text": ["Return the dialog defined by the given .ui file name and created by\n    ", {"scheme": "Hom", "value": "/hom/hou/ui#createDialog", "type": "link", "text": "", "fallback_text": "hou.ui.createDialog", "fullpath": "/hom/hou/ui#createDialog", "fragment": "#createDialog"}, "."], "extent": [81454, 81558]}, {"type": "para", "indent": 4, "text": ["Return ", {"type": "code", "text": ["None"]}, " if no dialog has been created with ", {"scheme": "Hom", "value": "/hom/hou/ui#createDialog", "type": "link", "text": "", "fallback_text": "hou.ui.createDialog", "fullpath": "/hom/hou/ui#createDialog", "fragment": "#createDialog"}, "\n    for the specified .ui file."], "extent": [81558, 81670]}, {"type": "para", "indent": 4, "text": ["Raises ", {"type": "code", "text": ["TypeError"]}, " if ", {"type": "code", "text": ["ui_file_name"]}, " is ", {"type": "code", "text": ["None"]}, "."], "extent": [81670, 81723]}], "container": true, "attrs": {"cppname": "HOM_ui::findDialog"}, "id": "findDialog"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["dialogs()"]}, "  \u2192 ", {"type": "code", "text": ["tuple"]}, " of ", {"scheme": "Hom", "value": "/hom/hou/Dialog", "type": "link", "text": "", "fallback_text": "hou.Dialog", "fullpath": "/hom/hou/Dialog"}], "role": "item", "extent": [81723, 81769], "body": [{"type": "para", "indent": 4, "text": ["Return all dialogs created by ", {"scheme": "Hom", "value": "/hom/hou/ui#createDialog", "type": "link", "text": "", "fallback_text": "hou.ui.createDialog", "fullpath": "/hom/hou/ui#createDialog", "fragment": "#createDialog"}, "."], "extent": [81799, 81862]}], "container": true, "attrs": {"cppname": "HOM_ui::dialogs"}, "id": "dialogs"}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Misc"], "extent": [81862, 81873], "body": [{"type": "functions_item_group", "body": [{"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["isUserInteracting()"]}], "role": "item", "extent": [81993, 82018], "body": [{"type": "para", "indent": 4, "text": ["Return ", {"type": "code", "text": ["True"]}, " if the user is currently interacting with the UI in a way\n    that is likely to cause a stream of node or parameter changes. This\n    includes scrubbing the playbar, and dragging a handle in the viewport.\n    Testing this value can be useful to avoid performing expensive updates\n    to UI components that can wait until the user interaction is complete\n    before performing their update."], "extent": [82058, 82467]}], "container": true, "attrs": {"cppname": "HOM_ui::isUserInteracting"}, "id": "isUserInteracting"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["setUserInteracting()"]}], "role": "item", "extent": [82467, 82493], "body": [{"type": "para", "indent": 4, "text": ["Sets a flag checked by ", {"type": "code", "text": ["isUserInteracting()"]}, ". That function will return\n    True after ", {"type": "code", "text": ["setUserInteracting(True)"]}, " is called, until you call\n    ", {"type": "code", "text": ["setUserInteracting(False)"]}, " to reset that flag."], "extent": [82534, 82731]}, {"type": "para", "indent": 4, "text": ["This can be used in python viewer states, or python panels to stop\n    certain UI updates during viewport interaction or when using UI widgets."], "extent": [82731, 82880]}, {"type": "para", "indent": 4, "text": ["Set this to True when the interaction starts and False when it finishes."], "extent": [82880, 82958]}], "container": true, "attrs": {"cppname": "HOM_ui::setUserInteracting"}, "id": "setUserInteracting"}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Viewer states"], "extent": [82958, 82978], "body": [{"type": "functions_item_group", "body": [{"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["registerViewerState(template)"]}], "role": "item", "extent": [82978, 83013], "body": [{"type": "para", "indent": 4, "text": ["Registers a ", {"scheme": "Hom", "value": "/hom/hou/ViewerStateTemplate", "type": "link", "text": "", "fallback_text": "hou.ViewerStateTemplate", "fullpath": "/hom/hou/ViewerStateTemplate"}, " object representing a custom viewer state. \n    See ", {"scheme": null, "value": "/hom/python_states#install", "type": "link", "text": ["installing viewer states"], "fullpath": "/hom/python_states#install", "fragment": "#install"}, " for how to use this function."], "extent": [83056, 83239]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["template"]}], "extent": [83239, 83255], "body": [{"type": "para", "indent": 8, "text": ["The ", {"scheme": "Hom", "value": "/hom/hou/ViewerStateTemplate", "type": "link", "text": "", "fallback_text": "hou.ViewerStateTemplate", "fullpath": "/hom/hou/ViewerStateTemplate"}, " object."], "extent": [83255, 83306]}], "container": true}], "container": true}, {"type": "para", "indent": 4, "text": ["Raises ", {"scheme": "Hom", "value": "/hom/hou/NameConflict", "type": "link", "text": "", "fallback_text": "hou.NameConflict", "fullpath": "/hom/hou/NameConflict"}, " if the registration fails because a state with the same name is already registered.\n    Raises ", {"scheme": "Hom", "value": "/hom/hou/OperationFailed", "type": "link", "text": "", "fallback_text": "hou.OperationFailed", "fullpath": "/hom/hou/OperationFailed"}, " if the registration fails (for example, the state to register has no factory)."], "extent": [83306, 83541]}], "container": true, "attrs": {"cppname": "HOM_ui::registerViewerState"}, "id": "registerViewerState"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["registerViewerStateFile(file_path)"]}], "role": "item", "extent": [83541, 83580], "body": [{"type": "para", "indent": 4, "text": ["Registers a viewer state type implemented in a given python file. Any viewer state previously \n    registered by this file will be unregistered first. "], "extent": [83627, 83784]}, {"type": "para", "indent": 4, "text": ["See ", {"scheme": null, "value": "/hom/python_states#install", "type": "link", "text": ["installing viewer states"], "fullpath": "/hom/python_states#install", "fragment": "#install"}, " for more details about python state files."], "extent": [83784, 83890]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["file_path"]}], "extent": [83890, 83907], "body": [{"type": "para", "indent": 8, "text": ["A full path to the python file containing the viewer state. "], "extent": [83907, 83977]}], "container": true}], "container": true}, {"type": "para", "indent": 4, "text": ["Raises ", {"scheme": "Hom", "value": "/hom/hou/OperationFailed", "type": "link", "text": "", "fallback_text": "hou.OperationFailed", "fullpath": "/hom/hou/OperationFailed"}, " if the registration fails (for example, the state to register has no factory)."], "extent": [83977, 84094]}], "container": true, "attrs": {"cppname": "HOM_ui::registerViewerStateFile"}, "id": "registerViewerStateFile"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["registerViewerStates()"]}], "role": "item", "extent": [84094, 84121], "body": [{"type": "para", "indent": 4, "text": ["Scans the viewer state folders (", {"type": "code", "text": ["$HH/viewer_states"]}, " and ", {"type": "code", "text": ["$HOUDINI_USER_PREF_DIR/viewer_states"]}, ") to register all viewer states they both contain. Viewer states already registered in Houdini are simply updated with the version on disk. "], "extent": [84165, 84405]}], "container": true, "attrs": {"cppname": "HOM_ui::registerViewerStates"}, "id": "registerViewerStates"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["unregisterViewerState(state_name)"]}], "role": "item", "extent": [84405, 84443], "body": [{"type": "para", "indent": 4, "text": ["Unregisters an existing viewer state type. "], "extent": [84490, 84539]}, {"type": "para", "indent": 4, "text": ["See ", {"scheme": null, "value": "/hom/python_states#install", "type": "link", "text": ["installing viewer states"], "fullpath": "/hom/python_states#install", "fragment": "#install"}, " for how to use this function."], "extent": [84539, 84636]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["state_name"]}], "extent": [84636, 84654], "body": [{"type": "para", "indent": 8, "text": ["The name of the state to unregister."], "extent": [84654, 84700]}], "container": true}], "container": true}, {"type": "para", "indent": 4, "text": ["Raises ", {"scheme": "Hom", "value": "/hom/hou/OperationFailed", "type": "link", "text": "", "fallback_text": "hou.OperationFailed", "fullpath": "/hom/hou/OperationFailed"}, " if the unregistration fails (for example, if no state with the given name is registered)."], "extent": [84700, 84828]}], "container": true, "attrs": {"cppname": "HOM_ui::unregisterViewerState"}, "id": "unregisterViewerState"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["unregisterViewerStateFile(file_path)"]}], "role": "item", "extent": [84828, 84869], "body": [{"type": "para", "indent": 4, "text": ["Unregisters a viewer state previously registered with a given python file. \n    See ", {"scheme": null, "value": "/hom/python_states#install", "type": "link", "text": ["installing viewer states"], "fullpath": "/hom/python_states#install", "fragment": "#install"}, " for more details about python state files."], "extent": [84918, 85104]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["file_path"]}], "extent": [85104, 85121], "body": [{"type": "para", "indent": 8, "text": ["A full path to the python file referring to a viewer state. "], "extent": [85121, 85191]}], "container": true}], "container": true}, {"type": "para", "indent": 4, "text": ["Raises ", {"scheme": "Hom", "value": "/hom/hou/OperationFailed", "type": "link", "text": "", "fallback_text": "hou.OperationFailed", "fullpath": "/hom/hou/OperationFailed"}, " if the unregistration fails (for example, if no state was registered with this file)."], "extent": [85191, 85315]}], "container": true, "attrs": {"cppname": "HOM_ui::unregisterViewerStateFile"}, "id": "unregisterViewerStateFile"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["isRegisteredViewerState(state_name)"]}, "  \u2192 ", {"type": "code", "text": ["bool"]}], "role": "item", "extent": [85315, 85365], "body": [{"type": "para", "indent": 4, "text": ["Returns ", {"type": "code", "text": ["True"]}, " if ", {"type": "code", "text": ["state_name"]}, " has previously been registered with ", {"scheme": "Hom", "value": "/hom/hou/ui#registerViewerState", "type": "link", "text": "", "fallback_text": "hou.ui.registerViewerState", "fullpath": "/hom/hou/ui#registerViewerState", "fragment": "#registerViewerState"}, ". Returns ", {"type": "code", "text": ["False"]}, " if not."], "extent": [85412, 85542]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["state_name"]}], "extent": [85542, 85560], "body": [{"type": "para", "indent": 8, "text": ["The name of the state to validate."], "extent": [85560, 85604]}], "container": true}], "container": true}], "container": true, "attrs": {"cppname": "HOM_ui::isRegisteredViewerState"}, "id": "isRegisteredViewerState"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["reloadViewerState(state_name)"]}], "role": "item", "extent": [85604, 85638], "body": [{"type": "para", "indent": 4, "text": ["Update a registered viewer state by reloading its python module file from a ", {"type": "code", "text": ["viewer_states"]}, " folder. \n    This method works with ", {"type": "code", "text": ["self-installed"]}, " states only. ", {"type": "code", "text": ["Embedded"]}, " states can be updated simply by editing the code and re-saving the HDA. See ", {"scheme": null, "value": "/hom/python_states#install", "type": "link", "text": ["installing states in Houdini"], "fullpath": "/hom/python_states#install", "fragment": "#install"}, " for more details."], "extent": [85681, 86011]}, {"type": "warning_group", "body": [{"type": "warning", "indent": 4, "role": "item", "extent": [86011, 86024], "body": [{"type": "para", "indent": 8, "text": ["If you get an error message about a registration problem during a reload like the following,"], "extent": [86024, 86134]}, {"type": "para", "indent": 8, "text": [{"type": "code", "text": ["Error registering 'my_state': factory not specified or invalid."]}], "extent": [86134, 86209]}, {"type": "para", "indent": 8, "text": ["The state will be removed from Houdini and you will be forced to quit Houdini to fix the problem."], "extent": [86209, 86326]}], "container": true}], "container": true, "role": "item_group"}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["state_name"]}], "extent": [86326, 86344], "body": [{"type": "para", "indent": 8, "text": ["The name of the state to reload."], "extent": [86344, 86386]}], "container": true}], "container": true}, {"type": "para", "indent": 4, "text": ["Raises ", {"scheme": "Hom", "value": "/hom/hou/OperationFailed", "type": "link", "text": "", "fallback_text": "hou.OperationFailed", "fullpath": "/hom/hou/OperationFailed"}, " if the reload fails (for example, if no state with the given name is registered)."], "extent": [86386, 86506]}], "container": true, "attrs": {"cppname": "HOM_ui::reloadViewerState"}, "id": "reloadViewerState"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["reloadViewerStates(state_names=None)"]}], "role": "item", "extent": [86506, 86547], "body": [{"type": "para", "indent": 4, "text": ["Reload multiple viewer states as specified in the ", {"type": "code", "text": ["state_names"]}, " array. If the array is empty, all registered ", {"scheme": null, "value": "/hom/python_states#install", "type": "link", "text": ["self-installed"], "fullpath": "/hom/python_states#install", "fragment": "#install"}, " states in Houdini are reloaded. See ", {"scheme": "Hom", "value": "/hom/hou/ui#reloadViewerState", "type": "link", "text": "", "fallback_text": "hou.ui.reloadViewerState", "fullpath": "/hom/hou/ui#reloadViewerState", "fragment": "#reloadViewerState"}, " for more details on reloading a state.  "], "extent": [86590, 86866]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["state_names"]}], "extent": [86866, 86885], "body": [{"type": "para", "indent": 8, "text": ["Array of state names to reload. Empty by default."], "extent": [86885, 86944]}], "container": true}], "container": true}, {"type": "para", "indent": 4, "text": ["Raises ", {"scheme": "Hom", "value": "/hom/hou/OperationFailed", "type": "link", "text": "", "fallback_text": "hou.OperationFailed", "fullpath": "/hom/hou/OperationFailed"}, " if the reload fails (for example, if no state with a given name is registered)."], "extent": [86944, 87062]}], "container": true, "attrs": {"cppname": "HOM_ui::reloadViewerState"}, "id": "reloadViewerStates"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["viewerStateInfo(state_names)"]}, "  \u2192 ", {"type": "code", "text": ["str"]}], "role": "item", "extent": [87062, 87104], "body": [{"type": "para", "indent": 4, "text": ["Return a JSON dictionary string describing all registered viewer states keyed by state type."], "extent": [87143, 87241]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["state_names"]}], "extent": [87241, 87260], "body": [{"type": "para", "indent": 8, "text": ["Array of state names to process. If the array is empty (default), all viewer states currently registered are processed."], "extent": [87260, 87389]}], "container": true}], "container": true}, {"lang": "python", "type": "pre", "indent": 4, "text": ["\n    import json\n\n    info_str = hou.ui.viewerStateInfo([\"sidefx_stroke\"])\n    info_dict = json.loads(info_str)\n    info = json.dumps(info_dict[\"sidefx_stroke\"], indent=3)\n    print(info)\n\n    {\n       \"Type\": \"sidefx_stroke\",\n       \"Label\": \"Stroke\",\n       \"Icon\": \"$HFS/houdini/pic/minimizedicon.pic\",\n       \"Category\": \"Sop\",\n       \"Source\": \"$HFS/houdini/viewer_states/sidefx_stroke.py\",\n       \"Contexts\": [\n          \"SOP\"\n       ],\n       \"Handles\": {},\n       \"Gadgets\": {},\n       \"Selectors\": {\n          \"sidefx_default_selector\": {\n             \"Name\": \"sidefx_default_selector\",\n             \"Auto start\": false,\n             \"Hotkey\": {\n                \"Path\": \"\",\n                \"Label\": \"\",\n                \"Description\": \"\",\n                \"Keys\": []\n             },\n             \"Secure selection\": \"obey\",\n             \"Prompt\": \"default geometry selector\",\n             \"Allow drag\": false,\n             \"Quick select\": true,\n             \"Use existing selection\": true,\n             \"Initial selection\": \"\",\n             \"Initial selection type\": \"\",\n             \"Ordered\": false,\n             \"Geometry types\": [],\n             \"Allow other sops\": true\n          }\n       },\n       \"Menus\": {\n          \"Stroke\": {\n             \"Type\": \"Menu\",\n             \"Handle\": \"stroke_menu\",\n             \"Draw realtime\": {\n                \"Type\": \"Toggle\",\n                \"Handle\": \"realtime_mode\",\n                \"Hotkey\": {\n                   \"Path\": \"h.pane.gview.state.sop.sidefx_stroke.realtime_mode\",\n                   \"Label\": \"realtime\",\n                   \"Description\": \"Enable realtime mode\",\n                   \"Keys\": [\n                      48\n                   ]\n                }\n             },\n             \"Brush settings...\": {\n                \"Type\": \"Menu\",\n                \"Handle\": \"brush_menu\",\n                \"Cycle brushes\": {\n                   \"Type\": \"Action\",\n                   \"Handle\": \"cycle_brushes\",\n                   \"Hotkey\": {\n                      \"Path\": \"h.pane.gview.state.sop.sidefx_stroke.cycle_brushes\",\n                      \"Label\": \"Cycle brushes\",\n                      \"Description\": \"Cycle stroke tools\",\n                      \"Keys\": [\n                         49\n                      ]\n                   }\n                },\n                \"Brush display mode\": {\n                   \"Type\": \"Radio strip\",\n                   \"Handle\": \"brush_display_mode\",\n                   \"Default\": \"brush_viewport_display\",\n                   \"Wireframe\": {\n                      \"Type\": \"Radio strip item\",\n                      \"Handle\": \"brush_wireframe_display\",\n                      \"Hotkey\": {\n                         \"Path\": \"h.pane.gview.state.sop.sidefx_stroke.set_wireframe_brush\",\n                         \"Label\": \"Set wireframe brush\",\n                         \"Description\": \"Set wireframe brush\",\n                         \"Keys\": [\n                            50\n                         ]\n                      }\n                   },\n                   \"Viewport\": {\n                      \"Type\": \"Radio strip item\",\n                      \"Handle\": \"brush_viewport_display\",\n                      \"Hotkey\": {\n                         \"Path\": \"h.pane.gview.state.sop.sidefx_stroke.set_viewport_brush\",\n                         \"Label\": \"Set viewport brush\",\n                         \"Description\": \"Set viewport brush\",\n                         \"Keys\": [\n                            51\n                         ]\n                      }\n                   }\n                }\n             }\n          }\n       }\n    }\n      \n    "], "extent": [87389, 91033]}], "container": true, "attrs": {"cppname": "HOM_ui::viewerStateInfo"}, "id": "viewerStateInfo"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["viewerStateInfoFromFile(state_filepath)"]}, "  \u2192 (", {"type": "code", "text": ["str"]}, ", ", {"type": "code", "text": ["str"]}, ")"], "role": "item", "extent": [91033, 91097], "body": [{"type": "para", "indent": 4, "text": ["Returns the viewer state information for a given python state file. The information is returned as a tuple containing the python state type name and a JSON dictionary string describing the registered viewer state information."], "extent": [91144, 91375]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["state_filepath"]}], "extent": [91375, 91397], "body": [{"type": "para", "indent": 8, "text": ["A python state file path. The method returns an empty tuple if the file path is not a python state file or the python state contained in the file is not registered."], "extent": [91397, 91571]}], "container": true}], "container": true}, {"type": "note_group", "body": [{"type": "note", "indent": 4, "role": "item", "extent": [91571, 91581], "body": [{"type": "para", "indent": 8, "text": ["This method doesn\u2019t work with HDA python state files."], "extent": [91581, 91644]}], "container": true}], "container": true, "role": "item_group"}, {"lang": "python", "type": "pre", "indent": 4, "text": ["\n    import json\n\n    (state_type, info_str) = hou.ui.viewerStateInfoFromFile(\n        \"$HFS/packages/viewer_state_demo/viewer_states/drawable_selector_sop.py\"\n    )\n    info_dict = json.loads(info_str)\n    info = json.dumps(info_dict[state_type], indent=3)\n    print(info)\n\n    {\n       \"Type\": \"drawable_selector_sop\",\n       \"Label\": \"State Drawable Selector Demo\",\n       \"Icon\": \"DESKTOP_application_mac\",\n       \"Category\": \"Sop\",\n       \"Source\": \"$HFS/packages/viewer_state_demo/viewer_states/drawable_selector_sop.py\",\n       \"Contexts\": [\n          \"SOP\"\n       ],\n       \"Handles\": {},\n       \"Gadgets\": {},\n       \"Selectors\": {\n          \"drawable_selector\": {\n             \"Name\": \"drawable_selector\",\n             \"Auto start\": true,\n             \"Hotkey\": {\n                \"Path\": \"h.pane.gview.state.sop.drawable_selector_sop.drawable selector\",\n                \"Label\": \"drawable selector\",\n                \"Description\": \"drawable selector\",\n                \"Keys\": [\n                   49\n                ]\n             },\n             \"Secure selection\": \"ignore\",\n             \"Prompt\": \"Select a drawable component\",\n             \"Allow drag\": false,\n             \"Quick select\": true,\n             \"Use existing selection\": true,\n             \"Initial selection\": \"\",\n             \"Initial selection type\": \"\",\n             \"Ordered\": false,\n             \"Geometry types\": [\n                \"point\",\n                \"edge\",\n                \"prim\"\n             ],\n             \"Allow other sops\": false\n          },\n          \"primitive_selector\": {\n             \"Name\": \"primitive_selector\",\n             \"Auto start\": false,\n             \"Hotkey\": {\n                \"Path\": \"h.pane.gview.state.sop.drawable_selector_sop.primitive selector\",\n                \"Label\": \"primitive selector\",\n                \"Description\": \"primitive selector\",\n                \"Keys\": [\n                   50\n                ]\n             },\n             \"Secure selection\": \"ignore\",\n             \"Prompt\": \"Select a primitive component\",\n             \"Allow drag\": true,\n             \"Quick select\": true,\n             \"Use existing selection\": true,\n             \"Initial selection\": \"\",\n             \"Initial selection type\": \"\",\n             \"Ordered\": false,\n             \"Geometry types\": [\n                \"prim\"\n             ],\n             \"Allow other sops\": false\n          },\n          \"sidefx_default_selector\": {\n             \"Name\": \"sidefx_default_selector\",\n             \"Auto start\": false,\n             \"Hotkey\": {\n                \"Path\": \"\",\n                \"Label\": \"\",\n                \"Description\": \"\",\n                \"Keys\": []\n             },\n             \"Secure selection\": \"obey\",\n             \"Prompt\": \"default geometry selector\",\n             \"Allow drag\": false,\n             \"Quick select\": true,\n             \"Use existing selection\": true,\n             \"Initial selection\": \"\",\n             \"Initial selection type\": \"\",\n             \"Ordered\": false,\n             \"Geometry types\": [],\n             \"Allow other sops\": true\n          }\n       },\n       \"Menus\": {\n          \"Drawable Selector Demo\": {\n             \"Type\": \"Menu\",\n             \"Handle\": \"drawable_selector_menu\",\n             \"Log Info\": {\n                \"Type\": \"Toggle\",\n                \"Handle\": \"log_info\",\n                \"Hotkey\": {\n                   \"Path\": \"\",\n                   \"Label\": \"\",\n                   \"Description\": \"\",\n                   \"Keys\": []\n                }\n             },\n             \"Clear Console\": {\n                \"Type\": \"Action\",\n                \"Handle\": \"clear_console\",\n                \"Hotkey\": {\n                   \"Path\": \"\",\n                   \"Label\": \"\",\n                   \"Description\": \"\",\n                   \"Keys\": []\n                }\n             }\n          }\n       }\n    }\n    "], "extent": [91644, 95517]}], "container": true, "attrs": {"cppname": "HOM_ui::viewerStateInfoFromFile"}, "id": "viewerStateInfoFromFile"}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Viewer handles"], "extent": [95517, 95539], "body": [{"type": "functions_item_group", "body": [{"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["registerViewerHandle(template)"]}], "role": "item", "extent": [95539, 95575], "body": [{"type": "para", "indent": 4, "text": ["Registers a ", {"scheme": "Hom", "value": "/hom/hou/ViewerHandleTemplate", "type": "link", "text": "", "fallback_text": "hou.ViewerHandleTemplate", "fullpath": "/hom/hou/ViewerHandleTemplate"}, " object representing a custom viewer handle. \n    See ", {"scheme": null, "value": "/hom/python_handles#install", "type": "link", "text": ["installing viewer handle"], "fullpath": "/hom/python_handles#install", "fragment": "#install"}, " for how to use this function."], "extent": [95619, 95805]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["template"]}], "extent": [95805, 95821], "body": [{"type": "para", "indent": 8, "text": ["The ", {"scheme": "Hom", "value": "/hom/hou/ViewerHandleTemplate", "type": "link", "text": "", "fallback_text": "hou.ViewerHandleTemplate", "fullpath": "/hom/hou/ViewerHandleTemplate"}, " object."], "extent": [95821, 95873]}], "container": true}], "container": true}, {"type": "para", "indent": 4, "text": ["Raises these exceptions if the registration fails:"], "extent": [95873, 95928]}, {"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": [{"scheme": "Hom", "value": "/hom/hou/NameConflict", "type": "link", "text": "", "fallback_text": "hou.NameConflict", "fullpath": "/hom/hou/NameConflict"}, " if a handle with the same name is already registered. "], "extent": [95928, 96012]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"scheme": "Hom", "value": "/hom/hou/OperationFailed", "type": "link", "text": "", "fallback_text": "hou.OperationFailed", "fullpath": "/hom/hou/OperationFailed"}, " if the registration fails (for example, the handle to register has no factory)."], "extent": [96012, 96125]}], "container": true}], "container": true, "attrs": {"cppname": "HOM_ui::registerViewerHandle"}, "id": "registerViewerHandle"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["registerViewerHandles()"]}], "role": "item", "extent": [96125, 96153], "body": [{"type": "para", "indent": 4, "text": ["Scans the viewer handle folders (e.g. ", {"type": "code", "text": ["$HH/viewer_handles"]}, " and ", {"type": "code", "text": ["$HOUDINI_USER_PREF_DIR/viewer_handles"]}, ") to register \n    all viewer handles they both contain. Viewer handles already registered in Houdini are simply updated with the \n    version on disk. "], "extent": [96198, 96458]}], "container": true, "attrs": {"cppname": "HOM_ui::registerViewerHandles"}, "id": "registerViewerHandles"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["registerViewerHandleFile(handle_file)"]}], "role": "item", "extent": [96458, 96500], "body": [{"type": "para", "indent": 4, "text": ["Registers a viewer handle type implemented in a given python file. Any viewer handle previously \n    registered by this file will be unregistered first. "], "extent": [96548, 96707]}, {"type": "para", "indent": 4, "text": ["See ", {"scheme": null, "value": "/hom/python_handles#install", "type": "link", "text": ["installing viewer handles"], "fullpath": "/hom/python_handles#install", "fragment": "#install"}, " for more details about python handle files."], "extent": [96707, 96816]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["file_path"]}], "extent": [96816, 96833], "body": [{"type": "para", "indent": 8, "text": ["A full path to the python file containing the viewer handle implementation. "], "extent": [96833, 96919]}], "container": true}], "container": true}, {"type": "para", "indent": 4, "text": ["Raises ", {"scheme": "Hom", "value": "/hom/hou/OperationFailed", "type": "link", "text": "", "fallback_text": "hou.OperationFailed", "fullpath": "/hom/hou/OperationFailed"}, " if the registration fails (for example, the handle to register has no factory)."], "extent": [96919, 97037]}], "container": true, "attrs": {"cppname": "HOM_ui::registerViewerHandleFile"}, "id": "registerViewerHandleFile"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["unregisterViewerHandleFile(handle_file)"]}], "role": "item", "extent": [97037, 97081], "body": [{"type": "para", "indent": 4, "text": ["Unregisters a viewer handle previously registered with a given python file. \n    See ", {"scheme": null, "value": "/hom/python_handles#install", "type": "link", "text": ["installing viewer handles"], "fullpath": "/hom/python_handles#install", "fragment": "#install"}, " for more details about python handle files."], "extent": [97131, 97321]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["file_path"]}], "extent": [97321, 97338], "body": [{"type": "para", "indent": 8, "text": ["A full path to the python file referring to a viewer handle. "], "extent": [97338, 97409]}], "container": true}], "container": true}, {"type": "para", "indent": 4, "text": ["Raises ", {"scheme": "Hom", "value": "/hom/hou/OperationFailed", "type": "link", "text": "", "fallback_text": "hou.OperationFailed", "fullpath": "/hom/hou/OperationFailed"}, " if the unregistration fails (for example, if no handle was registered with this file)."], "extent": [97409, 97534]}], "container": true, "attrs": {"cppname": "HOM_ui::unregisterViewerHandleFile"}, "id": "unregisterViewerHandleFile"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["unregisterViewerHandle(handle_name)"]}], "role": "item", "extent": [97534, 97574], "body": [{"type": "para", "indent": 4, "text": ["Unregisters an existing viewer handle type. "], "extent": [97620, 97670]}, {"type": "para", "indent": 4, "text": ["See ", {"scheme": null, "value": "/hom/python_handles#install", "type": "link", "text": ["installing viewer handles"], "fullpath": "/hom/python_handles#install", "fragment": "#install"}, " for how to use this function."], "extent": [97670, 97769]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["handle_name"]}], "extent": [97769, 97788], "body": [{"type": "para", "indent": 8, "text": ["The name of the handle to unregister."], "extent": [97788, 97835]}], "container": true}], "container": true}, {"type": "para", "indent": 4, "text": ["Raises ", {"scheme": "Hom", "value": "/hom/hou/OperationFailed", "type": "link", "text": "", "fallback_text": "hou.OperationFailed", "fullpath": "/hom/hou/OperationFailed"}, " if the unregistration fails (for example, if no handle with the given name is registered)."], "extent": [97835, 97966]}], "container": true, "attrs": {"cppname": "HOM_ui::unregisterViewerHandle"}, "id": "unregisterViewerHandle"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["reloadViewerHandle(handle_name)"]}], "role": "item", "extent": [97966, 98002], "body": [{"type": "para", "indent": 4, "text": ["Update a registered viewer handle by reloading its python module file from a ", {"type": "code", "text": ["viewer_handle"]}, " folder. \n    See ", {"scheme": null, "value": "/hom/python_handles#install", "type": "link", "text": ["installing handles in Houdini"], "fullpath": "/hom/python_handles#install", "fragment": "#install"}, " for more details."], "extent": [98046, 98243]}, {"type": "warning_group", "body": [{"type": "warning", "indent": 4, "role": "item", "extent": [98243, 98256], "body": [{"type": "para", "indent": 8, "text": ["If you get an error message about a registration problem during a reload like the following,"], "extent": [98256, 98366]}, {"type": "para", "indent": 8, "text": [{"type": "code", "text": ["Error registering 'my_handle': factory not specified or invalid."]}], "extent": [98366, 98442]}, {"type": "para", "indent": 8, "text": ["Houdini will make its best to keep the broken viewer handle in the Viewer Handle Browser for editing the file. If not, the \n        handle will be removed from Houdini and you will be forced to quit Houdini to fix the problem."], "extent": [98442, 98688]}], "container": true}], "container": true, "role": "item_group"}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["handle_name"]}], "extent": [98688, 98707], "body": [{"type": "para", "indent": 8, "text": ["The type name of the handle to reload."], "extent": [98707, 98755]}], "container": true}], "container": true}, {"type": "para", "indent": 4, "text": ["Raises ", {"scheme": "Hom", "value": "/hom/hou/OperationFailed", "type": "link", "text": "", "fallback_text": "hou.OperationFailed", "fullpath": "/hom/hou/OperationFailed"}, " if the reload fails (for example, if no state with the given name is registered)."], "extent": [98755, 98875]}], "container": true, "attrs": {"cppname": "HOM_ui::reloadViewerHandle"}, "id": "reloadViewerHandle"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["isRegisteredViewerHandle(handle_name)"]}, "  \u2192 ", {"type": "code", "text": ["bool"]}], "role": "item", "extent": [98875, 98927], "body": [{"type": "para", "indent": 4, "text": ["Returns ", {"type": "code", "text": ["True"]}, " if ", {"type": "code", "text": ["handle_name"]}, " has previously been registered with ", {"scheme": "Hom", "value": "/hom/hou/ui#registerViewerHandle", "type": "link", "text": "", "fallback_text": "hou.ui.registerViewerHandle", "fullpath": "/hom/hou/ui#registerViewerHandle", "fragment": "#registerViewerHandle"}, ". Returns ", {"type": "code", "text": ["False"]}, " if not."], "extent": [98975, 99107]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["handle_name"]}], "extent": [99107, 99126], "body": [{"type": "para", "indent": 8, "text": ["The type name of the viewer handle to validate."], "extent": [99126, 99183]}], "container": true}], "container": true}], "container": true, "attrs": {"cppname": "HOM_ui::isRegisteredViewerHandle"}, "id": "isRegisteredViewerHandle"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["viewerHandleInfo(handle_names)"]}, "  \u2192 ", {"type": "code", "text": ["string"]}], "role": "item", "extent": [99183, 99230], "body": [{"type": "para", "indent": 4, "text": ["Return a JSON dictionary string describing all registered viewer handles in Houdini. The viewer handles can be queried by type name."], "extent": [99270, 99408]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["handle_names"]}], "extent": [99408, 99428], "body": [{"type": "para", "indent": 8, "text": ["Array of handle type names. The function returns a dictionary containing all registered handles specified in the array. If the array \n        is empty (default), all registered viewer handles are returned."], "extent": [99428, 99643]}], "container": true}], "container": true}, {"lang": "python", "type": "pre", "indent": 4, "text": ["\n    >>> import ast\n    >>> viewer_handles = ast.literal_eval(hou.ui.viewerHandleInfo())\n    >>> viewer_handles[\"move_tool_handle\"]\n{\n   \"Gadgets\":{\n      \"zdisc\":{\n         \"Drawable\":\"Line\",\n         \"Name\":\"zdisc\",\n         \"Label\":\"Z\"\n      },\n      \"yscale\":{\n         \"Drawable\":\"Face\",\n         \"Name\":\"yscale\",\n         \"Label\":\"Y\"\n      },\n      \"yaxis\":{\n         \"Drawable\":\"Line\",\n         \"Name\":\"yaxis\",\n         \"Label\":\"Y\"\n      },\n      \"zscale\":{\n         \"Drawable\":\"Face\",\n         \"Name\":\"zscale\",\n         \"Label\":\"Z\"\n      },\n      \"zaxis\":{\n         \"Drawable\":\"Line\",\n         \"Name\":\"zaxis\",\n         \"Label\":\"Z\"\n      },\n      \"xaxis\":{\n         \"Drawable\":\"Line\",\n         \"Name\":\"xaxis\",\n         \"Label\":\"X\"\n      },\n      \"xscale\":{\n         \"Drawable\":\"Face\",\n         \"Name\":\"xscale\",\n         \"Label\":\"X\"\n      },\n      \"pivot\":{\n         \"Drawable\":\"Face\",\n         \"Name\":\"pivot\",\n         \"Label\":\"XYZ\"\n      },\n      \"xdisc\":{\n         \"Drawable\":\"Line\",\n         \"Name\":\"xdisc\",\n         \"Label\":\"X\"\n      },\n      \"ydisc\":{\n         \"Drawable\":\"Line\",\n         \"Name\":\"ydisc\",\n         \"Label\":\"Y\"\n      }\n   },\n   \"Parameters\":{\n      \"Sz\":{\n         \"Default\":1,\n         \"Range\":\"(0.1, 10)\",\n         \"Type\":\"Float\",\n         \"Name\":\"sz\",\n         \"Label\":\"Sz\"\n      },\n      \"Sy\":{\n         \"Default\":1,\n         \"Range\":\"(0.1, 10)\",\n         \"Type\":\"Float\",\n         \"Name\":\"sy\",\n         \"Label\":\"Sy\"\n      },\n      \"Sx\":{\n         \"Default\":1,\n         \"Range\":\"(0.1, 10)\",\n         \"Type\":\"Float\",\n         \"Name\":\"sx\",\n         \"Label\":\"Sx\"\n      },\n      \"Tz\":{\n         \"Default\":0,\n         \"Range\":\"(-10, 10)\",\n         \"Type\":\"Float\",\n         \"Name\":\"tz\",\n         \"Label\":\"Tz\"\n      },\n      \"Tx\":{\n         \"Default\":0,\n         \"Range\":\"(-10, 10)\",\n         \"Type\":\"Float\",\n         \"Name\":\"tx\",\n         \"Label\":\"Tx\"\n      },\n      \"Ty\":{\n         \"Default\":0,\n         \"Range\":\"(-10, 10)\",\n         \"Type\":\"Float\",\n         \"Name\":\"ty\",\n         \"Label\":\"Ty\"\n      },\n      \"Rx\":{\n         \"Default\":0,\n         \"Range\":\"(0, 360)\",\n         \"Type\":\"Float\",\n         \"Name\":\"rx\",\n         \"Label\":\"Rx\"\n      },\n      \"Ry\":{\n         \"Default\":0,\n         \"Range\":\"(0, 360)\",\n         \"Type\":\"Float\",\n         \"Name\":\"ry\",\n         \"Label\":\"Ry\"\n      },\n      \"Rz\":{\n         \"Default\":0,\n         \"Range\":\"(0, 360)\",\n         \"Type\":\"Float\",\n         \"Name\":\"rz\",\n         \"Label\":\"Rz\"\n      }\n   },\n   \"Settings\":{\n      \"\":{\n         \"Type\":\"Separator\",\n         \"Name\":\"separator0\",\n         \"Label\":\"\"\n      },\n      \"Drag Along Plane\":{\n         \"Default\":\"XZ\",\n         \"Menu Items\":[\n            \"(XZ, XZ)\",\n            \"(XY, XY)\",\n            \"(ZY, ZY)\",\n            \"(XYZ, XYZ)\"\n         ],\n         \"Type\":\"Menu\",\n         \"Name\":\"planes\",\n         \"Label\":\"Drag Along Plane\"\n      },\n      \"Draw dimension lines\":{\n         \"Default\":1,\n         \"Type\":\"Toggle\",\n         \"Name\":\"dimensions\",\n         \"Label\":\"Draw dimension lines\"\n      }\n   },\n   \"Menus\":{\n      \"Move Tool Handle\":{\n         \"Cycle Gadgets\":{\n            \"Hotkey\":{\n               \"Keys\":[\n                  89\n               ],\n               \"Path\":\"h.pane.gview.handle.move_tool_handle.cycle\",\n               \"Description\":\"cycle\",\n               \"Label\":\"cycle\"\n            },\n            \"Handle\":\"cycle\",\n            \"Type\":\"Action\"\n         },\n         \"Handle\":\"move_tool_handle_menu\",\n         \"Trace\":{\n            \"Hotkey\":{\n               \"Keys\":[\n                  51\n               ],\n               \"Path\":\"h.pane.gview.handle.move_tool_handle.trace_handle\",\n               \"Description\":\"Enable handle trace\",\n               \"Label\":\"Trace\"\n            },\n            \"Handle\":\"trace_handle\",\n            \"Type\":\"Toggle\"\n         },\n         \"Edit\":{\n            \"Hotkey\":{\n               \"Keys\":[\n                  53\n               ],\n               \"Path\":\"h.pane.gview.handle.move_tool_handle.edit_handle\",\n               \"Description\":\"Edit Handle\",\n               \"Label\":\"Edit\"\n            },\n            \"Handle\":\"edit_handle\",\n            \"Type\":\"Action\"\n         },\n         \"XYZ\":{\n            \"Hotkey\":{\n               \"Keys\":[\n                  65\n               ],\n               \"Path\":\"h.pane.gview.handle.move_tool_handle.XYZ\",\n               \"Description\":\"XYZ\",\n               \"Label\":\"XYZ\"\n            },\n            \"Handle\":\"XYZ\",\n            \"Type\":\"Action\"\n         },\n         \"Inspect\":{\n            \"Hotkey\":{\n               \"Keys\":[\n                  50\n               ],\n               \"Path\":\"h.pane.gview.handle.move_tool_handle.inspect_handle\",\n               \"Description\":\"Inspect Handle\",\n               \"Label\":\"Inspect\"\n            },\n            \"Handle\":\"inspect_handle\",\n            \"Type\":\"Action\"\n         },\n         \"XZ\":{\n            \"Hotkey\":{\n               \"Keys\":[\n                  70\n               ],\n               \"Path\":\"h.pane.gview.handle.move_tool_handle.XZ\",\n               \"Description\":\"XZ\",\n               \"Label\":\"XZ\"\n            },\n            \"Handle\":\"XZ\",\n            \"Type\":\"Action\"\n         },\n         \"Reload\":{\n            \"Hotkey\":{\n               \"Keys\":[\n                  54\n               ],\n               \"Path\":\"h.pane.gview.handle.move_tool_handle.reload_handle\",\n               \"Description\":\"Reload Handle\",\n               \"Label\":\"Reload\"\n            },\n            \"Handle\":\"reload_handle\",\n            \"Type\":\"Action\"\n         },\n         \"XY\":{\n            \"Hotkey\":{\n               \"Keys\":[\n                  71\n               ],\n               \"Path\":\"h.pane.gview.handle.move_tool_handle.XY\",\n               \"Description\":\"XY\",\n               \"Label\":\"XY\"\n            },\n            \"Handle\":\"XY\",\n            \"Type\":\"Action\"\n         },\n         \"ZY\":{\n            \"Hotkey\":{\n               \"Keys\":[\n                  66\n               ],\n               \"Path\":\"h.pane.gview.handle.move_tool_handle.ZY\",\n               \"Description\":\"ZY\",\n               \"Label\":\"ZY\"\n            },\n            \"Handle\":\"ZY\",\n            \"Type\":\"Action\"\n         },\n         \"Clear console\":{\n            \"Hotkey\":{\n               \"Keys\":[\n                  49\n               ],\n               \"Path\":\"h.pane.gview.handle.move_tool_handle.clear_console\",\n               \"Description\":\"Clear console\",\n               \"Label\":\"Clear\"\n            },\n            \"Handle\":\"clear_console\",\n            \"Type\":\"Action\"\n         },\n         \"Marker\":{\n            \"Hotkey\":{\n               \"Keys\":[\n                  52\n               ],\n               \"Path\":\"h.pane.gview.handle.move_tool_handle.add_marker\",\n               \"Description\":\"Add Marker\",\n               \"Label\":\"Marker\"\n            },\n            \"Handle\":\"add_marker\",\n            \"Type\":\"Action\"\n         },\n         \"Logging\":{\n            \"Hotkey\":{\n               \"Keys\":[\n                  48\n               ],\n               \"Path\":\"h.pane.gview.handle.move_tool_handle.console_logging\",\n               \"Description\":\"Enable or disable console logging\",\n               \"Label\":\"Logging\"\n            },\n            \"Handle\":\"console_logging\",\n            \"Type\":\"Toggle\"\n         },\n         \"Type\":\"Menu\"\n      }\n   },\n   \"Label\":\"Move Tool Handle\",\n   \"Exported Parameters\":[\n      \"tx\",\n      \"ty\",\n      \"tz\",\n      \"rx\",\n      \"ry\",\n      \"rz\",\n      \"sx\",\n      \"sy\",\n      \"sz\"\n   ],\n   \"Source\":\"C:/Users/marcb/DEV/HOUDINI/dev/hfs/packages/viewer_handle_demo/viewer_handles/move_tool_handle.py\",\n   \"Type\":\"move_tool_handle\",\n   \"Categories\":[\n      \"Sop\"\n   ],\n   \"Icon\":\"$HFS/houdini/pic/Mandril.pic\"\n}      \n    "], "extent": [99643, 107286]}], "container": true, "attrs": {"cppname": "HOM_ui::viewerHandleInfo"}, "id": "viewerHandleInfo"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["openViewerHandleCodeGenDialog(categories, action_callback)"]}], "role": "item", "extent": [107286, 107350], "body": [{"type": "para", "indent": 4, "text": ["Open a modal dialog window for generating a template implementation and registration code for a \n    python viewer handle. The input name of the viewer handle is mandatory for generating the code. \n    Other fields such as the handle label and icon name are optional. "], "extent": [107403, 107681]}, {"type": "para", "indent": 4, "text": ["The dialog ", {"type": "code", "text": ["Sample"]}, " options can be selected to generate the viewer handle code with predefined \n    handlers and bindings. The ", {"type": "code", "text": ["Handler"]}, " options can also be selected to generate the viewer handle \n    code with empty handlers."], "extent": [107681, 107913]}, {"type": "para", "indent": 4, "text": ["The dialog buttons:"], "extent": [107913, 107938]}, {"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["Accept"]}, ": Generate the code template with the input fields and selected options."], "extent": [107938, 108025]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["Cancel"]}, ": Close the dialog and abort the code template generation.    "], "extent": [108025, 108103]}], "container": true}, {"type": "para", "indent": 4, "text": ["This dialog is available from ", {"type": "code", "text": ["Viewer Handle Browser"]}, " panel under the ", {"type": "code", "text": ["File|New..."]}, " menu."], "extent": [108103, 108198]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["category"]}], "extent": [108198, 108214], "body": [{"type": "para", "indent": 8, "text": ["A ", {"scheme": "Hom", "value": "/hom/hou/NodeTypeCategory", "type": "link", "text": "", "fallback_text": "hou.NodeTypeCategory", "fullpath": "/hom/hou/NodeTypeCategory"}, " object to specify the type of viewer handle to register."], "extent": [108214, 108309]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["action_callback"]}], "extent": [108309, 108332], "body": [{"type": "para", "indent": 8, "text": ["A mandatory callback required for handling the result when the ", {"type": "code", "text": ["Accept"]}, " button is clicked. "], "extent": [108332, 108441]}, {"type": "para", "indent": 8, "text": ["The callback name is user-defined and takes a dictionary argument as input:"], "extent": [108441, 108525]}, {"lang": "python", "type": "pre", "indent": 8, "text": ["\n        def myAcceptAction( **kwargs )\n        "], "extent": [108525, 108605]}, {"type": "para", "indent": 8, "text": ["The ", {"type": "code", "text": ["kwargs"]}, " dictionary contains the results of the code generation:"], "extent": [108605, 108683]}, {"type": "bullet_group", "body": [{"blevel": 10, "type": "bullet", "indent": 8, "text": [{"type": "code", "text": ["handle_valid"]}, ": Returns ", {"type": "code", "text": ["True"]}, " if the operation succeeded, ", {"type": "code", "text": ["False"]}, " otherwise."], "extent": [108683, 108771]}, {"blevel": 10, "type": "bullet", "indent": 8, "text": [{"type": "code", "text": ["handle_type"]}, ": The type name of the new handle."], "extent": [108771, 108829]}, {"blevel": 10, "type": "bullet", "indent": 8, "text": [{"type": "code", "text": ["handle_type_expr"]}, ": Expression representing the name of the new handle."], "extent": [108829, 108911]}, {"blevel": 10, "type": "bullet", "indent": 8, "text": [{"type": "code", "text": ["handle_label"]}, ": The handle label."], "extent": [108911, 108955]}, {"blevel": 10, "type": "bullet", "indent": 8, "text": [{"type": "code", "text": ["handle_description"]}, ": The handle description which is only displayed in the code header."], "extent": [108955, 109054]}, {"blevel": 10, "type": "bullet", "indent": 8, "text": [{"type": "code", "text": ["handle_category"]}, ": The name of the handle category type."], "extent": [109054, 109121]}, {"blevel": 10, "type": "bullet", "indent": 8, "text": [{"type": "code", "text": ["handle_code"]}, ": The generated python code."], "extent": [109121, 109173]}, {"blevel": 10, "type": "bullet", "indent": 8, "text": [{"type": "code", "text": ["handle_icon_name"]}, ": The name of the icon selected. The name can be either a single icon name or a file path."], "extent": [109173, 109292]}, {"blevel": 10, "type": "bullet", "indent": 8, "text": [{"type": "code", "text": ["handle_icon_filename"]}, ": The icon file path if any."], "extent": [109292, 109354]}], "container": true}], "container": true}], "container": true}], "container": true, "attrs": {"cppname": "HOM_ui::openViewerHandleCodeGenDialog"}, "id": "openViewerHandleCodeGenDialog"}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Resources"], "extent": [109354, 109370], "body": [{"type": "functions_item_group", "body": [{"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["addResourceEventCallback(self, callback)"]}], "role": "item", "extent": [109370, 109417], "body": [{"type": "para", "indent": 8, "text": ["Register a Python callback to be called whenever a ", {"scheme": "Hom", "value": "/hom/hou/resourceEventMessage", "type": "link", "text": "", "fallback_text": "hou.resourceEventMessage", "fullpath": "/hom/hou/resourceEventMessage"}, " event occurs. "], "extent": [109468, 109574]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["'callback'"], "extent": [109574, 109594], "body": [{"type": "para", "indent": 12, "text": ["Any callable Python object that expects a keyworded argument. "], "extent": [109594, 109670]}, {"type": "para", "indent": 12, "text": ["The keyworded argument contains the following:"], "extent": [109670, 109729]}, {"type": "bullet_group", "body": [{"blevel": 14, "type": "bullet", "indent": 12, "text": [{"type": "code", "text": ["event_type"]}, ": ", {"scheme": "Hom", "value": "/hom/hou/resourceEventMessage", "type": "link", "text": "", "fallback_text": "hou.resourceEventMessage", "fullpath": "/hom/hou/resourceEventMessage"}, " event."], "extent": [109729, 109795]}], "container": true}], "container": true}], "container": true}, {"type": "bullet_group", "body": [{"blevel": 10, "type": "bullet", "indent": 8, "text": [{"type": "code", "text": ["resource_type"]}, ": A ", {"scheme": "Hom", "value": "/hom/hou/resourceType", "type": "link", "text": ["resource type"], "fullpath": "/hom/hou/resourceType"}, " such as ", {"type": "code", "text": ["ViewerState"]}, " and ", {"type": "code", "text": ["ViewerHandle"]}, "."], "extent": [109795, 109903], "body": [{"type": "bullet_group", "body": [{"blevel": 14, "type": "bullet", "indent": 12, "text": [{"type": "code", "text": ["type_name"]}, ": The type name of the resource that triggered the event. If the resource is a ", {"type": "code", "text": ["ViewerState"]}, ", the type name can be used for indexing the dictionary returned from ", {"scheme": "Hom", "value": "/hom/hou/ui#viewerStateInfo", "type": "link", "text": "", "fallback_text": "hou.ui.viewerStateInfo", "fullpath": "/hom/hou/ui#viewerStateInfo", "fragment": "#viewerStateInfo"}, "."], "extent": [109903, 110121]}], "container": true}], "container": true}], "container": true}], "container": true, "attrs": {"cppname": "HOM_ui::addResourceEventCallback"}, "id": "addResourceEventCallback"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["removeResourceEventCallback(self,callback)"]}], "role": "item", "extent": [110121, 110169], "body": [{"type": "para", "indent": 4, "text": ["Remove a specific Python callback previously registered with ", {"scheme": "Hom", "value": "/hom/hou/ui#addResourceEventCallback", "type": "link", "text": "", "fallback_text": "hou.ui.addResourceEventCallback", "fullpath": "/hom/hou/ui#addResourceEventCallback", "fragment": "#addResourceEventCallback"}, "."], "extent": [110219, 110324]}], "container": true, "attrs": {"cppname": "HOM_ui::removeResourceEventCallback"}, "id": "removeResourceEventCallback"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["fireResourceCustomEvent(resource_type, user_data, queue=True)"]}], "role": "item", "extent": [110324, 110391], "body": [{"type": "para", "indent": 4, "text": ["This function triggers a ", {"scheme": "Hom", "value": "/hom/hou/resourceEventMessage#OnCustomEvent", "type": "link", "text": ["custom resource event"], "fullpath": "/hom/hou/resourceEventMessage#OnCustomEvent", "fragment": "#OnCustomEvent"}, " which can be used for implementing specific workflows. Client callbacks registered \n    with ", {"scheme": "Hom", "value": "/hom/hou/ui#addResourceEventCallback", "type": "link", "text": "", "fallback_text": "hou.ui.addResourceEventCallback", "fullpath": "/hom/hou/ui#addResourceEventCallback", "fragment": "#addResourceEventCallback"}, " will get notified with the input ", {"type": "code", "text": ["user_data"]}, " argument. The event can be processed immediately or later when Houdini is idle, see the ", {"type": "code", "text": ["queue"]}, " argument \n    for details."], "extent": [110438, 110834]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["resource_type"]}], "extent": [110834, 110855], "body": [{"type": "para", "indent": 8, "text": ["The ", {"scheme": "Hom", "value": "/hom/hou/resourceType", "type": "link", "text": ["event resource type"], "fullpath": "/hom/hou/resourceType"}, "."], "extent": [110855, 110912]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["user_data"]}], "extent": [110912, 110929], "body": [{"type": "para", "indent": 8, "text": ["A dictionary mapping user-defined entries to values of type ", {"type": "code", "text": ["int"]}, ", ", {"type": "code", "text": ["double"]}, ", ", {"type": "code", "text": ["bool"]}, " and ", {"type": "code", "text": ["string"]}, ". An exception \n        is raised if ", {"type": "code", "text": ["user_data"]}, " is empty or contains unsupported value types."], "extent": [110929, 111137]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": [{"type": "code", "text": ["fireResourceCustomEvent"]}, " will add the following entries to the dictionary"], "extent": [111137, 111221], "body": [{"type": "para", "indent": 12, "text": [{"type": "code", "text": ["resource_type"]}, ": The ", {"type": "code", "text": ["resource_type"]}, " argument value.\n            ", {"type": "code", "text": ["event_type"]}, ": ", {"scheme": "Hom", "value": "/hom/hou/resourceEventMessage#OnCustomEvent", "type": "link", "text": ["OnCustomEvent"], "fullpath": "/hom/hou/resourceEventMessage#OnCustomEvent", "fragment": "#OnCustomEvent"}, " event type."], "extent": [111221, 111384]}], "container": true}], "container": true}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["queue"]}], "extent": [111384, 111397], "body": [{"type": "para", "indent": 8, "text": ["If True (default), the event is put on a queue and processed when Houdini is idle. If False, the event is processed immediately. "], "extent": [111397, 111536]}], "container": true}], "container": true}, {"type": "para", "indent": 4, "text": ["Here\u2019s how a custom event can be used."], "extent": [111536, 111579]}, {"lang": "python", "type": "pre", "indent": 4, "text": ["\n\n    # Register a callback for viewer state events\n    hou.ui.addResourceEventCallback(myEventHandler)\n    \n    def myEventHandler(**kwargs):\n        import json\n        if kwargs['event_type'] == hou.resourceEventMessage.OnCustomEvent:\n            if 'load_file' in kwargs:\n                # load a json file and store results \n                with open(kwargs['load_file']) as file:\n                    json_values = json.load(file)                \n            elif 'save_file' in kwargs:\n                # save json_values to a json file\n                with open(kwargs['save_file'], 'w') as file:\n                    json.dump(json_values, file, indent=3)\n\n        # process other non-custom viewer state events\n        elif kwargs['event_type'] == hou.resourceEventMessage.OnEnter:        \n            pass\n\n    ...\n    # load a json file via a custom event\n    hou.ui.fireResourceCustomEvent( hou.resourceType.ViewerState, { 'load_file': '/var/tmp/somefile.json'} )\n    "], "extent": [111579, 112581]}], "container": true, "attrs": {"cppname": "HOM_ui::fireResourceCustomEvent"}, "id": "fireResourceCustomEvent"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["printResourceMessage(resource_type, message, message_type=hou.severityType.Message)"]}], "role": "item", "extent": [112581, 112672], "body": [{"type": "para", "indent": 4, "text": ["Print a user message in the message window of a Viewer State Browser or Viewer Handle Browser. The ", {"scheme": "Hom", "value": "/hom/hou/resourceEventMessage#OnPrintMessage", "type": "link", "text": "", "fallback_text": "hou.resourceEventMessage.OnPrintMessage", "fullpath": "/hom/hou/resourceEventMessage#OnPrintMessage", "fragment": "#OnPrintMessage"}, " event is sent when calling this function."], "extent": [112716, 112908]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["resource_type"]}], "extent": [112908, 112929], "body": [{"type": "para", "indent": 8, "text": ["A resource type to choose the browser console. Use ", {"scheme": "Hom", "value": "/hom/hou/resourceType#ViewerState", "type": "link", "text": "", "fallback_text": "hou.resourceType.ViewerState", "fullpath": "/hom/hou/resourceType#ViewerState", "fragment": "#ViewerState"}, " to print messages in the ", {"type": "code", "text": ["Viewer State Browser"]}, " or \n        ", {"scheme": "Hom", "value": "/hom/hou/resourceType#ViewerHandle", "type": "link", "text": "", "fallback_text": "hou.resourceType.ViewerHandle", "fullpath": "/hom/hou/resourceType#ViewerHandle", "fragment": "#ViewerHandle"}, " for the ", {"type": "code", "text": ["Viewer Handle Browser"]}, "."], "extent": [112929, 113153]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["message"]}], "extent": [113153, 113168], "body": [{"type": "para", "indent": 8, "text": ["String message to print."], "extent": [113168, 113202]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["message_type"]}], "extent": [113202, 113222], "body": [{"type": "para", "indent": 8, "text": [{"scheme": "Hom", "value": "/hom/hou/severityType", "type": "link", "text": ["Type"], "fullpath": "/hom/hou/severityType"}, " of message to print. ", {"scheme": "Hom", "value": "/hom/hou/severityType#Fatal", "type": "link", "text": ["Fatal"], "fullpath": "/hom/hou/severityType#Fatal", "fragment": "#Fatal"}, " and ", {"scheme": "Hom", "value": "/hom/hou/severityType#ImportantMessage", "type": "link", "text": ["Important"], "fullpath": "/hom/hou/severityType#ImportantMessage", "fragment": "#ImportantMessage"}, " types are ignored and default to ", {"scheme": "Hom", "value": "/hom/hou/severityType#Message", "type": "link", "text": ["Message"], "fullpath": "/hom/hou/severityType#Message", "fragment": "#Message"}, "."], "extent": [113222, 113451]}], "container": true}], "container": true}], "container": true, "attrs": {"cppname": "HOM_ui::printResourceMessage"}, "id": "printResourceMessage"}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Packages"], "extent": [113451, 113466], "body": [{"type": "summary", "indent": 0, "text": ["A set of functions for managing package files at runtime."], "extent": [113466, 113532]}, {"type": "functions_item_group", "body": [{"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["loadPackage(file_path)"]}], "role": "item", "extent": [113532, 113560], "body": [{"type": "para", "indent": 4, "text": [{"scheme": null, "value": "/ref/plugins", "type": "link", "text": ["Packages"], "fullpath": "/ref/plugins"}, " are normally loaded on startup by Houdini, this API loads packages at runtime. \n    ", {"type": "code", "text": ["loadPackage"]}, " is typically used for loading resource files installed in a plugin folder. A ", {"type": "q", "text": ["plugin"]}, " \n    package file would typically set ", {"type": "code", "text": ["HOUDINI_PATH"]}, " with the folder path containing the resource files. \n    ", {"type": "code", "text": ["loadPackage"]}, " will load and install the resources found in ", {"type": "code", "text": ["HOUDINI_PATH"]}, "."], "extent": [113595, 113993]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["file_path"]}], "extent": [113993, 114010], "body": [{"type": "para", "indent": 8, "text": ["A full file path pointing to the package file to load."], "extent": [114010, 114078]}], "container": true}], "container": true}, {"type": "para", "indent": 4, "text": ["The following resource types are supported. The resource files must be installed in a subfolder \n    as specified in this table:"], "extent": [114078, 114212]}, {"type": "table", "thead": [{"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["Resource type "], "role": "th", "extent": [114212, 114233], "container": true, "attrs": {"width": "20%"}}, {"type": "cell", "indent": 8, "text": ["Folder "], "role": "th", "extent": [114253, 114271]}], "divider": false}], "body": [{"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["Desktops"]}, " "], "role": "td", "extent": [114271, 114289], "container": true}, {"type": "cell", "indent": 8, "text": [{"type": "code", "text": ["desktop"]}, " "], "role": "td", "extent": [114289, 114309], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 12, "text": ["Contains .desk file(s)."], "extent": [114309, 114346]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["Digital assets"]}, " "], "role": "td", "extent": [114346, 114369], "container": true}, {"type": "cell", "indent": 8, "text": [{"type": "code", "text": ["otls"]}, " "], "role": "td", "extent": [114369, 114386], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 12, "text": ["Contains HDA files along with ", {"scheme": null, "value": "/ref/plugins#oplibraries", "type": "link", "text": ["OPlibraries"], "fullpath": "/ref/plugins#oplibraries", "fragment": "#oplibraries"}, " files."], "extent": [114386, 114483]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["Python modules"]}, " "], "role": "td", "extent": [114483, 114506], "container": true}, {"type": "cell", "indent": 8, "text": [{"type": "code", "text": ["python2.7libs"]}, " \n        ", {"type": "code", "text": ["python3.7libs"]}, " "], "role": "td", "extent": [114506, 114557], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 12, "text": ["Contains .py files. You are responsible to provide the python modules in the right \n            platform folder. The system python path will be updated with the folder path. "], "extent": [114557, 114745]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["Python panels"]}, " "], "role": "td", "extent": [114745, 114767], "container": true}, {"type": "cell", "indent": 8, "text": [{"type": "code", "text": ["python_panels"]}, " "], "role": "td", "extent": [114767, 114793], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 12, "text": ["Contains .pypanel file(s). "], "extent": [114793, 114834]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["Shelf tools"]}, " "], "role": "td", "extent": [114834, 114854], "container": true}, {"type": "cell", "indent": 8, "text": [{"type": "code", "text": ["toolbar"]}, " "], "role": "td", "extent": [114854, 114874], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 12, "text": ["Contains .shelf file(s). The shelf tools are loaded but not active in a shelf set."], "extent": [114874, 114970]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["Viewer states"]}, " "], "role": "td", "extent": [114970, 114992], "container": true}, {"type": "cell", "indent": 8, "text": [{"type": "code", "text": ["viewer_states"]}, " "], "role": "td", "extent": [114992, 115018], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 12, "text": ["Contains python states implementation files."], "extent": [115018, 115087]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["Viewer handles"]}, " "], "role": "td", "extent": [115087, 115110], "container": true}, {"type": "cell", "indent": 8, "text": [{"type": "code", "text": ["viewer_handles"]}, " "], "role": "td", "extent": [115110, 115137], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 12, "text": ["Contains python handles implementation files."], "extent": [115137, 115196]}]}], "divider": false}]}, {"type": "para", "indent": 4, "text": ["The following shows how to setup a plugin package folder by using the ", {"type": "code", "text": ["viewer handle demo"]}, " package as example."], "extent": [115196, 115316]}, {"type": "para", "indent": 4, "text": ["The package file adds the folder path to ", {"type": "code", "text": ["HOUDINI_PATH"]}, ":"], "extent": [115316, 115377]}, {"lang": "sh", "type": "pre", "indent": 4, "text": ["\n    > cat $HFS/houdini/viewer_handles/viewer_handle_demo.json    \n    {\n        \"path\" : \"$HFS/packages/viewer_handle_demo\"\n    }\n    "], "extent": [115377, 115532]}, {"type": "para", "indent": 4, "text": ["The ", {"type": "code", "text": ["viewer handle demo"]}, " folder layout:"], "extent": [115532, 115577]}, {"lang": "sh", "type": "pre", "indent": 4, "text": ["\n    $HFS/packages/viewer_handle_demo/\n        python2.7libs/\n            move_tool_demo/\n                utils.py\n        scenes/\n            move_tool_demo.hip\n            viewer_handle_demo.hip\n        toolbar/\n            viewer_handle_demo.shelf\n        viewer_handles/\n            move_tool_handle.py\n            viewer_handle_intro1.py\n            viewer_handle_intro2.py\n            viewer_handle_intro3.py\n    "], "extent": [115577, 116016]}], "container": true, "attrs": {"cppname": "HOM_ui::loadPackage"}, "id": "loadPackage"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["loadPackageArchive(file_path, extract_path=None)"]}, "  \u2192 ", {"type": "code", "text": ["list"]}, " of ", {"type": "code", "text": ["string"]}], "role": "item", "extent": [116016, 116093], "body": [{"type": "para", "indent": 4, "text": ["Extracts the content of a package archive file on disk and load the embedded packages. A package archive \n    can be used to install multiple plugins in the user folder (default) or optionally in a folder of your \n    choice. An exception is raised if the archive installation directory is read-only. The loaded package paths\n    are returned in a list."], "extent": [116135, 116498]}, {"type": "note_group", "body": [{"type": "note", "indent": 4, "role": "item", "extent": [116498, 116508], "body": [{"type": "bullet_group", "body": [{"blevel": 10, "type": "bullet", "indent": 8, "text": ["The package files must be added at the root level of the archive, ", {"type": "em", "text": ["do not"]}, " put package files in a ", {"type": "code", "text": ["packages"]}, " folder."], "extent": [116508, 116635]}, {"blevel": 10, "type": "bullet", "indent": 8, "text": ["The resource files must be added in the archive subfolders as documented in ", {"scheme": "Hom", "value": "/hom/hou/ui#loadPackage", "type": "link", "text": "", "fallback_text": "hou.ui.loadPackage", "fullpath": "/hom/hou/ui#loadPackage", "fragment": "#loadPackage"}, "."], "extent": [116635, 116747]}, {"blevel": 10, "type": "bullet", "indent": 8, "text": ["File or folder links are not permitted."], "extent": [116747, 116797]}, {"blevel": 10, "type": "bullet", "indent": 8, "text": ["By default Houdini installs the archive in ", {"type": "code", "text": ["$HOUDINI_USER_PREF_DIR"]}, " under a sub-folder with the name of the \n          archive file. For instance, ", {"type": "code", "text": ["myarchive.zip"]}, " would be installed in ", {"type": "code", "text": ["$HOUDINI_USER_PREF_DIR/myarchive"]}, "."], "extent": [116797, 117028]}, {"blevel": 10, "type": "bullet", "indent": 8, "text": ["The supported archive format is ", {"type": "code", "text": ["ZIP"]}, ", other formats may be added in the future."], "extent": [117028, 117120]}], "container": true}], "container": true}], "container": true, "role": "item_group"}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["file_path"]}], "extent": [117120, 117137], "body": [{"type": "para", "indent": 8, "text": ["A file path pointing to a package archive file."], "extent": [117137, 117194]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["extract_path"]}], "extent": [117194, 117214], "body": [{"type": "para", "indent": 8, "text": ["Optional folder path to extract the files."], "extent": [117214, 117266]}], "container": true}], "container": true}], "container": true, "attrs": {"cppname": "HOM_ui::loadPackageArchive"}, "id": "loadPackageArchive"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["unloadPackage(file_path)"]}], "role": "item", "extent": [117266, 117296], "body": [{"type": "para", "indent": 4, "text": ["Unloads (or removes) the resources previously ", {"scheme": "Hom", "value": "/hom/hou/ui#loadPackage", "type": "link", "text": ["loaded"], "fullpath": "/hom/hou/ui#loadPackage", "fragment": "#loadPackage"}, "."], "extent": [117333, 117417]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["file_path"]}], "extent": [117417, 117434], "body": [{"type": "para", "indent": 8, "text": ["A full file path pointing to the package file to unload."], "extent": [117434, 117500]}], "container": true}], "container": true}], "container": true, "attrs": {"cppname": "HOM_ui::unloadPackage"}, "id": "unloadPackage"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["reloadPackage(file_path)"]}], "role": "item", "extent": [117500, 117530], "body": [{"type": "para", "indent": 4, "text": ["Update a package previously ", {"scheme": "Hom", "value": "/hom/hou/ui#loadPackage", "type": "link", "text": ["loaded"], "fullpath": "/hom/hou/ui#loadPackage", "fragment": "#loadPackage"}, ". The package is first ", {"scheme": "Hom", "value": "/hom/hou/ui#unloadPackage", "type": "link", "text": ["unloaded"], "fullpath": "/hom/hou/ui#unloadPackage", "fragment": "#unloadPackage"}, " to uninstall \n    the current resources and ", {"scheme": "Hom", "value": "/hom/hou/ui#loadPackage", "type": "link", "text": ["loaded"], "fullpath": "/hom/hou/ui#loadPackage", "fragment": "#loadPackage"}, " back."], "extent": [117567, 117772]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["file_path"]}], "extent": [117772, 117789], "body": [{"type": "para", "indent": 8, "text": ["A full file path pointing to the package file to reload."], "extent": [117789, 117855]}], "container": true}], "container": true}], "container": true, "attrs": {"cppname": "HOM_ui::reloadPackage"}, "id": "reloadPackage"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["packageInfo(file_paths)"]}, "  \u2192 ", {"type": "code", "text": ["string"]}], "role": "item", "extent": [117855, 117895], "body": [{"type": "para", "indent": 4, "text": ["Return a JSON dictionary string describing one or multiple package plugins previously ", {"scheme": "Hom", "value": "/hom/hou/ui#loadPackage", "type": "link", "text": ["loaded"], "fullpath": "/hom/hou/ui#loadPackage", "fragment": "#loadPackage"}, " in Houdini."], "extent": [117930, 118065]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["file_paths"]}], "extent": [118065, 118083], "body": [{"type": "para", "indent": 8, "text": ["Array of package file paths. If the array is empty (default), all packages currently loaded are added to the dictionary."], "extent": [118083, 118213]}], "container": true}], "container": true}, {"type": "para", "indent": 4, "text": ["This shows the content of the ", {"type": "code", "text": ["viewer handle demo"]}, " package."], "extent": [118213, 118277]}, {"lang": "pycon", "type": "pre", "indent": 4, "text": ["\n    >>> import json\n    >>> print( json.loads(hou.ui.packageInfo()) )\n    {\n        'viewer_handle_demo': {\n            'File path': '$HFS/houdini/viewer_handles/viewer_handle_demo.json',\n            'Load only once': False,\n            'Name': 'viewer_handle_demo',\n            'Resources': {\n                'Shelf': [\n                    '$HFS/packages/viewer_handle_demo/toolbar/viewer_handle_demo.shelf'],\n                'Viewer Handle': [\n                    '$HFS/packages/viewer_handle_demo/viewer_handles/move_tool_handle.py',\n                    '$HFS/packages/viewer_handle_demo/viewer_handles/viewer_handle_intro1.py',\n                    '$HFS/packages/viewer_handle_demo/viewer_handles/viewer_handle_intro2.py',\n                    '$HFS/packages/viewer_handle_demo/viewer_handles/viewer_handle_intro3.py']\n            },\n            'Variables': {\n                'HOUDINI_PATH': [\n                    '$HFS/packages/viewer_handle_demo']\n             }\n        }\n    }      \n    "], "extent": [118277, 119296]}], "container": true, "attrs": {"cppname": "HOM_ui::packageInfo"}, "id": "packageInfo"}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Hotkeys"], "extent": [119296, 119311], "body": [{"type": "functions_item_group", "body": [{"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["hotkeys(self, hotkey_symbol)"]}, "  \u2192 ", {"type": "code", "text": ["tuple"]}, " of ", {"type": "code", "text": ["str"]}], "role": "item", "extent": [119311, 119366], "body": [{"type": "para", "indent": 4, "text": ["Return a tuple of strings that represent the hotkeys currently assigned to\n    the action associated with the hotkey symbol.  The hotkey symbols can be\n    found in the ", {"type": "code", "text": ["$HH/config/Hotkeys"]}, " directory."], "extent": [119397, 119603]}, {"type": "para", "indent": 4, "text": ["Raises: ", {"scheme": "Hom", "value": "/hom/hou/ValueError", "type": "link", "text": "", "fallback_text": "hou.ValueError", "fullpath": "/hom/hou/ValueError"}, " if the provided hotkey symbol doesn\u2019t exist."], "extent": [119603, 119682]}, {"type": "para", "indent": 4, "text": ["For example:"], "extent": [119682, 119699]}, {"lang": "pycon", "type": "pre", "indent": 4, "text": ["\n    >>> hou.ui.hotkeys(\"h.copy\")\n    ('Alt+C', 'Ctrl+C')\n    >>> hou.ui.hotkeys(\"h.pane.copytab\")\n    ('Ctrl+T',)\n    "], "extent": [119699, 119841]}], "container": true, "attrs": {"cppname": "HOM_ui::hotkeys"}, "id": "hotkeys"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["hotkeyDescription(self, hotkey_symbol)"]}, "  \u2192 ", {"type": "code", "text": ["str"]}], "role": "item", "extent": [119841, 119895], "body": [{"type": "para", "indent": 4, "text": ["Return a string that contains a description of the action associated with\n    the hotkey symbol.  The hotkey symbols can be found in the\n    ", {"type": "code", "text": ["$HH/config/Hotkeys"]}, " directory."], "extent": [119936, 120114]}, {"type": "para", "indent": 4, "text": ["Raises: ", {"scheme": "Hom", "value": "/hom/hou/ValueError", "type": "link", "text": "", "fallback_text": "hou.ValueError", "fullpath": "/hom/hou/ValueError"}, " if the provided hotkey symbol doesn\u2019t exist."], "extent": [120114, 120193]}, {"type": "para", "indent": 4, "text": ["For example:"], "extent": [120193, 120210]}, {"lang": "pycon", "type": "pre", "indent": 4, "text": ["\n    >>> hou.ui.hotkeyDescription(\"h.pane.copytab\")\n    'Copy Tab'\n    "], "extent": [120210, 120304]}], "container": true, "attrs": {"cppname": "HOM_ui::hotkeyDescription"}, "id": "hotkeyDescription"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["isKeyMatch(self, key, hotkey_symbol)"]}, "  \u2192 ", {"type": "code", "text": ["bool"]}], "role": "item", "extent": [120304, 120357], "body": [{"type": "para", "indent": 4, "text": ["Return True if the key described by the string ", {"type": "code", "text": ["key"]}, " matches one of the\n    hotkeys assigned to the provided hotkey symbol. The hotkey symbols can be\n    found in the ", {"type": "code", "text": ["$HH/config/Hotkeys"]}, " directory."], "extent": [120391, 120595]}, {"type": "para", "indent": 4, "text": ["Raises: ", {"scheme": "Hom", "value": "/hom/hou/ValueError", "type": "link", "text": "", "fallback_text": "hou.ValueError", "fullpath": "/hom/hou/ValueError"}, " if the provided hotkey symbol doesn\u2019t exist,\n    or the key string doesn\u2019t represent a valid hotkey."], "extent": [120595, 120730]}, {"type": "para", "indent": 4, "text": ["For example:"], "extent": [120730, 120748]}, {"lang": "pycon", "type": "pre", "indent": 4, "text": ["\n    >>> hou.ui.isKeyMatch(\"Ctrl+C\", \"h.copy\")\n    True\n    >>> hou.ui.isKeyMatch(\"Ctrl+C\", \"h.pane.copytab\")\n    False\n    "], "extent": [120748, 120895]}], "container": true, "attrs": {"cppname": "HOM_ui::isKeyMatch"}, "id": "isKeyMatch"}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Layout LOP Asset Galleries"], "extent": [120895, 120929], "body": [{"type": "functions_item_group", "body": [{"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["sharedLayoutDataSource(self)"]}, "  \u2192 ", {"scheme": "Hom", "value": "/hom/hou/AssetGalleryDataSource", "type": "link", "text": "", "fallback_text": "hou.AssetGalleryDataSource", "fullpath": "/hom/hou/AssetGalleryDataSource"}], "role": "item", "extent": [120929, 121000], "body": [{"type": "para", "indent": 4, "text": ["Return the ", {"scheme": "Hom", "value": "/hom/hou/AssetGalleryDataSource", "type": "link", "text": "", "fallback_text": "hou.AssetGalleryDataSource", "fullpath": "/hom/hou/AssetGalleryDataSource"}, " object that is currently being used to populate the asset gallery browsers in all ", {"scheme": null, "value": " Node:lop/layout", "type": "link", "text": ["Layout LOP "], "exists": true}, " nodes."], "extent": [121045, 121214]}], "container": true, "attrs": {"cppname": "HOM_ui::sharedLayoutDataSource"}, "id": "sharedLayoutDataSource"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["setSharedLayoutDataSource(self, datasource)"]}], "role": "item", "extent": [121214, 121263], "body": [{"type": "para", "indent": 4, "text": ["Set the ", {"scheme": "Hom", "value": "/hom/hou/AssetGalleryDataSource", "type": "link", "text": "", "fallback_text": "hou.AssetGalleryDataSource", "fullpath": "/hom/hou/AssetGalleryDataSource"}, " object that should be used to populate the asset gallery browsers in all ", {"scheme": null, "value": " Node:lop/layout", "type": "link", "text": ["Layout LOP "], "exists": true}, " nodes."], "extent": [121311, 121468]}], "container": true, "attrs": {"cppname": "HOM_ui::setSharedLayoutDataSource"}, "id": "setSharedLayoutDataSource"}, {"ext": null, "type": "functions_item", "indent": 0, "text": [{"type": "code", "text": ["reloadSharedLayoutDataSource(self)"]}], "role": "item", "extent": [121468, 121508], "body": [{"type": "para", "indent": 4, "text": ["Forces all ", {"scheme": null, "value": " Node:lop/layout", "type": "link", "text": ["Layout LOP "], "exists": true}, " asset gallery browsers to reload from the underlying shared ", {"scheme": "Hom", "value": "/hom/hou/AssetGalleryDataSource", "type": "link", "text": "", "fallback_text": "hou.AssetGalleryDataSource", "fullpath": "/hom/hou/AssetGalleryDataSource"}, ". Call this method after manipulating the data source returned by ", {"type": "code", "text": ["hou.ui.sharedLayoutDataSource()"]}, " to refresh the layout asset browsers."], "extent": [121559, 121835]}], "container": true, "attrs": {"cppname": "HOM_ui::reloadSharedLayoutDataSource"}, "id": "reloadSharedLayoutDataSource"}], "container": true, "role": "item_group"}]}], "text": "Functions"}], "title": [{"type": "supertitle", "text": "hou."}, "ui"], "summary": ["Module containing user interface related functions."]}