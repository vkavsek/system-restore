{"type": "root", "attrs": {"flow": "/render/mug"}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["Packed primitives"], "extent": [0, 22]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Overview"], "extent": [44, 59], "body": [{"type": "para", "indent": 0, "text": ["Packed Primitives express a procedure to generate geometry at ", {"type": "em", "text": ["render time"]}, ". The purpose is to decrease the amount of memory used when interacting with Houdini, by reducing duplication and only loading information when necessary."], "extent": [59, 291]}, {"type": "para", "indent": 0, "text": ["Packed Primitives have information about geometry embedded inside of them. The information could be an actual piece of geometry stored in memory, a reference to a part of another piece of geometry, or a file path to geometry stored on disk."], "extent": [291, 533]}, {"type": "para", "indent": 0, "text": ["Mantra, the Houdini viewport, the solvers, and so on, know how to interpret the packed information, and can render/display/work with the geometry efficiently."], "extent": [533, 693]}, {"type": "para", "indent": 0, "text": ["Packed primitives cannot be edited \u2013 they are lightweight references. If you want to edit packed geometry, you have to use the ", {"scheme": "Node", "value": "/nodes/sop/unpack", "type": "link", "text": ["Unpack node"], "fullpath": "/nodes/sop/unpack"}, " to extract the part of the geometry you want to edit, modify it, and then optionally repack the geometry using the ", {"scheme": "Node", "value": "/nodes/sop/pack", "type": "link", "text": ["Pack node"], "fullpath": "/nodes/sop/pack"}, "."], "extent": [693, 998]}, {"type": "para", "indent": 0, "text": ["Packed primitives are useful for rendering and simulating heavy geometry, or large numbers of copies/instances. Any time the geometry will not change (for example, non-deforming RBD objects) you can benefit from packing the geometry."], "extent": [998, 1234]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Types of packed primitives"], "extent": [1234, 1267], "body": [{"level": 3, "id": "memory", "container": true, "type": "h", "indent": 0, "text": ["In-memory packed primitives"], "extent": [1267, 1313], "body": [{"type": "para", "indent": 0, "text": ["You get an ", {"type": "em", "text": ["in-memory"]}, " packed primitive by converting geometry to a packed primitive using the ", {"scheme": "Node", "value": "/nodes/sop/pack", "type": "link", "text": ["Pack geometry node"], "fullpath": "/nodes/sop/pack"}, ". This creates a Packed Geometry Primitive with an embedded reference to the current version of your geometry in memory. The ", {"type": "q", "text": ["embedded"]}, " geometry becomes a single un-editable ", {"type": "q", "text": ["primitive"]}, " with a single transform."], "extent": [1313, 1655]}, {"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": ["The ", {"type": "q", "text": ["embedded geometry"]}, " is just a reference to content in memory. Copying a packed primitive copies the ", {"type": "em", "text": ["reference"]}, " rather than the geometry itself. So the referenced geometry is shared among all copies of the packed primitive. This is more memory efficient than copying unpacked Houdini geometry, which creates independent duplicates of all points, primitives, attributes, and so on."], "extent": [1655, 2043], "body": [{"type": "para", "indent": 4, "text": [{"scheme": "Image", "value": "/images/render/mug/packed/BasicPackedPrimUpdate.jpg", "type": "img", "text": ""}], "extent": [2043, 2112]}], "container": true}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["Copies of packed primitives use less memory, are simpler to transform, and can be drawn more efficiently in the viewport or rendered by Mantra."], "extent": [2112, 2259]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["Because the referenced geometry exists in a traditional network, you can easily generate procedural geometry which adapts to your scene, use stamping to generate variations of your packed geometry, or make interactive edits to your geometry while viewing the results live. Essentially, working with in-memory Packed Primitives is a more interactive and user-friendly version of traditional instancing workflows."], "extent": [2259, 2674]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["You can ", {"type": "q", "text": ["unpack"]}, " individual copies of an in-memory packed primitive in a geometry network to create an actual copy of the referenced geometry. This allows you to generate procedural workflows which are a hybrid of traditional Houdini geometry and packed primitives."], "extent": [2674, 2943]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"type": "q", "text": ["Packed"]}, " in this case does not mean ", {"type": "q", "text": ["compressed"]}, " or ", {"type": "q", "text": ["smaller"]}, ". You are keeping the original geometry in RAM as well as using a bit of memory for each reference. A single packed primitive is not necessarily any more efficient than just using original piece of geometry. The benefit comes from the efficient representation of large number of copies that share the referenced geometry."], "extent": [2943, 3329], "body": [{"type": "para", "indent": 4, "text": ["This is important to remember when copy-stamping packed geometry. If every instance of your packed geometry is unique, you get no memory or performance benefits. In fact this will use more memory than ", {"type": "q", "text": ["real"]}, " geometry would, because each packed primitive has its own overhead."], "extent": [3329, 3610]}, {"type": "para", "indent": 4, "text": ["(It\u2019s possible to offset the cost of packing stamped geometry somewhat when there are limited numbers of stamped variations. See the ", {"scheme": "Node", "value": "/nodes/sop/copy", "type": "link", "text": ["Copy SOP"], "fullpath": "/nodes/sop/copy"}, "'s ", {"type": "ui", "text": ["Cache stamping"]}, " parameter.)"], "extent": [3610, 3807]}], "container": true}], "container": true}]}, {"level": 3, "id": "disk", "container": true, "type": "h", "indent": 0, "text": ["Packed disk primitives"], "extent": [3807, 3845], "body": [{"type": "para", "indent": 0, "text": ["A ", {"type": "em", "text": ["packed disk"]}, " primitive embeds a reference to a file on disk. At display or render time, Mantra/Houdini reads the data from disk rather than always keeping it in memory. Some file formats, such as ", {"type": "code", "text": [".bgeo"]}, " and Alembic, make this very efficient by allowing fast random access to their contents."], "extent": [3845, 4142]}, {"type": "para", "indent": 0, "text": ["You can load geometry from disk as a packed primitive using the ", {"scheme": "Node", "value": "/nodes/sop/file", "type": "link", "text": ["File SOP"], "fullpath": "/nodes/sop/file"}, "'s ", {"type": "ui", "text": ["Load"]}, " parameter to ", {"type": "q", "text": ["Packed disk primitive"]}, "."], "extent": [4142, 4281]}, {"type": "para", "indent": 0, "text": ["A packed disk primitive is similar to an in-memory packed primitive: the \u201cembedded\u201d geometry appears as a single un-editable primitive with a single transform."], "extent": [4281, 4442]}, {"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": ["Much like in-memory packed primitives, a packed disk primitive is an excellent choice for efficiently creating copies of geometry in the viewport and Mantra. Copying a packed disk primitive just copies the reference to the disk file."], "extent": [4442, 4679]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["Because packed disk primitives simply load already-generated data from files, they are less dynamic than in-memory packed primitives. The only way to edit a packed disk primitive is to ", {"type": "q", "text": ["unpack"]}, " it, copying the file data into memory."], "extent": [4679, 4915]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["The viewport does not copy the geometry for each instance, but simply draws the same data multiple times with different transforms. The viewport can also draw a much simpler representation of the referenced geometry, such as a point cloud or bounding box."], "extent": [4915, 5174], "body": [{"type": "para", "indent": 4, "text": [{"scheme": "Image", "value": "/images/render/mug/packed/PackedVisualization.jpg", "type": "img", "text": ""}], "extent": [5174, 5237]}], "container": true}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["Like Houdini, Mantra can ", {"type": "q", "text": ["stream"]}, " the data from the disk file as needed instead of copying it into memory, reducing Mantra\u2019s memory usage."], "extent": [5237, 5379]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["Whereas Houdini must write the entire geometry for any in-memory geometry into the IFD (the scene description file it sends to Mantra), for packed disk primitives it simply writes the reference to the file on disk. This can make IFDs much faster to generate and smaller on disk for very large/complex scenes."], "extent": [5379, 5691]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["Packed disk primitives are ideal for scene assembly, especially for static background objects. Their small memory use at render time also makes them very useful for objects with large on-disk footprints, such as simulation output."], "extent": [5691, 5925]}], "container": true}, {"type": "para", "indent": 0, "text": [{"scheme": "Image", "value": "/images/render/mug/packed/HoudiniGeometryRenderWorkflow.jpg", "type": "img", "text": ""}], "extent": [5925, 5994]}, {"type": "para", "indent": 0, "text": [{"scheme": "Image", "value": "/images/render/mug/packed/PackedPrimRenderWorkflow.jpg", "type": "img", "text": ""}], "extent": [5994, 6058]}, {"type": "para", "indent": 0, "text": [{"scheme": "Image", "value": "/images/render/mug/packed/BasicPackedDiskPrimRenderWorkflow.jpg", "type": "img", "text": ""}], "extent": [6058, 6132]}]}, {"level": 3, "id": "packeddiskseq", "container": true, "type": "h", "indent": 0, "text": ["Packed Disk Sequence primitives"], "extent": [6132, 6188], "body": [{"type": "para", "indent": 0, "text": ["Packed Disk Sequence primitives are similar to Packed Disk primitives (see above), but the primitive references a sequence of geometry filenames and an index into the file sequence. When mantra loads the sequence primitive as part of the scene, it knows the full sequence (instead of just having the geometry for the current frame), so it can interpolate between frames for motion blur. So Packed Disk Sequence primitives are a simple way to instance animated geometry (in the form of per-frame geometry files) efficiently at render time with motion blur."], "extent": [6188, 6746]}, {"type": "para", "indent": 0, "text": ["To import an animated sequence as a PDS, use a ", {"scheme": "Node", "value": "/nodes/sop/file", "type": "link", "text": ["File SOP"], "fullpath": "/nodes/sop/file"}, ". Set the ", {"type": "ui", "text": ["Load"]}, " parameter to ", {"type": "q", "text": ["Packed Disk Sequence"]}, ". Click the ", {"scheme": "Icon", "value": "BUTTONS/chooser_file", "type": "link", "text": "", "fullpath": "/model/BUTTONS/chooser_file"}, " file chooser icon next to the ", {"type": "ui", "text": ["Geometry file"]}, " parameter and choose the geometry sequence to load."], "extent": [6746, 7012]}, {"type": "note_group", "body": [{"type": "note", "indent": 0, "role": "item", "extent": [7012, 7018], "body": [{"type": "para", "indent": 4, "text": ["Technically, when you're loading a PDS, the ", {"type": "code", "text": ["$F"]}, " in the ", {"type": "ui", "text": ["Geometry file"]}, " pattern is interpolated between the values in the ", {"type": "ui", "text": ["Frame range"]}, " parameter (it doesn\u2019t refer to the current frame as usual). We use ", {"type": "code", "text": ["$F"]}, " here for consistency with the other modes, and so the file chooser works as you expect."], "extent": [7018, 7323]}], "container": true}], "container": true, "role": "item_group"}, {"type": "para", "indent": 0, "text": ["The ", {"type": "ui", "text": ["Sequence index"]}, " parameter on the Load node sets which (floating point) frame in the animated sequence to use. The default is ", {"type": "code", "text": ["$FF - 1"]}, ". You can edit the index on an existing PDS primitive using the ", {"scheme": "Node", "value": "/nodes/sop/packeddiskedit", "type": "link", "text": ["Packed Disk Edit SOP"], "fullpath": "/nodes/sop/packeddiskedit"}, "."], "extent": [7323, 7577]}, {"type": "para", "indent": 0, "text": ["Packed disk primitives automatically cycle when the rendered frame is outside the animation\u2019s frame range.  You can change this by setting the primitive string attribute ", {"type": "q", "text": ["wrap"]}, " on the packed disk sequence to one of ", {"type": "code", "text": ["\"clamp\""]}, ", ", {"type": "code", "text": ["\"cycle\""]}, ", ", {"type": "code", "text": ["\"mirror\""]}, " or ", {"type": "code", "text": ["\"strict\""]}, "."], "extent": [7577, 7841]}, {"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": [{"type": "code", "text": ["\"cycle\""]}, " automatically wraps the sample index to the valid range (the default behavior). "], "extent": [7841, 7934]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"type": "code", "text": ["\"clamp\""]}, " clamps out of range index samples to the valid range (so, for example, if the valid frame range is 1-5, frame numbers greater than 5 will stick at frame 5)."], "extent": [7934, 8103]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"type": "code", "text": ["\"mirror\""]}, " wraps by reversing in a zig-zag or ping-pong style."], "extent": [8103, 8168]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"type": "code", "text": ["\"strict\""]}, " gives empty geometry outside the valid frame range."], "extent": [8168, 8235]}], "container": true}]}, {"level": 3, "id": "fragments", "container": true, "type": "h", "indent": 0, "text": ["Packed fragments"], "extent": [8235, 8272], "body": [{"type": "para", "indent": 0, "text": ["When you pack geometry that includes a ", {"type": "code", "text": ["name"]}, " attribute, each piece of geometry that shares the same ", {"type": "code", "text": ["name"]}, " value becomes a ", {"type": "em", "text": ["packed fragment"]}, " primitive, containing a reference to the original geometry. So each fragment shares the same geometry, but refers to a subset of it."], "extent": [8272, 8549]}, {"type": "para", "indent": 0, "text": [{"scheme": "Image", "value": "/images/render/mug/packed/BasicPackedFragmentUpdate.jpg", "type": "img", "text": ""}], "extent": [8549, 8614]}, {"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": ["Packed fragment primitives are ideal for representing many pieces of a complete model. Especially where each fragment will receive some unique transformation, such as in a rigid body simulation."], "extent": [8614, 8812]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["If you ", {"type": "q", "text": ["unpack"]}, " a fragment, only that part of the original model is copied into memory."], "extent": [8812, 8903]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["Because each fragment is just a reference to the original geometry, it\u2019s very efficient to have a large number of them. However, if you're deleting many of the fragments, they can become more inefficient than just using real geometry. Even if you only have a few crumbs left, Houdini is still keeping the entire original model in memory, whereas if you used real geometry, memory usage would be high at first but go down as you deleted parts."], "extent": [8903, 9349], "body": [{"type": "para", "indent": 4, "text": ["You can try getting the best of both worlds by ", {"type": "q", "text": ["unpacking"]}, " the remaining fragments at some point where you only have a few left."], "extent": [9349, 9484]}], "container": true}], "container": true}]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["How to"], "extent": [9484, 9497], "body": [{"type": "task_group", "body": [{"ext": null, "type": "task", "indent": 0, "text": ["Convert SOP geometry into a packed primitive"], "role": "item", "extent": [9497, 9550], "body": [{"type": "para", "indent": 4, "text": ["Use the ", {"scheme": "Node", "value": "/nodes/sop/pack", "type": "link", "text": ["Pack SOP"], "fullpath": "/nodes/sop/pack"}, ".\n    The Pack node can create a new primitive with all the input geometry, or separate packed primitives based on the value of an attribute (such as ", {"type": "code", "text": ["name"]}, ", as created by ", {"scheme": null, "value": "/shelf/shatter", "type": "link", "text": ["Shatter"], "fullpath": "/shelf/shatter"}, ")."], "extent": [9550, 9786]}], "container": true}, {"ext": null, "type": "task", "indent": 0, "text": ["Extract a ", {"type": "q", "text": ["sub-primitive"]}, " from inside a packed primitive"], "role": "item", "extent": [9786, 9850], "body": [{"type": "para", "indent": 4, "text": ["Use the ", {"scheme": "Node", "value": "/nodes/sop/unpack", "type": "link", "text": ["Unpack SOP"], "fullpath": "/nodes/sop/unpack"}, "."], "extent": [9850, 9897]}], "container": true}, {"ext": null, "type": "task", "indent": 0, "text": ["Import geometry from a dynamics network as a packed primitive"], "role": "item", "extent": [9897, 9966], "body": [{"type": "para", "indent": 4, "text": ["The ", {"scheme": "Node", "value": "/nodes/sop/dopimport", "type": "link", "text": ["DOP Import SOP"], "fullpath": "/nodes/sop/dopimport"}, " has an option to import ", {"type": "code", "text": ["Geometry"]}, " data from a dynamics network as a packed primitive."], "extent": [9966, 10098]}], "container": true}, {"ext": null, "type": "task", "indent": 0, "text": ["Access attributes on packed geometry in a VEX shader"], "role": "item", "extent": [10098, 10158], "body": [{"type": "para", "indent": 4, "text": ["You can use the ", {"scheme": "Vex", "value": "/vex/functions/renderstate", "type": "link", "text": "", "fallback_text": "renderstate()", "fullpath": "/vex/functions/renderstate"}, " VEX function to get the value of attributes on packed geometry. For example, if the packed geometry has a ", {"type": "code", "text": ["Cd"]}, " attribute, you can use ", {"type": "code", "text": ["renderstate(\"packed:Cd\", PackedCd)"]}, "."], "extent": [10158, 10369]}], "container": true}], "container": true, "role": "item_group"}, {"type": "note_group", "body": [{"type": "note", "indent": 0, "role": "item", "extent": [10369, 10375], "body": [{"type": "para", "indent": 4, "text": ["You cannot set/use ", {"scheme": null, "value": "/model/attributes", "type": "link", "text": ["primitive attributes"], "fullpath": "/model/attributes"}, " on the geometry other than the ", {"type": "code", "text": ["material"]}, " attribute (which Houdini treats as a special case).\n    Primitive-level attributes will not work in general since to Houdini the packed geometry looks like a single primitive with a single point."], "extent": [10375, 10679]}], "container": true}], "container": true, "role": "item_group"}]}, {"level": 2, "id": "render", "container": true, "type": "h", "indent": 0, "text": ["Rendering"], "extent": [10679, 10704], "body": [{"type": "para", "indent": 0, "text": ["Packed primitives are extremely useful for rendering in Mantra. They let you generate IFD and render faster and use less memory and disk space. However, you should understand how Mantra works with packed primitives to take full advantage of them."], "extent": [10704, 10954]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Material assignment"], "extent": [10954, 10982], "body": [{"type": "para", "indent": 0, "text": ["With standard geometry, you can assign materials at two levels:"], "extent": [10982, 11048]}, {"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": ["At the object level, in the ", {"scheme": "Node", "value": "/nodes/obj/geo", "type": "link", "text": ["Geometry node"], "fullpath": "/nodes/obj/geo"}, "'s parameters."], "extent": [11048, 11121], "body": [], "container": true, "attrs": {"glyph": "fa-cube"}}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["At the geometry (SOPs) level, using the ", {"scheme": "Node", "value": "/nodes/sop/material", "type": "link", "text": ["Material node"], "fullpath": "/nodes/sop/material"}, " to set the ", {"type": "code", "text": ["material"]}, " attribute on certain primitives. This overrides the object material for the primitives that have it."], "extent": [11142, 11341], "body": [], "container": true, "attrs": {"glyph": "fa-th-large"}}], "container": true}, {"type": "para", "indent": 0, "text": ["When Houdini generates the scene description (IFD) file for rendering, it checks objects and geometry attributes for material assignments, so it knows which shaders to include in the IFD."], "extent": [11366, 11555]}, {"type": "para", "indent": 0, "text": [{"scheme": "Image", "value": "/images/render/mug/packed/PackedPrimitiveForRender-01.jpg", "type": "img", "text": ""}], "extent": [11555, 11622]}, {"type": "para", "indent": 0, "text": ["When you use packed primitives, it adds a third possible level of material assignment:"], "extent": [11622, 11710]}, {"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": ["Material attributes on the embedded geometry inside packed primitives. These override ", {"type": "q", "text": ["higher"]}, " levels (primitive attributes and object materials)."], "extent": [11710, 11859], "body": [], "container": true, "attrs": {"glyph": "fa-th"}}], "container": true}, {"type": "para", "indent": 0, "text": ["However, when Houdini generates the IFD, it doesn\u2019t look in the embedded geometry (which might be a very large file that would be slow to scan through). so it can\u2019t know what material attributes the embedded geometry might have, so it won\u2019t know to include the shaders in the IFD. Only when Mantra unpacks the primitives at render time will it find out it might not have the shaders it needs."], "extent": [11878, 12272]}, {"type": "para", "indent": 0, "text": [{"scheme": "Image", "value": "/images/render/mug/packed/PackedPrimitiveForRender-02.jpg", "type": "img", "text": ""}], "extent": [12272, 12339]}, {"type": "para", "indent": 0, "text": ["To work around this problem, you can tell Houdini to include ", {"type": "em", "text": ["all"]}, " shaders in the scene in the IFD, regardless of whether they're assigned at the object or geometry levels. Turn on ", {"type": "ui", "text": ["Save all SHOPs"]}, " on the ", {"scheme": "Node", "value": "/nodes/out/ifd", "type": "link", "text": ["Mantra render node"], "fullpath": "/nodes/out/ifd"}, ". (This will increase the on-disk size of your IFD by a small amount). As long as you load the shaders needed by packed primitives into the scene, they will be available at render time."], "extent": [12339, 12766]}, {"type": "para", "indent": 0, "text": [{"scheme": "Image", "value": "/images/render/mug/packed/PackedPrimitiveForRender-03.jpg", "type": "img", "text": ""}], "extent": [12766, 12833]}, {"type": "tip_group", "body": [{"type": "tip", "indent": 0, "role": "item", "extent": [12833, 12838], "body": [{"type": "para", "indent": 4, "text": ["For how to assign shaders and override shading parameters ", {"type": "q", "text": ["inside"]}, " packed geometry, see the help on ", {"scheme": null, "value": "/shade/stylesheets", "type": "link", "text": ["material style sheets"], "fullpath": "/shade/stylesheets"}, "."], "extent": [12838, 12988]}], "container": true}], "container": true, "role": "item_group"}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Displacement and subdivision surfaces"], "extent": [12988, 13034], "body": [{"type": "para", "indent": 0, "text": ["Houdini does displacement shading and subdivision surface rendering the same for packed geometry as for standard geometry. However, if you're primarily using packed geometry for instancing, and applying displacement shaders or using subdivision rendering, you need to think about ", {"type": "em", "text": ["dicing"]}, "."], "extent": [13034, 13326]}, {"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": ["Before rendering a displaced or a subdivided surface, Mantra ", {"type": "q", "text": ["dices"]}, " the geometry into smaller primitives until there is one primitive for every pixel (when shading quality is set to ", {"type": "code", "text": ["1"]}, "). This means it dices objects closer to the camera more than objects in the distance (which have less pixel coverage)."], "extent": [13326, 13635]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["When instancing using packed geometry, this can cause a problem. The benefit of instancing is that geometry is shared across all instances. But if you add displacements or subdivision rendering, Mantra must load and dice each object individually, which means the geometry is no longer being shared."], "extent": [13635, 13937]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["To avoid this problem, you can add the ", {"scheme": "Mantra", "value": "/props/mantra#vm_sharedisplace", "type": "link", "text": "", "fallback_text": "vm_sharedisplace", "fullpath": "/props/mantra#vm_sharedisplace", "fragment": "#vm_sharedisplace"}, " render property to the object containing your instances. Turning this parameter on will tell Mantra to:"], "extent": [13937, 14109], "body": [{"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": ["Use the highest level of dicing necessary for the scene on one instance, and then"], "extent": [14109, 14202]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": ["Share that diced geometry between all instances"], "extent": [14202, 14257]}], "container": true}], "container": true}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["This means objects far away will get ", {"type": "q", "text": ["too much"]}, " detail. There is some potential for this to cause slowdowns, however the benefits of preserving instancing probably outweigh any downside."], "extent": [14257, 14447], "body": [{"type": "para", "indent": 4, "text": ["In the worst case, if ", {"type": "q", "text": ["incorrect"]}, " dicing levels cause problems, you can split the instances between two objects based on distance from camera, so the ", {"type": "q", "text": ["highest dicing level"]}, " is computed separately for ", {"type": "q", "text": ["near"]}, " and ", {"type": "q", "text": ["far"]}, "."], "extent": [14447, 14670]}, {"type": "para", "indent": 4, "text": ["Alternatively, you could unpack instances close to the camera, removing them from the ", {"type": "q", "text": ["highest necessary dicing level"]}, " calculation."], "extent": [14670, 14808]}], "container": true}], "container": true}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Attributes"], "extent": [14808, 14827], "body": [{"type": "para", "indent": 0, "text": [{"type": "strong", "text": ["Disk and in-memory"]}, " packed primitive instances are simply pointers to the same file or memory, so each instance can\u2019t have individual attribute values (except the ", {"type": "code", "text": ["material"]}, " and ", {"type": "code", "text": ["vel"]}, " (velocity) attributes which is specifically hacked to work, see below)."], "extent": [14827, 15086]}, {"type": "para", "indent": 0, "text": [{"type": "strong", "text": ["Packed fragment"]}, " instances ", {"type": "em", "text": ["can"]}, " have individual attributes because they are ", {"type": "em", "text": ["coalesced"]}, ", but this also means they're less efficient than on-disk or in-memory packed primitives."], "extent": [15086, 15266]}, {"type": "para", "indent": 0, "text": [{"type": "strong", "text": ["Alembic primitive"]}, " instances cannot have individual attribute values. However, there is an option to ", {"type": "q", "text": ["unshare"]}, " Alembic primitives in Mantra. This uses a lot more memory but allows you to have individual attributes on Alembic primitive instances at render time."], "extent": [15266, 15529]}, {"type": "para", "indent": 0, "text": ["Mantra creates a tree of virtual Mantra objects for packed primitives, and copies the ", {"type": "code", "text": ["material"]}, " attribute down to each virtual object in the tree (if they don\u2019t have a ", {"type": "code", "text": ["material"]}, " attribute of their own), so materials on the Geometry object are properly applied to packed primitives inside."], "extent": [15529, 15825]}, {"type": "para", "indent": 0, "text": ["Similarly, the ", {"type": "code", "text": ["vel"]}, " (velocity) attribute is ", {"type": "em", "text": ["added"]}, " down through the virtual object tree, so motion blur will work properly."], "extent": [15825, 15952]}, {"type": "para", "indent": 0, "text": ["Primitive attributes on packed primitives are copied to object properties on the virtual Mantra object. You can access them in shader code using the ", {"scheme": "Node", "value": "/nodes/vop/renderstate", "type": "link", "text": ["Render State VOP"], "fullpath": "/nodes/vop/renderstate"}, " or ", {"scheme": "Vex", "value": "/vex/functions/renderstate", "type": "link", "text": "", "fallback_text": "renderstate()", "fullpath": "/vex/functions/renderstate"}, " VEX function."], "extent": [15952, 16177]}, {"type": "para", "indent": 0, "text": ["If you have a primitive ", {"type": "code", "text": ["material"]}, " attribute ", {"type": "em", "text": ["inside"]}, " a packed primitive, Houdini won\u2019t look inside the primitive to know that it needs to include that material in the file it sends to Mantra. You can fix this (at the expense of a larger render file) by turning on the ", {"type": "ui", "text": ["Declare all SHOPs"]}, " option, which tells Houdini to simply include all materials in the render file."], "extent": [16177, 16549]}, {"type": "para", "indent": 0, "text": ["When Mantra renders packed primitive ", {"type": "em", "text": ["fragments"]}, ", it copies attributes from the packed primitive onto the geometry, so velocity blur on fragments will work. Other packed primitive types will not work this way since they are rendered as instances."], "extent": [16549, 16798]}]}]}], "title": ["Packed primitives"]}