{"type": "root", "attrs": {"type": "node", "context": "chop", "internal": "copy", "icon": "CHOP/copy", "version": null, "namespace": null}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["Copy"], "extent": [61, 70]}, {"type": "summary", "indent": 0, "text": ["Produces multiple copies of the second input along the timeline of the first input."], "extent": [70, 162]}, {"type": "para", "indent": 0, "text": ["This CHOP produces multiple copies of the second input along the\ntimeline of the first input. The first input provides the trigger\nsignals or the convolve levels."], "extent": [162, 326]}, {"type": "para", "indent": 0, "text": ["The Copy CHOP can be used to produce a motion every time a trigger\noccurs. It can be used to trigger motion, such as eyelid blinks. The\ncopies it produces can be identical, or the copies can be re-cooked each\ntime a copy is added to the timeline. It is useful for triggering a\nsound multiple times, where the sounds may overlap in time."], "extent": [326, 664]}, {"type": "para", "indent": 0, "text": ["Each copy that is added to the output can be completely different than\nany other copy. By passing variables through the Variables page, the\nsecond (Copy) input can be any chop chain that uses the variables and\nrecooks to create each copy."], "extent": [664, 905]}, {"level": 1, "id": "parameters", "container": true, "type": "parameters_section", "indent": 0, "role": "section", "extent": [905, 917], "body": [{"level": 2, "id": null, "container": true, "type": "h", "indent": 4, "text": ["Copy"], "extent": [917, 933], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 8, "text": ["Copy Method"], "extent": [933, 955], "body": [{"type": "para", "indent": 12, "text": ["Method used for the copy operation."], "extent": [955, 1004]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 12, "text": ["Triggered Copy"], "extent": [1004, 1032], "body": [{"type": "para", "indent": 16, "text": ["The second input is copied (convolved) over the first\n                input\u2019s trigger points only. A trigger point occurs\n                whenever the first input\u2019s channel crosses the ", {"type": "ui", "text": ["Trigger\n                Threshold"]}, " value. Overlapping copies are added."], "extent": [1032, 1308]}], "container": true}, {"type": "dt", "indent": 12, "text": ["Convolve"], "extent": [1308, 1330], "body": [{"type": "para", "indent": 16, "text": ["For every sample in the first input\u2019s channel, the\n                second input is shifted to that point in time, scaled by\n                the sample value, and added into the output channels."], "extent": [1330, 1540]}], "container": true}], "container": true}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Output Method"], "extent": [1540, 1563], "body": [{"type": "para", "indent": 12, "text": ["How to output the channels"], "extent": [1563, 1603]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 12, "text": ["One Channel Per Template Channel"], "extent": [1603, 1649], "body": [{"type": "para", "indent": 16, "text": ["Each output channel is a channel from the first input\n                combined with the corresponding channel from the second\n                input."], "extent": [1649, 1814]}], "container": true}, {"type": "dt", "indent": 12, "text": ["One Channel Per Copy Channel"], "extent": [1814, 1856], "body": [{"type": "para", "indent": 16, "text": ["Each output channel is a channel from the second input,\n                with copies triggered by every channel of the first\n                input."], "extent": [1856, 2019]}], "container": true}], "container": true}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Trigger Threshold"], "extent": [2019, 2046], "body": [{"type": "para", "indent": 12, "text": ["The threshold value for triggering copies."], "extent": [2081, 2136]}], "container": true, "attrs": {"channels": "/threshold"}, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Remainder"], "extent": [2136, 2155], "body": [{"type": "para", "indent": 12, "text": ["What to do with remaining samples at end of the interval."], "extent": [2155, 2226]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 12, "text": ["Discard Remainder"], "extent": [2226, 2257], "body": [{"type": "para", "indent": 16, "text": ["Output interval = input interval."], "extent": [2257, 2307]}], "container": true}, {"type": "dt", "indent": 12, "text": ["Make Output Longer"], "extent": [2307, 2339], "body": [{"type": "para", "indent": 16, "text": ["Output is longer if envelope unfinished."], "extent": [2339, 2396]}], "container": true}, {"type": "dt", "indent": 12, "text": ["Mix Remainder to Beginning"], "extent": [2396, 2436], "body": [{"type": "para", "indent": 16, "text": ["Add remainder to samples at the start."], "extent": [2436, 2491]}], "container": true}], "container": true}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Keep Non-Scoped Channels"], "extent": [2491, 2525], "body": [{"type": "para", "indent": 12, "text": ["If on, non-scoped channels are copied to the output,\n            otherwise they are deleted."], "extent": [2525, 2631]}], "container": true, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 4, "text": ["Variables"], "extent": [2631, 2651], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 8, "text": ["Cook Each Copy"], "extent": [2651, 2676], "body": [{"type": "para", "indent": 12, "text": ["Recook the second input for each triggered copy."], "extent": [2676, 2737]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Param 1-10"], "extent": [2737, 2757], "body": [{"type": "para", "indent": 12, "text": ["The parameters are re-calculated for each copy. The first\n            field is the parameter name, the second is its value. You\n            can use local variables and the ic() functions. The\n            parameters you set here are available to any CHOP in the\n            network attached to the second input through function\n            param(", {"type": "q", "text": ["name"]}, ", initval), where initval is any initial value\n            for the parameter, usually set to 0."], "extent": [2757, 3229]}], "container": true, "role": "item"}], "container": true, "role": "item_group"}]}], "text": "Parameters"}, {"level": 2, "id": "common", "container": true, "type": "h", "indent": 0, "text": ["Common"], "extent": [2334, 2356], "body": [{"type": "para", "indent": 0, "text": ["Some of these parameters may not be available on all CHOP nodes."], "extent": [2356, 2423]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 0, "text": ["Scope"], "extent": [2423, 2430], "body": [{"type": "para", "indent": 4, "text": ["To determine which channels get affected, some CHOPs have a scope string. Patterns can be used in the scope, for example ", {"type": "code", "text": ["*"]}, " (match all), and ", {"type": "code", "text": ["?"]}, " (match single character). "], "extent": [2430, 2612]}, {"type": "para", "indent": 4, "text": ["The following are examples of possible channel name matching options:"], "extent": [2612, 2691]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["chan2"]}], "extent": [2691, 2704], "body": [{"type": "para", "indent": 8, "text": ["Matches a single channel name."], "extent": [2704, 2748]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["chan3 tx ty tz"]}], "extent": [2748, 2770], "body": [{"type": "para", "indent": 8, "text": ["Matches four channel names, separated by spaces."], "extent": [2770, 2832]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["chan*"]}], "extent": [2832, 2845], "body": [{"type": "para", "indent": 8, "text": ["Matches each channel that starts with ", {"type": "code", "text": ["chan"]}, "."], "extent": [2845, 2908]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["*foot*"]}], "extent": [2908, 2922], "body": [{"type": "para", "indent": 8, "text": ["Matches each channel that has ", {"type": "code", "text": ["foot"]}, " in it."], "extent": [2922, 2979]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["t?"]}], "extent": [2979, 2989], "body": [{"type": "para", "indent": 8, "text": ["The ", {"type": "code", "text": ["?"]}, " matches a single character. ", {"type": "code", "text": ["t?"]}, " matches two-character channels starting with t.  "], "extent": [2989, 3093]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["r[xyz]"]}], "extent": [3093, 3107], "body": [{"type": "para", "indent": 8, "text": ["Matches channels ", {"type": "code", "text": ["rx"]}, ", ", {"type": "code", "text": ["ry"]}, " and ", {"type": "code", "text": ["rz"]}, "."], "extent": [3107, 3162]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["blend[3-7:2]"]}], "extent": [3162, 3182], "body": [{"type": "para", "indent": 8, "text": ["Matches number ranges giving ", {"type": "code", "text": ["blend3"]}, ", ", {"type": "code", "text": ["blend5"]}, ", and ", {"type": "code", "text": ["blend7"]}, "."], "extent": [3182, 3262]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["blend[2-3,5,13]"]}], "extent": [3262, 3285], "body": [{"type": "para", "indent": 8, "text": ["Matches channels ", {"type": "code", "text": ["blend2"]}, ", ", {"type": "code", "text": ["blend3"]}, ", ", {"type": "code", "text": ["blend5"]}, ", ", {"type": "code", "text": ["blend13"]}, "."], "extent": [3285, 3356]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["t[xyz]"]}], "extent": [3356, 3370], "body": [{"type": "para", "indent": 8, "text": [{"type": "code", "text": ["[xyz]"]}, "matches three characters, giving channels ", {"type": "code", "text": ["tx"]}, ", ", {"type": "code", "text": ["ty"]}, " and ", {"type": "code", "text": ["tz"]}, "."], "extent": [3370, 3458]}], "container": true}], "container": true}], "container": true}, {"type": "dt", "indent": 0, "text": ["Sample Rate Match"], "extent": [3458, 3477], "body": [{"type": "para", "indent": 4, "text": ["The Sample Rate Match Options handle cases where multiple input CHOPs\u2019 sample rates are different."], "extent": [3477, 3585]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Resample At First Input\u2019s Rate"], "extent": [3585, 3621], "body": [{"type": "para", "indent": 8, "text": ["Use rate of first input to resample others."], "extent": [3621, 3682]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Resample At Maximum Rate"], "extent": [3682, 3712], "body": [{"type": "para", "indent": 8, "text": ["Resample to highest sample rate."], "extent": [3712, 3758]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Resample At Minimum Rate"], "extent": [3758, 3788], "body": [{"type": "para", "indent": 8, "text": ["Resample to the lowest sample rate."], "extent": [3788, 3841]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Error if Rates Differ"], "extent": [3841, 3868], "body": [{"type": "para", "indent": 8, "text": ["Does not accept conflicting sample rates."], "extent": [3868, 3923]}], "container": true}], "container": true}], "container": true}, {"type": "dt", "indent": 0, "text": ["Units"], "extent": [3923, 3930], "body": [{"type": "para", "indent": 4, "text": ["The units for which time parameters are specified."], "extent": [3930, 3990]}, {"type": "para", "indent": 4, "text": ["For example, you can specify the amount of time a lag should last for in seconds (default), frames (at the Houdini FPS), or samples (in the CHOP\u2019s sample rate)."], "extent": [3990, 4160]}, {"type": "note_group", "body": [{"type": "note", "indent": 4, "role": "item", "extent": [4160, 4170], "body": [{"type": "para", "indent": 8, "text": ["When you change the Units parameter, it does not convert the existing parameters to the new units."], "extent": [4170, 4282]}], "container": true}], "container": true, "role": "item_group"}], "container": true}, {"type": "dt", "indent": 0, "text": ["Time Slice"], "extent": [4282, 4294], "body": [{"type": "para", "indent": 4, "text": ["Time Slicing is a feature which boosts cooking performance and reduces memory usage. Traditionally, CHOPs calculate the channel over its entire frame range. If the channel does need to be evaluated every frame, then cooking the entire range of the channel is unnecessary. It is more efficient to calculate only the fraction of the channel that is needed. This fraction is known as a Time Slice."], "extent": [4294, 4694]}], "container": true}, {"type": "dt", "indent": 0, "text": ["Unload"], "extent": [4694, 4702], "body": [{"type": "para", "indent": 4, "text": ["Causes the memory consumed by a CHOP to be released after it is cooked and the data passed to the next CHOP."], "extent": [4702, 4816]}], "container": true}, {"type": "dt", "indent": 0, "text": ["Export Prefix"], "extent": [4816, 4836], "body": [{"type": "para", "indent": 4, "text": ["The Export prefix is prepended to CHOP channel names to determine where to export to. "], "extent": [4836, 4932]}, {"type": "para", "indent": 4, "text": ["For example, if the CHOP channel was named ", {"type": "code", "text": ["geo1:tx"]}, ", and the prefix was ", {"type": "code", "text": ["/obj"]}, ", the channel would be exported to ", {"type": "code", "text": ["/obj/geo1/tx"]}, "."], "extent": [4932, 5071]}, {"type": "note_group", "body": [{"type": "note", "indent": 4, "role": "item", "extent": [5071, 5081], "body": [{"type": "para", "indent": 8, "text": ["You can leave the ", {"type": "ui", "text": ["Export Prefix"]}, " blank, but then your CHOP track names need to be absolute paths, such as ", {"type": "code", "text": ["obj:geo1:tx"]}, "."], "extent": [5081, 5214]}], "container": true}], "container": true, "role": "item_group"}], "container": true}, {"type": "dt", "indent": 0, "text": ["Graph Color"], "extent": [5214, 5227], "body": [{"type": "para", "indent": 4, "text": ["Every CHOP has this option. Each CHOP gets a default color assigned for display in the Graph port, but you can override the color in the Common page under Graph Color. There are 36 RGB color combinations in the Palette."], "extent": [5227, 5452]}], "container": true}, {"type": "dt", "indent": 0, "text": ["Graph Color Step"], "extent": [5452, 5470], "body": [{"type": "para", "indent": 4, "text": ["When the graph displays the animation curves and a CHOP has two or more channels, this defines the difference in color from one channel to the next, giving a rainbow spectrum of colors."], "extent": [5470, 5661]}], "container": true}], "container": true}]}, {"level": 1, "id": "locals", "container": true, "type": "locals_section", "indent": 0, "role": "section", "extent": [3254, 3262], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["I"], "extent": [3262, 3269], "body": [{"type": "para", "indent": 8, "text": ["The current index."], "extent": [3269, 3296]}], "container": true}, {"type": "dt", "indent": 4, "text": ["C"], "extent": [3296, 3303], "body": [{"type": "para", "indent": 8, "text": ["The current channel (0 to NC-1)."], "extent": [3303, 3344]}], "container": true}, {"type": "dt", "indent": 4, "text": ["NC"], "extent": [3344, 3352], "body": [{"type": "para", "indent": 8, "text": ["The total number of channels."], "extent": [3352, 3390]}], "container": true}, {"type": "dt", "indent": 4, "text": ["V"], "extent": [3390, 3397], "body": [{"type": "para", "indent": 8, "text": ["The value at the current index of the current channel."], "extent": [3397, 3460]}], "container": true}, {"type": "dt", "indent": 4, "text": ["CN"], "extent": [3460, 3468], "body": [{"type": "para", "indent": 8, "text": ["The copy number. (The first thing it copies is 0.)"], "extent": [3468, 3528]}], "container": true}], "container": true}], "text": "Locals"}, {"level": 1, "id": "related", "container": true, "type": "related_section", "indent": 0, "role": "section", "extent": [3528, 3537], "body": [{"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": [{"scheme": "Node", "value": "/nodes/chop/delete", "type": "link", "text": "", "fullpath": "/nodes/chop/delete"}], "extent": [3537, 3563]}], "container": true}], "text": "Related"}], "title": ["Copy"], "summary": ["Produces multiple copies of the second input along the timeline of the first input."], "included": ["/nodes/chop/common"]}