{"type": "root", "attrs": {"type": "node", "context": "chop", "internal": "sequence", "icon": "COP2/sequence", "version": null, "namespace": null}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["Sequence"], "extent": [69, 82]}, {"type": "summary", "indent": 0, "text": ["Takes all its inputs and appends one chop after another."], "extent": [82, 147]}, {"type": "para", "indent": 0, "text": ["This CHOP takes all its inputs and appends one CHOP after another. It is\nexpected they all have the same channels."], "extent": [147, 263]}, {"type": "para", "indent": 0, "text": ["The end section of the first CHOP is overlapped with the start section\nof the second CHOP, and so on for the rest of the input CHOPs. The\nsecond input is shifted to line up with the end of the first."], "extent": [263, 464]}, {"type": "para", "indent": 0, "text": ["Blending allows you to splice channels together by slowly phasing out\none CHOP while phasing into the next, or by inserting interpolation\ncurves between the channels of the adjacent chops."], "extent": [464, 654]}, {"type": "para", "indent": 0, "text": [{"type": "ui", "text": ["Quaternion Blend"]}, " blends rotation triplets (rx ry rz) together using the\nshortest rotation arc. Rotation triplets are identified by ", {"type": "q", "text": ["quaternion"]}, "\nattributes, which are set in the ", {"scheme": "Node", "value": "/nodes/chop/attribute", "type": "link", "text": ["Attribute CHOP"], "fullpath": "/nodes/chop/attribute"}, "."], "extent": [654, 874]}, {"type": "para", "indent": 0, "text": [{"type": "ui", "text": ["Translation Blending"]}, " blends translation channels together by slowly\nchanging from the final velocity of the previous channel to the initial\nvelocity of the next. The next channel may be shifted up or down. If\nthis is undesirable, use cubic blending instead (in the Shape menu).\n", {"type": "ui", "text": ["Translation Blending"]}, " is done on channel triplets that represent\ntranslations or positions (*tx *ty *tz)."], "extent": [874, 1267]}, {"level": 1, "id": "parameters", "container": true, "type": "parameters_section", "indent": 0, "role": "section", "extent": [1267, 1279], "body": [{"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Blend"], "extent": [1279, 1292], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Method"], "extent": [1292, 1301], "body": [{"type": "para", "indent": 4, "text": ["The blend method to use to produce a seamless sequence."], "extent": [1301, 1362]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Preserve Length"], "extent": [1362, 1383], "body": [{"type": "para", "indent": 8, "text": ["Keeps the total length of the channel constant."], "extent": [1383, 1439]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Overlap Sequences"], "extent": [1439, 1462], "body": [{"type": "para", "indent": 8, "text": ["Overlaps the current cycle with the last cycle. Audio\n        sequences should always use this method."], "extent": [1462, 1573]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Insert Blend Region"], "extent": [1573, 1598], "body": [{"type": "para", "indent": 8, "text": ["Inserts a region between the cycles where the blending\n        is done."], "extent": [1598, 1678]}], "container": true}], "container": true}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Shape"], "extent": [1678, 1685], "body": [{"type": "para", "indent": 4, "text": ["Blend interpolation shape. See ", {"scheme": "Node", "value": "/nodes/chop/cycle", "type": "link", "text": ["Cycle CHOP"], "fullpath": "/nodes/chop/cycle"}, "."], "extent": [1685, 1755]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Region"], "extent": [1755, 1763], "body": [{"type": "para", "indent": 4, "text": ["The size of the blend region in number of samples."], "extent": [1792, 1847]}], "container": true, "attrs": {"channels": "/blendregion"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Bias"], "extent": [1847, 1853], "body": [{"type": "para", "indent": 4, "text": ["Which segment to favor when blending: the previous (-1), the next (+1) or none (0)."], "extent": [1880, 1973]}], "container": true, "attrs": {"channels": "/blendbias"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Match By"], "extent": [1973, 1983], "body": [{"type": "para", "indent": 4, "text": ["Match channels between inputs by index or by name."], "extent": [1983, 2043]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Match Failure"], "extent": [2043, 2058], "body": [{"type": "para", "indent": 4, "text": ["It is sometimes desirable to produce a warning or an error when channels in the first input fail to be correctly matched to channels in the other inputs. A failure may occur when matching by ", {"type": "ui", "text": ["Channel Number"]}, " if an input has fewer channels than input 1, or when  matching by ", {"type": "ui", "text": ["Channel Name"]}, " if a channel name cannot be found in input 1."], "extent": [2058, 2402]}], "container": true, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Scope"], "extent": [2402, 2414], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Step"], "extent": [2414, 2421], "body": [{"type": "para", "indent": 4, "text": ["If set to 1, the next segment will be shifted up or down so that it begins where the last segment ended."], "extent": [2443, 2557]}], "container": true, "attrs": {"channels": "/step"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Step Scope"], "extent": [2557, 2569], "body": [{"type": "para", "indent": 4, "text": ["The names of channels that use the Step function."], "extent": [2569, 2628]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Blend Scope"], "extent": [2628, 2641], "body": [{"type": "para", "indent": 4, "text": ["The names of the channels that should be blended. Other channels will not be blended at all."], "extent": [2641, 2743]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Translate Blend"], "extent": [2743, 2760], "body": [{"type": "para", "indent": 4, "text": ["The names of channels that will be translation-blended. Each string field contains a list of its component channels, such as x, y or z."], "extent": [2760, 2901]}], "container": true, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Rotate"], "extent": [2901, 2914], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Quaternion Blend"], "extent": [2914, 2933], "body": [{"type": "para", "indent": 4, "text": ["Use quaternion blending on rotation channels. All inputs should have quaternion attributes for the rotation channels to determine the rotation order."], "extent": [2933, 3092]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Shortest Path Rotation Blending"], "extent": [3092, 3125], "body": [{"type": "para", "indent": 4, "text": ["If on, compensate for cyclic channels (such as angles) by always choosing the shortest route between samples when blending."], "extent": [3125, 3258]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Rotation Scope"], "extent": [3258, 3274], "body": [{"type": "para", "indent": 4, "text": ["Defines which channels are rotations for ", {"type": "ui", "text": ["Shortest Path Rotation Blending"]}, "."], "extent": [3274, 3357]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Cycle Length"], "extent": [3357, 3371], "body": [{"type": "para", "indent": 4, "text": ["The length of the cycle for ", {"type": "ui", "text": ["Shortest Path Rotation Blending"]}, "."], "extent": [3397, 3467]}], "container": true, "attrs": {"channels": "/cyclelen"}, "role": "item"}], "container": true, "role": "item_group"}, {"level": 3, "id": "common", "container": true, "type": "h", "indent": 0, "text": ["Common"], "extent": [2334, 2356], "body": [{"type": "para", "indent": 0, "text": ["Some of these parameters may not be available on all CHOP nodes."], "extent": [2356, 2423]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Scope"], "extent": [2423, 2430], "body": [{"type": "para", "indent": 4, "text": ["To determine which channels get affected, some CHOPs have a scope string. Patterns can be used in the scope, for example ", {"type": "code", "text": ["*"]}, " (match all), and ", {"type": "code", "text": ["?"]}, " (match single character). "], "extent": [2430, 2612]}, {"type": "para", "indent": 4, "text": ["The following are examples of possible channel name matching options:"], "extent": [2612, 2691]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["chan2"]}], "extent": [2691, 2704], "body": [{"type": "para", "indent": 8, "text": ["Matches a single channel name."], "extent": [2704, 2748]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["chan3 tx ty tz"]}], "extent": [2748, 2770], "body": [{"type": "para", "indent": 8, "text": ["Matches four channel names, separated by spaces."], "extent": [2770, 2832]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["chan*"]}], "extent": [2832, 2845], "body": [{"type": "para", "indent": 8, "text": ["Matches each channel that starts with ", {"type": "code", "text": ["chan"]}, "."], "extent": [2845, 2908]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["*foot*"]}], "extent": [2908, 2922], "body": [{"type": "para", "indent": 8, "text": ["Matches each channel that has ", {"type": "code", "text": ["foot"]}, " in it."], "extent": [2922, 2979]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["t?"]}], "extent": [2979, 2989], "body": [{"type": "para", "indent": 8, "text": ["The ", {"type": "code", "text": ["?"]}, " matches a single character. ", {"type": "code", "text": ["t?"]}, " matches two-character channels starting with t.  "], "extent": [2989, 3093]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["r[xyz]"]}], "extent": [3093, 3107], "body": [{"type": "para", "indent": 8, "text": ["Matches channels ", {"type": "code", "text": ["rx"]}, ", ", {"type": "code", "text": ["ry"]}, " and ", {"type": "code", "text": ["rz"]}, "."], "extent": [3107, 3162]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["blend[3-7:2]"]}], "extent": [3162, 3182], "body": [{"type": "para", "indent": 8, "text": ["Matches number ranges giving ", {"type": "code", "text": ["blend3"]}, ", ", {"type": "code", "text": ["blend5"]}, ", and ", {"type": "code", "text": ["blend7"]}, "."], "extent": [3182, 3262]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["blend[2-3,5,13]"]}], "extent": [3262, 3285], "body": [{"type": "para", "indent": 8, "text": ["Matches channels ", {"type": "code", "text": ["blend2"]}, ", ", {"type": "code", "text": ["blend3"]}, ", ", {"type": "code", "text": ["blend5"]}, ", ", {"type": "code", "text": ["blend13"]}, "."], "extent": [3285, 3356]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["t[xyz]"]}], "extent": [3356, 3370], "body": [{"type": "para", "indent": 8, "text": [{"type": "code", "text": ["[xyz]"]}, "matches three characters, giving channels ", {"type": "code", "text": ["tx"]}, ", ", {"type": "code", "text": ["ty"]}, " and ", {"type": "code", "text": ["tz"]}, "."], "extent": [3370, 3458]}], "container": true}], "container": true}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Sample Rate Match"], "extent": [3458, 3477], "body": [{"type": "para", "indent": 4, "text": ["The Sample Rate Match Options handle cases where multiple input CHOPs\u2019 sample rates are different."], "extent": [3477, 3585]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Resample At First Input\u2019s Rate"], "extent": [3585, 3621], "body": [{"type": "para", "indent": 8, "text": ["Use rate of first input to resample others."], "extent": [3621, 3682]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Resample At Maximum Rate"], "extent": [3682, 3712], "body": [{"type": "para", "indent": 8, "text": ["Resample to highest sample rate."], "extent": [3712, 3758]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Resample At Minimum Rate"], "extent": [3758, 3788], "body": [{"type": "para", "indent": 8, "text": ["Resample to the lowest sample rate."], "extent": [3788, 3841]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Error if Rates Differ"], "extent": [3841, 3868], "body": [{"type": "para", "indent": 8, "text": ["Does not accept conflicting sample rates."], "extent": [3868, 3923]}], "container": true}], "container": true}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Units"], "extent": [3923, 3930], "body": [{"type": "para", "indent": 4, "text": ["The units for which time parameters are specified."], "extent": [3930, 3990]}, {"type": "para", "indent": 4, "text": ["For example, you can specify the amount of time a lag should last for in seconds (default), frames (at the Houdini FPS), or samples (in the CHOP\u2019s sample rate)."], "extent": [3990, 4160]}, {"type": "note_group", "body": [{"type": "note", "indent": 4, "role": "item", "extent": [4160, 4170], "body": [{"type": "para", "indent": 8, "text": ["When you change the Units parameter, it does not convert the existing parameters to the new units."], "extent": [4170, 4282]}], "container": true}], "container": true, "role": "item_group"}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Time Slice"], "extent": [4282, 4294], "body": [{"type": "para", "indent": 4, "text": ["Time Slicing is a feature which boosts cooking performance and reduces memory usage. Traditionally, CHOPs calculate the channel over its entire frame range. If the channel does need to be evaluated every frame, then cooking the entire range of the channel is unnecessary. It is more efficient to calculate only the fraction of the channel that is needed. This fraction is known as a Time Slice."], "extent": [4294, 4694]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Unload"], "extent": [4694, 4702], "body": [{"type": "para", "indent": 4, "text": ["Causes the memory consumed by a CHOP to be released after it is cooked and the data passed to the next CHOP."], "extent": [4702, 4816]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Export Prefix"], "extent": [4816, 4836], "body": [{"type": "para", "indent": 4, "text": ["The Export prefix is prepended to CHOP channel names to determine where to export to. "], "extent": [4836, 4932]}, {"type": "para", "indent": 4, "text": ["For example, if the CHOP channel was named ", {"type": "code", "text": ["geo1:tx"]}, ", and the prefix was ", {"type": "code", "text": ["/obj"]}, ", the channel would be exported to ", {"type": "code", "text": ["/obj/geo1/tx"]}, "."], "extent": [4932, 5071]}, {"type": "note_group", "body": [{"type": "note", "indent": 4, "role": "item", "extent": [5071, 5081], "body": [{"type": "para", "indent": 8, "text": ["You can leave the ", {"type": "ui", "text": ["Export Prefix"]}, " blank, but then your CHOP track names need to be absolute paths, such as ", {"type": "code", "text": ["obj:geo1:tx"]}, "."], "extent": [5081, 5214]}], "container": true}], "container": true, "role": "item_group"}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Graph Color"], "extent": [5214, 5227], "body": [{"type": "para", "indent": 4, "text": ["Every CHOP has this option. Each CHOP gets a default color assigned for display in the Graph port, but you can override the color in the Common page under Graph Color. There are 36 RGB color combinations in the Palette."], "extent": [5227, 5452]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Graph Color Step"], "extent": [5452, 5470], "body": [{"type": "para", "indent": 4, "text": ["When the graph displays the animation curves and a CHOP has two or more channels, this defines the difference in color from one channel to the next, giving a rainbow spectrum of colors."], "extent": [5470, 5661]}], "container": true, "role": "item"}], "container": true}]}]}], "text": "Parameters"}, {"level": 1, "id": "related", "container": true, "type": "related_section", "indent": 0, "role": "section", "extent": [3492, 3501], "body": [{"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": [{"scheme": "Node", "value": "/nodes/chop/blend", "type": "link", "text": "", "fullpath": "/nodes/chop/blend"}], "extent": [3501, 3525]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"scheme": "Node", "value": "/nodes/chop/comp", "type": "link", "text": "", "fullpath": "/nodes/chop/comp"}], "extent": [3525, 3549]}], "container": true}], "text": "Related"}], "title": ["Sequence"], "summary": ["Takes all its inputs and appends one chop after another."], "included": ["/nodes/chop/common"]}