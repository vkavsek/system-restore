{"type": "root", "attrs": {"type": "node", "context": "dop", "internal": "gasfieldwrangle", "icon": "DOP/gas", "since": "13.0", "tags": "volumes", "version": null, "namespace": null}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["Gas Field Wrangle"], "extent": [98, 120]}, {"type": "summary", "indent": 0, "text": ["Runs CVEX on a set of fields."], "extent": [120, 158]}, {"type": "para", "indent": 0, "text": ["This is a very powerful, low-level node that lets experts who are\nfamiliar with VEX tweak voxel values using code."], "extent": [158, 274]}, {"type": "para", "indent": 0, "text": ["This node corresponds to the ", {"scheme": "Node", "value": "/nodes/dop/gasfieldvop", "type": "link", "text": ["Gas Field VOP DOP"], "fullpath": "/nodes/dop/gasfieldvop"}, ",\nbut uses a textual VEX snippet instead of a VOP network."], "extent": [274, 403]}, {"type": "para", "indent": 0, "text": ["This node runs the snippet ", {"type": "em", "text": ["on every voxel in the input volume(s)"]}, ".\nThe snippet can edit the input geometry by changing attributes.\nIt can access information from other geometry using attributes and VEX functions."], "extent": [403, 618]}, {"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": ["Press ", {"keys": ["MMB"], "type": "keys", "text": null}, " on the node to see any error output from the snippet."], "extent": [618, 689]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["You can use the VEX function ", {"type": "code", "text": ["ch"]}, " to evaluate parameters.\n  The path is relative to this node (", {"type": "code", "text": ["ch(\"parm\")"]}, " will evaluate the parameter ", {"type": "code", "text": ["parm"]}, " on this node).\n  This evaluation will be done at the current time."], "extent": [689, 903]}], "container": true}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Syntax"], "extent": [903, 916], "body": [{"type": "para", "indent": 0, "text": ["The ", {"type": "ui", "text": ["VEX snippet"]}, " parameter lets you enter a snippet of ", {"scheme": null, "value": "/vex/", "type": "link", "text": ["VEX code"], "fullpath": "/vex/index"}, " to run on the input geometry.\nSee ", {"scheme": null, "value": "/vex/snippets", "type": "link", "text": ["VEX snippets"], "fullpath": "/vex/snippets"}, " for basic information on the syntax available in the snippet parameter.\nSee ", {"scheme": null, "value": "/vex/", "type": "link", "text": ["the VEX chapter"], "fullpath": "/vex/index"}, " for general information on the VEX language."], "extent": [16, 299]}]}, {"level": 2, "id": "values", "container": true, "type": "h", "indent": 0, "text": ["Reading and modifying the voxel value"], "extent": [955, 1008], "body": [{"type": "para", "indent": 0, "text": ["The current voxel value in a volume is available as ", {"type": "code", "text": ["@", {"type": "var", "text": ["volume_name"]}]}, ".\nYou can read this variable to get the current value, and assign it to change the value.\nFor example, to add ", {"type": "code", "text": ["0.1"]}, " to the value of every voxel in the float volume ", {"type": "code", "text": ["foo"]}, ":"], "extent": [1008, 1251]}, {"lang": "vex", "type": "pre", "indent": 0, "text": ["\n@foo += 0.1\n"], "extent": [1251, 1277]}, {"type": "para", "indent": 0, "text": ["If a volume does not have a name, it will automatically be bound to ", {"type": "code", "text": ["@density"]}, "."], "extent": [1277, 1359]}, {"type": "para", "indent": 0, "text": ["If you have multiple named volumes in the input, you can write a single snippet\nthat modifies the different volumes in different ways, for example:"], "extent": [1359, 1508]}, {"lang": "vex", "type": "pre", "indent": 0, "text": ["\n@foo += 0.1\n@bar += 0.2\n@baz += 0.3\n"], "extent": [1508, 1558]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["VEX variables"], "extent": [1558, 1579], "body": [{"type": "para", "indent": 0, "text": ["You can create temporary variables.\nFor example, the following code reads an offset location from a point."], "extent": [1579, 1688]}, {"lang": "vex", "type": "pre", "indent": 0, "text": ["\nvector temp = @P;\ntemp += {0.1, 0.2, 0.3};\n@density = volumesample(@OpInput1, 0, temp);\n"], "extent": [1688, 1790]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Bound Variables"], "extent": [1790, 1813], "body": [{"type": "para", "indent": 0, "text": ["A number of variables are bound in the Volume VOP context. \nUse the ", {"type": "code", "text": ["@"]}, " prefix syntax to access them."], "extent": [1813, 1917]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["ix"]}, ", ", {"type": "code", "text": ["iy"]}, ", ", {"type": "code", "text": ["iz"]}], "extent": [1917, 1935], "body": [{"type": "para", "indent": 8, "text": ["The integer index of the current voxel.  With VDBs, this can be\n        negative."], "extent": [1935, 2025]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["resx"]}, ", ", {"type": "code", "text": ["resy"]}, ", ", {"type": "code", "text": ["resz"]}], "extent": [2025, 2049], "body": [{"type": "para", "indent": 8, "text": ["The resolution of the current volume primitive.  For VDBs this\n        is the size of the active voxel region."], "extent": [2049, 2168]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["dPdx"]}, ", ", {"type": "code", "text": ["dPdy"]}, ", ", {"type": "code", "text": ["dPdz"]}], "extent": [2168, 2192], "body": [{"type": "para", "indent": 8, "text": ["Vectors giving the length and orientation of the x, y, and z edges of\n        the 0th voxel."], "extent": [2192, 2293]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["center"]}], "extent": [2293, 2303], "body": [{"type": "para", "indent": 8, "text": ["The center of the volume in SOP space."], "extent": [2303, 2350]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["SimTime"]}], "extent": [2350, 2361], "body": [{"type": "para", "indent": 8, "text": ["Current simulation time in seconds."], "extent": [2361, 2405]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["SimFrame"]}], "extent": [2405, 2417], "body": [{"type": "para", "indent": 8, "text": ["Current simulation frame."], "extent": [2417, 2451]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["Time"]}], "extent": [2451, 2459], "body": [{"type": "para", "indent": 8, "text": ["Current playbar time in seconds."], "extent": [2459, 2500]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["Frame"]}], "extent": [2500, 2509], "body": [{"type": "para", "indent": 8, "text": ["Current playbar time in frames."], "extent": [2509, 2549]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["TimeInc"]}], "extent": [2549, 2560], "body": [{"type": "para", "indent": 8, "text": ["Time increment between frames, in seconds."], "extent": [2560, 2611]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["OpInput1"]}, ", ", {"type": "code", "text": ["OpInput2"]}, ", ", {"type": "code", "text": ["OpInput3"]}, ", ", {"type": "code", "text": ["OpInput4"]}], "extent": [2611, 2659], "body": [{"type": "para", "indent": 8, "text": ["A string that can be used to refer to the corresponding input\n        of this SOP in vex operations that take file parameters."], "extent": [2659, 2795]}], "container": true}], "container": true}]}, {"level": 1, "id": "parameters", "container": true, "type": "parameters_section", "indent": 0, "role": "section", "extent": [2795, 2807], "body": [{"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Code"], "extent": [2807, 2819], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Group"], "extent": [2819, 2827], "body": [{"type": "para", "indent": 4, "text": ["Only run the program on these volumes in the input geometry.\n    Leave this blank to modify all volumes in the input."], "extent": [2827, 2954]}, {"type": "para", "indent": 4, "text": ["(See ", {"scheme": null, "value": "#values", "type": "link", "text": ["reading and writing voxel values"], "fullpath": "/nodes/dop/gasfieldwrangle#values", "fragment": "#values"}, " above.)"], "extent": [2954, 3015]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["VEXpression"], "extent": [2337, 2350], "body": [{"type": "para", "indent": 4, "text": ["A snippet of VEX code that will manipulate the point attributes.\n    You can use ", {"type": "code", "text": ["@", {"type": "var", "text": ["variable_name"]}]}, " syntax to access geometry attributes."], "extent": [2368, 2513]}], "container": true, "attrs": {"id": "snippet"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Fields to Write to"], "extent": [3058, 3078], "body": [{"type": "para", "indent": 4, "text": ["Only modify fields if their names match this pattern.\n    The default pattern allows any volume to be modified.\n    You can speed up the node by only listing fields that are ", {"type": "em", "text": ["actually"]}, "\n    modified by the snippet."], "extent": [3078, 3301]}, {"type": "para", "indent": 4, "text": ["For example, in the following snippet, only the ", {"type": "code", "text": ["density"]}, " field is modified.\n    The ", {"type": "code", "text": ["temperature"]}, " field is not modified, only read."], "extent": [3301, 3443]}, {"lang": "vex", "type": "pre", "indent": 4, "text": ["\n    @density = @temperature;\n    "], "extent": [3443, 3498]}, {"type": "para", "indent": 4, "text": ["However, the node will both modify ", {"type": "code", "text": ["density"]}, " and ", {"type": "em", "text": ["copy"]}, " ", {"type": "code", "text": ["temperature"]}, ", which uses time and memory.\n    To prevent this, you could set this parameter to ", {"type": "code", "text": ["density"]}, " to prevent the node\n    from copying ", {"type": "code", "text": ["temperature"]}, ". This requires that you explicitly manage the list of writable fields."], "extent": [3498, 3792]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Enforce Prototypes"], "extent": [16, 36], "body": [{"type": "para", "indent": 4, "text": ["Requires that you declare ", {"type": "code", "text": ["@"]}, " bindings in snippets as prototypes before using them. This applies to both attributes (for example ", {"type": "code", "text": ["@Cd"]}, ") and ", {"type": "q", "text": ["convenience"]}, " bindings such as ", {"type": "code", "text": ["@ptnum"]}, " and ", {"type": "code", "text": ["@Frame"]}, ". For example:"], "extent": [36, 248]}, {"lang": "vex", "type": "pre", "indent": 4, "text": ["\n    // Declare bindings\n    int @ptnum;\n    float @Frame;\n    vector @Cd;\n\n    // Use bindings after declaration\n    int pointnum = @ptnum;\n    float red = @Cd[0] / @Frame;\n    "], "extent": [248, 447]}, {"type": "para", "indent": 4, "text": ["Automatic binding with the ", {"type": "code", "text": ["@"]}, " syntax can be convenient, but as your scene becomes more complex there is the risk that a typo in an ", {"type": "code", "text": ["@"]}, " binding will silently just bind a non-existent attribute."], "extent": [447, 646]}], "container": true, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Bindings"], "extent": [3829, 3844], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 4, "text": ["Evaluation Node Path"], "extent": [3844, 3871], "body": [{"type": "para", "indent": 8, "text": ["VEX functions like ", {"type": "code", "text": ["ch()"]}, " usually evaluate with respect to this node.\n        Providing a path here can override where the path search starts\n        from.  This is useful for embedding in a digital asset where you\n        would like the top level digital asset to be the search root."], "extent": [3871, 4165]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Export Parameters"], "extent": [4165, 4188], "body": [{"type": "para", "indent": 8, "text": ["This pattern can be used to override\n        the export option on the VEX shader to avoid writing to \n        certain volumes.  The pattern matches the VEX parameter, not\n        the bound volume.  The volume will still be bound for\n        reading."], "extent": [4188, 4447]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Stencil Field"], "extent": [4447, 4466], "body": [{"type": "para", "indent": 8, "text": ["A scalar field to use as a stencil for where to evaluate\n        the VOP network.  Voxels that are strictly greater than 0.5\n        will be run through the VOP network, others will be left\n        unchanged."], "extent": [4466, 4696]}], "container": true, "role": "item"}], "container": true, "role": "item_group"}]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 8, "text": ["VEX Precision"], "extent": [3611, 3634], "body": [{"type": "para", "indent": 12, "text": ["VEX can evaluate at 32-bit or 64-bit precision.  64-bit provides\n            higher accuracy, especially for transforms."], "extent": [3666, 3812]}, {"type": "para", "indent": 12, "text": ["The auto mode will currently run in 32-bit mode as fields\n            are always 32-bit."], "extent": [3812, 3927]}], "container": true, "attrs": {"id": "vex_precision"}, "role": "item"}], "container": true, "role": "item_group"}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Inputs"], "extent": [4744, 4757], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Input 1, 2, 3, 4"], "extent": [4757, 4776], "body": [{"type": "para", "indent": 8, "text": ["These control the four virtual inputs accessible inside of VOPs."], "extent": [4776, 4850]}, {"type": "para", "indent": 8, "text": ["They can be accessed with the OpInput1-4 wires from the VOP, or with\n        the ", {"type": "code", "text": ["@OpInput1-4"]}, " string parameters when using VEXpressions."], "extent": [4850, 4997]}, {"type": "para", "indent": 8, "text": ["They can also be accessed numerically as 0-3 with VEX functions\n        that take an input number."], "extent": [4997, 5105]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["None"], "extent": [5105, 5119], "body": [{"type": "para", "indent": 12, "text": ["No geometry is wired to this input."], "extent": [5119, 5167]}], "container": true}, {"type": "dt", "indent": 8, "text": ["SOP"], "extent": [5167, 5180], "body": [{"type": "para", "indent": 12, "text": ["The SOP geometry will be cooked prior to running the VEX and\n            the result wired to this input."], "extent": [5180, 5297]}], "container": true}, {"type": "dt", "indent": 8, "text": ["DOP Data"], "extent": [5297, 5315], "body": [{"type": "para", "indent": 12, "text": ["Data in the current simulation to reference.  Specified as\n            an object/data, for example, ", {"type": "code", "text": ["pyro1/vel"]}, " to refer to the velocity\n            field of the ", {"type": "code", "text": ["pyro1"]}, " object (which will show up as three volume\n            primitives)."], "extent": [5315, 5565]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Nth Context Geometry"], "extent": [5565, 5595], "body": [{"type": "para", "indent": 12, "text": ["These refer to the SOPs wired into the parent DOP Network itself."], "extent": [5595, 5674]}], "container": true}], "container": true}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["SOP Path"], "extent": [5958, 5968], "body": [{"type": "para", "indent": 4, "text": ["Path to a SOP to wire in."], "extent": [5990, 6021]}], "container": true, "attrs": {"id": "bindgeoinput"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["DOP Data"], "extent": [6021, 6031], "body": [{"type": "para", "indent": 4, "text": ["Object/data path of a piece of DOP data in THIS simulation to wire in.\n    If ", {"type": "ui", "text": ["Use This Object\u2019s Data"]}, " is enabled, this specifies the data path for data attached to the currently solved object."], "extent": [6053, 6254]}], "container": true, "attrs": {"id": "binddopinput"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Use This Object\u2019s Data"], "extent": [6254, 6278], "body": [{"type": "para", "indent": 4, "text": ["When enabled, the ", {"type": "ui", "text": ["DOP Data"]}, " specifies the name of data attached to the currently solved object.\n    This is usually equivalent to ", {"type": "code", "text": ["$OBJID/DataName"]}, ", but using ", {"type": "code", "text": ["$OBJID"]}, " requires one to set the ", {"type": "ui", "text": ["Solver Per Object"]}, " toggle which prevents mutual affectors from working with solvers such as RBD.\n    If the referenced data is the geometry being currently processed, a copy is made (similar to the ", {"type": "ui", "text": ["Myself"]}, " binding option)."], "extent": [6302, 6731]}], "container": true, "attrs": {"id": "binddopuseself"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Use Timestep"], "extent": [5817, 5831], "body": [{"type": "para", "indent": 4, "text": ["Whether to scale the ", {"type": "ui", "text": ["Time Scale"]}, " by the current timestep.  If off,\n    ", {"type": "ui", "text": ["Time Scale"]}, " is an absolute time in seconds."], "extent": [5831, 5957]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Time Scale"], "extent": [5957, 5969], "body": [{"type": "para", "indent": 4, "text": ["An overall scale applied to the actual timestep."], "extent": [5969, 6023]}], "container": true, "role": "item"}], "container": true, "role": "item_group"}]}], "text": "Parameters"}, {"level": 1, "id": "related", "container": true, "type": "related_section", "indent": 0, "role": "section", "extent": [6023, 6032], "body": [{"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": [{"scheme": "Node", "value": "/nodes/dop/gasfieldvop", "type": "link", "text": "", "fullpath": "/nodes/dop/gasfieldvop"}], "extent": [6032, 6063]}], "container": true}], "text": "Related"}], "title": ["Gas Field Wrangle"], "summary": ["Runs CVEX on a set of fields."], "included": ["/nodes/dop/gasfieldvop", "/nodes/dop/geometryvop", "/nodes/dop/standard_data_inputs", "/nodes/dop/standard_data_outputs", "/nodes/dop/standard_datagroup_parms", "/nodes/dop/standard_dataname_parms", "/nodes/dop/standard_dataop_parms", "/nodes/dop/standard_gas_timestep", "/nodes/dop/standard_solver_mutualparms", "/nodes/dop/standard_solver_parms", "/nodes/sop/_run_over", "/nodes/sop/pointwrangle", "/nodes/sop/wrangle_syntax", "/vex/_enforce_prototypes"]}