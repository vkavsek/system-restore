{"type": "root", "attrs": {"type": "include"}, "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 0, "text": ["Source"], "extent": [16, 24], "body": [{"type": "para", "indent": 4, "text": ["When ", {"type": "ui", "text": ["Source \u25b8 Type"]}, " is ", {"type": "q", "text": ["Primitive"]}, ", the scene graph path to the prim to use."], "extent": [41, 126]}], "container": true, "attrs": {"id": "target"}}, {"type": "dt", "indent": 0, "text": ["Source Instances"], "extent": [126, 144], "body": [{"type": "para", "indent": 4, "text": ["When ", {"type": "ui", "text": ["Source \u25b8 Type"]}, " is ", {"type": "q", "text": ["Point Intance"]}, ", the point instance to use, using ", {"type": "code", "text": ["/", {"type": "var", "text": ["path"]}, "[", {"type": "var", "text": ["instance_index"]}, "]"]}, " syntax (for example, ", {"type": "code", "text": ["/geometry/instancer[1]"]}, ")."], "extent": [170, 331]}], "container": true, "attrs": {"id": "sourceinstances"}}, {"type": "dt", "indent": 0, "text": ["Target"], "extent": [331, 339], "body": [{"type": "para", "indent": 4, "text": ["When ", {"type": "ui", "text": ["Target \u25b8 Type"]}, " is ", {"type": "q", "text": ["Primitive"]}, ", the scene graph path to the prim to use."], "extent": [356, 441]}], "container": true, "attrs": {"id": "target"}}, {"type": "dt", "indent": 0, "text": ["Target Instance"], "extent": [441, 458], "body": [{"type": "para", "indent": 4, "text": ["When ", {"type": "ui", "text": ["Target \u25b8 Type"]}, " is ", {"type": "q", "text": ["Point Intance"]}, ", the point instance to use, using ", {"type": "code", "text": ["/", {"type": "var", "text": ["path"]}, "[", {"type": "var", "text": ["instance_index"]}, "]"]}, " syntax (for example, ", {"type": "code", "text": ["/geometry/instancer[1]"]}, ")."], "extent": [483, 644]}], "container": true, "attrs": {"id": "targetinstance"}}, {"type": "dt", "indent": 0, "text": ["Hide Target"], "extent": [644, 657], "body": [{"type": "para", "indent": 4, "text": ["When ", {"type": "ui", "text": ["Target source"]}, " is ", {"type": "q", "text": ["First input"]}, " and ", {"type": "ui", "text": ["Type"]}, " is ", {"type": "q", "text": ["Primitive"]}, ", whether to hide set the path\u2019s visibility to ", {"type": "q", "text": ["hidden"]}, "."], "extent": [678, 807]}], "container": true, "attrs": {"id": "hidetarget"}}, {"type": "dt", "indent": 0, "text": ["Import Time"], "extent": [807, 820], "body": [{"type": "para", "indent": 4, "text": ["Specify the frame at which the source and/or target geometry are imported into the embedded sopnet to build the constraints. \n    The default ", {"type": "q", "text": ["$FF"]}, " expression forces the constraint LOP to be time dependent, which is needed when operating on a non time-dependent\n    network that has time samples driving the source or target primitives.\n    However, for better performance with a non time-dependent network with no time samples, it is recommended to use a static value instead."], "extent": [841, 1325]}], "container": true, "attrs": {"id": "importtime"}}], "container": true}, {"level": 2, "id": "about", "container": true, "type": "h", "indent": 0, "text": ["Solaris constraints"], "extent": [1325, 1359], "body": [{"type": "para", "indent": 0, "text": ["Currently, USD does not support constraints. Parametric constraints are probably antithetical to USD\u2019s design mission of being descriptive, immutable, and idempotent."], "extent": [1359, 1528]}, {"type": "para", "indent": 0, "text": ["As a layer above USD, that generates USD, the LOP network can compute dynamic constraints, and ", {"type": "q", "text": ["bake"]}, " the results as time samples when it writes the USD to disk."], "extent": [1528, 1694]}]}]}