{"type": "root", "attrs": {"type": "include"}, "body": [{"type": "box_group", "body": [{"ext": null, "type": "box", "indent": 0, "role": "item", "extent": [16, 22], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Action"], "extent": [50, 62], "body": [{"type": "para", "indent": 8, "text": ["Whether this node should create new prims, or edit existing prims. In addition, the ", {"type": "code", "text": ["Force Edit"]}, " option can be chosen to cause this node to ignore the ", {"type": "code", "text": ["houdini:editable"]}, " attribute on prims, and always edit the specified attributes. This is in contrast to the ", {"type": "code", "text": ["Edit"]}, " mode which will trigger a warning and not set attributes on prims with the ", {"type": "code", "text": ["houdini:editable"]}, " attribute set to ", {"type": "code", "text": ["false"]}, "."], "extent": [88, 483]}], "container": true, "attrs": {"id": "createprims"}}, {"type": "dt", "indent": 4, "text": ["Primitive Path"], "extent": [483, 503], "body": [{"type": "para", "indent": 8, "text": ["In create mode, this lets you control where in the scene graph to create the prim(s)."], "extent": [526, 621]}, {"type": "para", "indent": 8, "text": ["The default is usually ", {"type": "code", "text": ["/$OS"]}, ". This creates a primitive at the root level with the same name as the node (for example, ", {"type": "code", "text": ["/tube1"]}, "). This is a useful default for preventing naming conflicts, but terrible for organization. You should try to remember to change the ", {"type": "ui", "text": ["Primitive path"]}, " to a better value when you create prims."], "extent": [621, 950]}, {"type": "para", "indent": 8, "text": ["For example, instead of naming models after the node that created them, you might want to name them after the geometry inside, and organize them under a ", {"type": "code", "text": ["/Models"]}, " branch."], "extent": [950, 1130]}, {"type": "para", "indent": 8, "text": ["The ", {"type": "q", "text": ["Create primitives"]}, " section contains basic controls for how to create the new prim(s)."], "extent": [1130, 1230]}], "container": true, "attrs": {"id": "primpath"}}, {"type": "dt", "indent": 4, "text": ["Primitives"], "extent": [1230, 1246], "body": [{"type": "para", "indent": 8, "text": ["In edit mode, the node has a ", {"type": "ui", "text": ["Primitive pattern"]}, " parameter. This lets you specify the prim(s) the node should operate on. You can click the select button beside the text box to select the primitives from the scene graph tree. You can also use ", {"scheme": null, "value": "/solaris/pattern", "type": "link", "text": ["primitive patterns"], "fullpath": "/solaris/pattern"}, " for advanced matching, including matching all prims in a collection."], "extent": [1272, 1633]}], "container": true, "attrs": {"id": "primpattern"}}, {"type": "dt", "indent": 4, "text": ["Initialize Parameters For Edit"], "extent": [1633, 1669], "body": [{"type": "para", "indent": 8, "text": ["In edit mode, changes the state of all control menu parameters to ", {"type": "code", "text": ["Do Nothing"]}, ", so that this node will not apply any changes. Also grabs the current values of each property from the first ", {"type": "ui", "text": ["Primitives"]}, " match, and sets the values of the corresponding parameters to match. This means that changing any parameter\u2019s control menu to ", {"type": "code", "text": ["Set or Create"]}, " mode will set the property to its current value, making it easier to apply changes to an existing value rather than setting a brand new value."], "extent": [1695, 2192]}], "container": true, "attrs": {"id": "initforedit"}}], "container": true}], "container": true, "attrs": {"id": "create_edit_block"}}, {"ext": null, "type": "box", "indent": 0, "role": "item", "extent": [2192, 2198], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Transform"], "extent": [2224, 2239], "body": [{"type": "para", "indent": 8, "text": ["How the transform parameters below apply to the primitive. (Because each USD prim can contain multiple transforms, ", {"type": "em", "text": ["and"]}, " be affected by parent transforms, there are many different ways to apply new transforms.)"], "extent": [2278, 2498]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["Append"], "extent": [2498, 2514], "body": [{"type": "para", "indent": 12, "text": ["Apply the parameters as a new, most local transform."], "extent": [2514, 2580]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Prepend"], "extent": [2580, 2597], "body": [{"type": "para", "indent": 12, "text": ["Apply the parameters as a new, ", {"type": "em", "text": ["least"]}, " local transform."], "extent": [2597, 2666]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Overwrite or Append"], "extent": [2666, 2695], "body": [{"type": "para", "indent": 12, "text": ["If a local transform exists with the name ", {"type": "code", "text": ["xformOp:transform"]}, ", ", {"type": "em", "text": ["overwrite"]}, " it with the parameters. Otherwise, apply it as a new, most local transform."], "extent": [2695, 2859]}, {"type": "para", "indent": 12, "text": ["If this replaces an existing transform, that transform\u2019s order in the local transform stack is not affected."], "extent": [2859, 2981]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Overwrite or Prepend"], "extent": [2981, 3011], "body": [{"type": "para", "indent": 12, "text": ["Like ", {"type": "q", "text": ["Overwrite or Append"]}, ", but ", {"type": "em", "text": ["least"]}, " local."], "extent": [3011, 3071]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Apply Transform in World Space"], "extent": [3071, 3111], "body": [{"type": "para", "indent": 12, "text": ["Apply the parameters as a new, most local transform. However, prior to applying the transform, it is updated so that the result of the transform appears as if the transform was being applied in world space, before any local or ancestor transformations were applied to the primitive."], "extent": [3111, 3407]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Replace All Local Transforms"], "extent": [3407, 3445], "body": [{"type": "para", "indent": 12, "text": ["The transform specified in the remaining transform parameters is always applied as a new transform. Prior to applying this transform, all existing transform operations on the local transform stack are cleared so that only the supplied transform remains on the local transform stack (though ancestor transforms still have an effect)."], "extent": [3445, 3791]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "xn__xformOptransform_51a"}}, {"type": "dt", "indent": 4, "text": ["Transform order"], "extent": [3791, 3812], "body": [{"type": "para", "indent": 8, "text": ["The order in which Houdini applies translates, rotates, and scales, and the order in which it applies rotation."], "extent": [3831, 3952]}], "container": true, "attrs": {"id": "xOrd"}}, {"type": "dt", "indent": 4, "text": ["Translate"], "extent": [3952, 3967], "body": [{"type": "para", "indent": 8, "text": ["Movement amount along XYZ axes."], "extent": [3983, 4024]}], "container": true, "attrs": {"id": "t"}}, {"type": "dt", "indent": 4, "text": ["Rotate"], "extent": [4024, 4036], "body": [{"type": "para", "indent": 8, "text": ["Degrees rotation around XYZ axes."], "extent": [4052, 4095]}], "container": true, "attrs": {"id": "r"}}, {"type": "dt", "indent": 4, "text": ["Scale"], "extent": [4095, 4106], "body": [{"type": "para", "indent": 8, "text": ["Non-uniform scaling along XYZ axes."], "extent": [4122, 4167]}], "container": true, "attrs": {"id": "s"}}, {"type": "dt", "indent": 4, "text": ["Uniform scale"], "extent": [4167, 4186], "body": [{"type": "para", "indent": 8, "text": ["Scales the object uniformly along all three axes."], "extent": [4206, 4266]}], "container": true, "attrs": {"id": "scale"}}], "container": true}, {"level": 3, "type": "sep", "indent": 4, "text": [" Pivot Transform "], "extent": [4266, 4294], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["Pivot translate"], "extent": [4320, 4345], "body": [{"type": "para", "indent": 12, "text": ["Moves the local origin of the object."], "extent": [4365, 4416]}], "container": true, "attrs": {"id": "p"}}, {"type": "dt", "indent": 8, "text": ["Pivot rotate"], "extent": [4416, 4438], "body": [{"type": "para", "indent": 12, "text": ["Rotates the local origin of the object after translation."], "extent": [4459, 4531]}], "container": true, "attrs": {"id": "pr"}}], "container": true}], "container": true, "attrs": {"id": "pivot_xform"}}], "container": true, "attrs": {"id": "transform_block"}}], "container": true, "role": "item_group"}, {"type": "dt_group", "body": [{"type": "dt", "indent": 0, "text": ["Color"], "extent": [4531, 4538], "body": [{"type": "para", "indent": 4, "text": ["Sets a ", {"type": "q", "text": ["default"]}, " color for this shape, which will be used in the viewport if the prim does not have a shader/material. You can write shaders to take this ", {"type": "code", "text": ["displayColor"]}, " parameter as an override."], "extent": [4577, 4777]}], "container": true, "attrs": {"id": "xn__primvarsdisplayColor_p8a"}}, {"type": "dt", "indent": 0, "text": ["Opacity"], "extent": [4777, 4786], "body": [{"type": "para", "indent": 4, "text": ["Sets the opacity of the ", {"type": "ui", "text": ["Display color"]}, ". This is a separate attribute (instead of specifying the display color as RGBA) so it can be independently overridden, and also because shaders don\u2019t usually accept RGBA parameters."], "extent": [4827, 5056]}], "container": true, "attrs": {"id": "xn__primvarsdisplayOpacity_ycb"}}, {"type": "dt", "indent": 0, "text": ["Double Sided"], "extent": [5056, 5070], "body": [{"type": "para", "indent": 4, "text": ["For renderers that distinguish between single-sided and double-sided surfaces, controls whether this prim is double-sided. Making surfaces double-sided is necessary for flat thin surfaces, or open surfaces where the camera can see both the inside and outside of the surface."], "extent": [5092, 5373]}], "container": true, "attrs": {"id": "doubleSided"}}], "container": true}, {"level": 2, "id": "oview", "container": true, "type": "h", "indent": 0, "text": ["Creating vs. editing prims"], "extent": [5373, 5414], "body": [{"type": "para", "indent": 0, "text": ["This node belongs to a class of ", {"type": "strong", "text": ["nodes that create or edit USD prims directly"]}, ". These nodes operate in ", {"type": "em", "text": ["Create mode"]}, " or ", {"type": "em", "text": ["Edit mode"]}, ". This is controlled by a ", {"type": "ui", "text": ["Create primitives"]}, " checkbox or a ", {"type": "em", "text": ["Create/Edit popup menu"]}, ". In create mode, the node creates new prims. In edit mode, the node changes the attributes on an existing prim. The ", {"type": "em", "text": ["Edit mode"]}, " has two variations. ", {"type": "em", "text": ["Edit"]}, " will not modify primitives which have a ", {"type": "code", "text": ["houdini:editable"]}, " attribute set to ", {"type": "code", "text": ["false"]}, ". ", {"type": "em", "text": ["Force edit"]}, " will modify a primitive regardless of the existence or value of this attribute. This attribute can be set on a primitive using the ", {"scheme": null, "value": "/nodes/lop/configureprimitive", "type": "link", "text": ["Configure Primitives LOP"], "fullpath": "/nodes/lop/configureprimitive"}, "."], "extent": [5414, 6076]}, {"type": "para", "indent": 0, "text": ["Parameters that correspond to a USD attribute have a pop-up menu to the left that controls ", {"type": "em", "text": ["how"]}, " the node authors the attribute."], "extent": [6076, 6206]}, {"type": "para", "indent": 0, "text": ["In addition to that, any connectable USD attributes (i.e., the ones in the ", {"type": "code", "text": ["inputs:"]}, " namespace) will have menu items that allow disconnecting them from their sources."], "extent": [6206, 6374]}, {"type": "box_group", "body": [{"ext": null, "type": "box", "indent": 0, "role": "item", "extent": [6374, 6380], "body": [{"type": "table", "thead": [{"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["Pop-up menu item "], "role": "th", "extent": [6407, 6431], "container": true, "attrs": {"width": "25%"}}, {"type": "cell", "indent": 8, "text": ["Meaning "], "role": "th", "extent": [6451, 6470]}], "divider": false}], "body": [{"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["Set or Create "], "role": "td", "extent": [6470, 6491], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Sets the attribute to the given value, whether it previously existed or not."], "extent": [6491, 6577]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["Set If Exists "], "role": "td", "extent": [6577, 6597], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Only set the attribute to the given value if it previously existed."], "extent": [6597, 6674]}, {"type": "para", "indent": 8, "text": ["Use this mode to make sure an attribute is only set on primitives of the correct type. For example, only ", {"type": "code", "text": ["UsdGeomSphere"]}, " primitives are likely to have a ", {"type": "code", "text": ["radius"]}, " attribute."], "extent": [6674, 6856]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["Block "], "role": "td", "extent": [6856, 6868], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Makes the attribute appear to not exist, so it takes on its default value. (If the attribute doesn\u2019t already exist on the prim, this does nothing.)"], "extent": [6868, 7025]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["Disconnect Input "], "role": "td", "extent": [7025, 7048], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Deletes the attribute input connection to its source. Input connections take precedence over attribute values, so disconnecting an input allows the attribute value to take effect."], "extent": [7048, 7237]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["Do Nothing "], "role": "td", "extent": [7237, 7254], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Ignore this parameter, don\u2019t create or change the attribute in any way."], "extent": [7254, 7336]}]}], "divider": false}]}], "container": true, "attrs": {"id": "control_menu"}}], "container": true, "role": "item_group"}]}, {"level": 2, "id": "create_prims", "container": true, "type": "h", "indent": 0, "text": ["Create primitives section"], "extent": [7336, 7383], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 0, "text": ["Create Primitives"], "extent": [7383, 7403], "body": [{"type": "para", "indent": 4, "text": ["This section only appears when the node is creating primitives."], "extent": [7403, 7472]}, {"type": "para", "indent": 4, "text": ["For example:"], "extent": [7472, 7490]}, {"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": ["If you want to create a new cube primitive at ", {"type": "code", "text": ["/world/objects/cube1"]}, " on an empty stage: Set ", {"type": "ui", "text": ["Primitive Specifier"]}, " to ", {"type": "q", "text": ["Define"]}, ", and the ", {"type": "ui", "text": ["Parent Primitive Type"]}, " to ", {"type": "q", "text": ["Xform"]}, "."], "extent": [7490, 7672]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": ["If you want to override the radius of a sphere at ", {"type": "code", "text": ["/world/objects/sphere1"]}, ": Set ", {"type": "ui", "text": ["Primitive Specifier"]}, " to ", {"type": "q", "text": ["Over"]}, ", and the ", {"type": "ui", "text": ["Parent Primitive Type"]}, " to None. This makes sure the primitive types of any existing ancestor prims are not be modified by this node."], "extent": [7672, 7938]}], "container": true}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Primitive Count"], "extent": [7938, 7959], "body": [{"type": "para", "indent": 8, "text": ["The number of primitives to create."], "extent": [7959, 8004]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Primitive Kind"], "extent": [8004, 8024], "body": [{"type": "para", "indent": 8, "text": ["Set all created prims to have this ", {"scheme": null, "value": "/solaris/usd#kinds", "type": "link", "text": ["kind"], "fullpath": "/solaris/usd#kinds", "fragment": "#kinds"}, "."], "extent": [8047, 8118]}], "container": true, "attrs": {"id": "primkind"}}, {"type": "dt", "indent": 4, "text": ["Primitive Specifier"], "extent": [8118, 8143], "body": [{"type": "para", "indent": 8, "text": ["The USD operator to use when creating the new prims."], "extent": [8167, 8229]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["Define"], "extent": [8229, 8245], "body": [{"type": "para", "indent": 12, "text": ["Authors a completely new prim. Use this if you want to create a brand new prim or replace an existing prim."], "extent": [8245, 8366]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Over"], "extent": [8366, 8380], "body": [{"type": "para", "indent": 12, "text": ["Authors an override of an existing prim. Attributes not explicitly authored on this prim will get their values from the existing prim on the lower layer."], "extent": [8380, 8547]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Class"], "extent": [8547, 8562], "body": [{"type": "para", "indent": 12, "text": ["Define a primitive class. This is usually not necessary unless you are doing deep USD magic."], "extent": [8562, 8668]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "specifier"}}, {"type": "dt", "indent": 4, "text": ["Class Ancestor"], "extent": [8668, 8688], "body": [{"type": "para", "indent": 8, "text": ["If the ", {"type": "ui", "text": ["Specifier"]}, " is ", {"type": "code", "text": ["Define"]}, " or ", {"type": "code", "text": ["Over"]}, ", this parameter will cause some ancestor primitives to be authored with a specifier of ", {"type": "code", "text": ["Class"]}, ". This makes it easy to create an ", {"type": "code", "text": ["Over"]}, " or ", {"type": "code", "text": ["Define"]}, " within a ", {"type": "code", "text": ["Class"]}, " without having to use two separate nodes. When the ", {"type": "ui", "text": ["Specifier"]}, " is ", {"type": "code", "text": ["Class"]}, ", this parameter is disabled because the entire primitive hierarchy is already authored as ", {"type": "code", "text": ["Class"]}, " primitives."], "extent": [8716, 9118]}], "container": true, "attrs": {"id": "classancestor"}}, {"type": "dt", "indent": 4, "text": ["Parent Primitive Type"], "extent": [9118, 9145], "body": [{"type": "para", "indent": 8, "text": ["If any parents of a path in ", {"type": "ui", "text": ["Primitive paths"]}, " do not exist, this node will automatically create them. In this case, it will create parent nodes of this type."], "extent": [9174, 9344]}], "container": true, "attrs": {"id": "parentprimtype"}}], "container": true}], "container": true}], "container": true}]}, {"level": 2, "id": "constraints", "container": true, "type": "h", "indent": 0, "text": ["Constraints"], "extent": [9344, 9376], "body": [{"type": "note_group", "body": [{"type": "note", "indent": 0, "role": "item", "extent": [9376, 9383], "body": [{"type": "para", "indent": 4, "text": ["USD currently does not have look-at constraints. This node calculates the per-frame transform to fulfill the constraint and applies it to the object."], "extent": [9383, 9538]}], "container": true}], "container": true, "role": "item_group"}, {"type": "para", "indent": 0, "text": ["See the ", {"scheme": null, "value": "/nodes/lop/light#tool", "type": "link", "text": ["Light tool help"], "fullpath": "/nodes/lop/light#tool", "fragment": "#tool"}, " for how to set up the look-at constraint interactively in the viewport."], "extent": [9538, 9659]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 0, "text": ["Enable Look At"], "extent": [9659, 9675], "body": [{"type": "para", "indent": 4, "text": ["Turns on the constraint that orients this object to look at a point or another object."], "extent": [9675, 9767]}], "container": true}, {"type": "dt", "indent": 0, "text": ["Keep Position"], "extent": [9767, 9782], "body": [{"type": "para", "indent": 4, "text": ["???"], "extent": [9782, 9791]}], "container": true}, {"type": "dt", "indent": 0, "text": ["Look At Position"], "extent": [9791, 9809], "body": [{"type": "para", "indent": 4, "text": ["If ", {"type": "ui", "text": ["Enable look at"]}, " is on and, this is a point in space this object will look at. If ", {"type": "ui", "text": ["Look at primitive"]}, " is not blank, this is an ", {"type": "strong", "text": ["offset"]}, " from the centroid of the target object (in the local space of that object)."], "extent": [9809, 10033]}], "container": true}, {"type": "dt", "indent": 0, "text": ["Look At Primitive"], "extent": [10033, 10052], "body": [{"type": "para", "indent": 4, "text": ["The path to a USD prim this object should look at. If this is not blank, ", {"type": "ui", "text": ["Look at position"]}, " is an ", {"type": "strong", "text": ["offset"]}, " from this centroid of the target object."], "extent": [10052, 10207]}], "container": true}, {"type": "dt", "indent": 0, "text": ["Up Vector Method"], "extent": [10207, 10225], "body": [{"type": "para", "indent": 4, "text": ["Controls how the up vector is set."], "extent": [10225, 10265]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["X Axis"], "extent": [10265, 10277], "body": [{"type": "para", "indent": 8, "text": ["Use (1,0,0) as the up axis."], "extent": [10277, 10314]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Y Axis"], "extent": [10314, 10326], "body": [{"type": "para", "indent": 8, "text": ["Use (0,1,0) as the up axis."], "extent": [10326, 10363]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Custom"], "extent": [10363, 10375], "body": [{"type": "para", "indent": 8, "text": ["Us the value of the Up Vector parameter as the up axis."], "extent": [10375, 10440]}], "container": true}], "container": true}], "container": true}, {"type": "dt", "indent": 0, "text": ["Up Vector"], "extent": [10440, 10451], "body": [{"type": "para", "indent": 4, "text": ["When ", {"type": "ui", "text": ["Up vector method"]}, " is ", {"type": "q", "text": ["custom"]}, ", this is the up axis to use for the look-at constraint."], "extent": [10451, 10550]}], "container": true}, {"type": "dt", "indent": 0, "text": ["Twist"], "extent": [10550, 10557], "body": [{"type": "para", "indent": 4, "text": ["A twist rotation (around the -Z axis, clockwise, in degrees), applied after the lookout transform."], "extent": [10557, 10662]}], "container": true}], "container": true}]}]}