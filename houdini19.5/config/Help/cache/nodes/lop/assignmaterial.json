{"type": "root", "attrs": {"type": "node", "context": "lop", "internal": "assignmaterial", "icon": "LOP/assignmaterial", "group": "materials", "since": "18.0", "version": null, "namespace": null}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["Assign Material"], "extent": [0, 20]}, {"type": "summary", "indent": 0, "text": ["Assigns a material to one or more USD primitives. You can use also programmatically assign materials using VEX, programmatically override material settings for each assignment, and programmatically assign materials to geometry subsets."], "extent": [130, 374]}, {"level": 2, "id": "howto", "container": true, "type": "h", "indent": 0, "text": ["How to"], "extent": [374, 395], "body": [{"type": "task_group", "body": [{"ext": null, "type": "task", "indent": 0, "text": [" Assign a material to one or more primitives"], "role": "item", "extent": [395, 449], "body": [{"type": "ord_group", "body": [{"blevel": 6, "type": "ord", "indent": 4, "text": ["In the ", {"type": "ui", "text": ["Primitives"]}, " parameter, specify the primitive(s) you want to assign the material to. You can click the select button beside the text box to choose the primitives from the scene graph tree."], "extent": [449, 654], "body": [{"type": "para", "indent": 8, "text": ["You can also use ", {"scheme": null, "value": "/solaris/pattern", "type": "link", "text": ["primitive patterns"], "fullpath": "/solaris/pattern"}, " for advanced matching.\n        This includes selecting all primitives in a collection, for example all prims in the ", {"type": "code", "text": ["donuts"]}, " collection on ", {"type": "code", "text": ["/table"]}, " using ", {"type": "code", "text": ["/table.collections:donuts"]}], "extent": [654, 900]}, {"type": "tip_group", "body": [{"type": "tip", "indent": 8, "role": "item", "extent": [900, 913], "body": [{"type": "para", "indent": 12, "text": ["If you assign a material to all prims in a collection, you probably also want to set the ", {"type": "ui", "text": ["Method"]}, " (under ", {"type": "q", "text": ["Material Binding"]}, ") to ", {"type": "q", "text": ["Collection based"]}, ", so the node assigns the material to the collection itself, rather than individually to each prim currently in the collection."], "extent": [913, 1202]}], "container": true}], "container": true, "role": "item_group"}], "container": true}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["Set ", {"type": "ui", "text": ["Specify material using"]}, " to ", {"type": "q", "text": ["Explicit path"]}, "."], "extent": [1202, 1260]}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["Set ", {"type": "ui", "text": ["Material path"]}, " to the path of the USD material you want to assign. You can click the select button beside the text box to choose the material from the scene graph tree."], "extent": [1260, 1443]}], "container": true}], "container": true}, {"ext": null, "type": "task", "indent": 0, "text": [" Assign computed materials using VEX (advanced)"], "role": "item", "extent": [1443, 1503], "body": [{"type": "ord_group", "body": [{"blevel": 6, "type": "ord", "indent": 4, "text": ["In the ", {"type": "ui", "text": ["Primitives"]}, " parameter, specify the primitive(s) you want to assign the material to. You can click the select button beside the text box to choose the primitives from the scene graph tree. You can also use ", {"scheme": null, "value": "/solaris/pattern", "type": "link", "text": ["primitive patterns"], "fullpath": "/solaris/pattern"}, " for advanced matching."], "extent": [1503, 1786]}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["Set ", {"type": "ui", "text": ["Specify material using"]}, " to ", {"type": "q", "text": ["VEXpression"]}, "."], "extent": [1786, 1842]}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["In the ", {"type": "ui", "text": ["VEXpression"]}, " box, enter a ", {"scheme": null, "value": "/vex/snippets", "type": "link", "text": ["VEX snippet"], "fullpath": "/vex/snippets"}, " to compute the material to assign to each primitive."], "extent": [1842, 1966], "body": [{"type": "para", "indent": 8, "text": ["The snippet is run once for each selected primitive. The path of the current primitive is available as ", {"type": "code", "text": ["@primpath"]}, ". The index of the current primitive is available as ", {"type": "code", "text": ["@elemnum"]}, ", the total number of selected primitives is available as ", {"type": "code", "text": ["@numelem"]}, "."], "extent": [1966, 2222]}, {"type": "para", "indent": 8, "text": ["Under ", {"type": "q", "text": ["CVEX Bindings"]}, ", when ", {"type": "ui", "text": ["Autobind by name"]}, " is on (the default), each attribute on the current primitive is available as a VEX variable of the same name. This allows you to assign different materials based on a primitive\u2019s attribute values. (If you don\u2019t want to or can\u2019t use autobinding, you can manually set up individual mappings between parameter names and VEX variable names using the multiparm under ", {"type": "q", "text": ["CVEX Bindings"]}, ".)"], "extent": [2222, 2660]}, {"type": "para", "indent": 8, "text": ["The snippet must ", {"type": "code", "text": ["return"]}, " a string containing the material path to assign to the current primitive."], "extent": [2660, 2769]}, {"type": "para", "indent": 8, "text": ["For example, this snippet alternates between assigning ", {"type": "code", "text": ["rough_red"]}, " and ", {"type": "code", "text": ["rough_blue"]}, " based on whether a primitive is at an odd or even position in the list of selected primitives:"], "extent": [2769, 2957]}, {"lang": "vex", "type": "pre", "indent": 8, "text": ["\n        return (@elemnum % 2) ? \"/materials/rough_red\" : \"/materials/rough_blue\";\n        "], "extent": [2957, 3077]}], "container": true}], "container": true}], "container": true}, {"ext": null, "type": "task", "indent": 0, "text": [" Override material parameters using VEX (advanced)"], "role": "item", "extent": [3077, 3137], "body": [{"type": "para", "indent": 4, "text": ["This lets you compute different values for material parameters for each assignment."], "extent": [3137, 3226]}, {"type": "ord_group", "body": [{"blevel": 6, "type": "ord", "indent": 4, "text": ["Set ", {"type": "ui", "text": ["Parameter override"]}, " to ", {"type": "q", "text": ["VEXpression"]}, "."], "extent": [3226, 3278]}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["In the ", {"type": "ui", "text": ["Override VEXpression"]}, " box, enter a ", {"scheme": null, "value": "/vex/snippets", "type": "link", "text": ["VEX snippet"], "fullpath": "/vex/snippets"}, " to override parameters on the assigned material."], "extent": [3278, 3407], "body": [{"type": "para", "indent": 8, "text": ["The snippet is run once for each selected primitive. The path of the current primitive is available as ", {"type": "code", "text": ["@primpath"]}, ". The index of the current primitive is available as ", {"type": "code", "text": ["@elemnum"]}, ", the total number of selected primitives is available as ", {"type": "code", "text": ["@numelem"]}, "."], "extent": [3407, 3663]}, {"type": "para", "indent": 8, "text": ["Under ", {"type": "q", "text": ["CVEX Bindings"]}, ", when ", {"type": "ui", "text": ["Autobind by name"]}, " is on (the default), each parameter on the material is available as a VEX variable of the same name. For example, if the material has a parameter named ", {"type": "code", "text": ["roughness"]}, ", you can override it by setting the corresponding variable in the VEX snippet:"], "extent": [3663, 3964]}, {"lang": "vex", "type": "pre", "indent": 8, "text": ["\n        @roughness = (@elemnum % 3) ? 0.25 : 0.5;\n        "], "extent": [3964, 4052]}, {"type": "para", "indent": 8, "text": ["If you don\u2019t want to or can\u2019t use autobinding, you can manually set up individual mappings between parameter names and VEX variable names using the multiparm under ", {"type": "q", "text": ["CVEX Bindings"]}, "."], "extent": [4052, 4244]}], "container": true}], "container": true}], "container": true}, {"ext": null, "type": "task", "indent": 0, "text": [" Assign materials to individual elements in geometry using VEX (advanced)"], "role": "item", "extent": [4244, 4325], "body": [{"type": "ord_group", "body": [{"blevel": 6, "type": "ord", "indent": 4, "text": ["Set the ", {"type": "ui", "text": ["Primitives"]}, " to the path of the geometry primitive (for example, a Mesh prim)."], "extent": [4325, 4421]}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["Set ", {"type": "ui", "text": ["Specify material using"]}, " to ", {"type": "q", "text": ["VEXpression"]}, "."], "extent": [4421, 4477]}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["Under ", {"type": "q", "text": ["Material Binding"]}, ", turn on ", {"type": "ui", "text": ["Create and bind geometry subsets"]}, "."], "extent": [4477, 4556]}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["In the VEX snippet, ", {"type": "code", "text": ["@elemnum"]}, " contains the index of the current ", {"type": "em", "text": ["element"]}, " in the selected geometry (for example, polygon face), and ", {"type": "code", "text": ["@numelem"]}, " contains the total number of elements in the geometry."], "extent": [4556, 4762], "body": [{"type": "para", "indent": 8, "text": ["The snippet must ", {"type": "code", "text": ["return"]}, " a string containing the material path to assign to the current element."], "extent": [4762, 4869]}], "container": true}], "container": true}, {"type": "para", "indent": 4, "text": ["The node will automatically create geometry subsets for each set of elements with the same material path."], "extent": [4869, 4981]}], "container": true}], "container": true, "role": "item_group"}]}, {"level": 2, "id": "cvex", "container": true, "type": "h", "indent": 0, "text": ["Using CVEX VOP networks (not recommended)"], "extent": [4981, 5036], "body": [{"type": "note_group", "body": [{"type": "note", "indent": 0, "role": "item", "extent": [5036, 5043], "body": [{"type": "para", "indent": 4, "text": ["We strongly encourage you to ", {"type": "strong", "text": ["use VEXpressions instead of CVEX VOP networks"]}, ". As detailed below, CVEX networks require multiple steps to set up. Unless you need a very elaborate VOP network to do the computation, or want to re-use some existing VOPs, writing a VEX snippet is ", {"type": "em", "text": ["much"]}, " easier."], "extent": [5043, 5339]}], "container": true}], "container": true, "role": "item_group"}, {"type": "ord_group", "body": [{"blevel": 2, "type": "ord", "indent": 0, "text": ["Set either ", {"type": "ui", "text": ["Specify material using"]}, " or ", {"type": "ui", "text": ["Parameters override"]}, " to ", {"type": "q", "text": ["CVEX"]}, "."], "extent": [5339, 5418]}, {"blevel": 2, "type": "ord", "indent": 0, "text": ["The most convenient place to create the CVEX VOP network is inside the Assign Material node itself (it contains a VEX Builder network). Dive inside, press ", {"keys": ["Tab"], "type": "keys", "text": null}, " and create a ", {"scheme": "Node", "value": "/nodes/vop/cvexbuilder", "type": "link", "text": ["CVEX Shader Builder"], "fullpath": "/nodes/vop/cvexbuilder"}, " network node."], "extent": [5418, 5654]}, {"blevel": 2, "type": "ord", "indent": 0, "text": ["Rename the CVEX Builder with a memorable name based on what the network will do (for example, ", {"type": "code", "text": ["material_assignment"]}, "). If you are doing multiple assignments in the Assign Material node, using multiple CVEX networks, they must each have unique names."], "extent": [5654, 5906]}, {"blevel": 2, "type": "ord", "indent": 0, "text": ["Dive inside the CVEX Builder node and put down a ", {"scheme": "Node", "value": "/nodes/vop/usdglobal", "type": "link", "text": ["USD Global Parameters"], "fullpath": "/nodes/vop/usdglobal"}, " node. This provides the basic inputs (", {"type": "code", "text": ["primpath"]}, ", ", {"type": "code", "text": ["elemnum"]}, ", and ", {"type": "code", "text": ["numelem"]}, ")."], "extent": [5906, 6078]}, {"blevel": 2, "type": "ord", "indent": 0, "text": ["If the Assign Material node is creating bindings, you can add corresponding ", {"scheme": "Node", "value": "/nodes/vop/parm", "type": "link", "text": ["Parameter VOPs"], "fullpath": "/nodes/vop/parm"}, " in this network to represent the bound VEX variables."], "extent": [6078, 6242], "body": [{"type": "para", "indent": 4, "text": ["If you are assigning to parameters to override material attributes, remember to set the Parameter VOP\u2019s ", {"type": "ui", "text": ["Export"]}, " parameter to ", {"type": "q", "text": ["Always"]}, " or ", {"type": "q", "text": ["When input is connected"]}, "."], "extent": [6242, 6414]}], "container": true}, {"blevel": 2, "type": "ord", "indent": 0, "text": ["If you are using the network to compute material assignments, create a single ", {"scheme": "Node", "value": "/nodes/vop/parm", "type": "link", "text": ["Parameter VOP"], "fullpath": "/nodes/vop/parm"}, " at the end of the network to represent the ", {"type": "q", "text": ["return"]}, " value. Set its ", {"type": "ui", "text": ["Name"]}, " to ", {"type": "code", "text": ["matname"]}, ", set its ", {"type": "ui", "text": ["Export"]}, " parameter to ", {"type": "q", "text": ["Always"]}, ", and connect the rest of the network to its input."], "extent": [6414, 6707]}, {"blevel": 2, "type": "ord", "indent": 0, "text": ["Fill in the VOP network to do the computation you want."], "extent": [6707, 6766]}, {"blevel": 2, "type": "ord", "indent": 0, "text": ["Go back up to the Assign Material node\u2019s parameters. In the ", {"type": "ui", "text": ["CVEX node"]}, " or ", {"type": "ui", "text": ["Override CVEX node"]}, " parameter, enter the path to the CVEX network you just created."], "extent": [6766, 6933], "body": [{"type": "para", "indent": 4, "text": ["If you created the network inside this Assign Material node, you can simply enter the network\u2019s name, for example ", {"type": "code", "text": ["material_assignment"]}, "."], "extent": [6933, 7075]}, {"type": "para", "indent": 4, "text": ["If you created the network elsewhere, you must enter a path to the network node, for example ", {"type": "code", "text": ["/mat/material_assignment"]}, "."], "extent": [7075, 7202]}], "container": true}], "container": true}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Tips"], "extent": [7202, 7213], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": ["In VEX snippets, you can use ", {"type": "code", "text": ["@"]}, " variable names containing colons (", {"type": "code", "text": [":"]}, "). This makes it easier to automatically bind certain USD attribute names (for example ", {"type": "code", "text": ["i@primvars:foo"]}, "). (These names are not normally legal in names in VEX source code. The node automatically encodes these kinds of names when used in a snippet.)"], "extent": [16, 336]}], "container": true}]}, {"level": 1, "id": "parameters", "container": true, "type": "parameters_section", "indent": 0, "role": "section", "extent": [7241, 7253], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Number of materials"], "extent": [7253, 7275], "body": [{"type": "para", "indent": 4, "text": ["You can perform multiple assignments within one node. Set this to the number of assignments you want to perform, or use the plus and minus button to add or remove assignments."], "extent": [7275, 7456]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Primitives"], "extent": [7456, 7468], "body": [{"type": "para", "indent": 4, "text": ["The primitive(s) you want to assign the material to. You can click the select button beside the text box to select the primitives from the scene graph tree. You can also use ", {"scheme": null, "value": "/solaris/pattern", "type": "link", "text": ["primitive patterns"], "fullpath": "/solaris/pattern"}, " for advanced matching."], "extent": [7468, 7708]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Specify Material Using"], "extent": [7708, 7732], "body": [{"type": "para", "indent": 4, "text": ["How to specify the material to assign."], "extent": [7732, 7776]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Explicit path"], "extent": [7776, 7795], "body": [{"type": "para", "indent": 8, "text": ["Assign a material at a certain path in the scene graph tree."], "extent": [7795, 7865]}], "container": true}, {"type": "dt", "indent": 4, "text": ["VEXpression"], "extent": [7865, 7882], "body": [{"type": "para", "indent": 8, "text": ["Assign a material to each selected primitive based on the results of computing a VEX snippet."], "extent": [7882, 7985]}], "container": true}, {"type": "dt", "indent": 4, "text": ["CVEX Script"], "extent": [7985, 8002], "body": [{"type": "para", "indent": 8, "text": ["TBD."], "extent": [8002, 8016]}], "container": true}], "container": true}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Material Path"], "extent": [8016, 8031], "body": [{"type": "para", "indent": 4, "text": ["When ", {"type": "ui", "text": ["Specify material using"]}, " is ", {"type": "q", "text": ["Explicit path"]}, ", the USD path to the material primitive to use for binding."], "extent": [8031, 8147]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["VEXpression"], "extent": [8147, 8160], "body": [{"type": "para", "indent": 4, "text": ["When ", {"type": "ui", "text": ["Specify material using"]}, " is ", {"type": "q", "text": ["VEXpression"]}, ", this ", {"scheme": null, "value": "/vex/snippets", "type": "link", "text": ["VEX snippet"], "fullpath": "/vex/snippets"}, " is computed for each selected primitive. You can use ", {"type": "code", "text": ["@primpath"]}, " (the path of the current primitive), ", {"type": "code", "text": ["@elemnum"]}, " (the index of the current prim in the list of selected prims), and ", {"type": "code", "text": ["@numelem"]}, " (the total number of selected prims). Must return a string containing a path to the material to assign to the current prim."], "extent": [8160, 8563]}, {"type": "para", "indent": 4, "text": ["For example, this snippet alternates between assigning ", {"type": "code", "text": ["rough_red"]}, " and ", {"type": "code", "text": ["rough_blue"]}, " based on whether a primitive is at an odd or even position in the list of selected primitives:"], "extent": [8563, 8747]}, {"lang": "vex", "type": "pre", "indent": 4, "text": ["\n    return (@elemnum % 2) ? \"/materials/rough_red\" : \"/materials/rough_blue\";\n    "], "extent": [8747, 8851]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["CVEX Node"], "extent": [8851, 8863], "body": [{"type": "para", "indent": 4, "text": ["When ", {"type": "ui", "text": ["Specify material using"]}, " is ", {"type": "q", "text": ["CVEX"]}, ", the path to a CVEX VOP network. See ", {"scheme": null, "value": "#cvex", "type": "link", "text": ["CVEX VOP networks"], "fullpath": "/nodes/lop/assignmaterial#cvex", "fragment": "#cvex"}, " above."], "extent": [8863, 8980]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Parameters Override"], "extent": [8980, 9001], "body": [{"type": "para", "indent": 4, "text": ["Whether and how to override individual material parameters for each assignment."], "extent": [9001, 9086]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["None"], "extent": [9086, 9096], "body": [{"type": "para", "indent": 8, "text": ["Do not override material parameters."], "extent": [9096, 9142]}], "container": true}, {"type": "dt", "indent": 4, "text": ["VEXpression"], "extent": [9142, 9159], "body": [{"type": "para", "indent": 8, "text": ["Run a VEX snippet for each assignment that can compute new parameter values."], "extent": [9159, 9245]}], "container": true}, {"type": "dt", "indent": 4, "text": ["CVEX Script"], "extent": [9245, 9262], "body": [{"type": "para", "indent": 8, "text": ["Run a VEX program, provided by a CVEX node, to compute override values for material parameters."], "extent": [9262, 9367]}], "container": true}], "container": true}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Override VEXpression"], "extent": [9367, 9389], "body": [{"type": "para", "indent": 4, "text": ["When ", {"type": "ui", "text": ["Parameter override"]}, " is ", {"type": "q", "text": ["VEXpression"]}, ", this ", {"scheme": null, "value": "/vex/snippets", "type": "link", "text": ["VEX snippet"], "fullpath": "/vex/snippets"}, " is run for each selected primitive. The settings under ", {"type": "q", "text": ["CVEX Bindings"]}, " control how material parameters are mapped to VEX variables. You override a material parameter by assigning to the corresponding variable. You can also use ", {"type": "code", "text": ["@primpath"]}, " (the path of the current primitive), ", {"type": "code", "text": ["@elemnum"]}, " (the index of the current prim in the list of selected prims), and ", {"type": "code", "text": ["@numelem"]}, " (the total number of selected prims)."], "extent": [9389, 9876]}, {"type": "para", "indent": 4, "text": ["For example, if the material has a parameter named ", {"type": "code", "text": ["roughness"]}, " (and ", {"type": "ui", "text": ["Autobind by name"]}, " is on, the default), you can override it by setting the corresponding variable in the VEX snippet:"], "extent": [9876, 10069]}, {"lang": "vex", "type": "pre", "indent": 4, "text": ["\n    @roughness = (@elemnum % 3) ? 0.25 : 0.5;\n    "], "extent": [10069, 10141]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Override CVEX Node"], "extent": [10141, 10162], "body": [{"type": "para", "indent": 4, "text": ["When ", {"type": "ui", "text": ["Parameters override"]}, " is ", {"type": "q", "text": ["CVEX"]}, ", the path to a CVEX VOP network. See ", {"scheme": null, "value": "#cvex", "type": "link", "text": ["CVEX VOP networks"], "fullpath": "/nodes/lop/assignmaterial#cvex", "fragment": "#cvex"}, " above."], "extent": [10162, 10276]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["VEX Bindings to Export"], "extent": [10276, 10300], "body": [{"type": "para", "indent": 4, "text": ["A pattern that selects VEXpression parameters that should be exported from the final VEX program.  I.e., these are the output parameters that will be used for material parameter override.  "], "extent": [10300, 10495]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Materials Parent Path"], "extent": [10495, 10518], "body": [{"type": "para", "indent": 4, "text": ["Specifies the USD path to the parent primitive inside which the LOP should author any automatically created materials with overrides."], "extent": [10518, 10657]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Materials Parent Type"], "extent": [10657, 10680], "body": [{"type": "para", "indent": 4, "text": ["Specifies the primitive type of any ancestors that needs to be authored in order to automatically create materials with overrides."], "extent": [10680, 10816]}], "container": true, "role": "item"}], "container": true, "role": "item_group"}, {"level": 5, "type": "sep", "indent": 0, "text": [" CVEX Bindings "], "extent": [10816, 10841]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Autobind by Name"], "extent": [10841, 10860], "body": [{"type": "para", "indent": 4, "text": ["When this is on, attributes on the current primitive (when computing assignment) or on the material (when computing overrides) are automatically made available as VEX variables with the same name in the relevant VEXpression (or CVEX network). You can turn this off and map attribute names to VEX variable names manually using the multiparm below."], "extent": [10860, 11212]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Number of Bindings"], "extent": [11212, 11232], "body": [{"type": "para", "indent": 4, "text": ["The number of manual attribute to VEX variable bindings to create."], "extent": [11232, 11304]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Attribute Name"], "extent": [11304, 11320], "body": [{"type": "para", "indent": 4, "text": ["In a binding pair, the name of the USD attribute to convert to a VEX variable."], "extent": [11320, 11404]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["VEX Parameter"], "extent": [11404, 11419], "body": [{"type": "para", "indent": 4, "text": ["In a binding pair, the name of the VEX variable to create to mirror the USD attribute."], "extent": [11419, 11512]}], "container": true, "role": "item"}], "container": true, "role": "item_group"}, {"level": 5, "type": "sep", "indent": 0, "text": [" Material binding "], "extent": [11512, 11541]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Create and Bind Geometry Subsets"], "extent": [11541, 11576], "body": [{"type": "para", "indent": 4, "text": ["When this is on, the ", {"type": "ui", "text": ["Primitives"]}, " parameter should point to a geometry or geometry subset primitive, and the node runs the VEX snippet for each ", {"type": "em", "text": ["geometry element"]}, " (for example, polygon face) in the geometry, instead of for each selected primitive. In the snippet, ", {"type": "code", "text": ["@elemnum"]}, " is the index of the current element, and ", {"type": "code", "text": ["@numelem"]}, " is the total number of elements in the geometry."], "extent": [11576, 11959]}, {"type": "para", "indent": 4, "text": ["The node will automatically create geometry subsets for each set of elements with the same material path."], "extent": [11959, 12070]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Purpose"], "extent": [12070, 12079], "body": [{"type": "para", "indent": 4, "text": ["Sets the ", {"type": "code", "text": ["purpose"]}, " value for the assignments. This controls what types of renders the assignment applies to."], "extent": [12079, 12193]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["All"], "extent": [12193, 12202], "body": [{"type": "para", "indent": 8, "text": ["The assignments apply to all rendering."], "extent": [12202, 12251]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Full Render"], "extent": [12251, 12268], "body": [{"type": "para", "indent": 8, "text": ["The assignments only apply in full/final renders."], "extent": [12268, 12327]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Preview Render"], "extent": [12327, 12347], "body": [{"type": "para", "indent": 8, "text": ["The assignments only apply in preview renders."], "extent": [12347, 12403]}], "container": true}], "container": true}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Strength"], "extent": [12403, 12413], "body": [{"type": "para", "indent": 4, "text": ["Controls the strength of the assignment ", {"type": "q", "text": ["opinion"]}, " relative to any conflicting assignments on descendant prims under the assigned primitives in the tree. (For example, if this node assigns ", {"type": "code", "text": ["/materials/zerbra"]}, " to ", {"type": "code", "text": ["/a"]}, ", but ", {"type": "code", "text": ["/a/b/c"]}, " already is assigned ", {"type": "code", "text": ["/materials/tiger"]}, ")."], "extent": [12413, 12689]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Default"], "extent": [12689, 12702], "body": [{"type": "para", "indent": 8, "text": ["Use normal rules for opinion strengths (assignments on descendants override assignments on ancestors)."], "extent": [12702, 12814]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Stronger than descendants"], "extent": [12814, 12845], "body": [{"type": "para", "indent": 8, "text": ["This assignment always overrides assignments on primitives lower in the tree."], "extent": [12845, 12932]}, {"type": "para", "indent": 8, "text": ["This is useful if you want collection-based binding to override child primitives that already have a material binding. This option ensures the collection-based binding on the ancestor takes effect despite the general rule that descendant opinions are stronger than ancestors."], "extent": [12932, 13217]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Weaker than descendants"], "extent": [13217, 13246], "body": [{"type": "para", "indent": 8, "text": ["This assignment is always overridden by assignments on primitives lower in the tree. This is the same as ", {"type": "q", "text": ["Default"]}, "."], "extent": [13246, 13371]}], "container": true}], "container": true}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Method"], "extent": [13371, 13379], "body": [{"type": "para", "indent": 4, "text": ["How to express the material assignment in USD."], "extent": [13379, 13431]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Direct"], "extent": [13431, 13443], "body": [{"type": "para", "indent": 8, "text": ["Assign the material by authoring a ", {"type": "code", "text": ["material:binding"]}, " relationship on each individual primitive."], "extent": [13443, 13549]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Collection based"], "extent": [13549, 13571], "body": [{"type": "para", "indent": 8, "text": ["Assign each material to a collection of primitives on a common ancestor using the ", {"type": "code", "text": ["material:binding:collection"]}, " relationship. If you specified the primitives using a collection in the ", {"type": "ui", "text": ["Primitives"]}, " parameter, this will re-use that collection. Otherwise, you can specify the path to the a prim using the ", {"type": "ui", "text": ["Path"]}, " parameter below and the node will create a new collection on that prim."], "extent": [13571, 13965]}, {"type": "note_group", "body": [{"type": "note", "indent": 8, "text": [" "], "role": "item", "extent": [13965, 13980], "body": [{"type": "para", "indent": 12, "text": ["The USD specification for the collection-based material binding says that the material is assigned only to primitives that are descendants of the primitive on which the binding relationship is defined (see ", {"type": "ui", "text": ["Path"]}, " parameter). That is, the binding does not affect any primitives in the collection that are not descendants of that primitive."], "extent": [13980, 14334]}], "container": true}], "container": true, "role": "item_group"}], "container": true}], "container": true}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Include Descendant Primitives in Collection"], "extent": [14334, 14379], "body": [{"type": "para", "indent": 4, "text": ["When ", {"type": "ui", "text": ["Method"]}, " is ", {"type": "q", "text": ["Collection based"]}, ", turn on this option to have the collection authored for the collection-based binding be marked to expand all descendants of the target primitives. This will cause the material assignment to be applied to the entire scene graph tree branch. The equivalent of this behavior always occurs when using ", {"type": "q", "text": ["Direct"]}, " binding, which always inherits down the scene graph tree."], "extent": [14379, 14787]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Path"], "extent": [14787, 14793], "body": [{"type": "para", "indent": 4, "text": ["When ", {"type": "ui", "text": ["Method"]}, " is ", {"type": "q", "text": ["Collection based"]}, ", the collection-based binding will be defined on a primitive at this path."], "extent": [14793, 14911]}, {"type": "para", "indent": 4, "text": ["Also, if this LOP node needs to create a new collection, it will create it on a this primitive as well."], "extent": [14911, 15020]}, {"type": "para", "indent": 4, "text": ["If the path is empty, the LOP node tries to use the deepest ancestor common to all primitives given in the ", {"type": "ui", "text": ["Primitives"]}, " parameter."], "extent": [15020, 15158]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Name"], "extent": [15158, 15164], "body": [{"type": "para", "indent": 4, "text": ["Specifies the collection-based material binding name. If empty, the name of the material will be used."], "extent": [15164, 15272]}], "container": true, "role": "item"}], "container": true, "role": "item_group"}], "text": "Parameters"}, {"level": 1, "id": "related", "container": true, "type": "related_section", "indent": 0, "role": "section", "extent": [15272, 15281], "body": [{"type": "related_item_group", "body": [{"ext": null, "type": "related_item", "indent": 0, "text": [" ", {"scheme": "Node", "value": "/nodes/lop/materiallibrary", "type": "link", "text": "", "fullpath": "/nodes/lop/materiallibrary"}], "role": "item", "extent": [15281, 15312]}, {"ext": null, "type": "related_item", "indent": 0, "text": [" ", {"scheme": "Node", "value": "/nodes/lop/unassignmaterial", "type": "link", "text": "", "fullpath": "/nodes/lop/unassignmaterial"}], "role": "item", "extent": [15312, 15343]}], "container": true, "role": "item_group"}], "text": "Related"}], "title": ["Assign Material"], "summary": ["Assigns a material to one or more USD primitives. You can use also programmatically assign materials using VEX, programmatically override material settings for each assignment, and programmatically assign materials to geometry subsets."], "included": ["/nodes/lop/_snippet_token"]}