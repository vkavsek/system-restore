{"type": "root", "attrs": {"type": "node", "context": "lop", "internal": "editmaterialproperties", "icon": "LOP/editmaterialproperties", "group": "attrs", "since": "19.0", "version": null, "namespace": null}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["Edit Material Properties"], "extent": [0, 29]}, {"type": "summary", "indent": 0, "text": ["Lets you build a spare parameter interface that reflects material or shader input attributes to directly edit their values."], "extent": [151, 283]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Overview"], "extent": [283, 298], "body": [{"type": "para", "indent": 0, "text": ["By itself, this nodes doesn\u2019t do anything. You must add ", {"scheme": null, "value": "/network/spare", "type": "link", "text": ["spare parameters"], "fullpath": "/network/spare"}, " corresponding to shader or material input attributes. Then when you edit the spare parameters, the node authors equivalent changes to the referenced attributes. "], "extent": [298, 552]}, {"type": "para", "indent": 0, "text": ["This is a streamlined version of a more generic ", {"scheme": "Node", "value": "/nodes/lop/editproperties", "type": "link", "text": ["Edit Properties LOP"], "fullpath": "/nodes/lop/editproperties"}, " , but focuses on editing shader and material primitives."], "extent": [552, 705]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["How to"], "extent": [705, 718], "body": [{"type": "ord_group", "body": [{"blevel": 2, "type": "ord", "indent": 0, "text": ["In ", {"type": "ui", "text": ["Primitives"]}, ", set the path(s) to the shader or material primitive(s) you want to the edit. "], "extent": [718, 819]}, {"blevel": 2, "type": "ord", "indent": 0, "text": ["Click __Create Parameters."], "extent": [819, 849], "body": [{"type": "para", "indent": 8, "text": ["This populates the node with spare parameters taken from the shader or material primitive."], "extent": [849, 949]}], "container": true}], "container": true}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Control pop-up menus"], "extent": [949, 976], "body": [{"type": "para", "indent": 0, "text": ["The pop-up menu to the left of each parameter controls ", {"type": "em", "text": ["how"]}, " the node authors the attribute:"], "extent": [976, 1071]}, {"type": "box_group", "body": [{"ext": null, "type": "box", "indent": 0, "role": "item", "extent": [6374, 6380], "body": [{"type": "table", "thead": [{"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["Pop-up menu item "], "role": "th", "extent": [6407, 6431], "container": true, "attrs": {"width": "25%"}}, {"type": "cell", "indent": 8, "text": ["Meaning "], "role": "th", "extent": [6451, 6470]}], "divider": false}], "body": [{"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["Set or Create "], "role": "td", "extent": [6470, 6491], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Sets the attribute to the given value, whether it previously existed or not."], "extent": [6491, 6577]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["Set If Exists "], "role": "td", "extent": [6577, 6597], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Only set the attribute to the given value if it previously existed."], "extent": [6597, 6674]}, {"type": "para", "indent": 8, "text": ["Use this mode to make sure an attribute is only set on primitives of the correct type. For example, only ", {"type": "code", "text": ["UsdGeomSphere"]}, " primitives are likely to have a ", {"type": "code", "text": ["radius"]}, " attribute."], "extent": [6674, 6856]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["Block "], "role": "td", "extent": [6856, 6868], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Makes the attribute appear to not exist, so it takes on its default value. (If the attribute doesn\u2019t already exist on the prim, this does nothing.)"], "extent": [6868, 7025]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["Disconnect Input "], "role": "td", "extent": [7025, 7048], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Deletes the attribute input connection to its source. Input connections take precedence over attribute values, so disconnecting an input allows the attribute value to take effect."], "extent": [7048, 7237]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["Do Nothing "], "role": "td", "extent": [7237, 7254], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Ignore this parameter, don\u2019t create or change the attribute in any way."], "extent": [7254, 7336]}]}], "divider": false}]}], "container": true, "attrs": {"id": "control_menu"}}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Tips"], "extent": [1110, 1121], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": ["In any parameter setting an attribute value, you can use the\n  following local variables:"], "extent": [1121, 1215], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["@numprim"]}], "extent": [1215, 1231], "body": [{"type": "para", "indent": 8, "text": ["The total number of primitives being modified by this node."], "extent": [1231, 1299]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["@prim"]}], "extent": [1299, 1312], "body": [{"type": "para", "indent": 8, "text": ["Index of the primitive being modified. This value\n        goes from ", {"type": "code", "text": ["0"]}, " to '", {"type": "code", "text": ["numprim-1"]}, "."], "extent": [1312, 1409]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["@primpath"]}], "extent": [1409, 1426], "body": [{"type": "para", "indent": 8, "text": ["The path of the primitive being modified."], "extent": [1426, 1478]}], "container": true}], "container": true}], "container": true}], "container": true}, {"type": "para", "indent": 0, "text": ["This node belongs to a class of ", {"type": "strong", "text": ["nodes that create or edit USD prims directly"]}, ". These nodes operate in ", {"type": "em", "text": ["Create mode"]}, " or ", {"type": "em", "text": ["Edit mode"]}, ". This is controlled by a ", {"type": "ui", "text": ["Create primitives"]}, " checkbox or a ", {"type": "em", "text": ["Create/Edit popup menu"]}, ". In create mode, the node creates new prims. In edit mode, the node changes the attributes on an existing prim. The ", {"type": "em", "text": ["Edit mode"]}, " has two variations. ", {"type": "em", "text": ["Edit"]}, " will not modify primitives which have a ", {"type": "code", "text": ["houdini:editable"]}, " attribute set to ", {"type": "code", "text": ["false"]}, ". ", {"type": "em", "text": ["Force edit"]}, " will modify a primitive regardless of the existence or value of this attribute. This attribute can be set on a primitive using the ", {"scheme": null, "value": "/nodes/lop/configureprimitive", "type": "link", "text": ["Configure Primitives LOP"], "fullpath": "/nodes/lop/configureprimitive"}, "."], "extent": [5414, 6076]}, {"type": "para", "indent": 0, "text": ["Parameters that correspond to a USD attribute have a pop-up menu to the left that controls ", {"type": "em", "text": ["how"]}, " the node authors the attribute."], "extent": [6076, 6206]}, {"type": "para", "indent": 0, "text": ["In addition to that, any connectable USD attributes (i.e., the ones in the ", {"type": "code", "text": ["inputs:"]}, " namespace) will have menu items that allow disconnecting them from their sources."], "extent": [6206, 6374]}, {"type": "box_group", "body": [{"ext": null, "type": "box", "indent": 0, "role": "item", "extent": [6374, 6380], "body": [{"type": "table", "thead": [{"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["Pop-up menu item "], "role": "th", "extent": [6407, 6431], "container": true, "attrs": {"width": "25%"}}, {"type": "cell", "indent": 8, "text": ["Meaning "], "role": "th", "extent": [6451, 6470]}], "divider": false}], "body": [{"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["Set or Create "], "role": "td", "extent": [6470, 6491], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Sets the attribute to the given value, whether it previously existed or not."], "extent": [6491, 6577]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["Set If Exists "], "role": "td", "extent": [6577, 6597], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Only set the attribute to the given value if it previously existed."], "extent": [6597, 6674]}, {"type": "para", "indent": 8, "text": ["Use this mode to make sure an attribute is only set on primitives of the correct type. For example, only ", {"type": "code", "text": ["UsdGeomSphere"]}, " primitives are likely to have a ", {"type": "code", "text": ["radius"]}, " attribute."], "extent": [6674, 6856]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["Block "], "role": "td", "extent": [6856, 6868], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Makes the attribute appear to not exist, so it takes on its default value. (If the attribute doesn\u2019t already exist on the prim, this does nothing.)"], "extent": [6868, 7025]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["Disconnect Input "], "role": "td", "extent": [7025, 7048], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Deletes the attribute input connection to its source. Input connections take precedence over attribute values, so disconnecting an input allows the attribute value to take effect."], "extent": [7048, 7237]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["Do Nothing "], "role": "td", "extent": [7237, 7254], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Ignore this parameter, don\u2019t create or change the attribute in any way."], "extent": [7254, 7336]}]}], "divider": false}]}], "container": true, "attrs": {"id": "control_menu"}}], "container": true, "role": "item_group"}]}, {"level": 1, "id": "parameters", "container": true, "type": "parameters_section", "indent": 0, "role": "section", "extent": [1510, 1522], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Primitives"], "extent": [16, 28], "body": [{"type": "para", "indent": 4, "text": ["The primitive(s) the node should operate on. You can drag primitives from the scene graph tree pane into this textbox to add their paths, or click the ", {"scheme": "Icon", "value": "BUTTONS/reselect", "type": "link", "text": "", "fullpath": "/nodes/lop/BUTTONS/reselect"}, " Reselect button beside the text box to select the primitives in the viewer, or ", {"keys": ["Ctrl"], "type": "keys", "text": null}, "-click the Reselect button to choose prims from a pop-up tree window. You can also use ", {"scheme": null, "value": "/solaris/pattern", "type": "link", "text": ["primitive patterns"], "fullpath": "/solaris/pattern"}, " for advanced matching, including matching all prims in a collection (using ", {"type": "code", "text": ["/path/to/prim.collection:", {"type": "var", "text": ["name"]}]}, ")."], "extent": [50, 554]}], "container": true, "attrs": {"id": "primpattern"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Create Parameters"], "extent": [1934, 1953], "body": [{"type": "para", "indent": 8, "text": ["Creates spare parameters on the node based on the input attributes of the material or a shader specified in the ", {"type": "ui", "text": ["Primitives"]}, " parameter."], "extent": [1953, 2100]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Reference Type"], "extent": [2100, 2116], "body": [{"type": "para", "indent": 4, "text": ["This node can edit properties on an existing material primitive or it can create a new on, reference it to an existing primitive, and edit properties on the newly created one.  This is useful when the original material is bound to some geometry whose appearance you don\u2019t want to change, but instead you want to base a new material on an existing one, then tweak it, and bind it to another geometry."], "extent": [2116, 2521]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["None"], "extent": [2521, 2531], "body": [{"type": "para", "indent": 8, "text": ["Don\u2019t create any referencing primitives; edit the properties on an existing one."], "extent": [2531, 2621]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Reference"], "extent": [2621, 2636], "body": [{"type": "para", "indent": 8, "text": ["Reference an existing primitive and edit properties on the newly created primitive."], "extent": [2636, 2729]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Inherit"], "extent": [2729, 2742], "body": [{"type": "para", "indent": 8, "text": ["Create an ", {"type": "q", "text": ["inherits"]}, " composition arc to an existing primitive and edit properties on the newly created primitive."], "extent": [2742, 2873]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Specialize"], "extent": [2873, 2889], "body": [{"type": "para", "indent": 8, "text": ["Create an ", {"type": "q", "text": ["specializes"]}, " composition arc to an existing primitive and edit properties on the newly created primitive."], "extent": [2889, 3015]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Create Class"], "extent": [3015, 3033], "body": [{"type": "para", "indent": 8, "text": ["Don\u2019t create any referencing primitives. Instead, create a primitive with a ", {"type": "code", "text": ["Specifier"]}, " of ", {"type": "code", "text": ["Over"]}, " under an ancestor primitive with a ", {"type": "code", "text": ["Specifier"]}, " of ", {"type": "code", "text": ["Class"]}, ". This makes it easy to create a primitive that is the target of an inherit or specialize composition arc and override select attributes of the inheriting primitive."], "extent": [3033, 3363]}], "container": true}], "container": true}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Class Ancestor"], "extent": [3363, 3379], "body": [{"type": "para", "indent": 4, "text": ["When the ", {"type": "ui", "text": ["Reference type"]}, " is ", {"type": "code", "text": ["Create Class"]}, ", this parameter controls where the ", {"type": "code", "text": ["Class"]}, " specifier primitives end and the ", {"type": "code", "text": ["Over"]}, " primitives begin. Usually the primitive being modified is a descendant of the primitive where the actual inherit composition arc lives, and all primitives below that point should use the ", {"type": "code", "text": ["Over"]}, " specifier, whereas primitives above this point should use ", {"type": "code", "text": ["Class"]}, "."], "extent": [3379, 3774]}], "container": true, "role": "item"}], "container": true}, {"level": 4, "type": "sep", "indent": 0, "text": [" Destination Primitive "], "extent": [3774, 3806]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Reference Parent Material"], "extent": [3806, 3834], "body": [{"type": "para", "indent": 4, "text": ["If the ", {"type": "ui", "text": ["Primitives"]}, " parameter specifies a shader primitive, turning this\n    option on will ensure that the newly created primitive will reference its\n    parent material instead of the shader itself.."], "extent": [3857, 4066]}], "container": true, "attrs": {"id": "refparentmat"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Primitive Path"], "extent": [4066, 4082], "body": [{"type": "para", "indent": 4, "text": ["Scene graph path where the new referencing primitive will be created."], "extent": [4101, 4176]}], "container": true, "attrs": {"id": "primpath"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Parent Primitive Type"], "extent": [4176, 4199], "body": [{"type": "para", "indent": 4, "text": ["If the prim at ", {"type": "ui", "text": ["Primitive Path"]}, " doesn\u2019t exist, this node will create it. If it has to create the prim, it will give any intermediate prims it has to create this type."], "extent": [4224, 4397]}], "container": true, "attrs": {"id": "parentprimtype"}, "role": "item"}], "container": true, "role": "item_group"}], "text": "Parameters"}], "title": ["Edit Material Properties"], "summary": ["Lets you build a spare parameter interface that reflects material or shader input attributes to directly edit their values."], "included": ["/nodes/lop/_primpattern", "/nodes/lop/_simple_prims"]}