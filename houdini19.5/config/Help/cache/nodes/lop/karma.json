{"type": "root", "attrs": {"type": "node", "context": "lop", "internal": "karma", "icon": "MISC/karma", "since": "18.0", "version": null, "namespace": null}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["Karma"], "extent": [0, 10]}, {"type": "summary", "indent": 0, "text": ["Renders the USD scene using Houdini\u2019s Karma renderer."], "extent": [86, 148]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Overview"], "extent": [148, 163], "body": [{"type": "para", "indent": 0, "text": ["The Karma LOP combines the functionality of the ", {"scheme": "Node", "value": "/nodes/lop/rendervar", "type": "link", "text": ["render vars"], "fullpath": "/nodes/lop/rendervar"}, ", ", {"scheme": "Node", "value": "/nodes/lop/renderproduct", "type": "link", "text": ["render product"], "fullpath": "/nodes/lop/renderproduct"}, ", ", {"scheme": "Node", "value": "/nodes/lop/karmarenderproperties", "type": "link", "text": ["Karma render properties"], "fullpath": "/nodes/lop/karmarenderproperties"}, ", and ", {"scheme": "Node", "value": "/nodes/out/usdrender", "type": "link", "text": ["USD render"], "fullpath": "/nodes/out/usdrender"}, " nodes, allowing you to configure all aspects of rendering, with Karma-specific settings, in one place (similar to the ", {"scheme": "Node", "value": "/nodes/out/ifd", "type": "link", "text": ["Mantra render node"], "fullpath": "/nodes/out/ifd"}, " for Mantra). "], "extent": [163, 548]}, {"type": "para", "indent": 0, "text": ["This node outputs the USD scene, configured for rendering with Karma, so you can write it to disk or further modify it with LOP nodes."], "extent": [548, 685]}]}, {"level": 1, "id": "parameters", "container": true, "type": "parameters_section", "indent": 0, "role": "section", "extent": [685, 697], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Render to Disk"], "extent": [1797, 1814], "body": [{"type": "para", "indent": 4, "text": ["Renders with the last render control settings. This blocks Houdini until the render completes."], "extent": [1832, 1932]}], "container": true, "attrs": {"id": "execute"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Render to MPlay"], "extent": [1932, 1949], "body": [{"type": "para", "indent": 4, "text": ["Render directly into an MPlay preview window, instead of to an image file. (You can save the image to disk from inside MPlay.)"], "extent": [1973, 2105]}], "container": true, "attrs": {"id": "renderpreview"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Render to Disk in Background"], "extent": [2105, 2135], "body": [{"type": "para", "indent": 4, "text": ["Renders with the last render control settings in a background process."], "extent": [2163, 2239]}], "container": true, "attrs": {"id": "executebackground"}, "role": "item"}], "container": true, "role": "item_group"}, {"type": "include_group", "body": [{"ext": "usd#renderdialog", "type": "include", "indent": 0, "role": "item", "extent": [834, 862]}, {"ext": "usdrender#trange", "type": "include", "indent": 0, "role": "item", "extent": [862, 890]}, {"ext": "usd#f", "type": "include", "indent": 0, "role": "item", "extent": [890, 907]}, {"ext": "usd#foffset", "type": "include", "indent": 0, "role": "item", "extent": [907, 930]}], "container": true, "role": "item_group"}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Render All Frames With a Single Process"], "extent": [3076, 3117], "body": [{"type": "para", "indent": 4, "text": ["Render all frames in a background process. Default is off. This allows continued interaction with Houdini while the render process runs."], "extent": [3143, 3285]}, {"type": "para", "indent": 4, "text": ["To render multiple frames, the render process renders an image then advances the time on the scene and renders the next image (just like how the Solaris viewport plays back animation). If there is a lot of data shared between frames, this can render significantly faster compared to rendering a single frame per process."], "extent": [3285, 3611]}], "container": true, "attrs": {"id": "allframesatonce"}, "role": "item"}], "container": true, "role": "item_group"}, {"level": 3, "type": "sep", "indent": 0, "text": [" Common Settings "], "extent": [979, 1003]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Rendersettings Primitive Path"], "extent": [1003, 1035], "body": [{"type": "para", "indent": 4, "text": ["Scene graph path to the ", {"type": "code", "text": ["RenderSettings"]}, " prim to render with. (If this is blank, the node looks for default render settings on the root prim. If the root prim has no render settings, the node will use default settings.)"], "extent": [4024, 4249]}], "container": true, "attrs": {"id": "primpath"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Output Picture"], "extent": [648, 664], "body": [{"type": "para", "indent": 4, "text": ["An output image filename (usually an ", {"type": "code", "text": [".exr"]}, " file), or ", {"type": "code", "text": ["ip"]}, " which renders the image in MPlay."], "extent": [682, 784]}, {"type": "para", "indent": 4, "text": ["Include ", {"type": "code", "text": ["$F"]}, " in the file name to insert the frame number. This is necessary when rendering animation. See ", {"scheme": null, "value": "/render/expressions", "type": "link", "text": ["expressions in file names"], "fullpath": "/render/expressions"}, " for more information."], "extent": [784, 965]}], "container": true, "attrs": {"id": "picture"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Camera"], "extent": [1662, 1674], "body": [{"type": "para", "indent": 8, "text": ["Path to a USD camera (", {"type": "code", "text": ["UsdGeomCamera"]}, ") prim to render the scene from."], "extent": [1695, 1774]}], "container": true, "attrs": {"id": "camera"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Resolution"], "extent": [1774, 1790], "body": [{"type": "para", "indent": 8, "text": ["The horizontal and vertical size of the output image, in pixels."], "extent": [1815, 1889]}], "container": true, "attrs": {"id": "resolution"}, "role": "item"}], "container": true, "role": "item_group"}, {"type": "include_group", "body": [{"ext": "/props/karma#karma:global:engine", "type": "include", "indent": 0, "role": "item", "extent": [1219, 1265]}], "container": true, "role": "item_group"}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Simplified Shading"], "extent": [1109, 1129], "body": [{"type": "para", "indent": 4, "text": ["Disable all shading and lighting (render with one headlight on the camera). This might be useful for preview purposes if a shaded view is too slow to render."], "extent": [1155, 1318]}], "container": true, "attrs": {"id": "force_headlight"}, "role": "item"}], "container": true, "role": "item_group"}, {"type": "include_group", "body": [{"ext": "/props/karma#karma:global:samplesperpixel", "type": "include", "indent": 0, "role": "item", "extent": [1314, 1369]}], "container": true, "role": "item_group"}, {"level": 2, "id": "rendering_tab", "container": true, "type": "h", "indent": 0, "text": ["Rendering"], "extent": [1374, 1406], "body": [{"level": 3, "id": null, "container": true, "type": "h", "indent": 4, "text": ["Sampling"], "extent": [1406, 1428], "body": [{"level": 3, "type": "sep", "indent": 4, "text": [" Lights and Indirect Rays "], "extent": [1428, 1466]}, {"type": "include_group", "body": [{"ext": "/props/karma#karma:global:convergence_mode", "type": "include", "indent": 4, "role": "item", "extent": [1466, 1527]}], "container": true, "role": "item_group"}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 4, "text": ["Min Ray Samples"], "extent": [1527, 1548], "body": [], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Max Ray Samples"], "extent": [1619, 1640], "body": [], "container": true, "role": "item"}], "container": true, "role": "item_group"}, {"type": "include_group", "body": [{"ext": "/props/karma#karma:global:light_sampling_mode", "type": "include", "indent": 4, "role": "item", "extent": [1711, 1774]}, {"ext": "/props/karma#karma:global:light_sampling_quality", "type": "include", "indent": 4, "role": "item", "extent": [1774, 1841]}], "container": true, "role": "item_group"}, {"level": 3, "type": "sep", "indent": 4, "text": [" Volume and Opacity "], "extent": [1841, 1872]}, {"type": "include_group", "body": [{"ext": "/props/karma#karma:global:screendoorlimit", "type": "include", "indent": 4, "role": "item", "extent": [1872, 1932]}, {"ext": "/props/karma#karma:object:volumesteprate", "type": "include", "indent": 4, "role": "item", "extent": [1932, 1991]}], "container": true, "role": "item_group"}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 4, "text": ["Limits"], "extent": [1991, 2010], "body": [{"type": "include_group", "body": [{"ext": "/props/karma#karma:object:diffuselimit", "type": "include", "indent": 4, "role": "item", "extent": [2010, 2067]}, {"ext": "/props/karma#karma:object:reflectlimit", "type": "include", "indent": 4, "role": "item", "extent": [2067, 2123]}, {"ext": "/props/karma#karma:object:refractlimit", "type": "include", "indent": 4, "role": "item", "extent": [2123, 2179]}, {"ext": "/props/karma#karma:object:volumelimit", "type": "include", "indent": 4, "role": "item", "extent": [2179, 2234]}, {"ext": "/props/karma#karma:object:ssslimit", "type": "include", "indent": 4, "role": "item", "extent": [2234, 2286]}, {"ext": "/props/karma#karma:global:colorlimit", "type": "include", "indent": 4, "role": "item", "extent": [2286, 2340]}, {"ext": "/props/karma#karma:global:colorlimitindlinked", "type": "include", "indent": 4, "role": "item", "extent": [2340, 2403]}, {"ext": "/props/karma#karma:global:colorlimitindirect", "type": "include", "indent": 4, "role": "item", "extent": [2403, 2465]}, {"ext": "/props/karma#karma:global:russianroulette_cutoff", "type": "include", "indent": 4, "role": "item", "extent": [2465, 2532]}], "container": true, "role": "item_group"}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 4, "text": ["Camera Effects"], "extent": [2532, 2559], "body": [{"type": "include_group", "body": [{"ext": "/props/karma#karma:global:enable_dof", "type": "include", "indent": 4, "role": "item", "extent": [2559, 2614]}], "container": true, "role": "item_group"}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 4, "text": ["Motion Blur"], "extent": [2614, 2631], "body": [], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Per-object Motion Blur"], "extent": [2686, 2714], "body": [{"type": "para", "indent": 8, "text": ["Whether motion blur should be on or off for objects that don\u2019t explicitly have an opinion. If this is ", {"type": "ui", "text": ["On by default"]}, ", the parameters below let you set the defaults."], "extent": [2714, 2891]}], "container": true, "role": "item"}], "container": true, "role": "item_group"}, {"type": "include_group", "body": [{"ext": "/props/karma#karma:object:xformsamples", "type": "include", "indent": 4, "role": "item", "extent": [2891, 2947]}, {"ext": "/props/karma#karma:object:geosamples", "type": "include", "indent": 4, "role": "item", "extent": [2947, 3001]}, {"ext": "/props/karma#karma:object:vblur", "type": "include", "indent": 4, "role": "item", "extent": [3001, 3050]}, {"ext": "/props/karma#karma:object:instance_vblur", "type": "include", "indent": 4, "role": "item", "extent": [3050, 3108]}, {"ext": "/props/karma#karma:object:volumevblurscale", "type": "include", "indent": 4, "role": "item", "extent": [3108, 3169]}], "container": true, "role": "item_group"}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 4, "text": ["Geometry and Shading"], "extent": [3169, 3202], "body": [{"type": "include_group", "body": [{"ext": "/props/karma#karma:object:point_style", "type": "include", "indent": 4, "role": "item", "extent": [3202, 3258]}, {"ext": "/props/karma#karma:object:curve_style", "type": "include", "indent": 4, "role": "item", "extent": [3258, 3313]}, {"ext": "/props/karma#karma:object:curve_basis", "type": "include", "indent": 4, "role": "item", "extent": [3313, 3368]}, {"ext": "/props/karma#karma:object:cull_backface", "type": "include", "indent": 4, "role": "item", "extent": [3368, 3425]}], "container": true, "role": "item_group"}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 4, "text": ["Caustics"], "extent": [3425, 3439], "body": [], "container": true, "role": "item"}], "container": true, "role": "item_group"}, {"type": "include_group", "body": [{"ext": "/props/karma#karma:object:causticsroughnessclamp", "type": "include", "indent": 4, "role": "item", "extent": [3503, 3569]}], "container": true, "role": "item_group"}]}, {"level": 3, "type": "sep", "indent": 4, "text": [" Shading "], "extent": [3569, 3589], "body": [{"type": "include_group", "body": [{"ext": "/props/karma#karma:global:raybias", "type": "include", "indent": 8, "role": "item", "extent": [3589, 3645]}, {"ext": "/props/karma#karma:global:constrainmaxrough", "type": "include", "indent": 8, "role": "item", "extent": [3645, 3710]}, {"ext": "/props/karma#karma:global:autoheadlight", "type": "include", "indent": 8, "role": "item", "extent": [3710, 3771]}], "container": true, "role": "item_group"}], "container": true}, {"level": 3, "type": "sep", "indent": 4, "text": [" Dicing "], "extent": [3771, 3790], "body": [{"type": "include_group", "body": [{"ext": "/props/karma#karma:global:dicingcamera", "type": "include", "indent": 8, "role": "item", "extent": [3790, 3851]}, {"ext": "/props/karma#karma:global:offscreenquality", "type": "include", "indent": 8, "role": "item", "extent": [3851, 3915]}, {"ext": "/props/karma#karma:global:dicingqualityscale", "type": "include", "indent": 8, "role": "item", "extent": [3915, 3982]}], "container": true, "role": "item_group"}], "container": true}]}, {"level": 2, "id": "image_output_tab", "container": true, "type": "h", "indent": 0, "text": ["Image Output"], "extent": [3982, 4020], "body": [{"level": 3, "id": null, "container": true, "type": "h", "indent": 4, "text": ["AOVs (Render Vars)"], "extent": [4020, 4052], "body": [{"type": "para", "indent": 8, "text": ["In USD, a RenderVar prim (for example, ", {"type": "code", "text": ["/Render/Products/Vars/diffuse"]}, ") configures an AOV (arbitrary output variable) to generate during rendering. AOVs are extra ", {"type": "q", "text": ["channels"]}, " of per-pixel data you can add to the image output (for image formats that support multiple channels per pixel, such as ", {"type": "code", "text": [".exr"]}, ")."], "extent": [4052, 4364]}, {"type": "para", "indent": 8, "text": ["By default, this node generates ", {"type": "code", "text": ["beauty"]}, ", ", {"type": "code", "text": ["diffuse"]}, ", ", {"type": "code", "text": ["glossy reflection"]}, ", ", {"type": "code", "text": ["volume"]}, ", ", {"type": "code", "text": ["depth"]}, ", ", {"type": "code", "text": ["UV"]}, " and ", {"type": "code", "text": ["normal"]}, " AOVs."], "extent": [4364, 4490]}, {"type": "para", "indent": 8, "text": ["The checkboxes in this section represent commonly used AOVs. You can also create custom AOVs (in the ", {"type": "ui", "text": ["Extra Render Vars"]}, " section) from ", {"scheme": null, "value": "/render/lpe", "type": "link", "text": ["light path expressions"], "fullpath": "/render/lpe"}, ", Material outputs, geometry primvars, and other sources."], "extent": [4490, 4730]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 8, "text": ["Import Render Vars from Second Input"], "extent": [4730, 4776], "body": [{"type": "para", "indent": 12, "text": ["Finds RenderVar prims in this node\u2019s second input and adds them to this stage, so they add to the list of render vars to generate. This allows other LOP nodes (such as ", {"scheme": "Node", "value": "/nodes/lop/backgroundplate", "type": "link", "text": ["Background Plate"], "fullpath": "/nodes/lop/backgroundplate"}, ") to ", {"type": "q", "text": ["offer"]}, " render vars related to that node to be generated."], "extent": [4825, 5112]}], "container": true, "attrs": {"id": "importSecondaryInputRenderVars"}, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Import Render Products from Second Input"], "extent": [5112, 5162], "body": [{"type": "para", "indent": 12, "text": ["Finds RenderProduct prims in this node\u2019s second input and adds them to this stage, so they add to the list of products to generate. This allows other LOP nodes to ", {"type": "q", "text": ["offer"]}, " products related to that node to be generated."], "extent": [5162, 5393]}], "container": true, "role": "item"}], "container": true, "role": "item_group"}, {"type": "include_group", "body": [{"ext": "/props/karma#karma:global:pixelfilter", "type": "include", "indent": 8, "role": "item", "extent": [5393, 5452]}, {"ext": "/props/karma#karma:global:pixelfiltersize", "type": "include", "indent": 8, "role": "item", "extent": [5452, 5515]}], "container": true, "role": "item_group"}, {"type": "para", "indent": 8, "text": ["The following checkbox is available next to each common render var:"], "extent": [5515, 5592]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 8, "text": ["\n        Split Per LPE Tag"], "extent": [5592, 5781], "body": [{"type": "para", "indent": 12, "text": ["When this is on, the renderer creates additional AOVs specific to each tagged light. To manage LPE Tags for lights, use the ", {"scheme": "Node", "value": "/nodes/lop/lpetag", "type": "link", "text": ["LPE Tag LOP"], "fullpath": "/nodes/lop/lpetag"}, "."], "extent": [5781, 5950]}], "container": true, "role": "item"}], "container": true, "role": "item_group"}, {"level": 4, "id": null, "container": true, "type": "h", "indent": 8, "text": ["Component Level Output"], "extent": [5950, 5991], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["LPE Tag AOV Limit"], "extent": [558, 578], "body": [{"type": "para", "indent": 4, "text": ["When splitting AOVs per lights' LPE Tag, specify the maximum number of LPE Tag AOVs beyond which the node will emit a warning."], "extent": [600, 732]}], "container": true, "attrs": {"id": "lpeaovlimit"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Omit LPE Tags"], "extent": [732, 747], "body": [{"type": "para", "indent": 4, "text": ["When splitting AOVs per lights' LPE Tag, specify a space separated list of lights' LPE Tags which will not create new AOVs."], "extent": [766, 895]}], "container": true, "attrs": {"id": "omitlpes"}, "role": "item"}], "container": true, "role": "item_group"}, {"level": 3, "type": "sep", "indent": 12, "text": [" Beauty "], "extent": [6107, 6134], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Beauty"], "extent": [1509, 1518], "body": [{"type": "para", "indent": 4, "text": ["Add the beauty output as a ", {"type": "code", "text": ["color4f"]}, " render var named ", {"type": "code", "text": ["C"]}, "."], "extent": [1535, 1599]}], "container": true, "attrs": {"id": "beauty"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Beauty Unshadowed"], "extent": [1599, 1618], "body": [{"type": "para", "indent": 4, "text": ["Add the unoccluded (unshadowed) beauty output as a ", {"type": "code", "text": ["color3f"]}, " render var named ", {"type": "code", "text": ["beautyunshadowed"]}, ", using the LPE ", {"type": "code", "text": ["unoccluded;C.*"]}, "."], "extent": [1645, 1780]}], "container": true, "attrs": {"id": "beautyunshadowed"}, "role": "item"}], "container": true, "role": "item_group"}], "container": true}, {"level": 3, "type": "sep", "indent": 12, "text": [" Diffuse "], "extent": [6261, 6289], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Combined Diffuse"], "extent": [1780, 1798], "body": [{"type": "para", "indent": 4, "text": ["Add the combined (any number of bounces) diffuse surface reflection component as a ", {"type": "code", "text": ["color3f"]}, " render var named ", {"type": "code", "text": ["combineddiffuse"]}, ", using the LPE ", {"type": "code", "text": ["C<RD>.*L"]}, "."], "extent": [1824, 1984]}], "container": true, "attrs": {"id": "combineddiffuse"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Direct Diffuse"], "extent": [1984, 2000], "body": [{"type": "para", "indent": 4, "text": ["Add the direct (no bounces) diffuse surface reflection component as a ", {"type": "code", "text": ["color3f"]}, " render var named ", {"type": "code", "text": ["directdiffuse"]}, ", using the LPE ", {"type": "code", "text": ["C<RD>L"]}, "."], "extent": [2024, 2167]}], "container": true, "attrs": {"id": "directdiffuse"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Indirect Diffuse"], "extent": [2167, 2185], "body": [{"type": "para", "indent": 4, "text": ["Add the indirect (one or more bounces) diffuse surface reflection component as a ", {"type": "code", "text": ["color3f"]}, " render var named ", {"type": "code", "text": ["indirectdiffuse"]}, ", using the LPE ", {"type": "code", "text": ["C<RD>.+L"]}, "."], "extent": [2211, 2369]}], "container": true, "attrs": {"id": "indirectdiffuse"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Combined Diffuse Unshadowed"], "extent": [2369, 2398], "body": [{"type": "para", "indent": 4, "text": ["Add the combined (any number of bounces) unoccluded diffuse surface reflection component as a ", {"type": "code", "text": ["color3f"]}, " render var named ", {"type": "code", "text": ["combineddiffuseunshadowed"]}, ", using the LPE ", {"type": "code", "text": ["unoccluded;C<RD>.*"]}, "."], "extent": [2434, 2625]}], "container": true, "attrs": {"id": "combineddiffuseunshadowed"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Direct Diffuse Unshadowed"], "extent": [2625, 2652], "body": [{"type": "para", "indent": 4, "text": ["Add the direct (no bounces) unoccluded diffuse surface reflection component as a ", {"type": "code", "text": ["color3f"]}, " render var named ", {"type": "code", "text": ["directdiffuseunshadowed"]}, ", using the LPE ", {"type": "code", "text": ["unoccluded;C<RD>L"]}, "."], "extent": [2686, 2861]}], "container": true, "attrs": {"id": "directdiffuseunshadowed"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Indirect Diffuse Unshadowed"], "extent": [2861, 2890], "body": [{"type": "para", "indent": 4, "text": ["Add the indirect (one or more bounces) unoccluded diffuse surface reflection component as a ", {"type": "code", "text": ["color3f"]}, " render var named ", {"type": "code", "text": ["indirectdiffuseunshadowed"]}, ", using the LPE ", {"type": "code", "text": ["unoccluded;C<RD>.+L"]}, "."], "extent": [2926, 3116]}], "container": true, "attrs": {"id": "indirectdiffuseunshadowed"}, "role": "item"}], "container": true, "role": "item_group"}], "container": true}, {"level": 3, "type": "sep", "indent": 12, "text": [" Reflections and Refractions "], "extent": [6718, 6766], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Combined Glossy Reflection"], "extent": [3116, 3144], "body": [{"type": "para", "indent": 4, "text": ["Add the combined (any number of bounces) glossy surface reflection component as a ", {"type": "code", "text": ["color3f"]}, " render var named ", {"type": "code", "text": ["combinedglossyreflection"]}, ", using the LPE ", {"type": "code", "text": ["C<RG>.*"]}, "."], "extent": [3183, 3350]}], "container": true, "attrs": {"id": "combinedglossyreflection"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Direct Glossy Reflection"], "extent": [3350, 3376], "body": [{"type": "para", "indent": 4, "text": ["Add the direct (no bounces) glossy surface reflection component as a ", {"type": "code", "text": ["color3f"]}, " render var named ", {"type": "code", "text": ["directglossyreflection"]}, ", using the LPE ", {"type": "code", "text": ["C<RG>L"]}, "."], "extent": [3409, 3560]}], "container": true, "attrs": {"id": "directglossyreflection"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Indirect Glossy Reflection"], "extent": [3560, 3588], "body": [{"type": "para", "indent": 4, "text": ["Add the indirect (one or more bounces) glossy reflection component as a ", {"type": "code", "text": ["color3f"]}, " render var named ", {"type": "code", "text": ["indirectglossyreflection"]}, ", using the LPE ", {"type": "code", "text": ["C<RG>.+L"]}, "."], "extent": [3623, 3781]}], "container": true, "attrs": {"id": "indirectglossyreflection"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Glossy Transmission"], "extent": [3781, 3802], "body": [{"type": "para", "indent": 4, "text": ["Add the glossy transmission component as a ", {"type": "code", "text": ["color3f"]}, " render var named ", {"type": "code", "text": ["glossytransmission"]}, ", using the LPE ", {"type": "code", "text": ["C<TG>.*"]}, "."], "extent": [3831, 3953]}], "container": true, "attrs": {"id": "glossytransmission"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["BSDF Labelled ", {"type": "code", "text": ["coat"]}], "extent": [5143, 5165], "body": [{"type": "para", "indent": 4, "text": ["Add the coat component as a ", {"type": "code", "text": ["color3f"]}, " render var named ", {"type": "code", "text": ["coat"]}, ", using the LPE ", {"type": "code", "text": ["C<...'coat'>.*"]}, "."], "extent": [5180, 5280]}], "container": true, "attrs": {"id": "coat"}, "role": "item"}], "container": true, "role": "item_group"}], "container": true}, {"level": 3, "type": "sep", "indent": 12, "text": [" Lights and Emission "], "extent": [7119, 7159], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Combined Emission"], "extent": [4100, 4119], "body": [{"type": "para", "indent": 4, "text": ["Add the combined (any number of bounces) emission component as a ", {"type": "code", "text": ["color3f"]}, " render var named ", {"type": "code", "text": ["combinedemission"]}, ", using the LPE ", {"type": "code", "text": ["C.*O"]}, "."], "extent": [4146, 4285]}], "container": true, "attrs": {"id": "combinedemission"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Direct Emission"], "extent": [4285, 4302], "body": [{"type": "para", "indent": 4, "text": ["Add the direct (no bounces) emission component as a ", {"type": "code", "text": ["color3f"]}, " render var named ", {"type": "code", "text": ["directemission"]}, ", using the LPE ", {"type": "code", "text": ["CO"]}, "."], "extent": [4327, 4449]}], "container": true, "attrs": {"id": "directemission"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Indirect Emission"], "extent": [4449, 4468], "body": [{"type": "para", "indent": 4, "text": ["Add the indirect (one or more bounces) emission component as a ", {"type": "code", "text": ["color3f"]}, " render var named ", {"type": "code", "text": ["indirectemission"]}, ", using the LPE ", {"type": "code", "text": ["C.+O"]}, "."], "extent": [4495, 4632]}], "container": true, "attrs": {"id": "indirectemission"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Visible Lights"], "extent": [3953, 3969], "body": [{"type": "para", "indent": 4, "text": ["Add the visible lights component as a ", {"type": "code", "text": ["color3f"]}, " render var named ", {"type": "code", "text": ["visiblelights"]}, ", using the LPE ", {"type": "code", "text": ["CL"]}, "."], "extent": [3993, 4100]}], "container": true, "attrs": {"id": "visiblelights"}, "role": "item"}], "container": true, "role": "item_group"}], "container": true}, {"level": 3, "type": "sep", "indent": 12, "text": [" Volume "], "extent": [7427, 7454], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Combined Volume"], "extent": [4632, 4649], "body": [{"type": "para", "indent": 4, "text": ["Add the combined (any number of bounces) volume component as a ", {"type": "code", "text": ["color3f"]}, " render var named ", {"type": "code", "text": ["combinedvolume"]}, ", using the LPE ", {"type": "code", "text": ["CV.*L"]}, "."], "extent": [4674, 4810]}], "container": true, "attrs": {"id": "combinedvolume"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Direct Volume"], "extent": [4810, 4825], "body": [{"type": "para", "indent": 4, "text": ["Add the direct (no bounces) volume component as a ", {"type": "code", "text": ["color3f"]}, " render var named ", {"type": "code", "text": ["directvolume"]}, ", using the LPE ", {"type": "code", "text": ["CVL"]}, "."], "extent": [4848, 4967]}], "container": true, "attrs": {"id": "directvolume"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Indirect Volume"], "extent": [4967, 4984], "body": [{"type": "para", "indent": 4, "text": ["Add the indirect (one or more bounces) volume component as a ", {"type": "code", "text": ["color3f"]}, " render var named ", {"type": "code", "text": ["indirectvolume"]}, ", using the LPE ", {"type": "code", "text": ["CV.+L"]}, "."], "extent": [5009, 5143]}], "container": true, "attrs": {"id": "indirectvolume"}, "role": "item"}], "container": true, "role": "item_group"}], "container": true}, {"level": 3, "type": "sep", "indent": 12, "text": [" SSS "], "extent": [7651, 7675], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["BSDF Labelled ", {"type": "code", "text": ["sss"]}], "extent": [5280, 5301], "body": [{"type": "para", "indent": 4, "text": ["Add the sss component as a ", {"type": "code", "text": ["color3f"]}, " render var named ", {"type": "code", "text": ["sss"]}, ", using the LPE ", {"type": "code", "text": ["C<...'sss'>.*"]}, "."], "extent": [5315, 5413]}], "container": true, "attrs": {"id": "sss"}, "role": "item"}], "container": true, "role": "item_group"}], "container": true}, {"level": 3, "type": "sep", "indent": 12, "text": [" Albedo "], "extent": [7731, 7758], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Albedo"], "extent": [7292, 7301], "body": [{"type": "para", "indent": 4, "text": ["Add the albedo output as a ", {"type": "code", "text": ["color3f"]}, " render var named ", {"type": "code", "text": ["export_basecolor"]}, ". Only available with shaders that export this information, such as the principled shader."], "extent": [7318, 7487]}], "container": true, "attrs": {"id": "albedo"}, "role": "item"}], "container": true, "role": "item_group"}], "container": true}]}, {"level": 4, "id": null, "container": true, "type": "h", "indent": 8, "text": ["Ray Level Output"], "extent": [7818, 7853], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Ray Origin (P)"], "extent": [5438, 5455], "body": [{"type": "para", "indent": 4, "text": ["Add the ray origin as a ", {"type": "code", "text": ["point3f"]}, " render var named ", {"type": "code", "text": ["rayorigin"]}, "."], "extent": [5474, 5543]}], "container": true, "attrs": {"id": "rayorigin"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Ray Direction (D)"], "extent": [5543, 5562], "body": [{"type": "para", "indent": 4, "text": ["Add the ray direction as a ", {"type": "code", "text": ["vector3f"]}, " render var named ", {"type": "code", "text": ["raydirection"]}, "."], "extent": [5584, 5660]}], "container": true, "attrs": {"id": "raydirection"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Time (Shutter Time)"], "extent": [5660, 5681], "body": [{"type": "para", "indent": 4, "text": ["Add the shutter time as a ", {"type": "code", "text": ["float"]}, " render var named ", {"type": "code", "text": ["time"]}, "."], "extent": [5702, 5766]}], "container": true, "attrs": {"id": "shuttertime"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Near (Near Bias)"], "extent": [5766, 5784], "body": [{"type": "para", "indent": 4, "text": ["Add the near bias as a ", {"type": "code", "text": ["float"]}, " render var named ", {"type": "code", "text": ["near"]}, "."], "extent": [5798, 5859]}], "container": true, "attrs": {"id": "near"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Far (Max Distance)"], "extent": [5859, 5879], "body": [{"type": "para", "indent": 4, "text": ["Add the max distance as a ", {"type": "code", "text": ["float"]}, " render var named ", {"type": "code", "text": ["far"]}, "."], "extent": [5892, 5955]}], "container": true, "attrs": {"id": "far"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Mask (Intersection Mask)"], "extent": [5955, 5981], "body": [{"type": "para", "indent": 4, "text": ["Add the mask (alpha) as a ", {"type": "code", "text": ["float"]}, " render var named ", {"type": "code", "text": ["mask"]}, "."], "extent": [5995, 6059]}], "container": true, "attrs": {"id": "mask"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Contribution"], "extent": [6059, 6073], "body": [{"type": "para", "indent": 4, "text": ["Add the ray contribution as a ", {"type": "code", "text": ["float"]}, " render var named ", {"type": "code", "text": ["contribution"]}, "."], "extent": [6095, 6171]}], "container": true, "attrs": {"id": "contribution"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["P (World Space)"], "extent": [6171, 6188], "body": [{"type": "para", "indent": 4, "text": ["Add the world space position as a ", {"type": "code", "text": ["point3f"]}, " render var named ", {"type": "code", "text": ["P"]}, "."], "extent": [6206, 6277]}], "container": true, "attrs": {"id": "position"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Depth (Camera Space)"], "extent": [6277, 6299], "body": [{"type": "para", "indent": 4, "text": ["Add the depth as a ", {"type": "code", "text": ["float"]}, " render var named ", {"type": "code", "text": ["depth"]}, "."], "extent": [6314, 6372]}], "container": true, "attrs": {"id": "depth"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Hitstack"], "extent": [6372, 6382], "body": [{"type": "para", "indent": 4, "text": ["Add the ray hit stack as a ", {"type": "code", "text": ["float"]}, " render var named ", {"type": "code", "text": ["hitstack"]}, "."], "extent": [6400, 6469]}], "container": true, "attrs": {"id": "hitstack"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Element (Raw ID)"], "extent": [6469, 6487], "body": [{"type": "para", "indent": 4, "text": ["Add the element ID as a ", {"type": "code", "text": ["float"]}, " render var named ", {"type": "code", "text": ["element"]}, "."], "extent": [6504, 6569]}], "container": true, "attrs": {"id": "element"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Prim ID"], "extent": [6569, 6578], "body": [{"type": "para", "indent": 4, "text": ["Add the primitive identifier as a ", {"type": "code", "text": ["float"]}, " render var named ", {"type": "code", "text": ["primid"]}, "."], "extent": [6594, 6668]}], "container": true, "attrs": {"id": "primid"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["UV"], "extent": [6668, 6672], "body": [{"type": "para", "indent": 4, "text": ["Add the primitive hit UV as a ", {"type": "code", "text": ["float3"]}, " render var named ", {"type": "code", "text": ["UV"]}, "."], "extent": [6684, 6751]}], "container": true, "attrs": {"id": "uv"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Hit Dist"], "extent": [6751, 6761], "body": [{"type": "para", "indent": 4, "text": ["Add the primitive hit distance as a ", {"type": "code", "text": ["float"]}, " render var named ", {"type": "code", "text": ["hitdist"]}, "."], "extent": [6778, 6855]}], "container": true, "attrs": {"id": "hitdist"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["dPdz"], "extent": [6855, 6861], "body": [{"type": "para", "indent": 4, "text": ["Add the dPdz (Z-depth delta for the current microvolume) as a ", {"type": "code", "text": ["float"]}, " render var named ", {"type": "code", "text": ["dPdz"]}, "."], "extent": [6875, 6975]}], "container": true, "attrs": {"id": "dPdz"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["N (Smooth Normal)"], "extent": [6975, 6994], "body": [{"type": "para", "indent": 4, "text": ["Add the primitive hit normal as a ", {"type": "code", "text": ["normal3f"]}, " render var named ", {"type": "code", "text": ["N"]}, "."], "extent": [7008, 7080]}], "container": true, "attrs": {"id": "hitN"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Ng (Geometric Normal)"], "extent": [7080, 7103], "body": [{"type": "para", "indent": 4, "text": ["Add the primitive geometric normal as a ", {"type": "code", "text": ["normal3f"]}, " render var named ", {"type": "code", "text": ["Ng"]}, "."], "extent": [7118, 7197]}], "container": true, "attrs": {"id": "hitNg"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Flags"], "extent": [7197, 7204], "body": [{"type": "para", "indent": 4, "text": ["Add the ray flags as a ", {"type": "code", "text": ["float"]}, " render var named ", {"type": "code", "text": ["flags"]}, "."], "extent": [7219, 7282]}], "container": true, "attrs": {"id": "flags"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 4, "id": null, "container": true, "type": "h", "indent": 8, "text": ["Extra Render Vars"], "extent": [8835, 8871], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 12, "text": ["Render Vars"], "extent": [8871, 8897], "body": [{"type": "para", "indent": 16, "text": ["Use this multiparm to add custom AOVs (render vars) to the image output."], "extent": [8935, 9025]}], "container": true, "attrs": {"id": "extrarendervars"}, "role": "item"}], "container": true, "role": "item_group"}, {"type": "include_group", "body": [{"ext": "karmaadditionalrendervars#enable", "type": "include", "indent": 12, "role": "item", "extent": [9025, 9081]}, {"ext": "karmaadditionalrendervars#datatype", "type": "include", "indent": 12, "role": "item", "extent": [9081, 9139]}, {"ext": "karmaadditionalrendervars#sourcename", "type": "include", "indent": 12, "role": "item", "extent": [9139, 9199]}, {"ext": "karmaadditionalrendervars#sourcetype", "type": "include", "indent": 12, "role": "item", "extent": [9199, 9259]}, {"ext": "karmaadditionalrendervars#name", "type": "include", "indent": 12, "role": "item", "extent": [9259, 9313]}, {"ext": "karmaadditionalrendervars#format", "type": "include", "indent": 12, "role": "item", "extent": [9313, 9369]}, {"ext": "karmaadditionalrendervars#multisampled", "type": "include", "indent": 12, "role": "item", "extent": [9369, 9431]}, {"ext": "karmaadditionalrendervars#clearvalue", "type": "include", "indent": 12, "role": "item", "extent": [9431, 9491]}], "container": true, "role": "item_group"}]}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 4, "text": ["Filters"], "extent": [9491, 9511], "body": [{"level": 3, "type": "sep", "indent": 8, "text": [" Image Filters "], "extent": [9511, 9542]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 8, "text": ["Denoiser"], "extent": [9542, 9561], "body": [{"type": "para", "indent": 12, "text": ["Choose a denoiser to run on the finished image output, or ", {"type": "ui", "text": ["No Denoiser"]}, ". This utility currently supports ", {"scheme": null, "value": "https://openimagedenoise.github.io", "type": "link", "text": ["Intel Open Image Denoise"], "exists": true}, " (included with Houdini) and the ", {"scheme": null, "value": "https://developer.nvidia.com/optix-denoiser", "type": "link", "text": ["NVIDIA OptiX Denoiser"], "exists": true}, " (must be installed separately). You must be on a supported platform and have the chosen denoising library installed for this to work."], "extent": [9599, 10015]}, {"type": "para", "indent": 12, "text": ["The NVIDIA OptiX Denoiser only works with NVIDIA cards. It is now included with the NVIDIA driver (version 435 or later)."], "extent": [10015, 10150]}], "container": true, "attrs": {"id": "denoise"}, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Use Albedo"], "extent": [10150, 10170], "body": [{"type": "para", "indent": 12, "text": ["Some denoising libraries can use albedo to get a better sense of the image, guiding how and where it reduces noise."], "extent": [10198, 10327]}], "container": true, "attrs": {"id": "usealbedo"}, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Use N Input"], "extent": [10327, 10348], "body": [{"type": "para", "indent": 12, "text": ["Some denoising libraries can use normals to get a better sense of the image, guiding how and where it reduces noise."], "extent": [10376, 10506]}], "container": true, "attrs": {"id": "useninput"}, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Use Gl Input"], "extent": [10506, 10528], "body": [{"type": "para", "indent": 12, "text": ["???"], "extent": [10557, 10574]}], "container": true, "attrs": {"id": "useglinput"}, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["AOVS"], "extent": [10574, 10588], "body": [{"type": "para", "indent": 12, "text": ["Space-separated list of AOVs to run the denoiser on."], "extent": [10588, 10654]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["OCIO"], "extent": [10654, 10668], "body": [{"type": "para", "indent": 12, "text": [{"scheme": null, "value": "/io/ocio", "type": "link", "text": ["OCIO"], "fullpath": "/io/ocio"}, " image filters can be added to various render vars/image planes. "], "extent": [10691, 10785]}], "container": true, "attrs": {"id": "ocio"}, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Enable"], "extent": [10785, 10801], "body": [{"type": "para", "indent": 12, "text": ["Enables the OCIO image filter defined below."], "extent": [10830, 10888]}], "container": true, "attrs": {"id": "enableocio"}, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Planes"], "extent": [10888, 10904], "body": [{"type": "para", "indent": 12, "text": ["The render var names to which the OCIO image filter will be applied."], "extent": [10933, 11015]}], "container": true, "attrs": {"id": "ocioplanes"}, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Output Space"], "extent": [11015, 11037], "body": [{"type": "para", "indent": 12, "text": ["Specify the OCIO color output space the image filter will apply."], "extent": [11071, 11149]}], "container": true, "attrs": {"id": "ociooutputspace"}, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Input Space"], "extent": [11149, 11170], "body": [{"type": "para", "indent": 12, "text": ["In most cases this should be left at ", {"type": "code", "text": ["data"]}, ". There may be some strange case where the source of the AOV is already in a defined color space, in which case you can specify the source space here."], "extent": [11215, 11422]}], "container": true, "attrs": {"id": "ocioinputspace"}, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Looks"], "extent": [11422, 11437], "body": [{"type": "para", "indent": 12, "text": ["Space-separated list of looks to apply to the finished image. A ", {"type": "q", "text": ["look"]}, " is a named OCIO color transform, usually intended to achieve an artistic effect. See the OCIO documentation for more information."], "extent": [11465, 11680]}], "container": true, "attrs": {"id": "ociolooks"}, "role": "item"}], "container": true, "role": "item_group"}, {"level": 3, "type": "sep", "indent": 8, "text": [" Sample Filters "], "extent": [11680, 11711]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 8, "text": ["Color Limits"], "extent": [11711, 11734], "body": [{"type": "para", "indent": 12, "text": ["A color limit clamps the value a shading sample is allowed to contribute to an LPE image plane, to reduce appearance of ", {"type": "q", "text": ["fireflies"]}, " caused by undersampling of extremely bright light sources. This multiparm lets you apply separate limits to different sets of render vars."], "extent": [11764, 12048]}], "container": true, "attrs": {"id": "colorlimits"}, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Enable"], "extent": [12048, 12064], "body": [{"type": "para", "indent": 12, "text": ["Enables the color limit sample filter defined below."], "extent": [12100, 12166]}], "container": true, "attrs": {"id": "enablecolorlimits"}, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Planes"], "extent": [12166, 12182], "body": [{"type": "para", "indent": 12, "text": ["A space-separated list of AOV names to which this color limit will be applied."], "extent": [12217, 12309]}], "container": true, "attrs": {"id": "colorlimitplanes"}, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Limit"], "extent": [12309, 12324], "body": [{"type": "para", "indent": 12, "text": ["The maximum value a shading sample is allowed to contribute to these AOVs."], "extent": [12358, 12447]}], "container": true, "attrs": {"id": "colorlimitlimit"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 4, "text": ["Aspect Ratio"], "extent": [12447, 12472], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 4, "text": ["Aspect Ratio Conform Policy"], "extent": [2143, 2176], "body": [{"type": "para", "indent": 8, "text": ["What to do if the aspect ratio of the output image (", {"type": "ui", "text": ["Resolution"]}, " width divided by height) doesn\u2019t match the aspect ratio of the camera aperture (controlled by attributes on the camera). This allows a standard renderer to do something reasonable when you switch between cameras."], "extent": [2215, 2504]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["Expand Aperture"], "extent": [2504, 2529], "body": [{"type": "para", "indent": 12, "text": ["If necessary, expand the camera aperture to match the image."], "extent": [2529, 2603]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Crop Aperture"], "extent": [2603, 2626], "body": [{"type": "para", "indent": 12, "text": ["If necessary, crop the camera aperture to match the image."], "extent": [2626, 2698]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Adjust Aperture Width"], "extent": [2698, 2729], "body": [{"type": "para", "indent": 12, "text": ["If necessary, change the camera aperture width to match the image."], "extent": [2729, 2809]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Adjust Aperture Height"], "extent": [2809, 2841], "body": [{"type": "para", "indent": 12, "text": ["If necessary, change the camera aperture height to match the image."], "extent": [2841, 2922]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Adjust Pixel Aspect Ratio"], "extent": [2922, 2957], "body": [{"type": "para", "indent": 12, "text": ["Change the aspect ratio of the image to match the camera."], "extent": [2957, 3028]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "aspectRatioConformPolicy"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Data Window NDC"], "extent": [3028, 3049], "body": [{"type": "para", "indent": 8, "text": ["Directs the renderer to only render within this window of the entire output image. You specify the window as ", {"type": "code", "text": ["minX, minY, maxX, maxY"]}, ", where each number is a normalized value from ", {"type": "code", "text": ["0"]}, " to ", {"type": "code", "text": ["1"]}, ". ", {"type": "code", "text": ["0, 0"]}, " is the bottom left, ", {"type": "code", "text": ["1, 1"]}, " is the top right, ", {"type": "code", "text": ["0.5, 0.5"]}, " is the center, and so on. The default is ", {"type": "code", "text": ["0, 0, 1, 1"]}, " (no cropping). Note that you can use ", {"type": "em", "text": ["negative"]}, " values. For example, ", {"type": "code", "text": ["-0.1, -0.1, 1.1, 1.1"]}, " will give you 10% overscan on each side."], "extent": [3077, 3528]}, {"type": "para", "indent": 8, "text": ["You can use this window to temporarily ", {"type": "em", "text": ["crop"]}, " the render to a smaller region, for testing purposes."], "extent": [3528, 3637]}, {"type": "para", "indent": 8, "text": ["Pixels are only rendered if they are ", {"type": "em", "text": ["fully"]}, " inside the window."], "extent": [3637, 3710]}, {"type": "para", "indent": 8, "text": ["The normalized coordinates map to the image ", {"type": "em", "text": ["after"]}, " any adjustments by the ", {"type": "ui", "text": ["Aspect ratio conform policy"]}, "."], "extent": [3710, 3827]}], "container": true, "attrs": {"id": "dataWindowNDC"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Pixel Aspect Ratio"], "extent": [3827, 3851], "body": [{"type": "para", "indent": 8, "text": ["The aspect ratio (width/height) of image ", {"type": "em", "text": ["pixels"]}, " (", {"type": "em", "text": ["not"]}, " the image itself).\n        The default is ", {"type": "code", "text": ["1.0"]}, ", indicating square pixels."], "extent": [3882, 4024]}], "container": true, "attrs": {"id": "pixelAspectRatio"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 4, "text": ["Meta Data"], "extent": [12632, 12654], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Artist"], "extent": [2666, 2675], "body": [{"type": "para", "indent": 4, "text": ["The name of the person, department, or studio that created the image file. The node will set this field on the output image if the image format supports metadata (for example, ", {"type": "code", "text": [".exr"]}, ")."], "extent": [2710, 2900]}], "container": true, "attrs": {"id": "driver:parameters:artist"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Comment"], "extent": [2900, 2909], "body": [{"type": "para", "indent": 4, "text": ["An arbitrary comment, for example a description of the purpose of the output image. The node will set this field on the output image if the image format supports metadata (for example, ", {"type": "code", "text": [".exr"]}, ")."], "extent": [2945, 3144]}], "container": true, "attrs": {"id": "driver:parameters:comment"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Hostname"], "extent": [3144, 3154], "body": [{"type": "para", "indent": 4, "text": ["The name of the computer that generated this the output file. The node will set this field on the output image if the image format supports metadata (for example, ", {"type": "code", "text": [".exr"]}, ")."], "extent": [3191, 3368]}], "container": true, "attrs": {"id": "driver:parameters:hostname"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["EXR Compression"], "extent": [3368, 3385], "body": [{"type": "para", "indent": 4, "text": ["The type of compression to apply to ", {"type": "code", "text": [".exr"]}, " output files."], "extent": [3433, 3496]}], "container": true, "attrs": {"id": "driver:parameters:OpenEXR:compression"}, "role": "item"}], "container": true, "role": "item_group"}]}]}, {"level": 2, "id": "deep_output_tab", "container": true, "type": "h", "indent": 0, "text": ["Deep Output"], "extent": [12912, 12948], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Deep Camera Map"], "extent": [12948, 12966], "body": [{"type": "para", "indent": 4, "text": ["Generate a deep camera map image recording depth "], "extent": [12980, 13035]}, {"type": "para", "indent": 4, "text": ["Deep camera maps are rendered images, where semi-transparent areas (such as volumes) between the camera and the nearest opaque surface are stored with depth information. Each pixel in the image is represented as a curve describing how the transparency value changes across the depth of the scene. This allows you to composite rendered images and have the semi-transparent areas blend correctly according to their depth."], "extent": [13035, 13460]}], "container": true, "attrs": {"id": "dcm"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["DCM Filename"], "extent": [13460, 13474], "body": [{"type": "para", "indent": 4, "text": ["The filename to save the deep camera map image to (this should be an ", {"type": "code", "text": [".exr"]}, " file)."], "extent": [13496, 13584]}, {"type": "para", "indent": 4, "text": ["Include ", {"type": "code", "text": ["$F"]}, " in the file name to insert the frame number. This is necessary when rendering animation. See ", {"scheme": null, "value": "/render/expressions", "type": "link", "text": ["expressions in file names"], "fullpath": "/render/expressions"}, " for more information."], "extent": [13584, 13765]}], "container": true, "attrs": {"id": "dcmfilename"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["DCM Render Vars"], "extent": [13765, 13782], "body": [{"type": "para", "indent": 4, "text": ["Space separated list of RenderVar ", {"type": "em", "text": ["prim paths"]}, " (", {"type": "em", "text": ["not"]}, " a list of AOV names). These must be the fully qualified path to the RenderVar prim and the render var name. You can use patterns to match multiple prims. The default is ", {"type": "code", "text": ["/Render/Products/Vars/*"]}, ", which matches all prims in the branch where Houdini usually creates RenderVar prims."], "extent": [13800, 14141]}], "container": true, "attrs": {"id": "dcmvars"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Advanced"], "extent": [1530, 1545], "body": [{"level": 3, "id": "advanced_sampling_tab", "container": true, "type": "h", "indent": 4, "text": ["Sampling"], "extent": [14171, 14217], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 4, "text": ["Noise Level"], "extent": [14217, 14235], "body": [], "container": true, "attrs": {"id": "varianceaa_thresh"}, "role": "item"}], "container": true, "role": "item_group"}, {"type": "include_group", "body": [{"ext": "/props/karma#karma:global:guiding_enable", "type": "include", "indent": 4, "role": "item", "extent": [14333, 14391]}, {"ext": "/props/karma#karma:global:guiding_samples", "type": "include", "indent": 4, "role": "item", "extent": [14391, 14450]}], "container": true, "role": "item_group"}, {"level": 3, "type": "sep", "indent": 4, "text": [" Pixel Oracle "], "extent": [14450, 14475]}, {"type": "include_group", "body": [{"ext": "/props/karma#karma:global:pixeloracle", "type": "include", "indent": 4, "role": "item", "extent": [14475, 14531]}], "container": true, "role": "item_group"}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 4, "text": ["Minimum Samples"], "extent": [14531, 14552], "body": [{"type": "para", "indent": 8, "text": ["When The minimum number of samples."], "extent": [14584, 14629]}], "container": true, "attrs": {"id": "oracle_minsamples"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Plane"], "extent": [14629, 14640], "body": [{"type": "para", "indent": 8, "text": ["The AOV to use to measure variance."], "extent": [14667, 14712]}], "container": true, "attrs": {"id": "oracle_plane"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Variance Threshold"], "extent": [14712, 14736], "body": [{"type": "para", "indent": 8, "text": ["The amount of variance that triggers more rays."], "extent": [14766, 14823]}], "container": true, "attrs": {"id": "oracle_variance"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Random Seed"], "extent": [14823, 14840], "body": [{"type": "para", "indent": 8, "text": ["Variance sampling involves some randomness. You can change this number to get slightly different results."], "extent": [14865, 14980]}], "container": true, "attrs": {"id": "randomseed"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["OCIO Transform"], "extent": [14980, 15000], "body": [{"type": "para", "indent": 8, "text": ["Whether to apply an OCIO transform to the pixels before measuring variance."], "extent": [15030, 15115]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["Disabled"], "extent": [15115, 15133], "body": [{"type": "para", "indent": 12, "text": ["Do not apply an OCIO transform."], "extent": [15133, 15178]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Display View"], "extent": [15178, 15200], "body": [{"type": "para", "indent": 12, "text": ["Transform to the color space of a display."], "extent": [15200, 15256]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Explicit"], "extent": [15256, 15274], "body": [{"type": "para", "indent": 12, "text": ["Transform to a named color space."], "extent": [15274, 15321]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "oracle_ociomode"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Display"], "extent": [15321, 15334], "body": [{"type": "para", "indent": 8, "text": ["When ", {"type": "ui", "text": ["OCIO Transform"]}, " is ", {"type": "ui", "text": ["Display View"]}, ", the display to transform to before measuring variance."], "extent": [15367, 15476]}], "container": true, "attrs": {"id": "oracle_ociodisplay"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["View"], "extent": [15476, 15486], "body": [{"type": "para", "indent": 8, "text": ["When ", {"type": "ui", "text": ["OCIO Transform"]}, " is ", {"type": "ui", "text": ["Display View"]}, ", the view to transform to before measuring variance."], "extent": [15516, 15622]}], "container": true, "attrs": {"id": "oracle_ocioview"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Color Space"], "extent": [15622, 15639], "body": [{"type": "para", "indent": 8, "text": ["When ", {"type": "ui", "text": ["OCIO Transform"]}, " is ", {"type": "ui", "text": ["Explicit"]}, ", the color space to transform to before measuring variance."], "extent": [15675, 15785]}], "container": true, "attrs": {"id": "oracle_ociocolorspace"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 3, "id": "checkpointing_tab", "container": true, "type": "h", "indent": 4, "text": ["Checkpointing"], "extent": [15785, 15831], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 4, "text": ["Output Checkpoint Files"], "extent": [15831, 15861], "body": [{"type": "para", "indent": 8, "text": ["When this is on, Karma will periodocially write out image tile data to a checkpoint file.  If the process is terminated before completing the render, you can resume it by turning on ", {"type": "ui", "text": ["Resume from Checkpoint"]}, " and restarting."], "extent": [15892, 16126]}], "container": true, "attrs": {"id": "outputcheckpoint"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Checkpoint File"], "extent": [16126, 16147], "body": [{"type": "para", "indent": 8, "text": ["When ", {"type": "ui", "text": ["Output checkpoint files"]}, " is on, the name of the checkpoint file to write to. The default (", {"type": "code", "text": ["$HIP/render/$HIPNAME.$OS.$F4.checkpoint"]}, ") puts the checkpoint file inside a ", {"type": "code", "text": ["render"]}, " directory next to the current scene file, and includes the base name of the current scene file (", {"type": "code", "text": ["$HIPNAME"]}, "), this node\u2019s name (", {"type": "code", "text": ["$OS"]}, "), and the render frame (", {"type": "code", "text": ["$F"]}, ") in the filename to help avoid two processes trying to use the same checkpoint file at the same time."], "extent": [16173, 16630]}], "container": true, "attrs": {"id": "productName"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Save Frequency"], "extent": [16630, 16650], "body": [{"type": "para", "indent": 8, "text": ["When ", {"type": "ui", "text": ["Output checkpoint files"]}, " is on, Karma waits this number of seconds between writing out a checkpoint file. The default is ", {"type": "code", "text": ["60"]}, "."], "extent": [16678, 16822]}], "container": true, "attrs": {"id": "savefrequency"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Resume From Checkpoint"], "extent": [16822, 16850], "body": [{"type": "para", "indent": 8, "text": ["If this is on and you start a render and the renderer notices there is a valid checkpoint file, it will try to resume rendering from that checkpoint. If you want to restart the render from the beginning, you can turn this off or just delete the checkpoint file(s)."], "extent": [16871, 17146]}], "container": true, "attrs": {"id": "resume"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 4, "text": ["Tiles and Caching"], "extent": [1660, 1690], "body": [{"type": "include_group", "body": [{"ext": "/props/karma#karma:global:bucketsize", "type": "include", "indent": 4, "role": "item", "extent": [17200, 17255]}, {"ext": "/props/karma#karma:global:bucketorder", "type": "include", "indent": 4, "role": "item", "extent": [17255, 17310]}, {"ext": "/props/karma#karma:global:usecacheratio", "type": "include", "indent": 4, "role": "item", "extent": [17310, 17367]}, {"ext": "/props/karma#karma:global:cacheratio", "type": "include", "indent": 4, "role": "item", "extent": [17367, 17421]}, {"ext": "/props/karma#karma:global:cachesize", "type": "include", "indent": 4, "role": "item", "extent": [17421, 17475]}], "container": true, "role": "item_group"}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 8, "text": ["Threads"], "extent": [1755, 1772], "body": [{"type": "para", "indent": 12, "text": ["Number of threads to use for rendering. ", {"type": "code", "text": ["0"]}, " uses the number of processors. ", {"type": "code", "text": ["-1"]}, " uses the number of processors minus one."], "extent": [1803, 1937]}], "container": true, "attrs": {"id": ""}, "role": "item"}], "container": true, "role": "item_group"}, {"type": "include_group", "body": [{"ext": "/props/karma#karma:command:timelimit", "type": "include", "indent": 8, "role": "item", "extent": [1937, 1995]}], "container": true, "role": "item_group"}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 4, "text": ["Options"], "extent": [1995, 2015], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 8, "text": ["USD Output Directory"], "extent": [2015, 2046], "body": [{"type": "para", "indent": 12, "text": ["The directory where any required USD files will be saved. If this directory is in the ", {"type": "code", "text": ["$HOUDINI_TEMP_DIR"]}, ", it will be deleted automatically when the render is complete."], "extent": [2046, 2228]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Purpose"], "extent": [2228, 2245], "body": [{"type": "para", "indent": 4, "text": [{"type": "strong", "text": ["Comma"]}, " separated list of purposes to render (from ", {"type": "code", "text": ["geometry"]}, ", ", {"type": "code", "text": ["guide"]}, ", ", {"type": "code", "text": ["proxy"]}, ", and ", {"type": "code", "text": ["render"]}, "). The default is ", {"type": "code", "text": ["geometry,render"]}, "."], "extent": [4581, 4716]}], "container": true, "attrs": {"id": "purpose"}, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Complexity"], "extent": [2331, 2351], "body": [{"type": "para", "indent": 4, "text": ["Geometry complexity."], "extent": [4754, 4780]}, {"type": "para", "indent": 4, "text": ["???"], "extent": [4780, 4789]}], "container": true, "attrs": {"id": "complexity"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Resolver Context Asset Path"], "extent": [10583, 10613], "body": [{"type": "para", "indent": 4, "text": ["This file path is passed to the render command line as the ", {"type": "code", "text": ["resolver-context"]}, " option. This argument is used to create an asset resolver context that helps the asset resolver find files while composing the USD stage. The default of this parameter is an expression that returns the corresponding parameter on the LOP Network that contains the selected ", {"type": "ui", "text": ["LOP path"]}], "extent": [10639, 11007]}], "container": true, "attrs": {"id": "resolvercontext"}, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Context Options"], "extent": [2499, 2524], "body": [{"type": "para", "indent": 12, "text": ["Use this multiparm to set global context options in effect during the render."], "extent": [2554, 2646]}], "container": true, "attrs": {"id": "optioncount"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 4, "text": ["Driver"], "extent": [2646, 2665], "body": [{"type": "include_group", "body": [{"ext": "karamrenderproperties#driver_tab/", "type": "include", "indent": 8, "role": "item", "extent": [2665, 2719]}], "container": true, "role": "item_group"}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 8, "text": ["Run Command"], "extent": [2719, 2740], "body": [{"type": "para", "indent": 12, "text": ["If you turn this off, when you start a render the node will generate the USD output files to render (in the directory specified in ", {"type": "ui", "text": ["Advanced \u25b8 Options \u25b8 USD Output Directory"]}, "), but will ", {"type": "em", "text": ["not"]}, " actually run the renderer on them."], "extent": [2769, 3011]}], "container": true, "attrs": {"id": "runcommand"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Strip Layers Above Layer Breaks"], "extent": [6097, 6130], "body": [{"type": "para", "indent": 8, "text": ["Enable this option to prevent layers authored above Layer Break nodes from being written to disk by this ROP. This allows a Layer Break node to dictate which portions of the LOP Network are to be saved. Disabling this option allows this behavior to be overridden, forcing the full stage authored by the LOP network to be written to disk. This may be used for debugging purposes, or to write a complete scene to disk for rendering."], "extent": [6161, 6601]}], "container": true, "attrs": {"id": "striplayerbreaks"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Initialize Simulation OPs"], "extent": [17540, 17567], "body": [{"type": "para", "indent": 4, "text": ["Initialize DOP simulations before rendering."], "extent": [17589, 17639]}], "container": true, "attrs": {"id": "initsim"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Create Intermediate Directories"], "extent": [12751, 12784], "body": [{"type": "para", "indent": 4, "text": ["Create intermediate parent directories for output files as needed, such as for generated images."], "extent": [12801, 12903]}], "container": true, "attrs": {"id": "mkpath"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Report Network Use"], "extent": [17813, 17833], "body": [{"type": "para", "indent": 8, "text": ["Print the number of bytes sent or received by the distributed simulation nodes during cooks triggered by this node."], "extent": [17861, 17990]}, {"type": "para", "indent": 4, "text": ["This does not track network usage from, for example, saving a file to an NFS mount. It only tracks the network communication of distributed Houdini nodes."], "extent": [17990, 18153]}], "container": true, "attrs": {"id": "reportnetwork"}, "role": "item"}], "container": true, "role": "item_group"}, {"type": "include_group", "body": [{"ext": "/props/karma#karma:global:abortmissingtexture", "type": "include", "indent": 8, "role": "item", "extent": [3199, 3266]}], "container": true, "role": "item_group"}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Wait for Render to Complete"], "extent": [12390, 12419], "body": [{"type": "para", "indent": 4, "text": ["Causes Houdini to freeze after starting the render process, and only resume when the renderer exits. (This is included mostly for parameter parity with the old Mantra render nodes. It may be useful to implement a crude form of dependency ordering when batch rendering.)"], "extent": [12449, 12724]}], "container": true, "attrs": {"id": "soho_foreground"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 4, "text": ["Profiling"], "extent": [3323, 3345], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 8, "text": ["Verbose Level"], "extent": [3345, 3369], "body": [{"type": "para", "indent": 12, "text": ["Increasing this value will cause more information to be printed out during rendering. To see render time and memory information, set the verbosity level to 1. To see more detailed information about the render, set this parameter to 3. Larger values print out progressively more information."], "extent": [3369, 3673]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["VEX Profiling"], "extent": [3673, 3696], "body": [{"type": "para", "indent": 12, "text": ["VEX profiling lets you analyze shader performance. Turning this on will slow down shading, especially when NAN detection is turned on."], "extent": [3696, 3844]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 12, "text": ["No VEX Profiling"], "extent": [3844, 3874], "body": [{"type": "para", "indent": 16, "text": ["No VEX Profiling is performed."], "extent": [3874, 3922]}], "container": true}, {"type": "dt", "indent": 12, "text": ["Execution Profiling"], "extent": [3922, 3955], "body": [{"type": "para", "indent": 16, "text": ["Karma will print out information about shading computations at the conclusion of the render. This helps in identifying bottlenecks in the shading process."], "extent": [3955, 4139]}], "container": true}, {"type": "dt", "indent": 12, "text": ["Profiling and NAN detection"], "extent": [4139, 4180], "body": [{"type": "para", "indent": 16, "text": ["Prints out the shading information and will not print instructions that generate bad values (Not A Number). The output is cryptic, but can help track down errors in shaders."], "extent": [4180, 4371]}, {"type": "para", "indent": 16, "text": ["When NAN detection is turned on, each instruction executed in VEX will be checked for invalid arithmetic operations. This will check for division by 0, numeric overflow, invalid operations. Errors like this will typically result in white or black pixels in the resulting image."], "extent": [4371, 4666]}], "container": true}], "container": true}], "container": true, "role": "item"}], "container": true, "role": "item_group"}, {"type": "include_group", "body": [{"ext": "/props/karma#karma:global:alfred", "type": "include", "indent": 8, "role": "item", "extent": [4666, 4720]}], "container": true, "role": "item_group"}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 8, "text": ["Add Message Time Stamps"], "extent": [4720, 4753], "body": [{"type": "para", "indent": 12, "text": ["Show the time next to the log entries output by the renderer."], "extent": [4753, 4828]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Windows Console"], "extent": [4828, 4853], "body": [{"type": "para", "indent": 12, "text": ["How to show console output on Windows when the render is launched from a graphical application."], "extent": [4853, 4962]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 12, "text": ["None"], "extent": [4962, 4980], "body": [{"type": "para", "indent": 16, "text": ["Do not open a console window for the render output."], "extent": [4980, 5049]}], "container": true}, {"type": "dt", "indent": 12, "text": ["Wait"], "extent": [5049, 5067], "body": [{"type": "para", "indent": 16, "text": ["Open a console window, show the render output, and then ", {"type": "em", "text": ["wait for the user to close the console window"]}, ". Note that this means the next frame to render will be blocked until you close the window. This can be useful to give you time to read the output when debugging, but obviously would be a huge pain in production."], "extent": [5067, 5400]}], "container": true}, {"type": "dt", "indent": 12, "text": ["No Wait"], "extent": [5400, 5421], "body": [{"type": "para", "indent": 16, "text": ["Open a console window, show the render output, and then automatically close the console window when the render process ends."], "extent": [5421, 5563]}], "container": true}], "container": true}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["USD Trace"], "extent": [5563, 5582], "body": [], "container": true, "attrs": {"id": "usdtrace"}, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Log Output"], "extent": [5670, 5690], "body": [], "container": true, "attrs": {"id": "log"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Append to Log Instead of Overwriting"], "extent": [10023, 10061], "body": [{"type": "para", "indent": 4, "text": ["Normally ", {"type": "code", "text": ["husk"]}, " will overwrite the log file on each run.  This option will cause output to be appended to the text in existing files."], "extent": [10086, 10225]}], "container": true, "attrs": {"id": "husk_logappend"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Output Log"], "extent": [10225, 10237], "body": [{"type": "para", "indent": 4, "text": ["This is the file where normal messages should be saved."], "extent": [10259, 10320]}], "container": true, "attrs": {"id": "husk_stdout"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Error Log"], "extent": [10320, 10331], "body": [{"type": "para", "indent": 4, "text": ["This is the file to which error messages should be saved. If this is the same file specified for the Output Log, the output and error messages will be interleaved (in the same way they are written to the console)."], "extent": [10353, 10573]}], "container": true, "attrs": {"id": "husk_stderr"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 4, "text": ["Scripts"], "extent": [5905, 5925], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Pre-Render Script"], "extent": [17123, 17143], "body": [{"type": "para", "indent": 4, "text": ["This command is run once, before any files are generated."], "extent": [17167, 17230]}], "container": true, "attrs": {"id": "prerender"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Pre-Frame Script"], "extent": [17230, 17248], "body": [{"type": "para", "indent": 4, "text": ["This command is run before each frame is generated."], "extent": [17271, 17328]}], "container": true, "attrs": {"id": "preframe"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Post-Frame Script"], "extent": [17328, 17347], "body": [{"type": "para", "indent": 4, "text": ["This command is run after each frame is generated."], "extent": [17371, 17427]}], "container": true, "attrs": {"id": "postframe"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Post-Render Script"], "extent": [17427, 17447], "body": [{"type": "para", "indent": 4, "text": ["This command is run once, after all files have been generated."], "extent": [17472, 17540]}], "container": true, "attrs": {"id": "postrender"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Initialize Simulation OPs"], "extent": [17540, 17567], "body": [{"type": "para", "indent": 4, "text": ["Initialize DOP simulations before rendering."], "extent": [17589, 17639]}], "container": true, "attrs": {"id": "initsim"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"type": "include_group", "body": [{"ext": "karamrenderproperties#component_labels_tab", "type": "include", "indent": 4, "role": "item", "extent": [6140, 6198]}], "container": true, "role": "item_group"}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 4, "text": ["MPlay"], "extent": [6198, 6216], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 8, "text": ["MPlay Monitor"], "extent": [6216, 6240], "body": [{"type": "para", "indent": 4, "text": ["When rendering to disk, open an MPlay window to interactively monitor progress."], "extent": [6426, 6511]}], "container": true, "attrs": {"id": "enablemplaymonitor"}, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Preview Scale"], "extent": [6335, 6358], "body": [{"type": "para", "indent": 4, "text": ["This is a zoom factor applied to the monitor.  The monitor will display images at a fraction of the full resolution while the image written to disk will be full resolution."], "extent": [6658, 6836]}], "container": true, "attrs": {"id": "previewscale"}, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Session Name"], "extent": [6451, 6473], "body": [], "container": true, "attrs": {"id": "mplayname"}, "role": "item"}], "container": true, "role": "item_group"}]}]}], "text": "Parameters"}, {"level": 1, "id": "related", "container": true, "type": "related_section", "indent": 0, "role": "section", "extent": [6543, 6552], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/lop/additionalrendervars", "type": "link", "text": "", "fullpath": "/nodes/lop/additionalrendervars"}], "extent": [6552, 6587]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/lop/karmarenderproperties", "type": "link", "text": "", "fullpath": "/nodes/lop/karmarenderproperties"}], "extent": [6587, 6622]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/lop/karmastandardrendervars", "type": "link", "text": "", "fullpath": "/nodes/lop/karmastandardrendervars"}], "extent": [6622, 6659]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/lop/renderproduct", "type": "link", "text": "", "fullpath": "/nodes/lop/renderproduct"}], "extent": [6659, 6686]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/lop/rendersettings", "type": "link", "text": "", "fullpath": "/nodes/lop/rendersettings"}], "extent": [6686, 6714]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/lop/rendervar", "type": "link", "text": "", "fullpath": "/nodes/lop/rendervar"}], "extent": [6714, 6737]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": null, "value": "/render/lpe", "type": "link", "text": ["Light Path Expressions"], "fullpath": "/render/lpe"}], "extent": [6737, 6776]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": null, "value": "/io/ocio", "type": "link", "text": ["OCIO"], "fullpath": "/io/ocio"}], "extent": [6776, 6795]}], "container": true}], "text": "Related"}], "title": ["Karma"], "summary": ["Renders the USD scene using Houdini\u2019s Karma renderer."], "included": ["/nodes/lop/_simple_prims", "/nodes/lop/karmarenderproperties", "/nodes/lop/karmastandardrendervars", "/nodes/lop/renderproduct", "/nodes/lop/rendersettings", "/nodes/out/usd", "/nodes/out/usdrender", "/props/karma", "/solaris/output", "/solaris/view"]}