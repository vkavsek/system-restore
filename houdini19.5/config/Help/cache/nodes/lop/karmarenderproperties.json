{"type": "root", "attrs": {"type": "node", "context": "lop", "internal": "karmarenderproperties", "icon": "LOP/karmarenderproperties", "since": "18.0", "tags": "rendering,karma", "version": null, "namespace": null}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["Karma Render Properties"], "extent": [130, 158]}, {"type": "summary", "indent": 0, "text": ["Configure Render Properties for Karma."], "extent": [158, 205]}, {"type": "para", "indent": 0, "text": ["The Karma Render Properties LOP creates ", {"scheme": "Node", "value": "/nodes/lop/rendervar", "type": "link", "text": ["render vars"], "fullpath": "/nodes/lop/rendervar"}, ", a ", {"scheme": "Node", "value": "/nodes/lop/renderproduct", "type": "link", "text": ["render product"], "fullpath": "/nodes/lop/renderproduct"}, " and a ", {"scheme": "Node", "value": "/nodes/lop/rendersettings", "type": "link", "text": ["render settings"], "fullpath": "/nodes/lop/rendersettings"}, " primitive, configured for Karma."], "extent": [205, 403]}, {"level": 1, "id": "parameters", "container": true, "type": "parameters_section", "indent": 0, "role": "section", "extent": [403, 415], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Rendersettings Primitive Path"], "extent": [415, 447], "body": [{"type": "para", "indent": 4, "text": ["This node creates a RenderSettings prim with the configuration you set up using the parameters. This is the scene tree path where this node will create the RenderSettings prim."], "extent": [466, 648]}], "container": true, "attrs": {"id": "primpath"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Output Picture"], "extent": [648, 664], "body": [{"type": "para", "indent": 4, "text": ["An output image filename (usually an ", {"type": "code", "text": [".exr"]}, " file), or ", {"type": "code", "text": ["ip"]}, " which renders the image in MPlay."], "extent": [682, 784]}, {"type": "para", "indent": 4, "text": ["Include ", {"type": "code", "text": ["$F"]}, " in the file name to insert the frame number. This is necessary when rendering animation. See ", {"scheme": null, "value": "/render/expressions", "type": "link", "text": ["expressions in file names"], "fullpath": "/render/expressions"}, " for more information."], "extent": [784, 965]}], "container": true, "attrs": {"id": "picture"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Camera"], "extent": [1745, 1757], "body": [{"type": "para", "indent": 8, "text": ["Path to a USD camera (", {"type": "code", "text": ["UsdGeomCamera"]}, ") prim to render the scene from."], "extent": [1778, 1857]}], "container": true, "attrs": {"id": "camera"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Resolution Mode"], "extent": [1857, 1878], "body": [{"type": "para", "indent": 8, "text": ["Use the USD Camera\u2019s aperture aspect ratio to automatically set one dimension of the resolution."], "extent": [1901, 2007]}, {"type": "para", "indent": 8, "text": ["The computed parm is set using an expression, but is locked to prevent accidental edits."], "extent": [2007, 2105]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["Manual"], "extent": [2105, 2121], "body": [{"type": "para", "indent": 12, "text": ["Set the resolution height and width values."], "extent": [2121, 2178]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Set Width, Compute Height from Aperture"], "extent": [2178, 2227], "body": [{"type": "para", "indent": 12, "text": ["Set the width size, while height is computed from the width and the camera aspect ratio."], "extent": [2227, 2329]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Set Height, Compute Width from Aperture"], "extent": [2329, 2378], "body": [{"type": "para", "indent": 12, "text": ["Set the height size, while width is computed from the width and the camera aspect ratio."], "extent": [2378, 2480]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "res_mode"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Resolution"], "extent": [2480, 2496], "body": [{"type": "para", "indent": 8, "text": ["The horizontal and vertical size of the output image, in pixels."], "extent": [2521, 2595]}], "container": true, "attrs": {"id": "resolution"}, "role": "item"}], "container": true, "role": "item_group"}, {"type": "include_group", "body": [{"ext": "usdrender#trange", "type": "include", "indent": 0, "role": "item", "extent": [1070, 1098]}, {"ext": "/props/karma#karma:global:engine", "type": "include", "indent": 0, "role": "item", "extent": [1098, 1144]}], "container": true, "role": "item_group"}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Simplified Shading"], "extent": [1144, 1164], "body": [{"type": "para", "indent": 4, "text": ["Disable all shading and lighting (render with one headlight on the camera). This might be useful for preview purposes if a shaded view is too slow to render."], "extent": [1190, 1353]}], "container": true, "attrs": {"id": "force_headlight"}, "role": "item"}], "container": true, "role": "item_group"}, {"type": "include_group", "body": [{"ext": "/props/karma#karma:global:samplesperpixel", "type": "include", "indent": 0, "role": "item", "extent": [1353, 1409]}], "container": true, "role": "item_group"}, {"level": 2, "id": "rendering_tab", "container": true, "type": "h", "indent": 0, "text": ["Rendering"], "extent": [1409, 1441], "body": [{"level": 3, "id": null, "container": true, "type": "h", "indent": 4, "text": ["Sampling"], "extent": [1441, 1463], "body": [{"level": 3, "type": "sep", "indent": 4, "text": [" Lights and Indirect Rays "], "extent": [1463, 1501]}, {"type": "include_group", "body": [{"ext": "/props/karma#karma:global:convergence_mode", "type": "include", "indent": 4, "role": "item", "extent": [1501, 1562]}], "container": true, "role": "item_group"}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 4, "text": ["Min Ray Samples"], "extent": [1562, 1583], "body": [], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Max Ray Samples"], "extent": [1654, 1675], "body": [], "container": true, "role": "item"}], "container": true, "role": "item_group"}, {"type": "include_group", "body": [{"ext": "/props/karma#karma:global:light_sampling_mode", "type": "include", "indent": 4, "role": "item", "extent": [1746, 1809]}, {"ext": "/props/karma#karma:global:light_sampling_quality", "type": "include", "indent": 4, "role": "item", "extent": [1809, 1876]}], "container": true, "role": "item_group"}, {"level": 3, "type": "sep", "indent": 4, "text": [" Volume and Opacity "], "extent": [1876, 1907]}, {"type": "include_group", "body": [{"ext": "/props/karma#karma:global:screendoorlimit", "type": "include", "indent": 4, "role": "item", "extent": [1907, 1967]}, {"ext": "/props/karma#karma:object:volumesteprate", "type": "include", "indent": 4, "role": "item", "extent": [1967, 2026]}], "container": true, "role": "item_group"}]}, {"level": 3, "id": "limits_tab", "container": true, "type": "h", "indent": 4, "text": ["Limits"], "extent": [2026, 2058], "body": [{"type": "include_group", "body": [{"ext": "/props/karma#karma:object:diffuselimit", "type": "include", "indent": 4, "role": "item", "extent": [2058, 2115]}, {"ext": "/props/karma#karma:object:reflectlimit", "type": "include", "indent": 4, "role": "item", "extent": [2115, 2171]}, {"ext": "/props/karma#karma:object:refractlimit", "type": "include", "indent": 4, "role": "item", "extent": [2171, 2227]}, {"ext": "/props/karma#karma:object:volumelimit", "type": "include", "indent": 4, "role": "item", "extent": [2227, 2282]}, {"ext": "/props/karma#karma:object:ssslimit", "type": "include", "indent": 4, "role": "item", "extent": [2282, 2334]}, {"ext": "/props/karma#karma:global:colorlimit", "type": "include", "indent": 4, "role": "item", "extent": [2334, 2388]}, {"ext": "/props/karma#karma:global:colorlimitindlinked", "type": "include", "indent": 4, "role": "item", "extent": [2388, 2451]}, {"ext": "/props/karma#karma:global:colorlimitindirect", "type": "include", "indent": 4, "role": "item", "extent": [2451, 2513]}, {"ext": "/props/karma#karma:global:russianroulette_cutoff", "type": "include", "indent": 4, "role": "item", "extent": [2513, 2580]}], "container": true, "role": "item_group"}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 4, "text": ["Camera Effects"], "extent": [2580, 2607], "body": [{"type": "include_group", "body": [{"ext": "/props/karma#karma:global:enable_dof", "type": "include", "indent": 4, "role": "item", "extent": [2607, 2662]}], "container": true, "role": "item_group"}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 4, "text": ["Motion Blur"], "extent": [2662, 2679], "body": [], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Per-object Motion Blur"], "extent": [2734, 2762], "body": [{"type": "para", "indent": 8, "text": ["Whether motion blur should be on or off for objects that don\u2019t explicitly have an opinion. If this is ", {"type": "ui", "text": ["On by default"]}, ", the parameters below let you set the defaults."], "extent": [2762, 2939]}], "container": true, "role": "item"}], "container": true, "role": "item_group"}, {"type": "include_group", "body": [{"ext": "/props/karma#karma:object:xformsamples", "type": "include", "indent": 4, "role": "item", "extent": [2939, 2995]}, {"ext": "/props/karma#karma:object:geosamples", "type": "include", "indent": 4, "role": "item", "extent": [2995, 3049]}, {"ext": "/props/karma#karma:object:vblur", "type": "include", "indent": 4, "role": "item", "extent": [3049, 3098]}, {"ext": "/props/karma#karma:object:instance_vblur", "type": "include", "indent": 4, "role": "item", "extent": [3098, 3156]}, {"ext": "/props/karma#karma:object:volumevblurscale", "type": "include", "indent": 4, "role": "item", "extent": [3156, 3217]}], "container": true, "role": "item_group"}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 4, "text": ["Geometry and Shading"], "extent": [3217, 3250], "body": [{"type": "include_group", "body": [{"ext": "/props/karma#karma:object:point_style", "type": "include", "indent": 4, "role": "item", "extent": [3250, 3306]}, {"ext": "/props/karma#karma:object:curve_style", "type": "include", "indent": 4, "role": "item", "extent": [3306, 3361]}, {"ext": "/props/karma#karma:object:curve_basis", "type": "include", "indent": 4, "role": "item", "extent": [3361, 3416]}, {"ext": "/props/karma#karma:object:cull_backface", "type": "include", "indent": 4, "role": "item", "extent": [3416, 3473]}], "container": true, "role": "item_group"}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 4, "text": ["Caustics"], "extent": [3473, 3487], "body": [], "container": true, "role": "item"}], "container": true, "role": "item_group"}, {"type": "include_group", "body": [{"ext": "/props/karma#karma:object:causticsroughnessclamp", "type": "include", "indent": 4, "role": "item", "extent": [3551, 3617]}], "container": true, "role": "item_group"}]}, {"level": 3, "type": "sep", "indent": 4, "text": [" Shading "], "extent": [3617, 3637], "body": [{"type": "include_group", "body": [{"ext": "/props/karma#karma:global:raybias", "type": "include", "indent": 8, "role": "item", "extent": [3637, 3693]}, {"ext": "/props/karma#karma:global:constrainmaxrough", "type": "include", "indent": 8, "role": "item", "extent": [3693, 3758]}, {"ext": "/props/karma#karma:global:autoheadlight", "type": "include", "indent": 8, "role": "item", "extent": [3758, 3819]}], "container": true, "role": "item_group"}], "container": true}, {"level": 3, "type": "sep", "indent": 4, "text": [" Dicing "], "extent": [3819, 3838], "body": [{"type": "include_group", "body": [{"ext": "/props/karma#karma:global:dicingcamera", "type": "include", "indent": 8, "role": "item", "extent": [3838, 3899]}, {"ext": "/props/karma#karma:global:offscreenquality", "type": "include", "indent": 8, "role": "item", "extent": [3899, 3963]}, {"ext": "/props/karma#karma:global:dicingqualityscale", "type": "include", "indent": 8, "role": "item", "extent": [3963, 4030]}], "container": true, "role": "item_group"}], "container": true}]}, {"level": 2, "id": "image_output_tab", "container": true, "type": "h", "indent": 0, "text": ["Image Output"], "extent": [4030, 4068], "body": [{"level": 3, "id": null, "container": true, "type": "h", "indent": 4, "text": ["AOVs (Render Vars)"], "extent": [4068, 4100], "body": [{"type": "para", "indent": 8, "text": ["In USD, a RenderVar prim (for example, ", {"type": "code", "text": ["/Render/Products/Vars/diffuse"]}, ") configures an AOV (arbitrary output variable) to generate during rendering. AOVs are extra ", {"type": "q", "text": ["channels"]}, " of per-pixel data you can add to the image output (for image formats that support multiple channels per pixel, such as ", {"type": "code", "text": [".exr"]}, ")."], "extent": [4100, 4412]}, {"type": "para", "indent": 8, "text": ["By default, this node generates ", {"type": "code", "text": ["beauty"]}, ", ", {"type": "code", "text": ["diffuse"]}, ", ", {"type": "code", "text": ["glossy reflection"]}, ", ", {"type": "code", "text": ["volume"]}, ", ", {"type": "code", "text": ["depth"]}, ", ", {"type": "code", "text": ["UV"]}, " and ", {"type": "code", "text": ["normal"]}, " AOVs."], "extent": [4412, 4538]}, {"type": "para", "indent": 8, "text": ["The checkboxes in this section represent commonly used AOVs. You can also create custom AOVs (in the ", {"type": "ui", "text": ["Extra Render Vars"]}, " section) from ", {"scheme": null, "value": "/render/lpe", "type": "link", "text": ["light path expressions"], "fullpath": "/render/lpe"}, ", Material outputs, geometry primvars, and other sources."], "extent": [4538, 4778]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 8, "text": ["Import Render Vars from Second Input"], "extent": [4778, 4824], "body": [{"type": "para", "indent": 12, "text": ["Finds RenderVar prims in this node\u2019s second input and adds them to this stage, so they add to the list of render vars to generate. This allows other LOP nodes (such as ", {"scheme": "Node", "value": "/nodes/lop/backgroundplate", "type": "link", "text": ["Background Plate"], "fullpath": "/nodes/lop/backgroundplate"}, ") to ", {"type": "q", "text": ["offer"]}, " render vars related to that node to be generated."], "extent": [4873, 5160]}], "container": true, "attrs": {"id": "importSecondaryInputRenderVars"}, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Import Render Products from Second Input"], "extent": [5160, 5210], "body": [{"type": "para", "indent": 12, "text": ["Finds RenderProduct prims in this node\u2019s second input and adds them to this stage, so they add to the list of products to generate. This allows other LOP nodes to ", {"type": "q", "text": ["offer"]}, " products related to that node to be generated."], "extent": [5210, 5441]}], "container": true, "role": "item"}], "container": true, "role": "item_group"}, {"type": "include_group", "body": [{"ext": "/props/karma#karma:global:pixelfilter", "type": "include", "indent": 8, "role": "item", "extent": [5441, 5500]}, {"ext": "/props/karma#karma:global:pixelfiltersize", "type": "include", "indent": 8, "role": "item", "extent": [5500, 5563]}], "container": true, "role": "item_group"}, {"type": "para", "indent": 8, "text": ["The following checkbox is available next to each common render var:"], "extent": [5563, 5640]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 8, "text": ["\n        Split Per LPE Tag"], "extent": [5640, 5829], "body": [{"type": "para", "indent": 12, "text": ["When this is on, the renderer creates additional AOVs specific to each tagged light. To manage LPE Tags for lights, use the ", {"scheme": "Node", "value": "/nodes/lop/lpetag", "type": "link", "text": ["LPE Tag LOP"], "fullpath": "/nodes/lop/lpetag"}, "."], "extent": [5829, 5998]}], "container": true, "role": "item"}], "container": true, "role": "item_group"}, {"level": 4, "id": null, "container": true, "type": "h", "indent": 8, "text": ["Component Level Output"], "extent": [5998, 6039], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["LPE Tag AOV Limit"], "extent": [558, 578], "body": [{"type": "para", "indent": 4, "text": ["When splitting AOVs per lights' LPE Tag, specify the maximum number of LPE Tag AOVs beyond which the node will emit a warning."], "extent": [600, 732]}], "container": true, "attrs": {"id": "lpeaovlimit"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Omit LPE Tags"], "extent": [732, 747], "body": [{"type": "para", "indent": 4, "text": ["When splitting AOVs per lights' LPE Tag, specify a space separated list of lights' LPE Tags which will not create new AOVs."], "extent": [766, 895]}], "container": true, "attrs": {"id": "omitlpes"}, "role": "item"}], "container": true, "role": "item_group"}, {"level": 3, "type": "sep", "indent": 12, "text": [" Beauty "], "extent": [6155, 6182], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Beauty"], "extent": [1509, 1518], "body": [{"type": "para", "indent": 4, "text": ["Add the beauty output as a ", {"type": "code", "text": ["color4f"]}, " render var named ", {"type": "code", "text": ["C"]}, "."], "extent": [1535, 1599]}], "container": true, "attrs": {"id": "beauty"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Beauty Unshadowed"], "extent": [1599, 1618], "body": [{"type": "para", "indent": 4, "text": ["Add the unoccluded (unshadowed) beauty output as a ", {"type": "code", "text": ["color3f"]}, " render var named ", {"type": "code", "text": ["beautyunshadowed"]}, ", using the LPE ", {"type": "code", "text": ["unoccluded;C.*"]}, "."], "extent": [1645, 1780]}], "container": true, "attrs": {"id": "beautyunshadowed"}, "role": "item"}], "container": true, "role": "item_group"}], "container": true}, {"level": 3, "type": "sep", "indent": 12, "text": [" Diffuse "], "extent": [6309, 6337], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Combined Diffuse"], "extent": [1780, 1798], "body": [{"type": "para", "indent": 4, "text": ["Add the combined (any number of bounces) diffuse surface reflection component as a ", {"type": "code", "text": ["color3f"]}, " render var named ", {"type": "code", "text": ["combineddiffuse"]}, ", using the LPE ", {"type": "code", "text": ["C<RD>.*L"]}, "."], "extent": [1824, 1984]}], "container": true, "attrs": {"id": "combineddiffuse"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Direct Diffuse"], "extent": [1984, 2000], "body": [{"type": "para", "indent": 4, "text": ["Add the direct (no bounces) diffuse surface reflection component as a ", {"type": "code", "text": ["color3f"]}, " render var named ", {"type": "code", "text": ["directdiffuse"]}, ", using the LPE ", {"type": "code", "text": ["C<RD>L"]}, "."], "extent": [2024, 2167]}], "container": true, "attrs": {"id": "directdiffuse"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Indirect Diffuse"], "extent": [2167, 2185], "body": [{"type": "para", "indent": 4, "text": ["Add the indirect (one or more bounces) diffuse surface reflection component as a ", {"type": "code", "text": ["color3f"]}, " render var named ", {"type": "code", "text": ["indirectdiffuse"]}, ", using the LPE ", {"type": "code", "text": ["C<RD>.+L"]}, "."], "extent": [2211, 2369]}], "container": true, "attrs": {"id": "indirectdiffuse"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Combined Diffuse Unshadowed"], "extent": [2369, 2398], "body": [{"type": "para", "indent": 4, "text": ["Add the combined (any number of bounces) unoccluded diffuse surface reflection component as a ", {"type": "code", "text": ["color3f"]}, " render var named ", {"type": "code", "text": ["combineddiffuseunshadowed"]}, ", using the LPE ", {"type": "code", "text": ["unoccluded;C<RD>.*"]}, "."], "extent": [2434, 2625]}], "container": true, "attrs": {"id": "combineddiffuseunshadowed"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Direct Diffuse Unshadowed"], "extent": [2625, 2652], "body": [{"type": "para", "indent": 4, "text": ["Add the direct (no bounces) unoccluded diffuse surface reflection component as a ", {"type": "code", "text": ["color3f"]}, " render var named ", {"type": "code", "text": ["directdiffuseunshadowed"]}, ", using the LPE ", {"type": "code", "text": ["unoccluded;C<RD>L"]}, "."], "extent": [2686, 2861]}], "container": true, "attrs": {"id": "directdiffuseunshadowed"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Indirect Diffuse Unshadowed"], "extent": [2861, 2890], "body": [{"type": "para", "indent": 4, "text": ["Add the indirect (one or more bounces) unoccluded diffuse surface reflection component as a ", {"type": "code", "text": ["color3f"]}, " render var named ", {"type": "code", "text": ["indirectdiffuseunshadowed"]}, ", using the LPE ", {"type": "code", "text": ["unoccluded;C<RD>.+L"]}, "."], "extent": [2926, 3116]}], "container": true, "attrs": {"id": "indirectdiffuseunshadowed"}, "role": "item"}], "container": true, "role": "item_group"}], "container": true}, {"level": 3, "type": "sep", "indent": 12, "text": [" Reflections and Refractions "], "extent": [6766, 6814], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Combined Glossy Reflection"], "extent": [3116, 3144], "body": [{"type": "para", "indent": 4, "text": ["Add the combined (any number of bounces) glossy surface reflection component as a ", {"type": "code", "text": ["color3f"]}, " render var named ", {"type": "code", "text": ["combinedglossyreflection"]}, ", using the LPE ", {"type": "code", "text": ["C<RG>.*"]}, "."], "extent": [3183, 3350]}], "container": true, "attrs": {"id": "combinedglossyreflection"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Direct Glossy Reflection"], "extent": [3350, 3376], "body": [{"type": "para", "indent": 4, "text": ["Add the direct (no bounces) glossy surface reflection component as a ", {"type": "code", "text": ["color3f"]}, " render var named ", {"type": "code", "text": ["directglossyreflection"]}, ", using the LPE ", {"type": "code", "text": ["C<RG>L"]}, "."], "extent": [3409, 3560]}], "container": true, "attrs": {"id": "directglossyreflection"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Indirect Glossy Reflection"], "extent": [3560, 3588], "body": [{"type": "para", "indent": 4, "text": ["Add the indirect (one or more bounces) glossy reflection component as a ", {"type": "code", "text": ["color3f"]}, " render var named ", {"type": "code", "text": ["indirectglossyreflection"]}, ", using the LPE ", {"type": "code", "text": ["C<RG>.+L"]}, "."], "extent": [3623, 3781]}], "container": true, "attrs": {"id": "indirectglossyreflection"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Glossy Transmission"], "extent": [3781, 3802], "body": [{"type": "para", "indent": 4, "text": ["Add the glossy transmission component as a ", {"type": "code", "text": ["color3f"]}, " render var named ", {"type": "code", "text": ["glossytransmission"]}, ", using the LPE ", {"type": "code", "text": ["C<TG>.*"]}, "."], "extent": [3831, 3953]}], "container": true, "attrs": {"id": "glossytransmission"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["BSDF Labelled ", {"type": "code", "text": ["coat"]}], "extent": [5143, 5165], "body": [{"type": "para", "indent": 4, "text": ["Add the coat component as a ", {"type": "code", "text": ["color3f"]}, " render var named ", {"type": "code", "text": ["coat"]}, ", using the LPE ", {"type": "code", "text": ["C<...'coat'>.*"]}, "."], "extent": [5180, 5280]}], "container": true, "attrs": {"id": "coat"}, "role": "item"}], "container": true, "role": "item_group"}], "container": true}, {"level": 3, "type": "sep", "indent": 12, "text": [" Lights and Emission "], "extent": [7167, 7207], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Combined Emission"], "extent": [4100, 4119], "body": [{"type": "para", "indent": 4, "text": ["Add the combined (any number of bounces) emission component as a ", {"type": "code", "text": ["color3f"]}, " render var named ", {"type": "code", "text": ["combinedemission"]}, ", using the LPE ", {"type": "code", "text": ["C.*O"]}, "."], "extent": [4146, 4285]}], "container": true, "attrs": {"id": "combinedemission"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Direct Emission"], "extent": [4285, 4302], "body": [{"type": "para", "indent": 4, "text": ["Add the direct (no bounces) emission component as a ", {"type": "code", "text": ["color3f"]}, " render var named ", {"type": "code", "text": ["directemission"]}, ", using the LPE ", {"type": "code", "text": ["CO"]}, "."], "extent": [4327, 4449]}], "container": true, "attrs": {"id": "directemission"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Indirect Emission"], "extent": [4449, 4468], "body": [{"type": "para", "indent": 4, "text": ["Add the indirect (one or more bounces) emission component as a ", {"type": "code", "text": ["color3f"]}, " render var named ", {"type": "code", "text": ["indirectemission"]}, ", using the LPE ", {"type": "code", "text": ["C.+O"]}, "."], "extent": [4495, 4632]}], "container": true, "attrs": {"id": "indirectemission"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Visible Lights"], "extent": [3953, 3969], "body": [{"type": "para", "indent": 4, "text": ["Add the visible lights component as a ", {"type": "code", "text": ["color3f"]}, " render var named ", {"type": "code", "text": ["visiblelights"]}, ", using the LPE ", {"type": "code", "text": ["CL"]}, "."], "extent": [3993, 4100]}], "container": true, "attrs": {"id": "visiblelights"}, "role": "item"}], "container": true, "role": "item_group"}], "container": true}, {"level": 3, "type": "sep", "indent": 12, "text": [" Volume "], "extent": [7475, 7502], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Combined Volume"], "extent": [4632, 4649], "body": [{"type": "para", "indent": 4, "text": ["Add the combined (any number of bounces) volume component as a ", {"type": "code", "text": ["color3f"]}, " render var named ", {"type": "code", "text": ["combinedvolume"]}, ", using the LPE ", {"type": "code", "text": ["CV.*L"]}, "."], "extent": [4674, 4810]}], "container": true, "attrs": {"id": "combinedvolume"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Direct Volume"], "extent": [4810, 4825], "body": [{"type": "para", "indent": 4, "text": ["Add the direct (no bounces) volume component as a ", {"type": "code", "text": ["color3f"]}, " render var named ", {"type": "code", "text": ["directvolume"]}, ", using the LPE ", {"type": "code", "text": ["CVL"]}, "."], "extent": [4848, 4967]}], "container": true, "attrs": {"id": "directvolume"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Indirect Volume"], "extent": [4967, 4984], "body": [{"type": "para", "indent": 4, "text": ["Add the indirect (one or more bounces) volume component as a ", {"type": "code", "text": ["color3f"]}, " render var named ", {"type": "code", "text": ["indirectvolume"]}, ", using the LPE ", {"type": "code", "text": ["CV.+L"]}, "."], "extent": [5009, 5143]}], "container": true, "attrs": {"id": "indirectvolume"}, "role": "item"}], "container": true, "role": "item_group"}], "container": true}, {"level": 3, "type": "sep", "indent": 12, "text": [" SSS "], "extent": [7699, 7723], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["BSDF Labelled ", {"type": "code", "text": ["sss"]}], "extent": [5280, 5301], "body": [{"type": "para", "indent": 4, "text": ["Add the sss component as a ", {"type": "code", "text": ["color3f"]}, " render var named ", {"type": "code", "text": ["sss"]}, ", using the LPE ", {"type": "code", "text": ["C<...'sss'>.*"]}, "."], "extent": [5315, 5413]}], "container": true, "attrs": {"id": "sss"}, "role": "item"}], "container": true, "role": "item_group"}], "container": true}, {"level": 3, "type": "sep", "indent": 12, "text": [" Albedo "], "extent": [7779, 7806], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Albedo"], "extent": [7292, 7301], "body": [{"type": "para", "indent": 4, "text": ["Add the albedo output as a ", {"type": "code", "text": ["color3f"]}, " render var named ", {"type": "code", "text": ["export_basecolor"]}, ". Only available with shaders that export this information, such as the principled shader."], "extent": [7318, 7487]}], "container": true, "attrs": {"id": "albedo"}, "role": "item"}], "container": true, "role": "item_group"}], "container": true}]}, {"level": 4, "id": null, "container": true, "type": "h", "indent": 8, "text": ["Ray Level Output"], "extent": [7866, 7901], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Ray Origin (P)"], "extent": [5438, 5455], "body": [{"type": "para", "indent": 4, "text": ["Add the ray origin as a ", {"type": "code", "text": ["point3f"]}, " render var named ", {"type": "code", "text": ["rayorigin"]}, "."], "extent": [5474, 5543]}], "container": true, "attrs": {"id": "rayorigin"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Ray Direction (D)"], "extent": [5543, 5562], "body": [{"type": "para", "indent": 4, "text": ["Add the ray direction as a ", {"type": "code", "text": ["vector3f"]}, " render var named ", {"type": "code", "text": ["raydirection"]}, "."], "extent": [5584, 5660]}], "container": true, "attrs": {"id": "raydirection"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Time (Shutter Time)"], "extent": [5660, 5681], "body": [{"type": "para", "indent": 4, "text": ["Add the shutter time as a ", {"type": "code", "text": ["float"]}, " render var named ", {"type": "code", "text": ["time"]}, "."], "extent": [5702, 5766]}], "container": true, "attrs": {"id": "shuttertime"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Near (Near Bias)"], "extent": [5766, 5784], "body": [{"type": "para", "indent": 4, "text": ["Add the near bias as a ", {"type": "code", "text": ["float"]}, " render var named ", {"type": "code", "text": ["near"]}, "."], "extent": [5798, 5859]}], "container": true, "attrs": {"id": "near"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Far (Max Distance)"], "extent": [5859, 5879], "body": [{"type": "para", "indent": 4, "text": ["Add the max distance as a ", {"type": "code", "text": ["float"]}, " render var named ", {"type": "code", "text": ["far"]}, "."], "extent": [5892, 5955]}], "container": true, "attrs": {"id": "far"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Mask (Intersection Mask)"], "extent": [5955, 5981], "body": [{"type": "para", "indent": 4, "text": ["Add the mask (alpha) as a ", {"type": "code", "text": ["float"]}, " render var named ", {"type": "code", "text": ["mask"]}, "."], "extent": [5995, 6059]}], "container": true, "attrs": {"id": "mask"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Contribution"], "extent": [6059, 6073], "body": [{"type": "para", "indent": 4, "text": ["Add the ray contribution as a ", {"type": "code", "text": ["float"]}, " render var named ", {"type": "code", "text": ["contribution"]}, "."], "extent": [6095, 6171]}], "container": true, "attrs": {"id": "contribution"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["P (World Space)"], "extent": [6171, 6188], "body": [{"type": "para", "indent": 4, "text": ["Add the world space position as a ", {"type": "code", "text": ["point3f"]}, " render var named ", {"type": "code", "text": ["P"]}, "."], "extent": [6206, 6277]}], "container": true, "attrs": {"id": "position"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Depth (Camera Space)"], "extent": [6277, 6299], "body": [{"type": "para", "indent": 4, "text": ["Add the depth as a ", {"type": "code", "text": ["float"]}, " render var named ", {"type": "code", "text": ["depth"]}, "."], "extent": [6314, 6372]}], "container": true, "attrs": {"id": "depth"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Hitstack"], "extent": [6372, 6382], "body": [{"type": "para", "indent": 4, "text": ["Add the ray hit stack as a ", {"type": "code", "text": ["float"]}, " render var named ", {"type": "code", "text": ["hitstack"]}, "."], "extent": [6400, 6469]}], "container": true, "attrs": {"id": "hitstack"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Element (Raw ID)"], "extent": [6469, 6487], "body": [{"type": "para", "indent": 4, "text": ["Add the element ID as a ", {"type": "code", "text": ["float"]}, " render var named ", {"type": "code", "text": ["element"]}, "."], "extent": [6504, 6569]}], "container": true, "attrs": {"id": "element"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Prim ID"], "extent": [6569, 6578], "body": [{"type": "para", "indent": 4, "text": ["Add the primitive identifier as a ", {"type": "code", "text": ["float"]}, " render var named ", {"type": "code", "text": ["primid"]}, "."], "extent": [6594, 6668]}], "container": true, "attrs": {"id": "primid"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["UV"], "extent": [6668, 6672], "body": [{"type": "para", "indent": 4, "text": ["Add the primitive hit UV as a ", {"type": "code", "text": ["float3"]}, " render var named ", {"type": "code", "text": ["UV"]}, "."], "extent": [6684, 6751]}], "container": true, "attrs": {"id": "uv"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Hit Dist"], "extent": [6751, 6761], "body": [{"type": "para", "indent": 4, "text": ["Add the primitive hit distance as a ", {"type": "code", "text": ["float"]}, " render var named ", {"type": "code", "text": ["hitdist"]}, "."], "extent": [6778, 6855]}], "container": true, "attrs": {"id": "hitdist"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["dPdz"], "extent": [6855, 6861], "body": [{"type": "para", "indent": 4, "text": ["Add the dPdz (Z-depth delta for the current microvolume) as a ", {"type": "code", "text": ["float"]}, " render var named ", {"type": "code", "text": ["dPdz"]}, "."], "extent": [6875, 6975]}], "container": true, "attrs": {"id": "dPdz"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["N (Smooth Normal)"], "extent": [6975, 6994], "body": [{"type": "para", "indent": 4, "text": ["Add the primitive hit normal as a ", {"type": "code", "text": ["normal3f"]}, " render var named ", {"type": "code", "text": ["N"]}, "."], "extent": [7008, 7080]}], "container": true, "attrs": {"id": "hitN"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Ng (Geometric Normal)"], "extent": [7080, 7103], "body": [{"type": "para", "indent": 4, "text": ["Add the primitive geometric normal as a ", {"type": "code", "text": ["normal3f"]}, " render var named ", {"type": "code", "text": ["Ng"]}, "."], "extent": [7118, 7197]}], "container": true, "attrs": {"id": "hitNg"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Flags"], "extent": [7197, 7204], "body": [{"type": "para", "indent": 4, "text": ["Add the ray flags as a ", {"type": "code", "text": ["float"]}, " render var named ", {"type": "code", "text": ["flags"]}, "."], "extent": [7219, 7282]}], "container": true, "attrs": {"id": "flags"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 4, "id": null, "container": true, "type": "h", "indent": 8, "text": ["Extra Render Vars"], "extent": [8883, 8919], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 12, "text": ["Render Vars"], "extent": [8919, 8945], "body": [{"type": "para", "indent": 16, "text": ["Use this multiparm to add custom AOVs (render vars) to the image output."], "extent": [8983, 9073]}], "container": true, "attrs": {"id": "extrarendervars"}, "role": "item"}], "container": true, "role": "item_group"}, {"type": "include_group", "body": [{"ext": "karmaadditionalrendervars#enable", "type": "include", "indent": 12, "role": "item", "extent": [9073, 9129]}, {"ext": "karmaadditionalrendervars#datatype", "type": "include", "indent": 12, "role": "item", "extent": [9129, 9187]}, {"ext": "karmaadditionalrendervars#sourcename", "type": "include", "indent": 12, "role": "item", "extent": [9187, 9247]}, {"ext": "karmaadditionalrendervars#sourcetype", "type": "include", "indent": 12, "role": "item", "extent": [9247, 9307]}, {"ext": "karmaadditionalrendervars#name", "type": "include", "indent": 12, "role": "item", "extent": [9307, 9361]}, {"ext": "karmaadditionalrendervars#format", "type": "include", "indent": 12, "role": "item", "extent": [9361, 9417]}, {"ext": "karmaadditionalrendervars#multisampled", "type": "include", "indent": 12, "role": "item", "extent": [9417, 9479]}, {"ext": "karmaadditionalrendervars#clearvalue", "type": "include", "indent": 12, "role": "item", "extent": [9479, 9539]}], "container": true, "role": "item_group"}]}]}, {"level": 3, "id": "filters", "container": true, "type": "h", "indent": 4, "text": ["Filters"], "extent": [9539, 9569], "body": [{"level": 3, "type": "sep", "indent": 8, "text": [" Image Filters "], "extent": [9569, 9600]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 8, "text": ["Denoiser"], "extent": [9600, 9619], "body": [{"type": "para", "indent": 12, "text": ["Choose a denoiser to run on the finished image output, or ", {"type": "ui", "text": ["No Denoiser"]}, ". This utility currently supports ", {"scheme": null, "value": "https://openimagedenoise.github.io", "type": "link", "text": ["Intel Open Image Denoise"], "exists": true}, " (included with Houdini) and the ", {"scheme": null, "value": "https://developer.nvidia.com/optix-denoiser", "type": "link", "text": ["NVIDIA OptiX Denoiser"], "exists": true}, " (must be installed separately). You must be on a supported platform and have the chosen denoising library installed for this to work."], "extent": [9657, 10073]}, {"type": "para", "indent": 12, "text": ["The NVIDIA OptiX Denoiser only works with NVIDIA cards. It is now included with the NVIDIA driver (version 435 or later)."], "extent": [10073, 10208]}], "container": true, "attrs": {"id": "denoise"}, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Use Albedo"], "extent": [10208, 10228], "body": [{"type": "para", "indent": 12, "text": ["Some denoising libraries can use albedo to get a better sense of the image, guiding how and where it reduces noise."], "extent": [10256, 10385]}], "container": true, "attrs": {"id": "usealbedo"}, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Use N Input"], "extent": [10385, 10406], "body": [{"type": "para", "indent": 12, "text": ["Some denoising libraries can use normals to get a better sense of the image, guiding how and where it reduces noise."], "extent": [10434, 10564]}], "container": true, "attrs": {"id": "useninput"}, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Use Gl Input"], "extent": [10564, 10586], "body": [{"type": "para", "indent": 12, "text": ["???"], "extent": [10615, 10632]}], "container": true, "attrs": {"id": "useglinput"}, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["AOVS"], "extent": [10632, 10646], "body": [{"type": "para", "indent": 12, "text": ["Space-separated list of AOVs to run the denoiser on."], "extent": [10646, 10712]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["OCIO"], "extent": [10712, 10726], "body": [{"type": "para", "indent": 12, "text": [{"scheme": null, "value": "/io/ocio", "type": "link", "text": ["OCIO"], "fullpath": "/io/ocio"}, " image filters can be added to various render vars/image planes. "], "extent": [10749, 10843]}], "container": true, "attrs": {"id": "ocio"}, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Enable"], "extent": [10843, 10859], "body": [{"type": "para", "indent": 12, "text": ["Enables the OCIO image filter defined below."], "extent": [10888, 10946]}], "container": true, "attrs": {"id": "enableocio"}, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Planes"], "extent": [10946, 10962], "body": [{"type": "para", "indent": 12, "text": ["The render var names to which the OCIO image filter will be applied."], "extent": [10991, 11073]}], "container": true, "attrs": {"id": "ocioplanes"}, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Output Space"], "extent": [11073, 11095], "body": [{"type": "para", "indent": 12, "text": ["Specify the OCIO color output space the image filter will apply."], "extent": [11129, 11207]}], "container": true, "attrs": {"id": "ociooutputspace"}, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Input Space"], "extent": [11207, 11228], "body": [{"type": "para", "indent": 12, "text": ["In most cases this should be left at ", {"type": "code", "text": ["data"]}, ". There may be some strange case where the source of the AOV is already in a defined color space, in which case you can specify the source space here."], "extent": [11273, 11480]}], "container": true, "attrs": {"id": "ocioinputspace"}, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Looks"], "extent": [11480, 11495], "body": [{"type": "para", "indent": 12, "text": ["Space-separated list of looks to apply to the finished image. A ", {"type": "q", "text": ["look"]}, " is a named OCIO color transform, usually intended to achieve an artistic effect. See the OCIO documentation for more information."], "extent": [11523, 11738]}], "container": true, "attrs": {"id": "ociolooks"}, "role": "item"}], "container": true, "role": "item_group"}, {"level": 3, "type": "sep", "indent": 8, "text": [" Sample Filters "], "extent": [11738, 11769]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 8, "text": ["Color Limits"], "extent": [11769, 11792], "body": [{"type": "para", "indent": 12, "text": ["A color limit clamps the value a shading sample is allowed to contribute to an LPE image plane, to reduce appearance of ", {"type": "q", "text": ["fireflies"]}, " caused by undersampling of extremely bright light sources. This multiparm lets you apply separate limits to different sets of render vars."], "extent": [11822, 12106]}], "container": true, "attrs": {"id": "colorlimits"}, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Enable"], "extent": [12106, 12122], "body": [{"type": "para", "indent": 12, "text": ["Enables the color limit sample filter defined below."], "extent": [12158, 12224]}], "container": true, "attrs": {"id": "enablecolorlimits"}, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Planes"], "extent": [12224, 12240], "body": [{"type": "para", "indent": 12, "text": ["A space-separated list of AOV names to which this color limit will be applied."], "extent": [12275, 12367]}], "container": true, "attrs": {"id": "colorlimitplanes"}, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Limit"], "extent": [12367, 12382], "body": [{"type": "para", "indent": 12, "text": ["The maximum value a shading sample is allowed to contribute to these AOVs."], "extent": [12416, 12505]}], "container": true, "attrs": {"id": "colorlimitlimit"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 4, "text": ["Aspect Ratio"], "extent": [12505, 12530], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 4, "text": ["Aspect Ratio Conform Policy"], "extent": [2849, 2882], "body": [{"type": "para", "indent": 8, "text": ["What to do if the aspect ratio of the output image (", {"type": "ui", "text": ["Resolution"]}, " width divided by height) doesn\u2019t match the aspect ratio of the camera aperture (controlled by attributes on the camera). This allows a standard renderer to do something reasonable when you switch between cameras."], "extent": [2921, 3210]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["Expand Aperture"], "extent": [3210, 3235], "body": [{"type": "para", "indent": 12, "text": ["If necessary, expand the camera aperture to match the image."], "extent": [3235, 3309]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Crop Aperture"], "extent": [3309, 3332], "body": [{"type": "para", "indent": 12, "text": ["If necessary, crop the camera aperture to match the image."], "extent": [3332, 3404]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Adjust Aperture Width"], "extent": [3404, 3435], "body": [{"type": "para", "indent": 12, "text": ["If necessary, change the camera aperture width to match the image."], "extent": [3435, 3515]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Adjust Aperture Height"], "extent": [3515, 3547], "body": [{"type": "para", "indent": 12, "text": ["If necessary, change the camera aperture height to match the image."], "extent": [3547, 3628]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Adjust Pixel Aspect Ratio"], "extent": [3628, 3663], "body": [{"type": "para", "indent": 12, "text": ["Change the aspect ratio of the image to match the camera."], "extent": [3663, 3734]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "aspectRatioConformPolicy"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Data Window NDC"], "extent": [3734, 3755], "body": [{"type": "para", "indent": 8, "text": ["Directs the renderer to only render within this window of the entire output image. You specify the window as ", {"type": "code", "text": ["minX, minY, maxX, maxY"]}, ", where each number is a normalized value from ", {"type": "code", "text": ["0"]}, " to ", {"type": "code", "text": ["1"]}, ". ", {"type": "code", "text": ["0, 0"]}, " is the bottom left, ", {"type": "code", "text": ["1, 1"]}, " is the top right, ", {"type": "code", "text": ["0.5, 0.5"]}, " is the center, and so on. The default is ", {"type": "code", "text": ["0, 0, 1, 1"]}, " (no cropping). Note that you can use ", {"type": "em", "text": ["negative"]}, " values. For example, ", {"type": "code", "text": ["-0.1, -0.1, 1.1, 1.1"]}, " will give you 10% overscan on each side."], "extent": [3783, 4234]}, {"type": "para", "indent": 8, "text": ["You can use this window to temporarily ", {"type": "em", "text": ["crop"]}, " the render to a smaller region, for testing purposes."], "extent": [4234, 4343]}, {"type": "para", "indent": 8, "text": ["Pixels are only rendered if they are ", {"type": "em", "text": ["fully"]}, " inside the window."], "extent": [4343, 4416]}, {"type": "para", "indent": 8, "text": ["The normalized coordinates map to the image ", {"type": "em", "text": ["after"]}, " any adjustments by the ", {"type": "ui", "text": ["Aspect ratio conform policy"]}, "."], "extent": [4416, 4533]}], "container": true, "attrs": {"id": "dataWindowNDC"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Pixel Aspect Ratio"], "extent": [4533, 4557], "body": [{"type": "para", "indent": 8, "text": ["The aspect ratio (width/height) of image ", {"type": "em", "text": ["pixels"]}, " (", {"type": "em", "text": ["not"]}, " the image itself).\n        The default is ", {"type": "code", "text": ["1.0"]}, ", indicating square pixels."], "extent": [4588, 4730]}], "container": true, "attrs": {"id": "pixelAspectRatio"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 4, "text": ["Meta Data"], "extent": [12690, 12712], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Artist"], "extent": [2784, 2793], "body": [{"type": "para", "indent": 4, "text": ["The name of the person, department, or studio that created the image file. The node will set this field on the output image if the image format supports metadata (for example, ", {"type": "code", "text": [".exr"]}, ")."], "extent": [2828, 3018]}], "container": true, "attrs": {"id": "driver:parameters:artist"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Comment"], "extent": [3018, 3027], "body": [{"type": "para", "indent": 4, "text": ["An arbitrary comment, for example a description of the purpose of the output image. The node will set this field on the output image if the image format supports metadata (for example, ", {"type": "code", "text": [".exr"]}, ")."], "extent": [3063, 3262]}], "container": true, "attrs": {"id": "driver:parameters:comment"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Hostname"], "extent": [3262, 3272], "body": [{"type": "para", "indent": 4, "text": ["The name of the computer that generated this the output file. The node will set this field on the output image if the image format supports metadata (for example, ", {"type": "code", "text": [".exr"]}, ")."], "extent": [3309, 3486]}], "container": true, "attrs": {"id": "driver:parameters:hostname"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["EXR Compression"], "extent": [3486, 3503], "body": [{"type": "para", "indent": 4, "text": ["The type of compression to apply to ", {"type": "code", "text": [".exr"]}, " output files."], "extent": [3551, 3614]}], "container": true, "attrs": {"id": "driver:parameters:OpenEXR:compression"}, "role": "item"}], "container": true, "role": "item_group"}]}]}, {"level": 2, "id": "deep_output_tab", "container": true, "type": "h", "indent": 0, "text": ["Deep Output"], "extent": [12970, 13006], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Deep Camera Map"], "extent": [13006, 13024], "body": [{"type": "para", "indent": 4, "text": ["Generate a deep camera map image recording depth "], "extent": [13038, 13093]}, {"type": "para", "indent": 4, "text": ["Deep camera maps are rendered images, where semi-transparent areas (such as volumes) between the camera and the nearest opaque surface are stored with depth information. Each pixel in the image is represented as a curve describing how the transparency value changes across the depth of the scene. This allows you to composite rendered images and have the semi-transparent areas blend correctly according to their depth."], "extent": [13093, 13518]}], "container": true, "attrs": {"id": "dcm"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["DCM Filename"], "extent": [13518, 13532], "body": [{"type": "para", "indent": 4, "text": ["The filename to save the deep camera map image to (this should be an ", {"type": "code", "text": [".exr"]}, " file)."], "extent": [13554, 13642]}, {"type": "para", "indent": 4, "text": ["Include ", {"type": "code", "text": ["$F"]}, " in the file name to insert the frame number. This is necessary when rendering animation. See ", {"scheme": null, "value": "/render/expressions", "type": "link", "text": ["expressions in file names"], "fullpath": "/render/expressions"}, " for more information."], "extent": [13642, 13823]}], "container": true, "attrs": {"id": "dcmfilename"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["DCM Render Vars"], "extent": [13823, 13840], "body": [{"type": "para", "indent": 4, "text": ["Space separated list of RenderVar ", {"type": "em", "text": ["prim paths"]}, " (", {"type": "em", "text": ["not"]}, " a list of AOV names). These must be the fully qualified path to the RenderVar prim and the render var name. You can use patterns to match multiple prims. The default is ", {"type": "code", "text": ["/Render/Products/Vars/*"]}, ", which matches all prims in the branch where Houdini usually creates RenderVar prims."], "extent": [13858, 14199]}], "container": true, "attrs": {"id": "dcmvars"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 2, "id": "advanced_tab", "container": true, "type": "h", "indent": 0, "text": ["Advanced"], "extent": [14199, 14229], "body": [{"level": 3, "id": "advanced_sampling_tab", "container": true, "type": "h", "indent": 4, "text": ["Sampling"], "extent": [14229, 14275], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 4, "text": ["Noise Level"], "extent": [14275, 14293], "body": [], "container": true, "attrs": {"id": "varianceaa_thresh"}, "role": "item"}], "container": true, "role": "item_group"}, {"type": "include_group", "body": [{"ext": "/props/karma#karma:global:guiding_enable", "type": "include", "indent": 4, "role": "item", "extent": [14391, 14449]}, {"ext": "/props/karma#karma:global:guiding_samples", "type": "include", "indent": 4, "role": "item", "extent": [14449, 14508]}], "container": true, "role": "item_group"}, {"level": 3, "type": "sep", "indent": 4, "text": [" Pixel Oracle "], "extent": [14508, 14533]}, {"type": "include_group", "body": [{"ext": "/props/karma#karma:global:pixeloracle", "type": "include", "indent": 4, "role": "item", "extent": [14533, 14589]}], "container": true, "role": "item_group"}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 4, "text": ["Minimum Samples"], "extent": [14589, 14610], "body": [{"type": "para", "indent": 8, "text": ["When The minimum number of samples."], "extent": [14642, 14687]}], "container": true, "attrs": {"id": "oracle_minsamples"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Plane"], "extent": [14687, 14698], "body": [{"type": "para", "indent": 8, "text": ["The AOV to use to measure variance."], "extent": [14725, 14770]}], "container": true, "attrs": {"id": "oracle_plane"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Variance Threshold"], "extent": [14770, 14794], "body": [{"type": "para", "indent": 8, "text": ["The amount of variance that triggers more rays."], "extent": [14824, 14881]}], "container": true, "attrs": {"id": "oracle_variance"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Random Seed"], "extent": [14881, 14898], "body": [{"type": "para", "indent": 8, "text": ["Variance sampling involves some randomness. You can change this number to get slightly different results."], "extent": [14923, 15038]}], "container": true, "attrs": {"id": "randomseed"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["OCIO Transform"], "extent": [15038, 15058], "body": [{"type": "para", "indent": 8, "text": ["Whether to apply an OCIO transform to the pixels before measuring variance."], "extent": [15088, 15173]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["Disabled"], "extent": [15173, 15191], "body": [{"type": "para", "indent": 12, "text": ["Do not apply an OCIO transform."], "extent": [15191, 15236]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Display View"], "extent": [15236, 15258], "body": [{"type": "para", "indent": 12, "text": ["Transform to the color space of a display."], "extent": [15258, 15314]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Explicit"], "extent": [15314, 15332], "body": [{"type": "para", "indent": 12, "text": ["Transform to a named color space."], "extent": [15332, 15379]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "oracle_ociomode"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Display"], "extent": [15379, 15392], "body": [{"type": "para", "indent": 8, "text": ["When ", {"type": "ui", "text": ["OCIO Transform"]}, " is ", {"type": "ui", "text": ["Display View"]}, ", the display to transform to before measuring variance."], "extent": [15425, 15534]}], "container": true, "attrs": {"id": "oracle_ociodisplay"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["View"], "extent": [15534, 15544], "body": [{"type": "para", "indent": 8, "text": ["When ", {"type": "ui", "text": ["OCIO Transform"]}, " is ", {"type": "ui", "text": ["Display View"]}, ", the view to transform to before measuring variance."], "extent": [15574, 15680]}], "container": true, "attrs": {"id": "oracle_ocioview"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Color Space"], "extent": [15680, 15697], "body": [{"type": "para", "indent": 8, "text": ["When ", {"type": "ui", "text": ["OCIO Transform"]}, " is ", {"type": "ui", "text": ["Explicit"]}, ", the color space to transform to before measuring variance."], "extent": [15733, 15843]}], "container": true, "attrs": {"id": "oracle_ociocolorspace"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 3, "id": "checkpointing_tab", "container": true, "type": "h", "indent": 4, "text": ["Checkpointing"], "extent": [15843, 15889], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 4, "text": ["Output Checkpoint Files"], "extent": [15889, 15919], "body": [{"type": "para", "indent": 8, "text": ["When this is on, Karma will periodocially write out image tile data to a checkpoint file.  If the process is terminated before completing the render, you can resume it by turning on ", {"type": "ui", "text": ["Resume from Checkpoint"]}, " and restarting."], "extent": [15950, 16184]}], "container": true, "attrs": {"id": "outputcheckpoint"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Checkpoint File"], "extent": [16184, 16205], "body": [{"type": "para", "indent": 8, "text": ["When ", {"type": "ui", "text": ["Output checkpoint files"]}, " is on, the name of the checkpoint file to write to. The default (", {"type": "code", "text": ["$HIP/render/$HIPNAME.$OS.$F4.checkpoint"]}, ") puts the checkpoint file inside a ", {"type": "code", "text": ["render"]}, " directory next to the current scene file, and includes the base name of the current scene file (", {"type": "code", "text": ["$HIPNAME"]}, "), this node\u2019s name (", {"type": "code", "text": ["$OS"]}, "), and the render frame (", {"type": "code", "text": ["$F"]}, ") in the filename to help avoid two processes trying to use the same checkpoint file at the same time."], "extent": [16231, 16688]}], "container": true, "attrs": {"id": "productName"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Save Frequency"], "extent": [16688, 16708], "body": [{"type": "para", "indent": 8, "text": ["When ", {"type": "ui", "text": ["Output checkpoint files"]}, " is on, Karma waits this number of seconds between writing out a checkpoint file. The default is ", {"type": "code", "text": ["60"]}, "."], "extent": [16736, 16880]}], "container": true, "attrs": {"id": "savefrequency"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Resume From Checkpoint"], "extent": [16880, 16908], "body": [{"type": "para", "indent": 8, "text": ["If this is on and you start a render and the renderer notices there is a valid checkpoint file, it will try to resume rendering from that checkpoint. If you want to restart the render from the beginning, you can turn this off or just delete the checkpoint file(s)."], "extent": [16929, 17204]}], "container": true, "attrs": {"id": "resume"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 3, "id": "tiles_and_caching_tab", "container": true, "type": "h", "indent": 4, "text": ["Tiles and Caching"], "extent": [17204, 17258], "body": [{"type": "include_group", "body": [{"ext": "/props/karma#karma:global:bucketsize", "type": "include", "indent": 4, "role": "item", "extent": [17258, 17313]}, {"ext": "/props/karma#karma:global:bucketorder", "type": "include", "indent": 4, "role": "item", "extent": [17313, 17368]}, {"ext": "/props/karma#karma:global:usecacheratio", "type": "include", "indent": 4, "role": "item", "extent": [17368, 17425]}, {"ext": "/props/karma#karma:global:cacheratio", "type": "include", "indent": 4, "role": "item", "extent": [17425, 17479]}, {"ext": "/props/karma#karma:global:cachesize", "type": "include", "indent": 4, "role": "item", "extent": [17479, 17533]}], "container": true, "role": "item_group"}]}, {"level": 3, "id": "driver_tab", "container": true, "type": "h", "indent": 4, "text": ["Driver"], "extent": [17533, 17565], "body": [{"type": "include_group", "body": [{"ext": "/props/karma#karma:global:imagemode", "type": "include", "indent": 4, "role": "item", "extent": [17565, 17619]}, {"ext": "/props/karma#karma:global:progressivepasses", "type": "include", "indent": 4, "role": "item", "extent": [17619, 17680]}], "container": true, "role": "item_group"}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 4, "text": ["Cancel Render if Missing Texture is Discovered"], "extent": [17680, 17732], "body": [], "container": true, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 3, "id": "component_labels_tab", "container": true, "type": "h", "indent": 4, "text": ["Component Labels"], "extent": [17802, 17854], "body": [{"type": "include_group", "body": [{"ext": "/props/karma#karma:global:exportcomponents", "type": "include", "indent": 4, "role": "item", "extent": [17854, 17915]}, {"ext": "/props/karma#karma:global:diffusecomponents", "type": "include", "indent": 4, "role": "item", "extent": [17915, 17976]}, {"ext": "/props/karma#karma:global:refractcomponents", "type": "include", "indent": 4, "role": "item", "extent": [17976, 18037]}, {"ext": "/props/karma#karma:global:volumecomponents", "type": "include", "indent": 4, "role": "item", "extent": [18037, 18097]}, {"ext": "/props/karma#karma:global:ssscomponents", "type": "include", "indent": 4, "role": "item", "extent": [18097, 18155]}], "container": true, "role": "item_group"}]}]}], "text": "Parameters"}, {"level": 1, "id": "related", "container": true, "type": "related_section", "indent": 0, "role": "section", "extent": [18155, 18164], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/lop/additionalrendervars", "type": "link", "text": "", "fullpath": "/nodes/lop/additionalrendervars"}], "extent": [18164, 18199]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/lop/karma", "type": "link", "text": "", "fullpath": "/nodes/lop/karma"}], "extent": [18199, 18218]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/lop/karmastandardrendervars", "type": "link", "text": "", "fullpath": "/nodes/lop/karmastandardrendervars"}], "extent": [18218, 18255]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/lop/renderproduct", "type": "link", "text": "", "fullpath": "/nodes/lop/renderproduct"}], "extent": [18255, 18282]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/lop/rendersettings", "type": "link", "text": "", "fullpath": "/nodes/lop/rendersettings"}], "extent": [18282, 18310]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/lop/rendervar", "type": "link", "text": "", "fullpath": "/nodes/lop/rendervar"}], "extent": [18310, 18333]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": null, "value": "/render/lpe", "type": "link", "text": ["Light Path Expressions"], "fullpath": "/render/lpe"}], "extent": [18333, 18372]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": null, "value": "/io/ocio", "type": "link", "text": ["OCIO"], "fullpath": "/io/ocio"}], "extent": [18372, 18391]}], "container": true}], "text": "Related"}], "title": ["Karma Render Properties"], "summary": ["Configure Render Properties for Karma."], "included": ["/nodes/lop/_sampling", "/nodes/lop/_simple_prims", "/nodes/lop/karmastandardrendervars", "/nodes/lop/renderproduct", "/nodes/lop/rendersettings", "/props/karma"]}