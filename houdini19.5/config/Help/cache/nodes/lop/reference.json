{"type": "root", "attrs": {"type": "node", "context": "lop", "internal": "reference", "version": "2.0", "icon": "LOP/reference", "group": "layers", "since": "19.5", "namespace": null}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["Reference"], "extent": [0, 14]}, {"type": "summary", "indent": 0, "text": ["References the contents of a external USD files and/or layers created by other LOP nodes into a branch of the existing scene graph tree. Can also remove or replace existing references."], "extent": [125, 317]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Overview"], "extent": [317, 332], "body": [{"type": "para", "indent": 0, "text": ["This node lets you reference a tree of primitives from a different location, into your current scene graph. These other locations can be external files, other LOP nodes, or even different primitives within the same tree. Multiple references can be made to the same source, allowing you to re-use existing primitives."], "extent": [332, 651]}, {"type": "para", "indent": 0, "text": ["See the section ", {"type": "em", "text": [{"scheme": null, "value": "#refdetails", "type": "link", "text": ["References Explained"], "fullpath": "/nodes/lop/reference#refdetails", "fragment": "#refdetails"}]}, " for details about this USD concept."], "extent": [651, 741]}]}, {"level": 2, "id": "tips", "container": true, "type": "h", "indent": 0, "text": ["Tips"], "extent": [741, 759], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": ["When an ", {"type": "ui", "text": ["Action"]}, " parameter is set to ", {"type": "code", "text": ["Create New Primitives"]}, ", the ", {"type": "ui", "text": ["Primitive path"]}, " must specify a single primitive path. This parameter is re-evaluated for each reference being created, and if necessary will be made unique by appending a numeric suffix."], "extent": [759, 1021]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["When an ", {"type": "ui", "text": ["Action"]}, " parameter is set to ", {"type": "code", "text": ["Edit Existing Primitives"]}, ", the ", {"type": "ui", "text": ["Primitive path"]}, " is interpreted as a primitive pattern. The reference is added to every primitive that matches the pattern."], "extent": [1021, 1221]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["If the prim you specify to reference onto already has existing references, the new reference will be composed ", {"type": "em", "text": ["with any existing references"]}, ". See the ", {"type": "ui", "text": ["Pre-operation"]}, " parameter for how to clear existing references before adding a new one."], "extent": [1221, 1464]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["The reference operations specified on this node are performed in order, so multiple references can be added to a single primitive. For example, a ", {"type": "code", "text": ["Create"]}, " action for the multi-input might create a some new primitives, then a subsequent ", {"type": "code", "text": ["Inherit"]}, " operation can add an inherit arc to each of these newly created reference primitives."], "extent": [1464, 1799]}], "container": true}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["How to"], "extent": [1799, 1812], "body": [{"type": "para", "indent": 0, "text": ["The ", {"type": "q", "text": ["target"]}, " that gets referenced onto a primitive in the scene graph tree is often in an external file, however this node can also reference a prim in the output of another LOP node."], "extent": [1812, 1998]}, {"type": "task_group", "body": [{"ext": null, "type": "task", "indent": 0, "text": [" Reference a prim in an external file"], "role": "item", "extent": [1998, 2044], "body": [{"type": "ord_group", "body": [{"blevel": 6, "type": "ord", "indent": 4, "text": ["Set the ", {"type": "ui", "text": ["Primitive path"]}, " to the scene graph path at which the referenced prim should be attached."], "extent": [2044, 2151]}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["Set the ", {"type": "ui", "text": ["Reference type"]}, " to ", {"type": "q", "text": ["Reference files"]}, " or ", {"type": "q", "text": ["Payload files"]}, " (see ", {"scheme": null, "value": "/solaris/usd#payloads", "type": "link", "text": ["payloads"], "fullpath": "/solaris/usd#payloads", "fragment": "#payloads"}, " for more information)."], "extent": [2151, 2286]}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["Set the ", {"type": "ui", "text": ["Reference file"]}, " to the file path of the USD file to reference in. This file path can include wild cards to match multiple files on disk, in which case a new primitive will be created for each matching file."], "extent": [2286, 2511]}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["In addition to standard wildcard matching, the ", {"type": "ui", "text": ["Reference file"]}, " path can contain the special token ", {"type": "code", "text": ["<LASTMATCH>"]}, ". When appearing after a path component with a wildcard, this token will be set to the value used to fill in that wildcard component. So if the file ", {"type": "code", "text": ["/tmp/assets/Book/Book.usd"]}, " exists on disk, a ", {"type": "ui", "text": ["Reference path"]}, " of ", {"type": "code", "text": ["/tmp/assets/*/<LASTMATCH>.usd"]}, " will find the ", {"type": "code", "text": ["Book.usd"]}, " layer. This token is very useful when your asset naming conventions involve a USD file that matches the parent directory name."], "extent": [2511, 3033]}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["Use the ", {"type": "ui", "text": ["Reference primitive"]}, " pop-up menu if you want to choose the prim in the external file to load in."], "extent": [3033, 3148]}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["Usually you can leave ", {"type": "ui", "text": ["Reference primitive"]}, " set to ", {"type": "q", "text": ["Reference automatically chosen primitive"]}, ". If you want to import a specific prim, change ", {"type": "ui", "text": ["Reference primitive"]}, " to ", {"type": "q", "text": ["Reference specific primitive"]}, " and enter the prim path in ", {"type": "ui", "text": ["Reference primitive path"]}, "."], "extent": [3148, 3413]}], "container": true}], "container": true}, {"ext": null, "type": "task", "indent": 0, "text": [" Reference a prim from the output of a LOP node"], "role": "item", "extent": [3413, 3469], "body": [{"type": "ord_group", "body": [{"blevel": 6, "type": "ord", "indent": 4, "text": ["Connect the LOP node containing the stage you want to reference to this node\u2019s multi-input."], "extent": [3469, 3568]}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["The ", {"type": "ui", "text": ["Primitive path"]}, " will be re-evaluated for each connected input, and can include ", {"scheme": null, "value": "#locals", "type": "link", "text": ["local variables"], "fullpath": "/nodes/lop/reference#locals", "fragment": "#locals"}, "  which will generate a separate primitive for each input connection."], "extent": [3568, 3756]}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["For a single addition, you can set the ", {"type": "ui", "text": ["Reference primitive path"]}, " to the prim to import."], "extent": [3756, 3854], "body": [{"type": "para", "indent": 8, "text": ["If you have multiple inputs connected to this node\u2019s multi-input:"], "extent": [3854, 3929]}, {"type": "bullet_group", "body": [{"blevel": 10, "type": "bullet", "indent": 8, "text": ["You can explicitly specify the destination primitive which will hold the reference using the table at the bottom of the parameter interface. This table can also be used to specify a different times to reference each input, and a specific primitive to reference from each input."], "extent": [3929, 4218]}, {"blevel": 10, "type": "bullet", "indent": 8, "text": ["You can set ", {"type": "ui", "text": ["Reference primitive path"]}, " to a scene graph path to import from the same prim in all inputs, or write an expression which is evaluated from each input connected to this node\u2019s multi-input. In the expression, you can use the ", {"type": "code", "text": ["@input"]}, " local variable (", {"type": "code", "text": ["$IIDX"]}, " is deprecated) for the current input index (starting at ", {"type": "code", "text": ["1"]}, "). (Remember that in string parameters, you must enclose expressions in backticks.)"], "extent": [4218, 4643]}], "container": true}], "container": true}], "container": true}], "container": true}, {"ext": null, "type": "task", "indent": 0, "text": [" Reference another prim in the scene graph tree in the first input"], "role": "item", "extent": [4643, 4722], "body": [{"type": "ord_group", "body": [{"blevel": 6, "type": "ord", "indent": 4, "text": ["Set the ", {"type": "ui", "text": ["Primitive path"]}, " to the scene graph path at which the referenced prim should be attached."], "extent": [4722, 4829]}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["Set the ", {"type": "ui", "text": ["Reference type"]}, " to ", {"type": "q", "text": ["Reference from first input"]}, ", ", {"type": "q", "text": ["Inherits from first input"]}, ", or ", {"type": "q", "text": ["Specialize from first input"]}, ", depending on the type of composition you want. See ", {"scheme": null, "value": "/solaris/usd#inherits", "type": "link", "text": ["inherits and specializes"], "fullpath": "/solaris/usd#inherits", "fragment": "#inherits"}, " for more information about how these choices differ from a simple reference."], "extent": [4829, 5136]}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["Set ", {"type": "ui", "text": ["Reference primitive"]}, " to ", {"type": "q", "text": ["Reference specific primitive"]}, "."], "extent": [5136, 5206]}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["Set ", {"type": "ui", "text": ["Reference primitive path"]}, " to the scene graph path of the prim you want to reference in."], "extent": [5206, 5308]}], "container": true}], "container": true}, {"ext": null, "type": "task", "indent": 0, "text": [" Block all existing references"], "role": "item", "extent": [5308, 5347], "body": [{"type": "ord_group", "body": [{"blevel": 6, "type": "ord", "indent": 4, "text": ["Set the ", {"type": "ui", "text": ["Primitive path"]}, " to the scene graph path of the prim that currently has a reference you want to block."], "extent": [5347, 5467]}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["Set the ", {"type": "ui", "text": ["Pre-operaiton"]}, " menu to ", {"type": "q", "text": ["Clear all references"]}, "."], "extent": [5467, 5532]}], "container": true}], "container": true}, {"ext": null, "type": "task", "indent": 0, "text": [" Block one existing reference"], "role": "item", "extent": [5532, 5570], "body": [{"type": "ord_group", "body": [{"blevel": 6, "type": "ord", "indent": 4, "text": ["Set the ", {"type": "ui", "text": ["Primitive path"]}, " to the scene graph path of the prim with the reference you want to remove."], "extent": [5570, 5679]}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["Set the parameters to specify the reference you want to remove. For example, if you want to remove a reference to the file ", {"type": "code", "text": ["lamp.usd"]}, ", set ", {"type": "ui", "text": ["Reference type"]}, " to ", {"type": "q", "text": ["Reference files"]}, " and ", {"type": "ui", "text": ["Reference file"]}, " to ", {"type": "code", "text": ["lamp.usd"]}, "."], "extent": [5679, 5903]}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["Set ", {"type": "ui", "text": ["Reference operation"]}, " to ", {"type": "q", "text": ["Remove references"]}, "."], "extent": [5903, 5962]}], "container": true}], "container": true}], "container": true, "role": "item_group"}]}, {"level": 2, "id": "refdetails", "container": true, "type": "h", "indent": 0, "text": ["USD References Explained"], "extent": [5962, 6006], "body": [{"type": "para", "indent": 4, "text": ["Referencing takes the tree in the referenced file and ", {"type": "q", "text": ["injects"]}, " it onto a branch in the current tree."], "extent": [17055, 17163]}, {"type": "para", "indent": 4, "text": ["For example, if you start with this tree:"], "extent": [17163, 17210]}, {"type": "box_group", "body": [{"ext": null, "type": "box", "indent": 4, "text": ["Scene tree before reference"], "role": "item", "extent": [17210, 17248], "body": [{"tag": "pre", "attrs": {}, "type": "xml", "text": [{"tag": "font", "attrs": {"color": "0066ff"}, "type": "xml", "text": ["\n/Lights/\n    light1\n    light2\n/Models/\n    tableside_lamp\n        "]}]}], "container": true, "attrs": {"display": "light"}}], "container": true, "role": "item_group"}, {"type": "para", "indent": 4, "text": ["If ", {"type": "code", "text": ["/Models/tableside_lamp"]}, " references ", {"type": "code", "text": ["lamp.usd"]}, " and that file contains:"], "extent": [17389, 17468]}, {"type": "box_group", "body": [{"ext": null, "type": "box", "indent": 4, "text": ["Contents of ", {"type": "code", "text": ["lamp.usd"]}], "role": "item", "extent": [17468, 17501], "body": [{"tag": "pre", "attrs": {}, "type": "xml", "text": [{"tag": "font", "attrs": {"color": "#ff9900"}, "type": "xml", "text": ["\n/lamp/\n    base\n    bulb\n    shade\n    socket\n    switch"]}]}], "container": true, "attrs": {"display": "light"}}], "container": true, "role": "item_group"}, {"type": "para", "indent": 4, "text": ["Then after referencing the file, the tree will look like this"], "extent": [17632, 17699]}, {"type": "box_group", "body": [{"ext": null, "type": "box", "indent": 4, "text": ["Scene tree after reference"], "role": "item", "extent": [17699, 17736], "body": [{"tag": "pre", "attrs": {}, "type": "xml", "text": [{"tag": "font", "attrs": {"color": "0066ff"}, "type": "xml", "text": ["\n/Lights/\n    light1\n    light2\n/Models/"]}, "\n    ", {"tag": "font", "attrs": {"color": "#66cc00"}, "type": "xml", "text": ["tableside_lamp/"]}, "\n        ", {"tag": "font", "attrs": {"color": "#ff9900"}, "type": "xml", "text": ["base\n        bulb\n        shade\n        socket\n        switch"]}]}], "container": true, "attrs": {"display": "light"}}], "container": true, "role": "item_group"}, {"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": ["The prim containing the reference (", {"type": "code", "text": ["/Models/tableside_lamp"]}, ") and the referenced prim (", {"type": "code", "text": ["/lamp"]}, " from ", {"type": "code", "text": ["lamp.usd"]}, ") are composed together (with overlapping property values decided by opinion strength), but the prim keeps the name of the original referencing prim."], "extent": [17997, 18263]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": ["When you reference in content, you must specify a prim in the referenced file (", {"type": "code", "text": ["/lamp"]}, " in the example above), and that prim cannot be the root (", {"type": "code", "text": ["/"]}, "). So when you're creating a file that is meant to be referenced in by other layers, you should organize the contents under a single root primitive."], "extent": [18263, 18566], "body": [{"type": "para", "indent": 8, "text": ["(It\u2019s possible to specify the ", {"scheme": null, "value": "#default_prim", "type": "link", "text": ["default primitive"], "fullpath": "/solaris/usd#default_prim", "fragment": "#default_prim"}, " of a file. If you reference a file and don\u2019t specify a specific prim in the file, you get the file\u2019s ", {"type": "q", "text": ["default primitive"]}, ".)"], "extent": [18566, 18762]}], "container": true}], "container": true}, {"type": "para", "indent": 4, "text": ["Referencing is useful to re-use smaller individual assets into a larger scene. In particular, ", {"type": "strong", "text": ["referencing is the only way to load the same layer file more than once at different scene graph locations"]}, ". (Because sublayering works on the entire tree, sublayering the same file more than once would have no effect.)"], "extent": [18762, 19081]}, {"type": "box_group", "body": [{"ext": null, "type": "box", "indent": 4, "text": [" Simple trash can asset"], "role": "item", "extent": [19081, 19114], "body": [{"lang": "usd", "type": "pre", "indent": 8, "text": ["\n        #usda 1.0\n        (\n           defaultPrim = \"TrashCan\"\n        )\n\n        def Xform \"TrashCan\" (\n           kind = \"component\"\n        )\n        {\n           def Cylinder \"Can\"\n           {\n               token axis = \"Y\"\n               bool doubleSided = 0\n               double height = 2\n               double radius = 1\n           }\n        }\n        "], "extent": [19114, 19508]}], "container": true}, {"ext": null, "type": "box", "indent": 4, "text": [" File which references the trash can asset 3 times, for 3 different rooms in a set"], "role": "item", "extent": [19508, 19601], "body": [{"lang": "usd", "type": "pre", "indent": 8, "text": ["\n        #usda 1.0\n        ()\n\n        def Xform \"Scene\"\n        {\n           def Xform \"Set\"\n           {\n               def \"BathroomTrashCan\" (\n                   append references = @./trashcan.usda@\n               )\n               {\n                   double3 xformOp:translate = (2, 0, 1.4)\n                   uniform token[] xformOpOrder = [\"xformOp:translate\"]\n               }\n\n               def \"KitchenTrashCan\" (\n                   append references = @./trashcan.usda@\n               )\n               {\n                   double3 xformOp:translate = (16.01, 5, -43.072)\n                   uniform token[] xformOpOrder = [\"xformOp:translate\"]\n               }\n\n               def \"OfficeTrashCan\" (\n                   append references = @./trashcan.usda@\n               )\n               {\n                   double3 xformOp:translate = (-7.12, 0, 11.9)\n                   uniform token[] xformOpOrder = [\"xformOp:translate\"]\n               }\n           }\n        }\n        "], "extent": [19601, 20617]}], "container": true}], "container": true, "role": "item_group"}, {"type": "para", "indent": 4, "text": [{"scheme": "Smallicon", "value": "MISC/logo", "type": "link", "text": "", "fullpath": "/solaris/MISC/logo"}, " The ", {"scheme": "Node", "value": "/nodes/lop/reference", "type": "link", "text": ["Reference LOP"], "fullpath": "/nodes/lop/reference"}, " and ", {"scheme": "Node", "value": "/nodes/lop/stagemanager", "type": "link", "text": ["Stage Manager LOP"], "fullpath": "/nodes/lop/stagemanager"}, " create references. The ", {"scheme": "Node", "value": "/nodes/lop/graftstages", "type": "link", "text": ["Graft Stages LOP"], "fullpath": "/nodes/lop/graftstages"}, " is similar, but instead of referencing from a file, it inserts a branch into the scene graph tree from elsewhere in the LOP network."], "extent": [20617, 20926]}], "attrs": {"display": "collapsible collapsed"}}, {"level": 1, "id": "locals", "container": true, "type": "locals_section", "indent": 0, "text": ["Local Variables"], "role": "section", "extent": [6075, 6099], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["@sourcename"]}], "extent": [6099, 6114], "body": [{"type": "para", "indent": 4, "text": ["The name of the file on disk (with the extension removed) or connected input to be referenced."], "extent": [6114, 6213]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["@sourcepath"]}], "extent": [6213, 6228], "body": [{"type": "para", "indent": 4, "text": ["The full path of the file on disk or connected input to be referenced."], "extent": [6228, 6303]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["@sourceindex"]}], "extent": [6303, 6319], "body": [{"type": "para", "indent": 4, "text": ["An incrementing number for each connected input or file being referenced by this node."], "extent": [6319, 6410]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["@sourceprim"]}], "extent": [6410, 6425], "body": [{"type": "para", "indent": 4, "text": ["An incrementing number for the current multi-input connection or file if it is being referenced multiple times."], "extent": [6425, 6541]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["@sourcenumprim"]}], "extent": [6541, 6559], "body": [{"type": "para", "indent": 4, "text": ["The total number of times the current multi-input connection or file will be referenced."], "extent": [6559, 6652]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"type": "code", "text": ["@prim"]}], "extent": [6652, 6661], "body": [{"type": "para", "indent": 4, "text": ["An incrementing number for each reference created by this node."], "extent": [6661, 6730]}], "container": true}], "container": true}]}, {"level": 1, "id": "parameters", "container": true, "type": "parameters_section", "indent": 0, "role": "section", "extent": [6730, 6742], "body": [{"level": 4, "type": "sep", "indent": 0, "text": [" References From Multi-input "], "extent": [6742, 6781]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Enable"], "extent": [6781, 6790], "body": [{"type": "para", "indent": 4, "text": ["Perform the reference operations from the multi-input."], "extent": [6790, 6850]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Primitive Path"], "extent": [6850, 6866], "body": [{"type": "para", "indent": 4, "text": ["In create mode, this parameter specifies a single primitive path. This is the scene graph path where the referenced branch will be attached. If this prim doesn\u2019t exist, the node will create it. In edit mode, this parameter is a primitive pattern that will be matched against the existing primitives on the stage connected to this node\u2019s first input. You can use ", {"scheme": null, "value": "#locals", "type": "link", "text": ["local variables"], "fullpath": "/nodes/lop/reference#locals", "fragment": "#locals"}, " to control the reference primitive path."], "extent": [6885, 7319]}], "container": true, "attrs": {"id": "primpath"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Action"], "extent": [7319, 7327], "body": [{"type": "para", "indent": 4, "text": ["Whether this node should create new prims for the multi-input connections, or edit existing prims. Create mode will also edit a prim if it already exists, but a unique primitive name will be created automatically for each reference created for each multi-input connection. Edit mode allows for adding references to any number of existing prims."], "extent": [7349, 7699]}], "container": true, "attrs": {"id": "createprims"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Primitive Count"], "extent": [7699, 7716], "body": [{"type": "para", "indent": 4, "text": ["In create mode, the number of referencing primitives to create for each multi-input connection."], "extent": [7736, 7837]}], "container": true, "attrs": {"id": "primcount"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Reference Type"], "extent": [7837, 7853], "body": [{"type": "para", "indent": 4, "text": ["The type of composition arc to create to the referenced prim."], "extent": [7871, 7938]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Reference Inputs"], "extent": [7938, 7960], "body": [{"type": "para", "indent": 8, "text": ["Reference in a prim from the multi-input connections."], "extent": [7960, 8023]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Payload Inputs"], "extent": [8023, 8043], "body": [{"type": "para", "indent": 8, "text": ["Reference in a prim from the multi-input connections as a ", {"scheme": null, "value": "/solaris/usd#payloads", "type": "link", "text": ["payload"], "fullpath": "/solaris/usd#payloads", "fragment": "#payloads"}, "."], "extent": [8043, 8143]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "reftype"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Make Instanceable"], "extent": [8143, 8162], "body": [{"type": "para", "indent": 4, "text": ["Mark the new or modified prims as ", {"scheme": null, "value": "/solaris/usd#instancing", "type": "link", "text": ["instanceable (as in ", {"type": "q", "text": ["native instancing"]}, ")"], "fullpath": "/solaris/usd#instancing", "fragment": "#instancing"}, ". This saves memory if you reference the same branch into multiple places, but makes the descendants of the referenced prim not editable. If this option is off, the prims are not explicitly marked as not instanceable. Instead, the current instanceable value on each prim is left unchanged."], "extent": [8185, 8580]}], "container": true, "attrs": {"id": "instanceable"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Reference Primitive"], "extent": [8580, 8601], "body": [{"type": "para", "indent": 4, "text": ["Controls which prim to import from the multi-input connections."], "extent": [8601, 8670]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Reference Automatically Chosen Primitive"], "extent": [8670, 8716], "body": [{"type": "para", "indent": 8, "text": ["If the referenced input connection has a ", {"scheme": null, "value": "/solaris/usd#default_prim", "type": "link", "text": ["default primitive"], "fullpath": "/solaris/usd#default_prim", "fragment": "#default_prim"}, " set, use that. If there is no default prim, use the first Xform prim at the root. If there is no Xform prim at the root, use the first root prim of any type."], "extent": [8716, 8970]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Reference Default Primitive"], "extent": [8970, 9003], "body": [{"type": "para", "indent": 8, "text": ["If the referenced input connection has a ", {"scheme": null, "value": "/solaris/usd#default_prim", "type": "link", "text": ["default primitive"], "fullpath": "/solaris/usd#default_prim", "fragment": "#default_prim"}, " set, use that. If not, display a warning on this node."], "extent": [9003, 9154]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Reference Specific Primitive"], "extent": [9154, 9188], "body": [{"type": "para", "indent": 8, "text": ["Reference in the scene graph path in the ", {"type": "ui", "text": ["Reference primitive path"]}, " parameter. In this mode the reference primitive specified in each row of the input table takes precedence over the value in the ", {"type": "ui", "text": ["Reference primitive path"]}, " parameter."], "extent": [9188, 9435]}], "container": true}], "container": true}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Reference Primitive Path"], "extent": [9435, 9461], "body": [{"type": "para", "indent": 4, "text": ["When ", {"type": "ui", "text": ["Reference primitive"]}, " is ", {"type": "q", "text": ["Reference specific primitive"]}, ", this is the scene graph path to the prim to reference in."], "extent": [9483, 9610]}, {"type": "para", "indent": 4, "text": ["(If you set this field ", {"type": "code", "text": ["automaticPrim"]}, " or ", {"type": "code", "text": ["defaultPrim"]}, ", it mimics the behavior of setting ", {"type": "ui", "text": ["Reference primitive"]}, " to ", {"type": "q", "text": ["Reference automatically chosen primitive"]}, " or ", {"type": "q", "text": ["Reference default primitive"]}, ".)"], "extent": [9610, 9812]}], "container": true, "attrs": {"id": "refprimpath"}, "role": "item"}], "container": true, "role": "item_group"}, {"level": 4, "type": "sep", "indent": 0, "text": [" File and Internal References "], "extent": [9812, 9851]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Number of References"], "extent": [9851, 9874], "body": [{"type": "para", "indent": 4, "text": ["This node can add multiple references to external files and primitives already in the scene, each of which can be controlled separately."], "extent": [9874, 10016]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Enable"], "extent": [10016, 10024], "body": [{"type": "para", "indent": 4, "text": ["Perform the reference in this instance of the multi-parm."], "extent": [10024, 10087]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Primitive Path"], "extent": [10087, 10103], "body": [{"type": "para", "indent": 4, "text": ["In create mode, this parameter specifies a single primitive path. This is the scene graph path where the referenced branch will be attached. If this prim doesn\u2019t exist, the node will create it. In edit mode, this parameter is a primitive pattern that will be matched against the existing primitives on the stage connected to this node\u2019s first input. See the list of available ", {"scheme": null, "value": "#locals", "type": "link", "text": ["local variables"], "fullpath": "/nodes/lop/reference#locals", "fragment": "#locals"}, "."], "extent": [10103, 10511]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Action"], "extent": [10511, 10519], "body": [{"type": "para", "indent": 4, "text": ["Whether this node should create new prims for the multi-input connections, or edit existing prims. Create mode will also edit a prim if it already exists, but a unique primitive name will be created automatically for each reference created for this multiparm instance. Edit mode allows for adding references to any number of existing prims."], "extent": [10519, 10865]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Primitive Count"], "extent": [10865, 10882], "body": [{"type": "para", "indent": 4, "text": ["In create mode, the number of referencing primitives to create for this multiparm instance."], "extent": [10882, 10979]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Reference Type"], "extent": [10979, 10995], "body": [{"type": "para", "indent": 4, "text": ["The type of composition arc to create to the referenced prim."], "extent": [10995, 11062]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Reference File"], "extent": [11062, 11082], "body": [{"type": "para", "indent": 8, "text": ["Reference in a prim from an external USD file."], "extent": [11082, 11138]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Payload File"], "extent": [11138, 11156], "body": [{"type": "para", "indent": 8, "text": ["Reference in a prim from an external USD file as a ", {"scheme": null, "value": "/solaris/usd#payloads", "type": "link", "text": ["payload"], "fullpath": "/solaris/usd#payloads", "fragment": "#payloads"}, "."], "extent": [11156, 11249]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Reference From First Input"], "extent": [11249, 11281], "body": [{"type": "para", "indent": 8, "text": ["Reference in another prim from the scene graph tree in the first input."], "extent": [11281, 11362]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Inherit From First Input"], "extent": [11362, 11392], "body": [{"type": "para", "indent": 8, "text": ["Create an ", {"type": "q", "text": ["inherits"]}, " composition arc to another prim from the scene graph tree (in the first input). The inherit target need not exist yet."], "extent": [11392, 11541]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Specialize From First Input"], "extent": [11541, 11574], "body": [{"type": "para", "indent": 8, "text": ["Creates a ", {"type": "q", "text": ["specializes"]}, " composition arc to another prim from the scene graph tree (in the first input). The specialize target need not exist yet."], "extent": [11574, 11729]}], "container": true}], "container": true}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Make Instanceable"], "extent": [11729, 11748], "body": [{"type": "para", "indent": 4, "text": ["Mark the new or modified prims as ", {"scheme": null, "value": "/solaris/usd#instancing", "type": "link", "text": ["instanceable (as in ", {"type": "q", "text": ["native instancing"]}, ")"], "fullpath": "/solaris/usd#instancing", "fragment": "#instancing"}, ". This saves memory if you reference the same branch into multiple places, but makes the descendants of the referenced prim not editable. If this option is off, the prims are not explicitly marked as not instanceable. Instead, the current instanceable value on each prim is left unchanged."], "extent": [11748, 12143]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Reference File"], "extent": [12143, 12159], "body": [{"type": "para", "indent": 4, "text": ["When ", {"type": "ui", "text": ["Reference type"]}, " is ", {"type": "q", "text": ["Reference file"]}, " or ", {"type": "q", "text": ["Payload file"]}, ", the file path to the file to reference. This parameter can contain wildcards, in which case every matching file found on disk will be added as a separate reference. In create mode, this will create a new primitive for each matching file. In edit mode, all matching files will be referenced onto every primitive matching the ", {"type": "ui", "text": ["Primitive path"]}, " pattern."], "extent": [12159, 12579]}, {"type": "para", "indent": 4, "text": ["When specifying file paths with spaces (whether that path contains wildcard characters or not), each such file must be enclosed in quotes. This parameter value is first split into tokens (separated by whitespace, accounting for quotation marks), and then each token is expanded if it has wildcard characters, or treated as a simple file path if it does not contain any wildcards. Simple file paths will be added as references even if there is no matching file found on disk."], "extent": [12579, 13059]}, {"type": "para", "indent": 4, "text": ["Wildcard pattern expansions are cached so the disk is only scanned for files the first time a given pattern is expanded on this node. This wildcard expansion cache can be cleared by hitting the ", {"type": "ui", "text": ["Reload files"]}, " button."], "extent": [13059, 13283]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Reference Primitive"], "extent": [13283, 13304], "body": [{"type": "para", "indent": 4, "text": ["When ", {"type": "ui", "text": ["Reference type"]}, " is ", {"type": "q", "text": ["Reference file"]}, " or ", {"type": "q", "text": ["Payload file"]}, ", this controls which prim to import from the external file."], "extent": [13304, 13431]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Reference Automatically Chosen Primitive"], "extent": [13431, 13477], "body": [{"type": "para", "indent": 8, "text": ["If the referenced file has a ", {"scheme": null, "value": "/solaris/usd#default_prim", "type": "link", "text": ["default primitive"], "fullpath": "/solaris/usd#default_prim", "fragment": "#default_prim"}, " set, use that. If there is no default prim, use the first Xform prim at the root. If there is no Xform prim at the root, use the first root prim of any type."], "extent": [13477, 13719]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Reference Default Primitive"], "extent": [13719, 13752], "body": [{"type": "para", "indent": 8, "text": ["If the referenced file has a ", {"scheme": null, "value": "/solaris/usd#default_prim", "type": "link", "text": ["default primitive"], "fullpath": "/solaris/usd#default_prim", "fragment": "#default_prim"}, " set, use that. If not, display a warning on this node and ignore this instance of the multi-parm."], "extent": [13752, 13934]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Reference Specific Primitive"], "extent": [13934, 13968], "body": [{"type": "para", "indent": 8, "text": ["Reference in the scene graph path in the ", {"type": "ui", "text": ["Reference primitive path"]}, " parameter."], "extent": [13968, 14058]}], "container": true}], "container": true}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Reference Primitive Path"], "extent": [14058, 14084], "body": [{"type": "para", "indent": 4, "text": ["When ", {"type": "ui", "text": ["Reference type"]}, " is ", {"type": "q", "text": ["from first input"]}, ", or ", {"type": "ui", "text": ["Reference primitive"]}, " is ", {"type": "q", "text": ["Reference specific primitive"]}, ", this is the scene graph path to the prim to reference in."], "extent": [14084, 14256]}, {"type": "para", "indent": 4, "text": ["(If you set this field ", {"type": "code", "text": ["automaticPrim"]}, " or ", {"type": "code", "text": ["defaultPrim"]}, ", it mimics the behavior of setting ", {"type": "ui", "text": ["Reference primitive"]}, " to ", {"type": "q", "text": ["Reference automatically chosen primitive"]}, " or ", {"type": "q", "text": ["Reference default primitive"]}, ".)"], "extent": [14256, 14457]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Time Offset (in Frames)"], "extent": [14457, 14482], "body": [{"type": "para", "indent": 4, "text": ["Offsets all time samples from the file or target primitive on the first input. You can use this to re-time animations in the references file."], "extent": [14482, 14629]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Time Scale"], "extent": [14629, 14641], "body": [{"type": "para", "indent": 4, "text": ["Scales all time samples from the file or target primitive on the first input. You can use this to re-time animations in the references file."], "extent": [14641, 14787]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Reload Files"], "extent": [14787, 14801], "body": [{"type": "para", "indent": 4, "text": ["Click to reload the contents of all files imported by this node. This also clears the cache of file wilrdcard pattern expansions."], "extent": [14801, 14937]}], "container": true, "role": "item"}], "container": true, "role": "item_group"}, {"level": 4, "type": "sep", "indent": 0, "text": [" Composition "], "extent": [14937, 14959]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Handle Missing Files"], "extent": [14959, 14982], "body": [{"type": "para", "indent": 4, "text": ["If the reference is to an external file, this controls what the node does if the referenced file does not exist."], "extent": [14982, 15100]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Error for Missing Files"], "extent": [15100, 15129], "body": [{"type": "para", "indent": 8, "text": ["The node errors, preventing cooking the rest of the network."], "extent": [15129, 15199]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Warn for Missing Files"], "extent": [15199, 15227], "body": [{"type": "para", "indent": 8, "text": ["The node shows a warning, then passes through the first input unchanged."], "extent": [15227, 15309]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Ignore Missing Files"], "extent": [15309, 15335], "body": [{"type": "para", "indent": 8, "text": ["The node silently ignores the missing file, and passes through the first input unchanged."], "extent": [15335, 15434]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Allow Missing Files on the Stage"], "extent": [15434, 15472], "body": [{"type": "para", "indent": 8, "text": ["Author the reference to the sublayer even if it currently doesn\u2019t exist. This node and the following nodes will probably print warnings from the USD libraries about missing files."], "extent": [15472, 15661]}], "container": true}], "container": true}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Pre-Operation"], "extent": [15661, 15676], "body": [{"type": "para", "indent": 4, "text": ["If you set this to a value other than ", {"type": "q", "text": ["No pre-opertation"]}, ", the node clears existing references on the node."], "extent": [15676, 15789]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["No Pre-Operation"], "extent": [15789, 15811], "body": [{"type": "para", "indent": 8, "text": ["Do not clear existing references on the prim at ", {"type": "ui", "text": ["Primitive path"]}, "."], "extent": [15811, 15888]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Clear Reference Edits in Active Layer"], "extent": [15888, 15931], "body": [{"type": "para", "indent": 8, "text": ["Clear any additions or removals to the list of references on this prim made ", {"type": "em", "text": ["in the currently active layer"]}, "."], "extent": [15931, 16049]}, {"type": "para", "indent": 8, "text": [{"type": "strong", "text": ["This is not a non-destructive USD edit"]}, ". It\u2019s more like undo-ing any changes from previous nodes that are currently ", {"type": "q", "text": ["pending"]}, " in the active layer."], "extent": [16049, 16206]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Clear All References"], "extent": [16206, 16232], "body": [{"type": "para", "indent": 8, "text": ["Authors an override of the specified reference type which masks all existing references on this primitive, regardless of the layer in which they were authored. This provides a blank slate so that only the references specified by this node will remain."], "extent": [16232, 16493]}], "container": true}], "container": true}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Reference Operation"], "extent": [16493, 16514], "body": [{"type": "para", "indent": 4, "text": ["How new references added by this node interact with existing references on the prim at ", {"type": "ui", "text": ["Primitive path"]}, "."], "extent": [16514, 16626]}, {"type": "para", "indent": 4, "text": ["When editing references on a primitive, you are really making edits to a list. These edits are expressed as adding to the beginning or the end of the list created by composing all weaker layers, or by explicitly removing certain items from the list."], "extent": [16626, 16881]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Add as Strongest References in Prepend List"], "extent": [16881, 16930], "body": [{"type": "para", "indent": 8, "text": ["Make new references stronger than any references from lower layers, and stronger than any previous ", {"type": "q", "text": ["prepend"]}, " edits in the currently active layer."], "extent": [16930, 17085]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Add as Weakest References in Prepend List"], "extent": [17085, 17132], "body": [{"type": "para", "indent": 8, "text": ["Make new references stronger than any references from lower layers, but weaker than any previous ", {"type": "q", "text": ["prepend"]}, " edits in the currently active layer."], "extent": [17132, 17285]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Add as Strongest References in Append List"], "extent": [17285, 17333], "body": [{"type": "para", "indent": 8, "text": ["Make new references weaker than any references from lower layers, but stronger than any previous ", {"type": "q", "text": ["append"]}, " edits in the currently active layer."], "extent": [17333, 17485]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Add as Weakest References in Append List"], "extent": [17485, 17531], "body": [{"type": "para", "indent": 8, "text": ["Make new references weaker than any references from lower layers, and weaker than any previous edits in the currently active layer."], "extent": [17531, 17672]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Remove References"], "extent": [17672, 17695], "body": [{"type": "para", "indent": 8, "text": ["The layers or primitives referenced by this node are removed from the list of references on the destination primitive rather that being added."], "extent": [17695, 17847]}, {"type": "para", "indent": 8, "text": ["Because this removal is expressed as a list edit, you can selectively remove specific layers from the list of references, no matter what layer authored the original reference."], "extent": [17847, 18033]}], "container": true}], "container": true}], "container": true, "role": "item"}], "container": true, "role": "item_group"}, {"level": 4, "type": "sep", "indent": 0, "text": [" Created Primitives "], "extent": [18033, 18062]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Primitive Kind"], "extent": [18062, 18079], "body": [{"type": "para", "indent": 4, "text": ["If the prim at ", {"type": "ui", "text": ["Primitive path"]}, " doesn\u2019t exist, this node will create it. If it has to create the prim, it will set it to have this ", {"scheme": null, "value": "/solaris/usd#kinds", "type": "link", "text": ["kind"], "fullpath": "/solaris/usd#kinds", "fragment": "#kinds"}, "."], "extent": [18098, 18263]}], "container": true, "attrs": {"id": "primkind"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Parent Primitive Type"], "extent": [18263, 18286], "body": [{"type": "para", "indent": 4, "text": ["If the prim at ", {"type": "ui", "text": ["Primitive path"]}, " doesn\u2019t exist, this node will create it. If it has to create the prim, it will give any intermediate prims it has to create this type."], "extent": [18311, 18486]}], "container": true, "attrs": {"id": "parentprimtype"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Primitives"], "extent": [18486, 18498], "body": [{"type": "para", "indent": 4, "text": ["In edit mode, the node has this parameter to specify any number of existing primitives. This lets you specify the prim(s) the node should operate on. You can click the select button beside the text box to select the primitives from the scene graph tree. You can also use ", {"scheme": null, "value": "/solaris/pattern", "type": "link", "text": ["primitive patterns"], "fullpath": "/solaris/pattern"}, " for advanced matching, including matching all prims in a collection."], "extent": [18520, 18903]}], "container": true, "attrs": {"id": "primpattern"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Primitive Path"], "extent": [18903, 18919], "body": [{"type": "para", "indent": 4, "text": ["In create mode, the node has this parameter to specify a single primitive path. This is the scene graph path where the referenced branch will be attached. The referenced prim will be overlayed onto this prim, and the referenced prim\u2019s descendants will become this prim\u2019s descendants. If this prim doesn\u2019t exist, the node will create it."], "extent": [18938, 19280]}], "container": true, "attrs": {"id": "primpath"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Action"], "extent": [19280, 19288], "body": [{"type": "para", "indent": 4, "text": ["Whether this node should create a new prim, or edit existing prims. Create mode will also edit a prim if it already exists, but only a single prim can be specified in that mode. Edit mode allows for adding references to any number of prims with one node."], "extent": [19310, 19570]}], "container": true, "attrs": {"id": "createprims"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Make Instanceable"], "extent": [19570, 19589], "body": [{"type": "para", "indent": 4, "text": ["Mark the new or modified prims as ", {"scheme": null, "value": "/solaris/usd#instancing", "type": "link", "text": ["instanceable (as in ", {"type": "q", "text": ["native instancing"]}, ")"], "fullpath": "/solaris/usd#instancing", "fragment": "#instancing"}, ". This saves memory if you reference the same branch into multiple places, but makes the descendants of the referenced prim not editable. If this option is off, the prims are not explicitly marked as not instanceable. Instead, the current instanceable value on each prim is left unchanged."], "extent": [19616, 20011]}], "container": true, "attrs": {"id": "instanceable"}, "role": "item"}], "container": true, "role": "item_group"}], "text": "Parameters"}], "title": ["Reference"], "summary": ["References the contents of a external USD files and/or layers created by other LOP nodes into a branch of the existing scene graph tree. Can also remove or replace existing references."], "included": ["/solaris/usd"]}