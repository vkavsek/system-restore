{"type": "root", "attrs": {"type": "node", "context": "lop", "internal": "rendersettings", "icon": "LOP/rendersettings", "group": "rendering", "since": "18.0", "version": null, "namespace": null}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["Render Settings"], "extent": [0, 20]}, {"type": "summary", "indent": 0, "text": ["Creates or edits a UsdRenderSettings prim, which holds the general settings for rendering the scene."], "extent": [130, 239]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Overview"], "extent": [239, 254], "body": [{"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": ["A UsdRenderSettings prim holds global render settings for\n    rendering the scene, as well as a list of ", {"type": "code", "text": ["UsdRenderProduct"]}, " prims representing the rendered files/buffers, and which ", {"type": "em", "text": ["purposes"]}, " should be rendered."], "extent": [254, 473]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": ["Render settings prims must be somewhere under ", {"type": "code", "text": ["/Render"]}, " in the scene graph tree."], "extent": [473, 561]}], "container": true}]}, {"level": 2, "id": "oview", "container": true, "type": "h", "indent": 0, "text": ["Creating vs. editing prims"], "extent": [5373, 5414], "body": [{"type": "para", "indent": 0, "text": ["This node belongs to a class of ", {"type": "strong", "text": ["nodes that create or edit USD prims directly"]}, ". These nodes operate in ", {"type": "em", "text": ["Create mode"]}, " or ", {"type": "em", "text": ["Edit mode"]}, ". This is controlled by a ", {"type": "ui", "text": ["Create primitives"]}, " checkbox or a ", {"type": "em", "text": ["Create/Edit popup menu"]}, ". In create mode, the node creates new prims. In edit mode, the node changes the attributes on an existing prim. The ", {"type": "em", "text": ["Edit mode"]}, " has two variations. ", {"type": "em", "text": ["Edit"]}, " will not modify primitives which have a ", {"type": "code", "text": ["houdini:editable"]}, " attribute set to ", {"type": "code", "text": ["false"]}, ". ", {"type": "em", "text": ["Force edit"]}, " will modify a primitive regardless of the existence or value of this attribute. This attribute can be set on a primitive using the ", {"scheme": null, "value": "/nodes/lop/configureprimitive", "type": "link", "text": ["Configure Primitives LOP"], "fullpath": "/nodes/lop/configureprimitive"}, "."], "extent": [5414, 6076]}, {"type": "para", "indent": 0, "text": ["Parameters that correspond to a USD attribute have a pop-up menu to the left that controls ", {"type": "em", "text": ["how"]}, " the node authors the attribute."], "extent": [6076, 6206]}, {"type": "para", "indent": 0, "text": ["In addition to that, any connectable USD attributes (i.e., the ones in the ", {"type": "code", "text": ["inputs:"]}, " namespace) will have menu items that allow disconnecting them from their sources."], "extent": [6206, 6374]}, {"type": "box_group", "body": [{"ext": null, "type": "box", "indent": 0, "role": "item", "extent": [6374, 6380], "body": [{"type": "table", "thead": [{"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["Pop-up menu item "], "role": "th", "extent": [6407, 6431], "container": true, "attrs": {"width": "25%"}}, {"type": "cell", "indent": 8, "text": ["Meaning "], "role": "th", "extent": [6451, 6470]}], "divider": false}], "body": [{"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["Set or Create "], "role": "td", "extent": [6470, 6491], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Sets the attribute to the given value, whether it previously existed or not."], "extent": [6491, 6577]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["Set If Exists "], "role": "td", "extent": [6577, 6597], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Only set the attribute to the given value if it previously existed."], "extent": [6597, 6674]}, {"type": "para", "indent": 8, "text": ["Use this mode to make sure an attribute is only set on primitives of the correct type. For example, only ", {"type": "code", "text": ["UsdGeomSphere"]}, " primitives are likely to have a ", {"type": "code", "text": ["radius"]}, " attribute."], "extent": [6674, 6856]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["Block "], "role": "td", "extent": [6856, 6868], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Makes the attribute appear to not exist, so it takes on its default value. (If the attribute doesn\u2019t already exist on the prim, this does nothing.)"], "extent": [6868, 7025]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["Disconnect Input "], "role": "td", "extent": [7025, 7048], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Deletes the attribute input connection to its source. Input connections take precedence over attribute values, so disconnecting an input allows the attribute value to take effect."], "extent": [7048, 7237]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["Do Nothing "], "role": "td", "extent": [7237, 7254], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Ignore this parameter, don\u2019t create or change the attribute in any way."], "extent": [7254, 7336]}]}], "divider": false}]}], "container": true, "attrs": {"id": "control_menu"}}], "container": true, "role": "item_group"}]}, {"level": 1, "id": "parameters", "container": true, "type": "parameters_section", "indent": 0, "role": "section", "extent": [593, 605], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Sampling Behavior"], "extent": [2196, 2216], "body": [{"type": "para", "indent": 4, "text": ["Cooking this node can generate many USD time samples, rather than just a single time sample at the current time. This can be equivalent to having a ", {"scheme": "Node", "value": "/nodes/lop/cache", "type": "link", "text": ["Cache LOP"], "fullpath": "/nodes/lop/cache"}, " following this node, but it will evaluate much faster, and does not cache data from any other nodes. This allows animated data to be authored to USD without introducing a node time dependency which would then cause all following nodes to also be time dependent. This can vastly improve playback performance of some LOP Networks."], "extent": [2216, 2725]}, {"type": "para", "indent": 4, "text": ["In all sampling modes, if a parameter on this node does not vary with time, and does not rely on other time sampled data from the stage, only a single default value will be generated in USD for the corresponding attribute. USD time samples are only generated for parameters that may vary over time."], "extent": [2725, 3029]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Sample Current Frame"], "extent": [3029, 3055], "body": [{"type": "para", "indent": 8, "text": ["A single time sample will be generated for the current time."], "extent": [3055, 3125]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Sample Frame Range If Input Is Not Time Dependent"], "extent": [3125, 3180], "body": [{"type": "para", "indent": 8, "text": ["If the input to this node is time dependent, this node behaves as if it is in ", {"type": "code", "text": ["Sample current frame"]}, " mode. Otherwise it behaves as if it is in ", {"type": "code", "text": ["Sample frame range"]}, " mode."], "extent": [3180, 3359]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Sample Frame Range"], "extent": [3359, 3383], "body": [{"type": "para", "indent": 8, "text": ["The ", {"type": "ui", "text": ["Start/End/Inc"]}, " parameter is used to generate multiple times at which this node\u2019s parameters are evaluated, and a USD time sample is created for each attribute at each one of these times."], "extent": [3383, 3586]}], "container": true}], "container": true}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Start/End/Inc"], "extent": [3586, 3601], "body": [{"type": "para", "indent": 4, "text": ["When the ", {"type": "ui", "text": ["Sampling behavior"]}, " is ", {"type": "code", "text": ["Sample frame range"]}, ", this parameter controls the number and spacing of base time samples to be generated by this node. The default values of this parameter are ", {"type": "code", "text": ["@ropstart"]}, ", ", {"type": "code", "text": ["@ropend"]}, ", and ", {"type": "code", "text": ["@ropinc"]}, ". These values correspond to the start, end, and step size of the global Houdini animation settings when interacting with Houdini. When using a ROP node to generate a range of frames, these values correspond to the start, end, and increment values specified on the ROP node being executed. This default ensures that a USD file written to disk will contain time samples for exactly the frame range requested by the ROP (regardless of the Houdini animation settings)."], "extent": [3601, 4303]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Subframe Sampling"], "extent": [56, 79], "body": [{"type": "para", "indent": 8, "text": ["For each primary sample generated by this node, these parameters can cuase additional samples to be generated aroudn that primary sample time. This is most often used to ensure that accurate data exists at exactly the camera shutter open and close times, as well as at the primary sample time."], "extent": [79, 382]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Shutter"], "extent": [382, 395], "body": [{"type": "para", "indent": 8, "text": ["Controls the method used to specify the shutter open and close times relative to the primary sample times."], "extent": [395, 511]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["Specify Manually"], "extent": [511, 537], "body": [{"type": "para", "indent": 12, "text": ["The ", {"type": "ui", "text": ["Shutter open/close"]}, " parameter values provide exact offset values relative to the primary sample time."], "extent": [537, 659]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Use Camera Prim"], "extent": [659, 684], "body": [{"type": "para", "indent": 12, "text": ["The ", {"type": "ui", "text": ["Camera prim"]}, " parameter provides the scene graph path of a camera primitive from which the shutter open and close times are extracted to provide the offset values relative to the primary time sample."], "extent": [684, 903]}], "container": true}], "container": true}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Shutter Open/Close"], "extent": [903, 927], "body": [{"type": "para", "indent": 8, "text": ["When the ", {"type": "ui", "text": ["Shutter"]}, " mode is ", {"type": "code", "text": ["Specify Manually"]}, ", these two offset values are added to the primary sample time to indicate the shutter open and close times. The open time should be less than or equal to zero, and the close time should be greater than or equal to zero."], "extent": [927, 1204]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Camera Prim"], "extent": [1204, 1221], "body": [{"type": "para", "indent": 8, "text": ["Scene graph path of a camera prim on the input node\u2019s stage. The shutter open and close attribute values are read from this primitive."], "extent": [1221, 1365]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Samples"], "extent": [1365, 1378], "body": [{"type": "para", "indent": 8, "text": ["The number of subframe samples to create for each primary sample. These samples are evenly distributed between the shutter open and close times. Note that such an even distribution may or may not create a sample at exactly the primary sample time."], "extent": [1378, 1635]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Always Include Frame Sample"], "extent": [1635, 1668], "body": [{"type": "para", "indent": 8, "text": ["Enable this option to force a sample to be created at exactly the primary sample time. If the ", {"type": "ui", "text": ["Samples"]}, " values together with the shutter open and close times already place a sample at the primary sample time, turning on this option will have no effect. Otherwise, this option will cause an addition sample to be added. This means that the actual number of samples per primary sample may in fact be one more than the number specified in the ", {"type": "ui", "text": ["Samples"]}, " parameter."], "extent": [1668, 2143]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Action"], "extent": [50, 62], "body": [{"type": "para", "indent": 8, "text": ["Whether this node should create new prims, or edit existing prims. In addition, the ", {"type": "code", "text": ["Force Edit"]}, " option can be chosen to cause this node to ignore the ", {"type": "code", "text": ["houdini:editable"]}, " attribute on prims, and always edit the specified attributes. This is in contrast to the ", {"type": "code", "text": ["Edit"]}, " mode which will trigger a warning and not set attributes on prims with the ", {"type": "code", "text": ["houdini:editable"]}, " attribute set to ", {"type": "code", "text": ["false"]}, "."], "extent": [88, 483]}], "container": true, "attrs": {"id": "createprims"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Primitive Path"], "extent": [483, 503], "body": [{"type": "para", "indent": 8, "text": ["In create mode, this lets you control where in the scene graph to create the prim(s)."], "extent": [526, 621]}, {"type": "para", "indent": 8, "text": ["The default is usually ", {"type": "code", "text": ["/$OS"]}, ". This creates a primitive at the root level with the same name as the node (for example, ", {"type": "code", "text": ["/tube1"]}, "). This is a useful default for preventing naming conflicts, but terrible for organization. You should try to remember to change the ", {"type": "ui", "text": ["Primitive path"]}, " to a better value when you create prims."], "extent": [621, 950]}, {"type": "para", "indent": 8, "text": ["For example, instead of naming models after the node that created them, you might want to name them after the geometry inside, and organize them under a ", {"type": "code", "text": ["/Models"]}, " branch."], "extent": [950, 1130]}, {"type": "para", "indent": 8, "text": ["The ", {"type": "q", "text": ["Create primitives"]}, " section contains basic controls for how to create the new prim(s)."], "extent": [1130, 1230]}], "container": true, "attrs": {"id": "primpath"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Primitives"], "extent": [1230, 1246], "body": [{"type": "para", "indent": 8, "text": ["In edit mode, the node has a ", {"type": "ui", "text": ["Primitive pattern"]}, " parameter. This lets you specify the prim(s) the node should operate on. You can click the select button beside the text box to select the primitives from the scene graph tree. You can also use ", {"scheme": null, "value": "/solaris/pattern", "type": "link", "text": ["primitive patterns"], "fullpath": "/solaris/pattern"}, " for advanced matching, including matching all prims in a collection."], "extent": [1272, 1633]}], "container": true, "attrs": {"id": "primpattern"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Initialize Parameters For Edit"], "extent": [1633, 1669], "body": [{"type": "para", "indent": 8, "text": ["In edit mode, changes the state of all control menu parameters to ", {"type": "code", "text": ["Do Nothing"]}, ", so that this node will not apply any changes. Also grabs the current values of each property from the first ", {"type": "ui", "text": ["Primitives"]}, " match, and sets the values of the corresponding parameters to match. This means that changing any parameter\u2019s control menu to ", {"type": "code", "text": ["Set or Create"]}, " mode will set the property to its current value, making it easier to apply changes to an existing value rather than setting a brand new value."], "extent": [1695, 2192]}], "container": true, "attrs": {"id": "initforedit"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Create Primitives"], "extent": [7383, 7403], "body": [{"type": "para", "indent": 4, "text": ["This section only appears when the node is creating primitives."], "extent": [7403, 7472]}, {"type": "para", "indent": 4, "text": ["For example:"], "extent": [7472, 7490]}, {"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": ["If you want to create a new cube primitive at ", {"type": "code", "text": ["/world/objects/cube1"]}, " on an empty stage: Set ", {"type": "ui", "text": ["Primitive Specifier"]}, " to ", {"type": "q", "text": ["Define"]}, ", and the ", {"type": "ui", "text": ["Parent Primitive Type"]}, " to ", {"type": "q", "text": ["Xform"]}, "."], "extent": [7490, 7672]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": ["If you want to override the radius of a sphere at ", {"type": "code", "text": ["/world/objects/sphere1"]}, ": Set ", {"type": "ui", "text": ["Primitive Specifier"]}, " to ", {"type": "q", "text": ["Over"]}, ", and the ", {"type": "ui", "text": ["Parent Primitive Type"]}, " to None. This makes sure the primitive types of any existing ancestor prims are not be modified by this node."], "extent": [7672, 7938]}], "container": true}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Primitive Count"], "extent": [7938, 7959], "body": [{"type": "para", "indent": 8, "text": ["The number of primitives to create."], "extent": [7959, 8004]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Primitive Kind"], "extent": [8004, 8024], "body": [{"type": "para", "indent": 8, "text": ["Set all created prims to have this ", {"scheme": null, "value": "/solaris/usd#kinds", "type": "link", "text": ["kind"], "fullpath": "/solaris/usd#kinds", "fragment": "#kinds"}, "."], "extent": [8047, 8118]}], "container": true, "attrs": {"id": "primkind"}}, {"type": "dt", "indent": 4, "text": ["Primitive Specifier"], "extent": [8118, 8143], "body": [{"type": "para", "indent": 8, "text": ["The USD operator to use when creating the new prims."], "extent": [8167, 8229]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["Define"], "extent": [8229, 8245], "body": [{"type": "para", "indent": 12, "text": ["Authors a completely new prim. Use this if you want to create a brand new prim or replace an existing prim."], "extent": [8245, 8366]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Over"], "extent": [8366, 8380], "body": [{"type": "para", "indent": 12, "text": ["Authors an override of an existing prim. Attributes not explicitly authored on this prim will get their values from the existing prim on the lower layer."], "extent": [8380, 8547]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Class"], "extent": [8547, 8562], "body": [{"type": "para", "indent": 12, "text": ["Define a primitive class. This is usually not necessary unless you are doing deep USD magic."], "extent": [8562, 8668]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "specifier"}}, {"type": "dt", "indent": 4, "text": ["Class Ancestor"], "extent": [8668, 8688], "body": [{"type": "para", "indent": 8, "text": ["If the ", {"type": "ui", "text": ["Specifier"]}, " is ", {"type": "code", "text": ["Define"]}, " or ", {"type": "code", "text": ["Over"]}, ", this parameter will cause some ancestor primitives to be authored with a specifier of ", {"type": "code", "text": ["Class"]}, ". This makes it easy to create an ", {"type": "code", "text": ["Over"]}, " or ", {"type": "code", "text": ["Define"]}, " within a ", {"type": "code", "text": ["Class"]}, " without having to use two separate nodes. When the ", {"type": "ui", "text": ["Specifier"]}, " is ", {"type": "code", "text": ["Class"]}, ", this parameter is disabled because the entire primitive hierarchy is already authored as ", {"type": "code", "text": ["Class"]}, " primitives."], "extent": [8716, 9118]}], "container": true, "attrs": {"id": "classancestor"}}, {"type": "dt", "indent": 4, "text": ["Parent Primitive Type"], "extent": [9118, 9145], "body": [{"type": "para", "indent": 8, "text": ["If any parents of a path in ", {"type": "ui", "text": ["Primitive paths"]}, " do not exist, this node will automatically create them. In this case, it will create parent nodes of this type."], "extent": [9174, 9344]}], "container": true, "attrs": {"id": "parentprimtype"}}], "container": true}], "container": true, "role": "item"}], "container": true}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Standard"], "extent": [773, 788], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 4, "text": ["Products"], "extent": [788, 803], "body": [{"type": "para", "indent": 8, "text": ["A list of paths to UsdRenderProduct prims, representing the rendered outputs. If you don\u2019t specify any explicit products, the renderer should by default output an RGB image using the render settings on this node, to a default display or image name."], "extent": [826, 1084]}], "container": true, "attrs": {"id": "products"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Included Purposes"], "extent": [1084, 1107], "body": [{"type": "para", "indent": 8, "text": ["A list of ", {"type": "em", "text": ["purpose"]}, " tokens (such as ", {"type": "code", "text": ["render"]}, " (final render), ", {"type": "code", "text": ["proxy"]}, ", and ", {"type": "code", "text": ["guide"]}, ", from ", {"type": "code", "text": ["UsdGeomImageable"]}, "). Only geometry with its purpose set to one of these tokens will be sent to the renderer. The ", {"type": "code", "text": ["default"]}, " purpose is the purpose for all geometry that doesn\u2019t have an explicitly set purpose, so you will usually want to include it."], "extent": [1138, 1483]}, {"type": "para", "indent": 8, "text": ["(This cannot be specified per-product because it is a statement of which geometry is present.)"], "extent": [1483, 1587]}], "container": true, "attrs": {"id": "includedPurposes"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Material Binding Purposes"], "extent": [1587, 1618], "body": [{"type": "para", "indent": 8, "text": ["A list of material purpose tokens to consider when resolving material bindings."], "extent": [1656, 1745]}], "container": true, "attrs": {"id": "materialBindingPurposes"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Camera"], "extent": [1745, 1757], "body": [{"type": "para", "indent": 8, "text": ["Path to a USD camera (", {"type": "code", "text": ["UsdGeomCamera"]}, ") prim to render the scene from."], "extent": [1778, 1857]}], "container": true, "attrs": {"id": "camera"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Resolution Mode"], "extent": [1857, 1878], "body": [{"type": "para", "indent": 8, "text": ["Use the USD Camera\u2019s aperture aspect ratio to automatically set one dimension of the resolution."], "extent": [1901, 2007]}, {"type": "para", "indent": 8, "text": ["The computed parm is set using an expression, but is locked to prevent accidental edits."], "extent": [2007, 2105]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["Manual"], "extent": [2105, 2121], "body": [{"type": "para", "indent": 12, "text": ["Set the resolution height and width values."], "extent": [2121, 2178]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Set Width, Compute Height from Aperture"], "extent": [2178, 2227], "body": [{"type": "para", "indent": 12, "text": ["Set the width size, while height is computed from the width and the camera aspect ratio."], "extent": [2227, 2329]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Set Height, Compute Width from Aperture"], "extent": [2329, 2378], "body": [{"type": "para", "indent": 12, "text": ["Set the height size, while width is computed from the width and the camera aspect ratio."], "extent": [2378, 2480]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "res_mode"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Resolution"], "extent": [2480, 2496], "body": [{"type": "para", "indent": 8, "text": ["The horizontal and vertical size of the output image, in pixels."], "extent": [2521, 2595]}], "container": true, "attrs": {"id": "resolution"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Instantaneous Shutter"], "extent": [2595, 2622], "body": [{"type": "para", "indent": 8, "text": ["Override the camera\u2019s ", {"type": "ui", "text": ["Shutter close"]}, " parameter to be equal to its ", {"type": "ui", "text": ["Shutter open"]}, " time, to produce a zero-width shutter interval. This is a convenient way to disable motion blur."], "extent": [2657, 2849]}], "container": true, "attrs": {"id": "instantaneousShutter"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Aspect Ratio Conform Policy"], "extent": [2849, 2882], "body": [{"type": "para", "indent": 8, "text": ["What to do if the aspect ratio of the output image (", {"type": "ui", "text": ["Resolution"]}, " width divided by height) doesn\u2019t match the aspect ratio of the camera aperture (controlled by attributes on the camera). This allows a standard renderer to do something reasonable when you switch between cameras."], "extent": [2921, 3210]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["Expand Aperture"], "extent": [3210, 3235], "body": [{"type": "para", "indent": 12, "text": ["If necessary, expand the camera aperture to match the image."], "extent": [3235, 3309]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Crop Aperture"], "extent": [3309, 3332], "body": [{"type": "para", "indent": 12, "text": ["If necessary, crop the camera aperture to match the image."], "extent": [3332, 3404]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Adjust Aperture Width"], "extent": [3404, 3435], "body": [{"type": "para", "indent": 12, "text": ["If necessary, change the camera aperture width to match the image."], "extent": [3435, 3515]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Adjust Aperture Height"], "extent": [3515, 3547], "body": [{"type": "para", "indent": 12, "text": ["If necessary, change the camera aperture height to match the image."], "extent": [3547, 3628]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Adjust Pixel Aspect Ratio"], "extent": [3628, 3663], "body": [{"type": "para", "indent": 12, "text": ["Change the aspect ratio of the image to match the camera."], "extent": [3663, 3734]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "aspectRatioConformPolicy"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Data Window NDC"], "extent": [3734, 3755], "body": [{"type": "para", "indent": 8, "text": ["Directs the renderer to only render within this window of the entire output image. You specify the window as ", {"type": "code", "text": ["minX, minY, maxX, maxY"]}, ", where each number is a normalized value from ", {"type": "code", "text": ["0"]}, " to ", {"type": "code", "text": ["1"]}, ". ", {"type": "code", "text": ["0, 0"]}, " is the bottom left, ", {"type": "code", "text": ["1, 1"]}, " is the top right, ", {"type": "code", "text": ["0.5, 0.5"]}, " is the center, and so on. The default is ", {"type": "code", "text": ["0, 0, 1, 1"]}, " (no cropping). Note that you can use ", {"type": "em", "text": ["negative"]}, " values. For example, ", {"type": "code", "text": ["-0.1, -0.1, 1.1, 1.1"]}, " will give you 10% overscan on each side."], "extent": [3783, 4234]}, {"type": "para", "indent": 8, "text": ["You can use this window to temporarily ", {"type": "em", "text": ["crop"]}, " the render to a smaller region, for testing purposes."], "extent": [4234, 4343]}, {"type": "para", "indent": 8, "text": ["Pixels are only rendered if they are ", {"type": "em", "text": ["fully"]}, " inside the window."], "extent": [4343, 4416]}, {"type": "para", "indent": 8, "text": ["The normalized coordinates map to the image ", {"type": "em", "text": ["after"]}, " any adjustments by the ", {"type": "ui", "text": ["Aspect ratio conform policy"]}, "."], "extent": [4416, 4533]}], "container": true, "attrs": {"id": "dataWindowNDC"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Pixel Aspect Ratio"], "extent": [4533, 4557], "body": [{"type": "para", "indent": 8, "text": ["The aspect ratio (width/height) of image ", {"type": "em", "text": ["pixels"]}, " (", {"type": "em", "text": ["not"]}, " the image itself).\n        The default is ", {"type": "code", "text": ["1.0"]}, ", indicating square pixels."], "extent": [4588, 4730]}], "container": true, "attrs": {"id": "pixelAspectRatio"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Karma"], "extent": [4730, 4742], "body": [{"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Global"], "extent": [4742, 4758], "body": []}, {"level": 3, "type": "sep", "indent": 0, "text": [" Rendering "], "extent": [4758, 4777], "body": [{"type": "include_group", "body": [{"ext": "/props/karma#karma:global:engine", "type": "include", "indent": 4, "role": "item", "extent": [4777, 4827]}, {"ext": "/props/karma#karma:global:imagemode", "type": "include", "indent": 4, "role": "item", "extent": [4827, 4879]}, {"ext": "/props/karma#karma:global:bucketsize", "type": "include", "indent": 4, "role": "item", "extent": [4879, 4932]}, {"ext": "/props/karma#karma:global:bucketorder", "type": "include", "indent": 4, "role": "item", "extent": [4932, 4987]}], "container": true, "role": "item_group"}], "container": true}, {"level": 3, "type": "sep", "indent": 0, "text": [" Sampling "], "extent": [4987, 5004], "body": [{"type": "include_group", "body": [{"ext": "/props/karma#karma:global:pixelsamples", "type": "include", "indent": 4, "role": "item", "extent": [5004, 5060]}, {"ext": "/props/karma#karma:global:screendoorlimit", "type": "include", "indent": 4, "role": "item", "extent": [5060, 5118]}, {"ext": "/props/karma#karma:global:convergence_mode", "type": "include", "indent": 4, "role": "item", "extent": [5118, 5177]}, {"ext": "/props/karma#karma:global:russianroulette_cutoff", "type": "include", "indent": 4, "role": "item", "extent": [5177, 5242]}, {"ext": "/props/karma#karma:global:light_sampling_mode", "type": "include", "indent": 4, "role": "item", "extent": [5242, 5304]}, {"ext": "/props/karma#karma:global:light_sampling_quality", "type": "include", "indent": 4, "role": "item", "extent": [5304, 5370]}], "container": true, "role": "item_group"}], "container": true}, {"level": 3, "type": "sep", "indent": 0, "text": [" Indirect Guiding "], "extent": [5370, 5395], "body": [{"type": "include_group", "body": [{"ext": "/props/karma#karma:global:guiding_enable", "type": "include", "indent": 4, "role": "item", "extent": [5395, 5453]}, {"ext": "/props/karma#karma:global:guiding_samples", "type": "include", "indent": 4, "role": "item", "extent": [5453, 5511]}, {"ext": "/props/karma#karma:global:guiding_spatialfilter", "type": "include", "indent": 4, "role": "item", "extent": [5511, 5575]}, {"ext": "/props/karma#karma:global:guiding_directionalfilter", "type": "include", "indent": 4, "role": "item", "extent": [5575, 5644]}], "container": true, "role": "item_group"}], "container": true}, {"level": 3, "type": "sep", "indent": 0, "text": [" Shading "], "extent": [5644, 5660], "body": [{"type": "include_group", "body": [{"ext": "/props/karma#karma:global:raybias", "type": "include", "indent": 4, "role": "item", "extent": [5660, 5715]}, {"ext": "/props/karma#karma:global:constrainmaxrough", "type": "include", "indent": 4, "role": "item", "extent": [5715, 5775]}, {"ext": "/props/karma#karma:global:colorlimit", "type": "include", "indent": 4, "role": "item", "extent": [5775, 5828]}, {"ext": "/props/karma#karma:global:colorlimitindlinked", "type": "include", "indent": 4, "role": "item", "extent": [5828, 5890]}, {"ext": "/props/karma#karma:global:colorlimitindirect", "type": "include", "indent": 4, "role": "item", "extent": [5890, 5951]}, {"ext": "/props/karma#karma:global:enable_dof", "type": "include", "indent": 4, "role": "item", "extent": [5951, 6004]}, {"ext": "/props/karma#karma:global:autoheadlight", "type": "include", "indent": 4, "role": "item", "extent": [6004, 6061]}], "container": true, "role": "item_group"}], "container": true}, {"level": 3, "type": "sep", "indent": 0, "text": [" Ambient Occlusion "], "extent": [6061, 6087], "body": [{"type": "include_group", "body": [{"ext": "/props/karma#karma:global:disable_lighting", "type": "include", "indent": 4, "role": "item", "extent": [6087, 6147]}, {"ext": "/props/karma#karma:global:head_ao_samples", "type": "include", "indent": 4, "role": "item", "extent": [6147, 6205]}, {"ext": "/props/karma#karma:global:head_ao_distance", "type": "include", "indent": 4, "role": "item", "extent": [6205, 6264]}, {"ext": "/props/karma#karma:global:head_depthcue_color", "type": "include", "indent": 4, "role": "item", "extent": [6264, 6326]}, {"ext": "/props/karma#karma:global:head_depthcue_alpha", "type": "include", "indent": 4, "role": "item", "extent": [6326, 6388]}, {"ext": "/props/karma#karma:global:head_depthcue_z", "type": "include", "indent": 4, "role": "item", "extent": [6388, 6447]}], "container": true, "role": "item_group"}], "container": true}, {"level": 3, "type": "sep", "indent": 0, "text": [" Dicing "], "extent": [6447, 6462], "body": [{"type": "include_group", "body": [{"ext": "/props/karma#karma:global:dicingcamera", "type": "include", "indent": 4, "role": "item", "extent": [6462, 6518]}, {"ext": "/props/karma#karma:global:offscreenquality", "type": "include", "indent": 4, "role": "item", "extent": [6518, 6577]}, {"ext": "/props/karma#karma:global:dicingqualityscale", "type": "include", "indent": 4, "role": "item", "extent": [6577, 6639]}], "container": true, "role": "item_group"}], "container": true}, {"level": 3, "type": "sep", "indent": 0, "text": [" Image "], "extent": [6639, 6653], "body": [{"type": "include_group", "body": [{"ext": "/props/karma#karma:global:imagefilter", "type": "include", "indent": 4, "role": "item", "extent": [6653, 6708]}, {"ext": "/props/karma#karma:global:pixelfilter", "type": "include", "indent": 4, "role": "item", "extent": [6708, 6762]}, {"ext": "/props/karma#karma:global:pixelfiltersize", "type": "include", "indent": 4, "role": "item", "extent": [6762, 6820]}, {"ext": "/props/karma#karma:global:samplefilter", "type": "include", "indent": 4, "role": "item", "extent": [6820, 6875]}, {"ext": "/props/karma#karma:global:pixeloracle", "type": "include", "indent": 4, "role": "item", "extent": [6875, 6929]}, {"ext": "/props/karma#karma:global:use_background", "type": "include", "indent": 4, "role": "item", "extent": [6929, 6986]}, {"ext": "/props/karma#karma:global:background_iprfilter", "type": "include", "indent": 4, "role": "item", "extent": [6986, 7050]}], "container": true, "role": "item_group"}], "container": true}, {"level": 3, "type": "sep", "indent": 0, "text": [" Advanced "], "extent": [7050, 7067], "body": [{"type": "include_group", "body": [{"ext": "/props/karma#karma:global:usecacheratio", "type": "include", "indent": 4, "role": "item", "extent": [7067, 7124]}, {"ext": "/props/karma#karma:global:cacheratio", "type": "include", "indent": 4, "role": "item", "extent": [7124, 7177]}, {"ext": "/props/karma#karma:global:cachesize", "type": "include", "indent": 4, "role": "item", "extent": [7177, 7229]}, {"ext": "/props/karma#karma:global:overrideobject", "type": "include", "indent": 4, "role": "item", "extent": [7229, 7286]}, {"ext": "/props/karma#karma:global:randomseed", "type": "include", "indent": 4, "role": "item", "extent": [7286, 7339]}, {"ext": "/props/karma#karma:global:abortmissingtexture", "type": "include", "indent": 4, "role": "item", "extent": [7339, 7401]}, {"ext": "/props/karma#karma:global:exportcomponents", "type": "include", "indent": 4, "role": "item", "extent": [7401, 7460]}, {"ext": "/props/karma#karma:global:diffusecomponents", "type": "include", "indent": 4, "role": "item", "extent": [7460, 7520]}, {"ext": "/props/karma#karma:global:refractcomponents", "type": "include", "indent": 4, "role": "item", "extent": [7520, 7580]}, {"ext": "/props/karma#karma:global:volumecomponents", "type": "include", "indent": 4, "role": "item", "extent": [7580, 7639]}, {"ext": "/props/karma#karma:global:ssscomponents", "type": "include", "indent": 4, "role": "item", "extent": [7639, 7697]}], "container": true, "role": "item_group"}], "container": true}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Default Geometry Settings"], "extent": [7697, 7731], "body": []}, {"level": 3, "type": "sep", "indent": 0, "text": [" Motion Blur "], "extent": [7731, 7752], "body": [{"type": "include_group", "body": [{"ext": "/props/karma#karma:object:mblur", "type": "include", "indent": 4, "role": "item", "extent": [7752, 7801]}, {"ext": "/props/karma#karma:object:vblur", "type": "include", "indent": 4, "role": "item", "extent": [7801, 7849]}, {"ext": "/props/karma#karma:object:geosamples", "type": "include", "indent": 4, "role": "item", "extent": [7849, 7902]}, {"ext": "/props/karma#karma:object:xformsamples", "type": "include", "indent": 4, "role": "item", "extent": [7902, 7957]}, {"ext": "/props/karma#karma:object:instance_vblur", "type": "include", "indent": 4, "role": "item", "extent": [7957, 8014]}, {"ext": "/props/karma#karma:object:instance_samples", "type": "include", "indent": 4, "role": "item", "extent": [8014, 8073]}, {"ext": "/props/karma#karma:object:volumevblurscale", "type": "include", "indent": 4, "role": "item", "extent": [8073, 8133]}], "container": true, "role": "item_group"}], "container": true}, {"level": 3, "type": "sep", "indent": 0, "text": [" Sampling "], "extent": [8133, 8150], "body": [{"type": "include_group", "body": [{"ext": "/props/karma#karma:object:diffusesamples", "type": "include", "indent": 5, "role": "item", "extent": [8150, 8209]}, {"ext": "/props/karma#karma:object:reflectsamples", "type": "include", "indent": 5, "role": "item", "extent": [8209, 8267]}, {"ext": "/props/karma#karma:object:refractsamples", "type": "include", "indent": 5, "role": "item", "extent": [8267, 8325]}, {"ext": "/props/karma#karma:object:volumesamples", "type": "include", "indent": 5, "role": "item", "extent": [8325, 8382]}, {"ext": "/props/karma#karma:object:ssssamples", "type": "include", "indent": 5, "role": "item", "extent": [8382, 8436]}, {"ext": "/props/karma#karma:object:volumesteprate", "type": "include", "indent": 5, "role": "item", "extent": [8436, 8494]}, {"ext": "/props/karma#karma:object:light_sampling_quality", "type": "include", "indent": 5, "role": "item", "extent": [8494, 8560]}, {"ext": "/props/karma#karma:object:varianceaa_thresh", "type": "include", "indent": 5, "role": "item", "extent": [8560, 8621]}, {"ext": "/props/karma#karma:object:varianceaa_minsamples", "type": "include", "indent": 5, "role": "item", "extent": [8621, 8686]}, {"ext": "/props/karma#karma:object:varianceaa_maxsamples", "type": "include", "indent": 5, "role": "item", "extent": [8686, 8752]}], "container": true, "role": "item_group"}], "container": true}, {"level": 3, "type": "sep", "indent": 0, "text": [" Limits "], "extent": [8752, 8767], "body": [{"type": "include_group", "body": [{"ext": "/props/karma#karma:object:diffuselimit", "type": "include", "indent": 5, "role": "item", "extent": [8767, 8824]}, {"ext": "/props/karma#karma:object:reflectlimit", "type": "include", "indent": 5, "role": "item", "extent": [8824, 8880]}, {"ext": "/props/karma#karma:object:refractlimit", "type": "include", "indent": 5, "role": "item", "extent": [8880, 8936]}, {"ext": "/props/karma#karma:object:volumelimit", "type": "include", "indent": 5, "role": "item", "extent": [8936, 8991]}, {"ext": "/props/karma#karma:object:ssslimit", "type": "include", "indent": 5, "role": "item", "extent": [8991, 9044]}], "container": true, "role": "item_group"}], "container": true}, {"level": 3, "type": "sep", "indent": 0, "text": [" Uniform Volume "], "extent": [9044, 9067], "body": [{"type": "include_group", "body": [{"ext": "/props/karma#karma:object:volumeuniform", "type": "include", "indent": 5, "role": "item", "extent": [9067, 9125]}, {"ext": "/props/karma#karma:object:volumeuniformdensity", "type": "include", "indent": 5, "role": "item", "extent": [9125, 9189]}, {"ext": "/props/karma#karma:object:volumeuniformsamples", "type": "include", "indent": 5, "role": "item", "extent": [9189, 9254]}], "container": true, "role": "item_group"}], "container": true}, {"level": 3, "type": "sep", "indent": 0, "text": [" Shading "], "extent": [9254, 9270], "body": [{"type": "include_group", "body": [{"ext": "/props/karma#karma:object:rendervisibility", "type": "include", "indent": 5, "role": "item", "extent": [9270, 9331]}, {"ext": "/props/karma#karma:object:cuspangle", "type": "include", "indent": 5, "role": "item", "extent": [9331, 9384]}, {"ext": "/props/karma#karma:object:holdoutmode", "type": "include", "indent": 5, "role": "item", "extent": [9384, 9439]}, {"ext": "/props/karma#karma:object:smoothp", "type": "include", "indent": 5, "role": "item", "extent": [9439, 9490]}, {"ext": "/props/karma#karma:object:lpetag", "type": "include", "indent": 5, "role": "item", "extent": [9490, 9540]}, {"ext": "/props/karma#karma:object:lightsubset", "type": "include", "indent": 5, "role": "item", "extent": [9540, 9595]}, {"ext": "/props/karma#karma:object:causticsenable", "type": "include", "indent": 5, "role": "item", "extent": [9595, 9653]}, {"ext": "/props/karma#karma:object:causticsroughnessclamp", "type": "include", "indent": 5, "role": "item", "extent": [9653, 9720]}], "container": true, "role": "item_group"}], "container": true}, {"level": 3, "type": "sep", "indent": 0, "text": [" Light "], "extent": [9720, 9734], "body": [{"type": "include_group", "body": [{"ext": "/props/karma#karma:object:treat_as_lightsource", "type": "include", "indent": 5, "role": "item", "extent": [9734, 9799]}, {"ext": "/props/karma#karma:object:lightsource_diffusescale", "type": "include", "indent": 5, "role": "item", "extent": [9799, 9867]}, {"ext": "/props/karma#karma:object:lightsource_specularscale", "type": "include", "indent": 5, "role": "item", "extent": [9867, 9936]}, {"ext": "/props/karma#karma:object:isportal", "type": "include", "indent": 5, "role": "item", "extent": [9936, 9988]}, {"ext": "/props/karma#karma:object:portaldomelights", "type": "include", "indent": 5, "role": "item", "extent": [9988, 10049]}], "container": true, "role": "item_group"}], "container": true}, {"level": 3, "type": "sep", "indent": 0, "text": [" Geometry "], "extent": [10049, 10066], "body": [{"type": "include_group", "body": [{"ext": "/props/karma#karma:object:point_style", "type": "include", "indent": 5, "role": "item", "extent": [10066, 10122]}, {"ext": "/props/karma#karma:object:curve_style", "type": "include", "indent": 5, "role": "item", "extent": [10122, 10177]}, {"ext": "/props/karma#karma:object:curve_basis", "type": "include", "indent": 5, "role": "item", "extent": [10177, 10232]}, {"ext": "/props/karma#karma:object:cull_backface", "type": "include", "indent": 5, "role": "item", "extent": [10232, 10290]}], "container": true, "role": "item_group"}], "container": true}, {"level": 3, "type": "sep", "indent": 0, "text": [" Dicing "], "extent": [10290, 10305], "body": [{"type": "include_group", "body": [{"ext": "/props/karma#karma:object:dicingquality", "type": "include", "indent": 5, "role": "item", "extent": [10305, 10363]}, {"ext": "/props/karma#karma:object:dicingflatness", "type": "include", "indent": 5, "role": "item", "extent": [10363, 10424]}], "container": true, "role": "item_group"}], "container": true}]}], "text": "Parameters"}], "title": ["Render Settings"], "summary": ["Creates or edits a UsdRenderSettings prim, which holds the general settings for rendering the scene."], "included": ["/nodes/lop/_sampling", "/nodes/lop/_simple_prims", "/props/karma"]}