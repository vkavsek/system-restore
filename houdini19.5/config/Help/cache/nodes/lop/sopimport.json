{"type": "root", "attrs": {"type": "node", "context": "lop", "internal": "sopimport", "icon": "LOP/sopimport", "group": "geometry", "since": "17.0", "version": null, "namespace": null}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["SOP Import"], "extent": [0, 15]}, {"type": "summary", "indent": 0, "text": ["Imports geometry from a SOP network into the USD scene graph."], "extent": [114, 184]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Overview"], "extent": [184, 199], "body": [{"type": "para", "indent": 0, "text": ["The imported geometry is translated to a native USD representation which may consist of many different native USD primitive types (you can control the hierarchical structure of the imported USD using attributes on the source SOP geometry)."], "extent": [199, 441]}, {"type": "para", "indent": 0, "text": ["See ", {"scheme": null, "value": "/solaris/sop_import", "type": "link", "text": ["how SOP import works"], "fullpath": "/solaris/sop_import"}, " for detailed information on how the importer converts SOP information into USD."], "extent": [441, 569]}, {"type": "para", "indent": 0, "text": ["You can import SOP geometry by sublayering (composing it over the current contents of the scene tree) or referencing (attaching it at a certain branch of the scene tree). (See ", {"scheme": null, "value": "/solaris/usd#sublayers", "type": "link", "text": ["sublayering and referencing"], "fullpath": "/solaris/usd#sublayers", "fragment": "#sublayers"}, ".)"], "extent": [569, 801]}, {"type": "para", "indent": 0, "text": ["The layer containing the imported geometry has source metadata in format that tells Houdini\u2019s USD plugins to get the geometry from a SOP node instead of a file on disk."], "extent": [801, 971]}, {"type": "para", "indent": 0, "text": ["This node can put the imported geometry in the ", {"type": "em", "text": ["active layer"]}, ", so it can be modified by LOP nodes connected to this node\u2019s output."], "extent": [971, 1103]}, {"type": "para", "indent": 0, "text": ["In addition to the geometry itself, you can import Houdini attributes on the geometry as USD primvars."], "extent": [1103, 1207]}, {"type": "note_group", "body": [{"type": "note", "indent": 0, "role": "item", "extent": [1207, 1213], "body": [{"type": "para", "indent": 4, "text": ["This node works by converting SOP geometry into a hierarchy of USD geometry prims, and then importing that USD data into the scene graph tree (by ", {"scheme": null, "value": "/solaris/usd#sublayers", "type": "link", "text": ["sublayering or referencing"], "fullpath": "/solaris/usd#sublayers", "fragment": "#sublayers"}, ")."], "extent": [1213, 1418]}, {"type": "para", "indent": 4, "text": ["Knowing this will help you interpret some of the parameters, such as ", {"type": "q", "text": ["which prim to reference in"]}, ". They are speaking in terms of how to deal with the already-converted USD geometry prims."], "extent": [1418, 1612]}], "container": true}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["How to"], "extent": [1612, 1625], "body": [{"type": "task_group", "body": [{"ext": null, "type": "task", "indent": 0, "text": ["Separate polygon meshes by connectivity"], "role": "item", "extent": [1625, 1673], "body": [{"type": "ord_group", "body": [{"blevel": 6, "type": "ord", "indent": 4, "text": ["In the SOP network, add a ", {"scheme": "Node", "value": "/nodes/sop/connectivity", "type": "link", "text": ["Connectivity node"], "fullpath": "/nodes/sop/connectivity"}, "."], "extent": [1673, 1749], "body": [{"type": "bullet_group", "body": [{"blevel": 10, "type": "bullet", "indent": 8, "text": ["Set the ", {"type": "ui", "text": ["Connectivity type"]}, " to ", {"type": "q", "text": ["Primitive"]}, "."], "extent": [1749, 1805]}, {"blevel": 10, "type": "bullet", "indent": 8, "text": ["Set the ", {"type": "ui", "text": ["Attribute"]}, " to ", {"type": "code", "text": ["piece"]}, "."], "extent": [1805, 1850]}], "container": true}, {"type": "para", "indent": 8, "text": ["This creates a ", {"type": "code", "text": ["piece"]}, " integer attribute on the polygons, where each polygon in a connected island has the same ", {"type": "code", "text": ["piece"]}, " attribute value as all other polygons in the island."], "extent": [1850, 2032]}, {"type": "para", "indent": 8, "text": ["Unfortunately, SOP Import can\u2019t use an integer attribute to generate paths. We\u2019ll need to use this attribute to generate a string attribute."], "extent": [2032, 2182]}], "container": true}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["After the Connectivity node, add an ", {"scheme": "Node", "value": "/nodes/sop/attribcreate", "type": "link", "text": ["Attribute Create node"], "fullpath": "/nodes/sop/attribcreate"}, "."], "extent": [2182, 2272], "body": [{"type": "bullet_group", "body": [{"blevel": 10, "type": "bullet", "indent": 8, "text": ["Set the ", {"type": "ui", "text": ["Name"]}, " to ", {"type": "code", "text": ["path"]}, "."], "extent": [2272, 2310]}, {"blevel": 10, "type": "bullet", "indent": 8, "text": ["Set the ", {"type": "ui", "text": ["Class"]}, " to ", {"type": "q", "text": ["Primitive"]}, "."], "extent": [2310, 2354]}, {"blevel": 10, "type": "bullet", "indent": 8, "text": ["Set the ", {"type": "ui", "text": ["Type"]}, " to ", {"type": "q", "text": ["String"]}, "."], "extent": [2354, 2394]}, {"blevel": 10, "type": "bullet", "indent": 8, "text": ["Set the ", {"type": "ui", "text": ["String"]}, " value to a name or prim path you want to use for the connected islands. Within the name/path use ", {"type": "code", "text": ["@piece"]}, " inside backticks. It will be replaced by the value of the ", {"type": "code", "text": ["piece"]}, " attribute you created above."], "extent": [2394, 2625]}], "container": true}, {"type": "para", "indent": 8, "text": ["For example, if you have four disconnected polygon islands, and set the ", {"type": "code", "text": ["path"]}, " attribute to:"], "extent": [2625, 2727]}, {"lang": null, "type": "pre", "indent": 8, "text": ["\n        island`@piece`\n        "], "extent": [2727, 2774]}, {"type": "para", "indent": 8, "text": ["Then the islands will be imported as mesh prims named ", {"type": "code", "text": ["island0"]}, ", ", {"type": "code", "text": ["island1"]}, ", ", {"type": "code", "text": ["island2"]}, ", and ", {"type": "code", "text": ["island3"]}, ", under the ", {"type": "ui", "text": ["Import path prefix"]}, "."], "extent": [2774, 2921]}], "container": true}], "container": true}], "container": true}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Enabling parameters"], "extent": [2921, 2947], "body": [{"type": "para", "indent": 0, "text": ["Many parameters on this node are preceded by a checkbox to enable the parameter. These check boxes control which options will actually be authored by this node and passed to the SOP conversion process."], "extent": [2947, 3151]}, {"type": "para", "indent": 0, "text": ["If a parameter is not enabled, the node try to get the value from a detail attribute corresponding that option. You can create these attributes on the geometry with the ", {"scheme": "Node", "value": "/nodes/sop/usdconfigure", "type": "link", "text": ["USD Configure SOP"], "fullpath": "/nodes/sop/usdconfigure"}, ". If it doesn\u2019t find an attribute, it uses the default."], "extent": [3151, 3418]}, {"type": "para", "indent": 0, "text": ["Enabling an option on this node overrides the corresponding attribute on the geometry, if it exists."], "extent": [3418, 3521]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Tips"], "extent": [3521, 3532], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": ["You can import packed primitives from SOPs as USD native instances, or as a point instancer."], "extent": [3532, 3629]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["This node does not import material information (other than being able to create USD primvars or geometry subsets from the ", {"type": "code", "text": ["shop_materialpath"]}, " SOP attribute)."], "extent": [3629, 3790], "body": [{"type": "para", "indent": 4, "text": ["To retrieve both the geometry and generate USD materials for an object authored in Houdini, you can use a SOP Create node, or a combination of a SOP Import to import the geometry, a ", {"scheme": "Node", "value": "/nodes/lop/materiallibrary", "type": "link", "text": ["Material Library LOP"], "fullpath": "/nodes/lop/materiallibrary"}, " to bring in the materials, and a ", {"scheme": "Node", "value": "/nodes/lop/materialassign", "type": "link", "text": ["Material Assign LOP"], "fullpath": "/nodes/lop/materialassign"}, " to bind the two together."], "extent": [3790, 4130]}, {"type": "para", "indent": 4, "text": ["You could also use a ", {"scheme": "Node", "value": "/nodes/lop/sceneimport", "type": "link", "text": ["Scene Import LOP"], "fullpath": "/nodes/lop/sceneimport"}, " to import geometry and materials with a single node, but it provides fewer control over the import process."], "extent": [4130, 4304]}], "container": true}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["Houdini\u2019s shape SOPs (such as box and torus) either create polygonal meshes, or have the option to create polygons instead of mathematical primitives. Even though USD has mathematical primitives for Cube and Torus, if the original SOP output a polygonal mesh, it will be imported into USD as a polygonal mesh."], "extent": [4304, 4618]}], "container": true}]}, {"level": 1, "id": "parameters", "container": true, "type": "parameters_section", "indent": 0, "role": "section", "extent": [4618, 4630], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["SOP Path"], "extent": [4630, 4641], "body": [{"type": "para", "indent": 4, "text": ["Node path to the SOP node you want to import from."], "extent": [4641, 4697]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Load As Reference"], "extent": [4697, 4716], "body": [{"type": "para", "indent": 4, "text": ["When this is on, the geometry will be imported as a ", {"scheme": null, "value": "/solaris/usd#payloads", "type": "link", "text": ["payload"], "fullpath": "/solaris/usd#payloads", "fragment": "#payloads"}, ". When this is off, the geometry will be imported by sublayering its hierarchy over the existing scene tree (see ", {"scheme": null, "value": "/solaris/usd#sublayers", "type": "link", "text": ["sublayers and references"], "fullpath": "/solaris/usd#sublayers", "fragment": "#sublayers"}, ")."], "extent": [4738, 4991]}], "container": true, "attrs": {"id": "asreference"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Copy Contents Into Editable Layer"], "extent": [4991, 5026], "body": [{"type": "para", "indent": 4, "text": ["(When ", {"type": "ui", "text": ["Load as reference"]}, " is off.) By default, geometry imported from SOPs is treated like geometry imported from a file on disk: you can only edit it by applying stronger ", {"scheme": null, "value": "/solaris/usd#compose", "type": "link", "text": ["opinions"], "fullpath": "/solaris/usd#compose", "fragment": "#compose"}, " on top. If you turn this on, however, this node puts the geometry in the ", {"type": "em", "text": ["active layer"]}, ", so it can be modified by LOP nodes connected to this node\u2019s output."], "extent": [5049, 5417]}, {"type": "para", "indent": 4, "text": ["The node does this by copying the contents generated from the SOP geometry into an anonymous in-memory USD layer. This is slower, but provides more options for how many USD layers you need to write to disk, and what goes in each layer. This is similar to the operation of a ", {"scheme": "Node", "value": "/nodes/lop/loadlayer", "type": "link", "text": ["Load Layer for Editing LOP"], "fullpath": "/nodes/lop/loadlayer"}, "."], "extent": [5417, 5745]}], "container": true, "attrs": {"id": "copycontents"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Adjust Transforms for Input Hierarchy"], "extent": [5745, 5784], "body": [{"type": "para", "indent": 4, "text": ["(When ", {"type": "ui", "text": ["Load as reference"]}, " is off.) When this is on (the default), the node automatically compensates for transform problems created if you round-trip geometry from LOPs to SOPs (as packed USD primitives) and then back to LOPs again. If you know you are not round-tripping LOPs  \u2192 SOP packed USD primitives  \u2192 LOPs, you can turn this off to make importing faster."], "extent": [5815, 6185]}, {"type": "para", "indent": 4, "text": ["Packed Primitives in SOPs only have a single transform, representing the full local-to-world transformation of the packed geometry. If you export a USD geometry primitive to SOPs ", {"type": "em", "text": ["as a packed USD primitive"]}, ", Houdini flattens the full transformation hierarchy under the USD prim into a single transformation matrix."], "extent": [6185, 6505]}, {"type": "para", "indent": 4, "text": ["This creates a problem if you then ", {"type": "q", "text": ["round-trip"]}, " the SOP packed primitive back into LOPs, as the descendants will have their own transforms, which are ", {"type": "em", "text": ["also"]}, " now incorporated into the root prim\u2019s transform imported from SOPs. This results in an incorrect double-application of the transforms."], "extent": [6505, 6802]}, {"type": "para", "indent": 4, "text": ["When this parameter is on (the default), the node examines every transformation imported from SOPs, in the context of the prim\u2019s location in the scene graph hierarchy. If the prim (or its ancestors) already exist on the input stage, the node inverts the transformations of the ancestor prims, and applies them as additional local transformations on the prim. This ensures that the final world space location of the prim in LOPS will be the same as it was in SOPs."], "extent": [6802, 7271]}, {"type": "para", "indent": 4, "text": ["If ", {"type": "ui", "text": ["Copy Contents Into Editable Layer"]}, " is on, the node applies these additional transforms directly to the imported primitives, otherwise the node creates a new active layer and puts the transforms in the new layer as overrides."], "extent": [7271, 7507]}], "container": true, "attrs": {"id": "adjustxformsforinput"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Bind Materials"], "extent": [7507, 7523], "body": [{"type": "para", "indent": 4, "text": ["If enabled, binds materials to the imported USD primitives based on the ", {"type": "code", "text": ["usdmaterialpath"]}, " SOP attribute.\n    The ", {"type": "code", "text": ["usdmaterialpath"]}, " value can specify either the path to a material primitive, or the path to another primitive to copy the material binding from.\n    If the ", {"type": "ui", "text": ["Partition Attributes"]}, " include a ", {"type": "code", "text": ["materialBind"]}, " SOP attribute, material bindings can also be created for the resulting geometry subsets."], "extent": [7546, 7959]}], "container": true, "attrs": {"id": "bindmaterials"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Reference Type"], "extent": [7959, 7975], "body": [{"type": "para", "indent": 4, "text": ["(When ", {"type": "ui", "text": ["Load as reference"]}, " is on.) Control whether the SOP geometry is added to the reference primitive as a Payload or Reference composition arc. Also indicates whether this new composition arc should be made stronger or weaker than existing composition arcs on this primitive."], "extent": [7993, 8278]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Weaker Payload"], "extent": [8278, 8298], "body": [{"type": "para", "indent": 8, "text": ["Create a Payload composition arc that provides weaker opinions than existing payloads."], "extent": [8298, 8394]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Stronger Payload"], "extent": [8394, 8416], "body": [{"type": "para", "indent": 8, "text": ["Create a Payload composition arc that provides stronger opinions than existing payloads."], "extent": [8416, 8514]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Weaker Reference"], "extent": [8514, 8536], "body": [{"type": "para", "indent": 8, "text": ["Create a Reference composition arc that provides weaker opinions than existing references."], "extent": [8536, 8636]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Stronger Reference"], "extent": [8636, 8660], "body": [{"type": "para", "indent": 8, "text": ["Create a Reference composition arc that provides stronger opinions than existing references."], "extent": [8660, 8762]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "reftype"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Reference Primitive"], "extent": [8762, 8783], "body": [{"type": "para", "indent": 4, "text": ["(When ", {"type": "ui", "text": ["Load as reference"]}, " is on.) This node treats the converted geometry like an external USD geometry file. This controls which root-level prim to import from the USD prim hierarchy generated by converting the SOP geometry. You should leave this set to ", {"type": "q", "text": ["Reference Automatically Chosen Primitive"]}, "."], "extent": [8801, 9107]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Reference Automatically Chosen Primitive"], "extent": [9107, 9153], "body": [{"type": "para", "indent": 8, "text": ["If the referenced file has a ", {"scheme": null, "value": "/solaris/usd#default_prim", "type": "link", "text": ["default primitive"], "fullpath": "/solaris/usd#default_prim", "fragment": "#default_prim"}, " set, use that. If there is no default prim, use the first Xform prim at the root. If there is no Xform prim at the root, use the first root prim of any type."], "extent": [9153, 9395]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Reference Default Primitive"], "extent": [9395, 9428], "body": [{"type": "para", "indent": 8, "text": ["If the referenced file has a ", {"scheme": null, "value": "/solaris/usd#default_prim", "type": "link", "text": ["default primitive"], "fullpath": "/solaris/usd#default_prim", "fragment": "#default_prim"}, " set, use that. If not, display a warning on this node."], "extent": [9428, 9567]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Reference Specific Primitive"], "extent": [9567, 9601], "body": [{"type": "para", "indent": 8, "text": ["Reference in the scene graph path in the ", {"type": "ui", "text": ["Reference primitive path"]}, " parameter."], "extent": [9601, 9691]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "refprim"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Reference Primitive Path"], "extent": [9691, 9717], "body": [{"type": "para", "indent": 4, "text": ["When ", {"type": "ui", "text": ["Reference primitive"]}, " is ", {"type": "q", "text": ["Reference specific primitive"]}, ", this is the scene graph path to the prim to reference in."], "extent": [9483, 9610]}, {"type": "para", "indent": 4, "text": ["(If you set this field ", {"type": "code", "text": ["automaticPrim"]}, " or ", {"type": "code", "text": ["defaultPrim"]}, ", it mimics the behavior of setting ", {"type": "ui", "text": ["Reference primitive"]}, " to ", {"type": "q", "text": ["Reference automatically chosen primitive"]}, " or ", {"type": "q", "text": ["Reference default primitive"]}, ".)"], "extent": [9610, 9812]}], "container": true, "attrs": {"id": "refprimpath"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Primitive Path"], "extent": [6850, 6866], "body": [{"type": "para", "indent": 4, "text": ["In create mode, this parameter specifies a single primitive path. This is the scene graph path where the referenced branch will be attached. If this prim doesn\u2019t exist, the node will create it. In edit mode, this parameter is a primitive pattern that will be matched against the existing primitives on the stage connected to this node\u2019s first input. You can use ", {"scheme": null, "value": "#locals", "type": "link", "text": ["local variables"], "fullpath": "/nodes/lop/reference#locals", "fragment": "#locals"}, " to control the reference primitive path."], "extent": [6885, 7319]}], "container": true, "attrs": {"id": "primpath"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Make Instanceable"], "extent": [8143, 8162], "body": [{"type": "para", "indent": 4, "text": ["Mark the new or modified prims as ", {"scheme": null, "value": "/solaris/usd#instancing", "type": "link", "text": ["instanceable (as in ", {"type": "q", "text": ["native instancing"]}, ")"], "fullpath": "/solaris/usd#instancing", "fragment": "#instancing"}, ". This saves memory if you reference the same branch into multiple places, but makes the descendants of the referenced prim not editable. If this option is off, the prims are not explicitly marked as not instanceable. Instead, the current instanceable value on each prim is left unchanged."], "extent": [8185, 8580]}], "container": true, "attrs": {"id": "instanceable"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Parent Primitive Kind"], "extent": [9843, 9866], "body": [{"type": "para", "indent": 4, "text": ["If the prim at ", {"type": "ui", "text": ["Primitive path"]}, " doesn\u2019t exist, this node will create it. If it has to create the prim, it will give any intermediate prims it has to create this ", {"scheme": null, "value": "/solaris/usd#kinds", "type": "link", "text": ["kind"], "fullpath": "/solaris/usd#kinds", "fragment": "#kinds"}, "."], "extent": [9891, 10086]}], "container": true, "attrs": {"id": "parentprimkind"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Parent Primitive Type"], "extent": [18263, 18286], "body": [{"type": "para", "indent": 4, "text": ["If the prim at ", {"type": "ui", "text": ["Primitive path"]}, " doesn\u2019t exist, this node will create it. If it has to create the prim, it will give any intermediate prims it has to create this type."], "extent": [18311, 18486]}], "container": true, "attrs": {"id": "parentprimtype"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Import Group"], "extent": [10122, 10136], "body": [{"type": "para", "indent": 4, "text": ["Turn this on and specify a group name (or a space-separated list of ", {"scheme": null, "value": "/model/groups", "type": "link", "text": ["group syntax"], "fullpath": "/model/groups"}, ") to import. If you turn this on but leave the field blank, it imports all geometry."], "extent": [10152, 10338]}], "container": true, "attrs": {"id": "group"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Import Group Type"], "extent": [10338, 10357], "body": [{"type": "para", "indent": 4, "text": ["When enabled, specifies the whether the ", {"type": "ui", "text": ["Import Group"]}, " is a point or primitive group."], "extent": [10377, 10470]}], "container": true, "attrs": {"id": "grouptype"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Import Path Prefix"], "extent": [10470, 10490], "body": [{"type": "para", "indent": 4, "text": ["If a prim being imported has an automatically generated name (like ", {"type": "code", "text": ["mesh_0"]}, ") because it had no path primitive, or if it has a path primitive but the path is relative (does not start with ", {"type": "code", "text": ["/"]}, "), the node automatically prefixes the name/path fragment with this path. This is a way of keeping ", {"type": "q", "text": ["un-pathed"]}, " prims organized under a single branch. (See ", {"scheme": null, "value": "/solaris/sop_import", "type": "link", "text": ["how to create geometry hierarchy"], "fullpath": "/solaris/sop_import"}, ".)"], "extent": [10511, 10918]}, {"type": "para", "indent": 4, "text": ["(The default is ", {"type": "code", "text": ["/$OS"]}, " which puts ", {"type": "q", "text": ["un-pathed"]}, " prims under a root prim with the name of this node.)"], "extent": [10918, 11022]}], "container": true, "attrs": {"id": "pathprefix"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Layer Save Path"], "extent": [11022, 11039], "body": [{"type": "para", "indent": 4, "text": ["When this is turned on, set the Save Path metadata for the layer containing the geometry to this file path. When you write out USD using a ", {"scheme": "Node", "value": "/nodes/out/usd", "type": "link", "text": ["USD render node"], "fullpath": "/nodes/out/usd"}, ", the geometry will be saved out to a ", {"type": "code", "text": [".usd"]}, " layer file using this file path (after ", {"scheme": null, "value": "/solaris/output#processors", "type": "link", "text": ["output processing"], "fullpath": "/solaris/output#processors", "fragment": "#processors"}, ")."], "extent": [11058, 11365]}], "container": true, "attrs": {"id": "savepath"}, "role": "item"}], "container": true, "role": "item_group"}, {"level": 2, "id": "prim_def", "container": true, "type": "h", "indent": 0, "text": ["Primitive Definition"], "extent": [16, 54], "body": [{"type": "para", "indent": 0, "text": ["Parameters in this group guide the translation process in terms of how USD primitives are generated from the source SOP geometry."], "extent": [54, 186]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Packed USD Primitives"], "extent": [186, 209], "body": [{"type": "para", "indent": 4, "text": ["What to do with packed USD primitives in the imported SOP geometry."], "extent": [236, 313]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Overlay Transforms"], "extent": [313, 337], "body": [{"type": "para", "indent": 8, "text": ["Import the transformation of the packed USD primitive as an override (", {"type": "code", "text": ["Over"]}, ") prim. This makes it easy to transform the packed USD prims without unpacking them."], "extent": [337, 507]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Ignore"], "extent": [507, 519], "body": [{"type": "para", "indent": 8, "text": ["Ignore packed USD primitives in the source SOP geometry."], "extent": [519, 585]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "packedusdhandling"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Other Primitives"], "extent": [585, 603], "body": [{"type": "para", "indent": 4, "text": ["What to do with regular non-packed primitives (points, curves, polygons, spheres, and so on)."], "extent": [630, 729]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Define"], "extent": [729, 741], "body": [{"type": "para", "indent": 8, "text": ["Create the USD prims for the imported geometry if they don\u2019t already exist. This is the standard way to import geometry."], "extent": [741, 871]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Overlay"], "extent": [871, 884], "body": [{"type": "para", "indent": 8, "text": ["Create the USD prims as overrides. They will only be visible as changes to any prims that exist at a lower level with the same paths. This may be useful where you only want to import and modify certain attributes from SOPs onto existing USD geometry."], "extent": [884, 1144]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Overlay Transforms"], "extent": [1144, 1168], "body": [{"type": "para", "indent": 8, "text": ["Like ", {"type": "q", "text": ["Overlay"]}, ", but only imports transform data."], "extent": [1168, 1226]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "otherprimhandling"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Define Only Leaf Primitives"], "extent": [1226, 1255], "body": [{"type": "para", "indent": 4, "text": ["Author intermediate primitives (for example, any ", {"type": "code", "text": ["Xform"]}, " prims created for the ", {"type": "ui", "text": ["Import path prefix"]}, ") as overrides instead of definitions. This means if they don\u2019t match up with underlying prims in lower layers, the leaf prims won\u2019t be added to the scene. This is useful if you only want to import the geometry if its ancestors already exist in the scene tree."], "extent": [1284, 1651]}, {"type": "para", "indent": 4, "text": ["(Note that all of the data is still imported, it just may not be visible in the scene graph tree or the viewport.)"], "extent": [1651, 1771]}], "container": true, "attrs": {"id": "defineonlyleafprims"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Packed Primitives"], "extent": [1771, 1790], "body": [{"type": "para", "indent": 4, "text": ["What to do with SOP-native packed primitives."], "extent": [1814, 1865]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Create Xforms"], "extent": [1865, 1884], "body": [{"type": "para", "indent": 8, "text": ["Creates an ", {"type": "code", "text": ["Xform"]}, " prim from the packed primitive\u2019s transform and attributes, and the packed primitive\u2019s geometry is imported underneath."], "extent": [1884, 2031]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Create Native Instances"], "extent": [2031, 2060], "body": [{"type": "para", "indent": 8, "text": ["Import the geometry in packed primitives as ", {"scheme": null, "value": "/solaris/usd#instancing", "type": "link", "text": ["instanceable references"], "fullpath": "/solaris/usd#instancing", "fragment": "#instancing"}, ". This imports each piece as a prototype under a ", {"type": "code", "text": ["Prototypes"]}, " prim under the ", {"type": "ui", "text": ["Import Path Prefix"]}, " prim."], "extent": [2060, 2268]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Create Point Instancer"], "extent": [2268, 2296], "body": [{"type": "para", "indent": 8, "text": ["Import the geometry in packed primitives as ", {"scheme": null, "value": "/solaris/usd#instancing", "type": "link", "text": ["point instanced geometry"], "fullpath": "/solaris/usd#instancing", "fragment": "#instancing"}, ". This imports each unique piece as a prototype under the point instancer prim."], "extent": [2296, 2479]}, {"type": "para", "indent": 8, "text": ["You can assign a SOP primitive attribute to the packed primitive named ", {"type": "code", "text": ["usdinstancerpath"]}, " to specify the USD scene graph path of the instancer."], "extent": [2479, 2632]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Unpack"], "extent": [2632, 2644], "body": [{"type": "para", "indent": 8, "text": ["Only imports the packed primitive\u2019s geometry.\n        Unlike the ", {"type": "ui", "text": ["Create Xforms"]}, " mode, this does not create any additional hierarchy, and is equivalent to ", {"scheme": "Node", "value": "/nodes/sop/unpack", "type": "link", "text": ["unpacking"], "fullpath": "/nodes/sop/unpack"}, " the packed primitive prior to being imported.\n        This can be useful for importing multiple pieces of geometry without merging their attributes."], "extent": [2644, 2987]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "packedhandling"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Agents"], "extent": [2987, 2995], "body": [{"type": "para", "indent": 4, "text": ["What to do with ", {"scheme": null, "value": "/crowds/agents", "type": "link", "text": ["agent primitives"], "fullpath": "/crowds/agents"}, ".\n    In all modes, a prim is created from the agent primitive\u2019s transform and attributes, and the agent\u2019s geometry and animation are imported underneath."], "extent": [3018, 3227]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Create Instanced SkelRoots"], "extent": [3227, 3259], "body": [{"type": "para", "indent": 8, "text": ["Imports the agent\u2019s skeleton and geometry as ", {"scheme": null, "value": "/solaris/usd#instancing", "type": "link", "text": ["instanceable references"], "fullpath": "/solaris/usd#instancing", "fragment": "#instancing"}, " to a ", {"type": "code", "text": ["SkelRoot"]}, " prim enclosing the skeleton and skinned primitives.\n        This imports each unique agent definition as a prototype under an ", {"type": "code", "text": ["agentdefinitions"]}, " prim under the ", {"type": "ui", "text": ["Import Path Prefix"]}, " prim."], "extent": [3259, 3568]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Create SkelRoots"], "extent": [3568, 3590], "body": [{"type": "para", "indent": 8, "text": ["Creates a ", {"type": "code", "text": ["SkelRoot"]}, " prim enclosing the agent\u2019s skeleton and skinned geometry, which is imported underneath.\n        This will be less efficient than ", {"type": "ui", "text": ["Create Instanced SkelRoots"]}, " for a large crowd, but can be useful for e.g. importing a single character where instancing is unnecessary."], "extent": [3590, 3888]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Create Instanced Skeletons"], "extent": [3888, 3920], "body": [{"type": "para", "indent": 8, "text": ["Imports the agent\u2019s skeleton as an ", {"scheme": null, "value": "/solaris/usd#instancing", "type": "link", "text": ["instanceable reference"], "fullpath": "/solaris/usd#instancing", "fragment": "#instancing"}, " to a ", {"type": "code", "text": ["Skeleton"]}, " prim.\n        This imports each unique agent definition as a prototype under an ", {"type": "code", "text": ["agentdefinitions"]}, " prim under the ", {"type": "ui", "text": ["Import Path Prefix"]}, " prim."], "extent": [3920, 4172]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Create Skeletons"], "extent": [4172, 4194], "body": [{"type": "para", "indent": 8, "text": ["Imports the agent\u2019s skeleton as a ", {"type": "code", "text": ["Skeleton"]}, " prim under the agent\u2019s ", {"type": "code", "text": ["Xform"]}, " prim.\n        This will be less efficient than ", {"type": "ui", "text": ["Create Instanced Skeletons"]}, " for a large crowd, but can be useful for e.g. importing a single character where instancing is unnecessary."], "extent": [4194, 4465]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Create SkelAnimations"], "extent": [4465, 4492], "body": [{"type": "para", "indent": 8, "text": ["Only imports the agent\u2019s joint animation, creating a ", {"type": "code", "text": ["SkelAnimation"]}, " prim.\n        This can be used to efficiently import a sequence of frames, since the agent\u2019s skeleton and rest geometry are typically unchanged between frames."], "extent": [4492, 4730]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "agenthandling"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["NURBS Curves"], "extent": [4730, 4744], "body": [{"type": "para", "indent": 4, "text": ["What to do with NURBS curve primitives."], "extent": [4772, 4817]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Convert to Basis Curves"], "extent": [4817, 4846], "body": [{"type": "para", "indent": 8, "text": ["Import the curves as a ", {"type": "code", "text": ["BasisCurves"]}, " primitive.\n        This only supports cubic curves, but is useful for ", {"scheme": null, "value": "/solaris/usd#render", "type": "link", "text": ["rendering through Hydra"], "fullpath": "/solaris/usd#render", "fragment": "#render"}, "."], "extent": [4846, 5009]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Create NURBS Curves"], "extent": [5009, 5034], "body": [{"type": "para", "indent": 8, "text": ["Import the curves as a ", {"type": "code", "text": ["NurbsCurves"]}, " primitive.\n        This provides complete round-tripping of NURBS curves, but has limited support for ", {"scheme": null, "value": "/solaris/usd#rendering", "type": "link", "text": ["rendering through Hydra"], "fullpath": "/solaris/usd#rendering", "fragment": "#rendering"}, "."], "extent": [5034, 5232]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "nurbscurvehandling"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["NURBS Surfaces"], "extent": [5232, 5248], "body": [{"type": "para", "indent": 4, "text": ["What to do with NURBS surface primitives."], "extent": [5275, 5322]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Convert to Meshes"], "extent": [5322, 5345], "body": [{"type": "para", "indent": 8, "text": ["Import the surface as a ", {"type": "code", "text": ["Mesh"]}, " primitive, which can be useful for ", {"scheme": null, "value": "/solaris/usd#render", "type": "link", "text": ["rendering through Hydra"], "fullpath": "/solaris/usd#render", "fragment": "#render"}, "."], "extent": [5345, 5467]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Create NURBS Patches"], "extent": [5467, 5493], "body": [{"type": "para", "indent": 8, "text": ["Import the surface as a ", {"type": "code", "text": ["NurbsPatch"]}, " primitive.\n        This can be useful for round-tripping of NURBS surfaces, but has limited support for ", {"scheme": null, "value": "/solaris/usd#rendering", "type": "link", "text": ["rendering through Hydra"], "fullpath": "/solaris/usd#rendering", "fragment": "#rendering"}, "."], "extent": [5493, 5693]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "nurbssurfhandling"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Kind Authoring"], "extent": [5693, 5709], "body": [{"type": "para", "indent": 4, "text": ["How to assign ", {"scheme": null, "value": "/solaris/usd#kinds", "type": "link", "text": ["kinds"], "fullpath": "/solaris/usd#kinds", "fragment": "#kinds"}, " to imported prims."], "extent": [5729, 5794]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["All Geometry is One Component"], "extent": [5794, 5829], "body": [{"type": "para", "indent": 8, "text": ["Set root primitives in the imported tree to Component. Do not set kinds on descendants."], "extent": [5829, 5926]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Nested Groups and Components"], "extent": [5926, 5960], "body": [{"type": "para", "indent": 8, "text": ["Set leaf primitives in the imported tree to Component. Set branch primitives to Group."], "extent": [5960, 6056]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Nested Assembly, Groups, and Components"], "extent": [6056, 6101], "body": [{"type": "para", "indent": 8, "text": ["Set root prims in the imported tree to Assembly. Set intermediate branch prims to Group. Set leaf prims to Component."], "extent": [6101, 6228]}], "container": true}, {"type": "dt", "indent": 4, "text": ["None"], "extent": [6228, 6238], "body": [{"type": "para", "indent": 8, "text": ["Do not set kinds on the imported prims."], "extent": [6238, 6287]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "kindschema"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Path Attributes"], "extent": [6287, 6304], "body": [{"type": "para", "indent": 4, "text": ["A (comma or space-separated) list of names of SOP ", {"type": "strong", "text": ["primitive string attributes"]}, " to use to use as prim paths to put the SOP geometry into. The default is ", {"type": "code", "text": ["path,name"]}, ". See ", {"scheme": null, "value": "#import", "type": "link", "text": ["geometry hierarchy"], "fullpath": "/nodes/lop/_sopimport_shared#import", "fragment": "#import"}, " above."], "extent": [6322, 6533]}, {"type": "para", "indent": 4, "text": ["If the list has more than one attribute, the importer checks each attribute for the first non-empty value."], "extent": [6533, 6645]}, {"type": "para", "indent": 4, "text": ["If the string value a full path, that path is used as the USD scene graph path for that primitive. If the string is a relative path (or just a name), the string is appended to the ", {"type": "ui", "text": ["Import Path Prefix"]}, " string to generate a full scene graph path."], "extent": [6645, 6897]}, {"type": "para", "indent": 4, "text": ["If none of the listed attributes exist on a given SOP primitive, or all values are an empty string, the importer generates a name automatically (for example, ", {"type": "code", "text": ["sphere_0"]}, ")."], "extent": [6897, 7073]}], "container": true, "attrs": {"id": "pathattr"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Import HeightFields as Mesh"], "extent": [7073, 7102], "body": [{"type": "para", "indent": 4, "text": ["If the source SOP geometry contains a height field volume, it will be imported as polygonal mesh. Other layers will be imported as vertex primvar if the values are varying, or constant primvar if the values are constant."], "extent": [7130, 7356]}], "container": true, "attrs": {"id": "heightfieldconvert"}, "role": "item"}], "container": true}]}, {"level": 2, "id": "geom_handling", "container": true, "type": "h", "indent": 0, "text": ["Geometry Handling"], "extent": [7356, 7396], "body": [{"type": "para", "indent": 0, "text": ["These parameters provide options to alter the interpretation of the SOP geometry data."], "extent": [7396, 7485]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Treat Polygons as Subdivision Surfaces"], "extent": [7485, 7525], "body": [{"type": "para", "indent": 4, "text": ["For polygon meshes that are not already tagged with a subdivision scheme, author a ", {"type": "code", "text": ["subdivisionScheme"]}, " attribute set to ", {"type": "code", "text": ["catmullClark"]}, ". This will convert them to subdivision surfaces."], "extent": [7549, 7738]}], "container": true, "attrs": {"id": "polygonsassubd"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Subdivision Group"], "extent": [7738, 7757], "body": [{"type": "para", "indent": 4, "text": ["If ", {"type": "ui", "text": ["Treat Polygons as Subdivision Surfaces"]}, " is on, only convert polygons in this primitive ", {"scheme": null, "value": "/model/groups", "type": "link", "text": ["group"], "fullpath": "/model/groups"}, " into subdivision surfaces."], "extent": [7776, 7923]}], "container": true, "attrs": {"id": "subdgroup"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Reverse Polygon Vertex Ordering"], "extent": [7923, 7956], "body": [{"type": "para", "indent": 4, "text": ["USD supports an ", {"type": "code", "text": ["orientation"]}, " attribute on mesh primitives that indicates whether polygons have a left-handed or right-handed ordering, while SOP geometry is always left-handed ordering. When this option is on, the importer always reorders vertices (and associated primvars) to be right-handed."], "extent": [7981, 8281]}, {"type": "para", "indent": 4, "text": ["This is useful when round tripping right-handed oriented polygons from USD into SOPs and back into USD. The data is always converted to a left handed ordering when importing it into SOPs. If you imported the polygons back into USD without this option, they would be left-handed, unlike the original."], "extent": [8281, 8587]}], "container": true, "attrs": {"id": "reversepolygons"}, "role": "item"}], "container": true}]}, {"level": 2, "id": "import_data", "container": true, "type": "h", "indent": 0, "text": ["Import Data"], "extent": [8587, 8619], "body": [{"type": "para", "indent": 0, "text": ["These parameters affect the conversion of SOP geometry attributes into USD attributes and primvars, and the choice between default and time sampled value authoring."], "extent": [8619, 8786]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Author Time Samples"], "extent": [8786, 8807], "body": [{"type": "para", "indent": 4, "text": ["Whether values imported from SOPs should be authored as default values for the corresponding USD attributes, or as a time sample (at the time in the timeline)."], "extent": [8834, 8999]}, {"type": "para", "indent": 4, "text": ["(When the USD system is asked for an attribute value, it returns the default if no time samples exist on the attribute. Otherwise it returns a value interpolated from the time sample data.)"], "extent": [8999, 9194]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["If SOP is Time Dependent"], "extent": [9194, 9224], "body": [{"type": "para", "indent": 8, "text": ["If the SOP node the geometry comes from is time-dependent (is animated or contains animated values), write time samples. Otherwise, write defaults."], "extent": [9224, 9381]}], "container": true}, {"type": "dt", "indent": 4, "text": ["If Not Specifically Excluded"], "extent": [9381, 9415], "body": [{"type": "para", "indent": 8, "text": ["Author all values as time samples except for attributes listed in the ", {"type": "ui", "text": ["Single Value Attributes"]}, " parameter."], "extent": [9415, 9533]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Never"], "extent": [9533, 9544], "body": [{"type": "para", "indent": 8, "text": ["Author all values as defaults."], "extent": [9544, 9584]}], "container": true}], "container": true}, {"type": "para", "indent": 4, "text": ["(This is the only parameter on this node you can\u2019t pre-configure on the geometry with the ", {"scheme": "Node", "value": "/nodes/sop/usdconfigure", "type": "link", "text": ["USD Configure SOP"], "fullpath": "/nodes/sop/usdconfigure"}, ". This is because it requires a ", {"type": "q", "text": ["live"]}, " SOP, not just attribute values embedded in the geometry.)"], "extent": [9584, 9817]}], "container": true, "attrs": {"id": "authortimesamples"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Topology Attributes"], "extent": [9817, 9838], "body": [{"type": "para", "indent": 4, "text": ["Controls whether USD topology attributes should be authored as time sampled or default values."], "extent": [9864, 9964]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Animated"], "extent": [9964, 9978], "body": [{"type": "para", "indent": 8, "text": ["If you know that topology is changing in the source geometry over time, choose this option to record topology attributes as time samples in the USD scene graph. Having animated topology can be very expensive during playback, so only use this option when necessary."], "extent": [9978, 10252]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Static"], "extent": [10252, 10264], "body": [{"type": "para", "indent": 8, "text": ["Write topology attributes as default values. This can make playback much faster, but limits how the topology can change over time."], "extent": [10264, 10404]}], "container": true}, {"type": "dt", "indent": 4, "text": ["None"], "extent": [10404, 10414], "body": [{"type": "para", "indent": 8, "text": ["Do not author topology attributes."], "extent": [10414, 10458]}, {"type": "para", "indent": 8, "text": ["This is useful when USD data is sent to SOPs for processing, then brought back into LOPs. Using this option tells the importer that the geometry topology has not changed in this process, so only the changing point positions or other primvars will be imported."], "extent": [10458, 10727]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "topologyhandling"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Attributes"], "extent": [10727, 10739], "body": [{"type": "para", "indent": 4, "text": ["A space-separated list of attribute names/patterns specifying which SOP attributes to import into USD as primvars."], "extent": [10756, 10876]}, {"type": "para", "indent": 4, "text": ["In addition to matching attribute names directly, there are some values with special meanings:"], "extent": [10876, 10976]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["bounds"]}], "extent": [10976, 10990], "body": [{"type": "para", "indent": 8, "text": ["Authors the USD ", {"type": "code", "text": ["extent"]}, " attribute using the calculated bounding box of the associated SOP geometry."], "extent": [10990, 11100]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["visibility"]}], "extent": [11100, 11118], "body": [{"type": "para", "indent": 8, "text": ["Authors the USD visibility attribute based on the value of the ", {"type": "code", "text": ["usdvisibility"]}, " geometry attribute."], "extent": [11118, 11226]}], "container": true}], "container": true}, {"type": "para", "indent": 4, "text": ["See ", {"scheme": null, "value": "/solaris/sop_import#attrs", "type": "link", "text": ["importing attributes"], "fullpath": "/solaris/sop_import#attrs", "fragment": "#attrs"}, " for information on how the importer deals converts certain well-known Houdini attributes to their USD equivalents."], "extent": [11226, 11399]}], "container": true, "attrs": {"id": "attribs"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Indexed Attributes"], "extent": [11399, 11419], "body": [{"type": "para", "indent": 4, "text": ["A space-separated list of attribute names/patterns specifying which SOP attributes to import into USD as indexed primvars."], "extent": [11441, 11569]}, {"type": "para", "indent": 4, "text": ["If a SOP attribute matches this pattern, the importer authors the primvar as an indexed array of values (that is, an array of values call ", {"type": "code", "text": ["primvars:", {"type": "var", "text": ["name"]}]}, ", and an array of indices into those values called ", {"type": "code", "text": ["primvars:", {"type": "var", "text": ["name"]}, ":indices"]}, ")."], "extent": [11569, 11812]}, {"type": "para", "indent": 4, "text": ["Preparing an indexed primvar can be expensive for attributes that are not integers or strings. You should only use indexed primvars where it is likely to result in significant savings in storage size due to a small number of unique values being used across a large number of components."], "extent": [11812, 12104]}], "container": true, "attrs": {"id": "indexattribs"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Import as Single Element Array"], "extent": [12104, 12136], "body": [{"type": "para", "indent": 4, "text": ["A space-separated list of attribute names/patterns specifying which SOP attributes to import into USD as primvars with ", {"type": "code", "text": ["Constant"]}, " interpolation (an array with a single value for the whole primitive), regardless of whether the SOP geometry attribute is a point, primitive, or vertex attribute. If multiple values could be chosen for a particular USD primitive, the importer chooses the first value it encounters.\n    Importing as a single element array (versus ", {"type": "ui", "text": ["Import as Single Value"]}, ") can be useful since it allows the primvar\u2019s interpolation to be overridden without changing the primvar\u2019s type."], "extent": [12161, 12766]}], "container": true, "attrs": {"id": "constantattribs"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Import as Single Value"], "extent": [12766, 12790], "body": [{"type": "para", "indent": 4, "text": ["A space-separated list of attribute names/patterns specifying which SOP attributes to import into USD as primvars with ", {"type": "code", "text": ["Constant"]}, " interpolation and a single value for the whole primitive, regardless of whether the SOP geometry attribute is a point, primitive, or vertex attribute. If multiple values could be chosen for a particular USD primitive, the importer chooses the first value it encounters.\n    This is the default behavior for how detail attributes are imported.\n    This is similar to ", {"type": "ui", "text": ["Import as Single Element Array"]}, ", but the primvar\u2019s type is a scalar value instead of an array with a single element (for example, ", {"type": "code", "text": ["vector3f"]}, " instead of ", {"type": "code", "text": ["vector3f[]"]}, ")."], "extent": [12821, 13492]}], "container": true, "attrs": {"id": "scalarconstantattribs"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Boolean Attributes"], "extent": [13492, 13512], "body": [{"type": "para", "indent": 4, "text": ["A space-separated list of attribute names/patterns specifying which integer SOP attributes should be converted to primvars of type ", {"type": "code", "text": ["bool"]}, "."], "extent": [13533, 13677]}], "container": true, "attrs": {"id": "boolattribs"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Set Default Values"], "extent": [13677, 13697], "body": [{"type": "para", "indent": 4, "text": ["A space-separated list of attribute names/patterns specifying which SOP attributes to always author as default values for USD primvars (never time samples). This is the list of exclusions when ", {"type": "ui", "text": ["Author Time Samples"]}, " is set to ", {"type": "q", "text": ["If Not Specifically Excluded"]}, "."], "extent": [13720, 13984]}], "container": true, "attrs": {"id": "staticattribs"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Partition Attributes"], "extent": [13984, 14006], "body": [{"type": "para", "indent": 4, "text": ["A space-separated list of attribute names/patterns specifying which SOP primitive string attributes represent subsets of the geometry. For mesh and curve primitives, the importer puts elements with the same value for this attribute into their own geometry subsets."], "extent": [14032, 14302]}, {"type": "para", "indent": 4, "text": ["The importer will try to set the subset name to the attribute value, but may need to change the name make it a legal USD primitive name. The importer stores the raw attribute value on the geometry subset prim as Custom Data with the key ", {"type": "code", "text": ["partitionValue"]}, "."], "extent": [14302, 14562]}], "container": true, "attrs": {"id": "partitionattribs"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Prefix Subsets with Attribute Name"], "extent": [14562, 14598], "body": [{"type": "para", "indent": 4, "text": ["When creating subsets from ", {"type": "ui", "text": ["Partition Attributes"]}, ", the subsets are named by combining the attribute name with the partition attribute\u2019s value (a string or integer).\n    This avoids name collisions when multiple partition attributes contain the same values, but can be undesirable if precise control of the subset names is required.\n    For string attributes, if this option is disabled the attribute values will be directly used as the subset names."], "extent": [14630, 15087]}], "container": true, "attrs": {"id": "prefixpartitionsubsets"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Subset Groups"], "extent": [15087, 15102], "body": [{"type": "para", "indent": 4, "text": ["A space-separated list of group names/patterns specifying SOP primitive ", {"scheme": null, "value": "/model/groups", "type": "link", "text": ["groups"], "fullpath": "/model/groups"}, ". SOP polygon and curve primitives in each group will be imported as a geometry subset, named for the group."], "extent": [15124, 15332]}], "container": true, "attrs": {"id": "subsetgroups"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["USD Custom Attributes"], "extent": [15332, 15355], "body": [{"type": "para", "indent": 4, "text": ["A space-separated list of attribute names/patterns specifying which SOP attributes to import into USD as attributes (rather than primvars)."], "extent": [15378, 15523]}], "container": true, "attrs": {"id": "customattribs"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Translate UV Attribute to ST"], "extent": [15523, 15553], "body": [{"type": "para", "indent": 4, "text": ["Convert the SOP vertex attribute ", {"type": "code", "text": ["uv"]}, " into a USD primvar called ", {"type": "code", "text": ["primvars:st"]}, ". Whether you need to turn this on depends on which renderer you are using and how your shaders are authored. If you are rendering with Karma, leave this off."], "extent": [15578, 15819]}, {"type": "para", "indent": 4, "text": ["(As of this writing there is no strict standard for texture coordinate naming in USD, but the use of ", {"type": "code", "text": ["st"]}, " is a common convention, whereas in SOP geometry, using ", {"type": "code", "text": ["uv"]}, " is the common convention.)"], "extent": [15819, 16016]}], "container": true, "attrs": {"id": "translateuvtost"}, "role": "item"}], "container": true}]}], "text": "Parameters"}, {"level": 1, "id": "related", "container": true, "type": "related_section", "indent": 0, "role": "section", "extent": [11487, 11496], "body": [{"type": "related_item_group", "body": [{"ext": null, "type": "related_item", "indent": 0, "text": [" ", {"scheme": "Node", "value": "/nodes/lop/sopcreate", "type": "link", "text": "", "fullpath": "/nodes/lop/sopcreate"}], "role": "item", "extent": [11496, 11521]}, {"ext": null, "type": "related_item", "indent": 0, "text": [" ", {"scheme": "Node", "value": "/nodes/sop/usdconfigure", "type": "link", "text": "", "fullpath": "/nodes/sop/usdconfigure"}], "role": "item", "extent": [11521, 11548]}, {"ext": null, "type": "related_item", "indent": 0, "text": [" ", {"scheme": "Node", "value": "/nodes/sop/usdimport", "type": "link", "text": "", "fullpath": "/nodes/sop/usdimport"}], "role": "item", "extent": [11548, 11573]}], "container": true, "role": "item_group"}], "text": "Related"}], "title": ["SOP Import"], "summary": ["Imports geometry from a SOP network into the USD scene graph."], "included": ["/nodes/lop/_sopimport_shared", "/nodes/lop/reference", "/solaris/usd"]}