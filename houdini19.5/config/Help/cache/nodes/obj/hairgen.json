{"type": "root", "attrs": {"type": "node", "context": "obj", "internal": "hairgen", "icon": "OBJ/hairgen", "version": "2.0", "since": "17.0", "namespace": null}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["Hair Generate"], "extent": [101, 119]}, {"type": "summary", "indent": 0, "text": ["Generates hair from a skin geometry and guide curves."], "extent": [119, 181]}, {"type": "para", "indent": 0, "text": ["Extracts the required skin and guide curves from a groom object such as a\n", {"scheme": "Node", "value": "/nodes/obj/guidegroom", "type": "link", "text": ["Guide Groom"], "fullpath": "/nodes/obj/guidegroom"}, ", ", {"scheme": "Node", "value": "/nodes/obj/guidedeform", "type": "link", "text": ["Guide Deform"], "fullpath": "/nodes/obj/guidedeform"}, " or\n", {"scheme": "Node", "value": "/nodes/obj/guidesim", "type": "link", "text": ["Guide Sim"], "fullpath": "/nodes/obj/guidesim"}, ". These nodes can also write their groom data to\nfiles which can be imported by this node."], "extent": [181, 450]}, {"type": "para", "indent": 0, "text": ["The generated hair can be customized using tools from the ", {"type": "ui", "text": ["Guide Process"]}, " and\n", {"type": "ui", "text": ["Guide Brushes"]}, " shelves.  These add SOP nodes to the editable network\ncontained within this node."], "extent": [450, 631]}, {"level": 1, "id": "parameters", "container": true, "type": "parameters_section", "indent": 0, "role": "section", "extent": [631, 643], "body": [{"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Groom Source"], "extent": [643, 663], "body": [{"type": "para", "indent": 0, "text": ["Loads the groom to generate hair for."], "extent": [663, 703]}, {"tag": "div", "attrs": {"id": "groomdata"}, "type": "pxml", "indent": 0, "extent": [253, 274], "body": [{"type": "note_group", "body": [{"type": "note", "indent": 4, "role": "item", "extent": [274, 284], "body": [{"type": "para", "indent": 8, "text": ["Groom data written to and read from files is expected to be packed and\n        named in a specific way. Groom nodes such as ", {"scheme": "Node", "value": "/nodes/obj/guidegroom", "type": "link", "text": ["Guide\n        Groom"], "fullpath": "/nodes/obj/guidegroom"}, ", ", {"scheme": "Node", "value": "/nodes/obj/guidedeform", "type": "link", "text": ["Guide Deform"], "fullpath": "/nodes/obj/guidedeform"}, " or\n        ", {"scheme": "Node", "value": "/nodes/obj/guidesim", "type": "link", "text": ["Guide Sim"], "fullpath": "/nodes/obj/guidesim"}, " write data in the expected format."], "extent": [284, 572]}, {"type": "para", "indent": 8, "text": ["These nodes use the ", {"scheme": "Node", "value": "/nodes/sop/guidepack", "type": "link", "text": ["Guide Pack SOP"], "fullpath": "/nodes/sop/guidepack"}, " to create these\n        groom packages and ", {"scheme": "Node", "value": "/nodes/sop/guideunpack", "type": "link", "text": ["Guide Unpack SOP"], "fullpath": "/nodes/sop/guideunpack"}, " to unpack\n        and extract bits from them."], "extent": [572, 767]}], "container": true}], "container": true, "role": "item_group"}], "container": true}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Source Mode"], "extent": [2164, 2177], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Groom Object"], "extent": [2198, 2216], "body": [{"type": "para", "indent": 8, "text": ["Load the groom from a groom object."], "extent": [2216, 2261]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Groom File"], "extent": [2261, 2277], "body": [{"type": "para", "indent": 8, "text": ["Load the groom from a file."], "extent": [2277, 2314]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "sourcemode"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Groom Object"], "extent": [2314, 2328], "body": [{"type": "para", "indent": 4, "text": ["Load the groom data from this source object."], "extent": [2356, 2406]}], "container": true, "attrs": {"id": "sourcegroomobject"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Groom File"], "extent": [2406, 2418], "body": [{"type": "para", "indent": 4, "text": ["Load the groom data from this file."], "extent": [2444, 2485]}], "container": true, "attrs": {"id": "sourcegroomfile"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Group"], "extent": [750, 757], "body": [{"type": "para", "indent": 4, "text": ["Generate curves for this group of skin primitives."], "extent": [772, 829]}], "container": true, "attrs": {"id": "group"}, "role": "item"}], "container": true, "role": "item_group"}, {"type": "include_group", "body": [{"ext": "/nodes/sop/fur_common#group", "type": "include", "indent": 0, "role": "item", "extent": [926, 965]}], "container": true, "role": "item_group"}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Use Animation"], "extent": [965, 980], "body": [{"type": "para", "indent": 4, "text": ["Generate hair using the input groom\u2019s animated skin and guides. When this is disabled, hair is generated in the rest position."], "extent": [998, 1130]}], "container": true, "attrs": {"id": "useanim"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Material"], "extent": [1130, 1140], "body": [{"type": "para", "indent": 4, "text": ["The material to render generated hair with. This is typically a ", {"scheme": "Node", "value": "/nodes/mat/hairshader", "type": "link", "text": ["Hair Shader"], "fullpath": "/nodes/mat/hairshader"}], "extent": [1168, 1272]}], "container": true, "attrs": {"id": "shop_materialpath"}, "role": "item"}], "container": true, "role": "item_group"}, {"level": 3, "id": "skinvdb", "container": true, "type": "h", "indent": 0, "text": ["Skin VDB"], "extent": [2485, 2510], "body": [{"type": "para", "indent": 0, "text": ["Options for generating or loading a VDB representation of the skin geometry.\nMany of the tools typically used within the Guide Groom object rely on this VDB\nvolume to efficiently avoid skin penetration."], "extent": [2510, 2715]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["VDB Source"], "extent": [2715, 2727], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["From Skin Geometry"], "extent": [2747, 2771], "body": [{"type": "para", "indent": 8, "text": ["Generate the VDB from the specified skin geometry."], "extent": [2771, 2831]}], "container": true}, {"type": "dt", "indent": 4, "text": ["SOP Geometry"], "extent": [2831, 2849], "body": [{"type": "para", "indent": 8, "text": ["Merge the VDB from a SOP."], "extent": [2849, 2884]}], "container": true}, {"type": "dt", "indent": 4, "text": ["File"], "extent": [2884, 2894], "body": [{"type": "para", "indent": 8, "text": ["Load the VDB from a file."], "extent": [2894, 2929]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "vdbsource"}, "role": "item"}], "container": true}, {"type": "para", "indent": 0, "text": ["Parameters for ", {"type": "ui", "text": ["From Skin Geometry"]}, ":"], "extent": [2929, 2969]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Voxel Size"], "extent": [2969, 2981], "body": [{"type": "para", "indent": 4, "text": ["Generate a VDB Volume of the skin geometry using this voxel size."], "extent": [3001, 3072]}, {"type": "para", "indent": 4, "text": ["The volume is used by SOP nodes to push curves out of the skin geometry."], "extent": [3072, 3150]}], "container": true, "attrs": {"id": "voxelsize"}, "role": "item"}], "container": true}, {"type": "para", "indent": 0, "text": ["Parameters for ", {"type": "ui", "text": ["SOP Geometry"]}, " mode:"], "extent": [3150, 3189]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["SOP Path"], "extent": [3189, 3199], "body": [{"type": "para", "indent": 4, "text": ["Merge the skin VDB from this SOP Path."], "extent": [3216, 3260]}], "container": true, "attrs": {"id": "vdbsop"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Group"], "extent": [3260, 3267], "body": [{"type": "para", "indent": 4, "text": ["The group within the SOP geometry to use."], "extent": [3289, 3336]}], "container": true, "attrs": {"id": "vdbsopgroup"}, "role": "item"}], "container": true}, {"type": "para", "indent": 0, "text": ["Parameters for ", {"type": "ui", "text": ["File"]}, " mode:"], "extent": [3336, 3367]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["File"], "extent": [3367, 3373], "body": [{"type": "para", "indent": 4, "text": ["Load the skin VDB from this file path."], "extent": [3391, 3435]}], "container": true, "attrs": {"id": "vdbfile"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Group"], "extent": [3435, 3442], "body": [{"type": "para", "indent": 4, "text": ["The group within the file to use."], "extent": [3465, 3504]}], "container": true, "attrs": {"id": "vdbfilegroup"}, "role": "item"}], "container": true}, {"type": "tip_group", "body": [{"type": "tip", "indent": 0, "role": "item", "extent": [3504, 3509], "body": [{"type": "para", "indent": 4, "text": ["If the SOP or file contains multiple volumes, use ", {"type": "code", "text": ["@name==surface"]}, " to fetch\n    the surface VDB only, since this is the only volume used by the grooming\n    tools."], "extent": [3509, 3678]}], "container": true}], "container": true, "role": "item_group"}]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["General"], "extent": [1313, 1327], "body": [{"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Distribution"], "extent": [1327, 1349], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Density"], "extent": [829, 838], "body": [{"type": "para", "indent": 4, "text": ["Scatter hair or guides at this density."], "extent": [855, 900]}, {"tag": "div", "attrs": {"id": "parmoverride"}, "type": "pxml", "indent": 0, "extent": [16, 40], "body": [{"type": "para", "indent": 4, "text": ["This parameter can be overridden using an attribute or texture. To do this, select an option from the drop-down menu next to the parameter."], "extent": [40, 185]}], "container": true}], "container": true, "attrs": {"id": "density"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Seed"], "extent": [1388, 1394], "body": [{"type": "para", "indent": 4, "text": ["The seed value used for scattering. Changing this generates a different\n    random distribution with the same density."], "extent": [1409, 1533]}], "container": true, "attrs": {"id": "seed"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Relax Iterations"], "extent": [1099, 1117], "body": [{"type": "para", "indent": 4, "text": ["The number of times to relax guide locations after scattering. Higher\n    iterations result in a more even distribution of guides at the cost of more\n    computation time."], "extent": [1150, 1327]}], "container": true, "attrs": {"id": "scatterrelaxiterations"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Guide Interpolation"], "extent": [1587, 1615], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Use Guides"], "extent": [2093, 2105], "body": [{"type": "para", "indent": 4, "text": ["Blend between the shape of nearby guide curves to determine the shape of\n    the each generated hair."], "extent": [2125, 2232]}], "container": true, "attrs": {"id": "useguides"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Assume Uniform Segment Count & Length"], "extent": [2232, 2271], "body": [{"type": "para", "indent": 4, "text": ["Use a faster guide interpolation algorithm, which requires that all guides\n    have the same segment count."], "extent": [2302, 2415]}], "container": true, "attrs": {"id": "uniformguidesegments"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Compute Weights Using Skin Coordinates"], "extent": [2415, 2455], "body": [{"type": "para", "indent": 4, "text": ["Compute guide weights using the hair\u2019s position within its skin primitive.\n    This is robust and accurate, but can look less natural than weight\n    computation based on guide distance, which is used when this is disabled."], "extent": [2476, 2705]}, {"type": "para", "indent": 4, "text": ["This can only be used when guides are located at each skin point."], "extent": [2705, 2776]}, {"type": "tip_group", "body": [{"type": "tip", "indent": 4, "role": "item", "extent": [2776, 2785], "body": [{"type": "para", "indent": 12, "text": ["Use the ", {"scheme": "Node", "value": "/nodes/obj/guidegroom", "type": "link", "text": ["Guide Groom Object"], "fullpath": "/nodes/obj/guidegroom"}, "'s ", {"type": "ui", "text": ["Guide Per Point"]}, " mode to create guides that work with this method."], "extent": [2785, 2919]}], "container": true}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "skininterp"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Blending Method"], "extent": [2919, 2936], "body": [{"type": "para", "indent": 4, "text": ["Controls how guides that influence a generated curve are blended."], "extent": [2963, 3034]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Linear Blend"], "extent": [3034, 3052], "body": [{"type": "para", "indent": 8, "text": ["Does a straight-forward linear blend between the guide curves."], "extent": [3052, 3124]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Extrude And Blend"], "extent": [3124, 3147], "body": [{"type": "para", "indent": 8, "text": ["Extrudes the curve along each guide and then blends those extruded curves."], "extent": [3147, 3231]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "guideblendmethod"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Guide Group"], "extent": [3231, 3244], "body": [{"type": "para", "indent": 4, "text": ["The group of guides to use."], "extent": [3265, 3298]}], "container": true, "attrs": {"id": "guidegroup"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Influence Radius"], "extent": [3298, 3316], "body": [{"type": "para", "indent": 4, "text": ["The radius within which guides have influence over generated hair."], "extent": [3342, 3414]}, {"tag": "div", "attrs": {"id": "parmoverride"}, "type": "pxml", "indent": 0, "extent": [16, 40], "body": [{"type": "para", "indent": 4, "text": ["This parameter can be overridden using an attribute or texture. To do this, select an option from the drop-down menu next to the parameter."], "extent": [40, 185]}], "container": true}], "container": true, "attrs": {"id": "influenceradius"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Influence Decay"], "extent": [3453, 3470], "body": [{"type": "para", "indent": 4, "text": ["Controls how steeply the weight of a guide drops with distance. Higher\n    values cause guides to have less influence over distant hairs, resulting\n    in hair more closely following guides near them. Lower values tend to\n    result in a smoother look as the effect of all guides is averaged."], "extent": [3495, 3793]}, {"tag": "div", "attrs": {"id": "parmoverride"}, "type": "pxml", "indent": 0, "extent": [16, 40], "body": [{"type": "para", "indent": 4, "text": ["This parameter can be overridden using an attribute or texture. To do this, select an option from the drop-down menu next to the parameter."], "extent": [40, 185]}], "container": true}], "container": true, "attrs": {"id": "influencedecay"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Maximum Guide Count"], "extent": [3832, 3853], "body": [{"type": "para", "indent": 4, "text": ["The maximum number of guides to take into account. Any excess guides found\n    within the ", {"type": "ui", "text": ["Influence Radius"]}, " are ignored."], "extent": [3877, 4006]}, {"tag": "div", "attrs": {"id": "parmoverride"}, "type": "pxml", "indent": 0, "extent": [16, 40], "body": [{"type": "para", "indent": 4, "text": ["This parameter can be overridden using an attribute or texture. To do this, select an option from the drop-down menu next to the parameter."], "extent": [40, 185]}], "container": true}], "container": true, "attrs": {"id": "maxguidecount"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Max Guide Angle"], "extent": [4045, 4062], "body": [{"type": "para", "indent": 4, "text": ["Ignore guides that face away from the skin normal at the hair root by more\n    than this angle in degrees."], "extent": [4086, 4198]}, {"tag": "div", "attrs": {"id": "parmoverride"}, "type": "pxml", "indent": 0, "extent": [16, 40], "body": [{"type": "para", "indent": 4, "text": ["This parameter can be overridden using an attribute or texture. To do this, select an option from the drop-down menu next to the parameter."], "extent": [40, 185]}], "container": true}], "container": true, "attrs": {"id": "maxguideangle"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Clump Crossover"], "extent": [4237, 4254], "body": [{"type": "para", "indent": 4, "text": ["Blends the shapes of clumps of guide hair. At a value of ", {"type": "code", "text": ["0"]}, ", only the\n    clump that exhibits the greatest influence of the generated hair is taken\n    into account. Higher values cause surrounding clumps to be taken into account\n    as well."], "extent": [4279, 4528]}, {"type": "para", "indent": 4, "text": ["TIP: Guide hair clumps can be created using the\n    ", {"scheme": "Node", "value": "/nodes/sop/hairclump", "type": "link", "text": ["Hair Clump SOP"], "fullpath": "/nodes/sop/hairclump"}, "."], "extent": [4528, 4622]}, {"tag": "div", "attrs": {"id": "parmoverride"}, "type": "pxml", "indent": 0, "extent": [16, 40], "body": [{"type": "para", "indent": 4, "text": ["This parameter can be overridden using an attribute or texture. To do this, select an option from the drop-down menu next to the parameter."], "extent": [40, 185]}], "container": true}], "container": true, "attrs": {"id": "clumpcrossover"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Unguided Hairs"], "extent": [2060, 2083], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Grow Unguided Hair"], "extent": [4864, 4885], "body": [{"type": "para", "indent": 4, "text": ["Grows hair at points that are outside of the influence radius of any guides."], "extent": [4908, 4990]}], "container": true, "attrs": {"id": "growunguided"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Use Initial Direction Attribute"], "extent": [4990, 5023], "body": [{"type": "para", "indent": 4, "text": ["Grow hair in the direction of a vector attribute on the skin geometry."], "extent": [5050, 5126]}], "container": true, "attrs": {"id": "useinitdirattrib"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Initial Dir Attrib"], "extent": [5126, 5146], "body": [{"type": "para", "indent": 4, "text": ["The name of a vector attribute on the skin geometry used as the initial\n    direction of unguided hair."], "extent": [5170, 5279]}], "container": true, "attrs": {"id": "initdirattrib"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Segments"], "extent": [5279, 5289], "body": [{"type": "para", "indent": 4, "text": ["Generate hairs with this segment count."], "extent": [5316, 5361]}, {"type": "note_group", "body": [{"type": "note", "indent": 4, "role": "item", "extent": [5361, 5371], "body": [{"type": "para", "indent": 8, "text": ["When there are any guides, this node generates hairs\n        with the same segment count as those guides and this parameter is\n        ignored."], "extent": [5371, 5524]}], "container": true}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "unguidedsegments"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Length"], "extent": [5524, 5532], "body": [{"type": "para", "indent": 4, "text": ["Generate unguided hair of this length."], "extent": [5557, 5601]}, {"tag": "div", "attrs": {"id": "parmoverride"}, "type": "pxml", "indent": 0, "extent": [16, 40], "body": [{"type": "para", "indent": 4, "text": ["This parameter can be overridden using an attribute or texture. To do this, select an option from the drop-down menu next to the parameter."], "extent": [40, 185]}], "container": true}], "container": true, "attrs": {"id": "unguidedlength"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Minimum Length"], "extent": [5640, 5656], "body": [{"type": "para", "indent": 4, "text": ["The minimum length required to grow a hair. Any hair that would be shorter\n    than this value is not grown at all."], "extent": [5684, 5805]}], "container": true, "attrs": {"id": "unguidedminlength"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Display"], "extent": [2358, 2374], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Display As Subdivision Curves"], "extent": [2374, 2406], "body": [{"type": "para", "indent": 4, "text": ["Subdivide curves in the viewport for a smooth appearance."], "extent": [2430, 2493]}], "container": true, "attrs": {"id": "displayassubd"}, "role": "item"}], "container": true, "role": "item_group"}]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Static Generation"], "extent": [2493, 2517], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Perform Hair Generation and Editing at Rest"], "extent": [2517, 2563], "body": [{"type": "para", "indent": 4, "text": ["Generate hair in the rest position, without time-dependency where possible."], "extent": [2583, 2664]}, {"type": "para", "indent": 4, "text": ["When this is enabled, the editable SOP network contained in this operator\n    also operates on the hair at rest."], "extent": [2664, 2782]}, {"type": "para", "indent": 4, "text": ["Deforms the hair using the guide curves afterward. This avoids any recooking of the contained groom operations with changing time. It is possible to cache a single frame using the ", {"type": "ui", "text": ["Rest Cache"]}, " controls below."], "extent": [2782, 2998]}, {"type": "para", "indent": 4, "text": ["Using this method, rendering can be performed by simply loading the rest\n    cache and deforming it using the stored weights."], "extent": [2998, 3129]}], "container": true, "attrs": {"id": "staticgen"}, "role": "item"}], "container": true, "role": "item_group"}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Capture"], "extent": [3129, 3145], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Guide Coverage"], "extent": [3304, 3320], "body": [{"type": "para", "indent": 4, "text": ["Ensure that each point is captured & deformed by at least this many guides."], "extent": [3344, 3425]}], "container": true, "attrs": {"id": "guidecoverage"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Compute Radius From Guide Coverage"], "extent": [3678, 3714], "body": [{"type": "para", "indent": 4, "text": ["Compute a radius automatically, such that each point will find roughly the number of guides specified by ", {"type": "ui", "text": ["Guide Coverage"]}, "."], "extent": [3738, 3868]}, {"type": "para", "indent": 4, "text": ["This makes it easier to deform by guides that have varying density across the skin geometry. For example when using more guides in the face of a character."], "extent": [3868, 4029]}], "container": true, "attrs": {"id": "computeradius"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Radius"], "extent": [4029, 4037], "body": [{"type": "para", "indent": 4, "text": ["When ", {"type": "ui", "text": ["Compute Radius From Guide Coverage"]}, " is disabled, this sets an absolute radius to use."], "extent": [4054, 4153]}], "container": true, "attrs": {"id": "radius"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Limit Segments Per Guide"], "extent": [4153, 4179], "body": [{"type": "para", "indent": 4, "text": ["Limit the number of capture segments per guide. This helps manage the amount of memory (or disk space) the weight information takes up."], "extent": [4204, 4345]}], "container": true, "attrs": {"id": "limitguidesegs"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Segments Per Guide"], "extent": [4345, 4365], "body": [{"type": "para", "indent": 4, "text": ["The maximum number of segments that each point in the first input can be captured by."], "extent": [4388, 4479]}], "container": true, "attrs": {"id": "maxguidesegs"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Expand Radius for Uncaptured Points"], "extent": [4479, 4516], "body": [{"type": "para", "indent": 4, "text": ["Expands the radius for points that aren\u2019t covered by the number of guides specified by ", {"type": "ui", "text": ["Guide Coverage"]}, "."], "extent": [4539, 4651]}, {"type": "para", "indent": 4, "text": ["This allows using a small number of guides (or a small radius) overall, which is necessary to preserve finely detailed guide movement, while covering points that may otherwise not be captured by the required number of points."], "extent": [4651, 4882]}], "container": true, "attrs": {"id": "expandradius"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Expansion Iterations"], "extent": [4882, 4904], "body": [{"type": "para", "indent": 4, "text": ["The maximum number of times the radius is expanded. The loop is stopped early if each point has been captured by the number of guide specified by ", {"type": "ui", "text": ["Guide Coverage"]}, "."], "extent": [4929, 5100]}], "container": true, "attrs": {"id": "expansioniters"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Expansion Factor"], "extent": [5100, 5118], "body": [{"type": "para", "indent": 4, "text": ["The factor by which the radius is multiplied in each expansion iterations."], "extent": [5144, 5224]}], "container": true, "attrs": {"id": "expansionfactor"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Rest Cache"], "extent": [3525, 3544], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Load from Disk"], "extent": [3544, 3561], "body": [{"type": "para", "indent": 4, "text": ["Load the rest hair from disk. This is stored with the capture weights\n    required for deformation."], "extent": [3592, 3697]}], "container": true, "attrs": {"id": "loadresthairfromdisk"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Geometry File"], "extent": [3697, 3712], "body": [{"type": "para", "indent": 4, "text": ["The file to the store rest cache in."], "extent": [3735, 3777]}], "container": true, "attrs": {"id": "resthairfile"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Save to Disk"], "extent": [3777, 3791], "body": [{"type": "para", "indent": 4, "text": ["Save the rest cache to disk."], "extent": [3818, 3852]}], "container": true, "attrs": {"id": "saveresthairfile"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Deform"], "extent": [3852, 3867], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Attributes to Transform"], "extent": [6223, 6248], "body": [{"type": "para", "indent": 4, "text": ["Attributes on the first input\u2019s geometry to deform."], "extent": [6271, 6327]}], "container": true, "attrs": {"id": "xformattribs"}, "role": "item"}], "container": true, "role": "item_group"}]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Optimization"], "extent": [3915, 3934], "body": [{"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["General"], "extent": [3934, 3951], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Bypass Editable SOP Network"], "extent": [3951, 3981], "body": [{"type": "para", "indent": 4, "text": ["Don\u2019t cook the editable SOP network contained in this node. Depending on\n    the SOPs contained inside, this can speed up hair generation substantially,\n    which can be useful while visualizing the effect of certain parameters or\n    changes in the groom source."], "extent": [4008, 4277]}], "container": true, "attrs": {"id": "bypasssopnetwork"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Limit To Bounding Box"], "extent": [4277, 4300], "body": [{"type": "para", "indent": 4, "text": ["Only grow hair from root points that are within the bounding boxes defined\n    by the parameters below."], "extent": [4322, 4431]}], "container": true, "attrs": {"id": "limittobbox"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Center"], "extent": [4431, 4439], "body": [{"type": "para", "indent": 4, "text": ["The center of the bounding box."], "extent": [4467, 4504]}], "container": true, "attrs": {"id": "displaybboxcenter"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Size"], "extent": [4504, 4510], "body": [{"type": "para", "indent": 4, "text": ["The size of the bounding box."], "extent": [4536, 4571]}], "container": true, "attrs": {"id": "displaybboxsize"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Prune"], "extent": [4571, 4578], "body": [{"type": "para", "indent": 4, "text": ["Prune a percentage of hair to speed up cooking."], "extent": [4601, 4654]}], "container": true, "attrs": {"id": "enablepruning"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Pruning Ratio"], "extent": [4654, 4669], "body": [{"type": "para", "indent": 4, "text": ["The percentage of curves to prune."], "extent": [4690, 4730]}], "container": true, "attrs": {"id": "pruneratio"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Thicken Remaining Hairs"], "extent": [4730, 4755], "body": [{"type": "para", "indent": 4, "text": ["Thicken the hairs left over after pruning to match the apparent density of\n    the unpruned hair."], "extent": [4778, 4881]}], "container": true, "attrs": {"id": "prunethicken"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Adaptive Prune"], "extent": [4881, 4904], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Adaptive Prune"], "extent": [4904, 4921], "body": [{"type": "para", "indent": 4, "text": ["Remove hair curves based on how large they are within a camera\u2019s view."], "extent": [4938, 5014]}, {"type": "para", "indent": 4, "text": ["When elements become more distant, they are scaled down and eventually deleted."], "extent": [5014, 5099]}, {"type": "para", "indent": 4, "text": ["Remaining elements are scaled up to preserve the visual density of the collection of elements as a whole."], "extent": [5099, 5210]}], "container": true, "attrs": {"id": "aprune"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Camera"], "extent": [1537, 1545], "body": [{"type": "para", "indent": 4, "text": ["The camera used for computing element distance."], "extent": [1559, 1612]}], "container": true, "attrs": {"id": "cam"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Size Unit"], "extent": [1612, 1623], "body": [{"type": "para", "indent": 4, "text": ["The unit in which the size of each elements is specified."], "extent": [1648, 1711]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Fraction Of Screen Width"], "extent": [1711, 1741], "body": [{"type": "para", "indent": 12, "text": ["Specify element size as a fraction of screen width. An element that fills the entire width of the screen has a size of ", {"type": "code", "text": ["1.0"]}, "."], "extent": [1741, 1880]}, {"type": "para", "indent": 12, "text": ["Use this if you prefer your settings to be independent of the camera\u2019s resolution."], "extent": [1880, 1976]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Pixels"], "extent": [1976, 1988], "body": [{"type": "para", "indent": 12, "text": ["Specify element size in pixels. Use this if you prefer the pruning to depend on camera resolution. Setting a lower resolution on the camera will cause more elements to be deleted."], "extent": [1988, 2182]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "screensizeunit"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Size Threshold"], "extent": [2182, 2198], "body": [{"type": "para", "indent": 4, "text": ["The screen size at which pruning starts to occur."], "extent": [2224, 2283]}, {"type": "para", "indent": 4, "text": ["Specified as a fraction of screen width or size in pixels, depending on the ", {"type": "ui", "text": ["Size Unit"]}, " setting."], "extent": [2283, 2387]}], "container": true, "attrs": {"id": "screensizethresh"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Aggressiveness"], "extent": [2387, 2403], "body": [{"type": "para", "indent": 4, "text": ["Controls how aggressively elements are pruned as they become smaller than the threshold size."], "extent": [2423, 2522]}, {"type": "para", "indent": 4, "text": ["Higher values cause elements to be pruned more rapidly as they become smaller."], "extent": [2522, 2606]}], "container": true, "attrs": {"id": "screenagg"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Seed"], "extent": [5400, 5406], "body": [{"type": "para", "indent": 4, "text": ["The seed value used in addition to the ", {"type": "ui", "text": ["Seed Attribute"]}, " to randomize pruning per element."], "extent": [5427, 5524]}], "container": true, "attrs": {"id": "apruneseed"}, "role": "item"}], "container": true, "role": "item_group"}]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Thickness"], "extent": [5524, 5540], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Thickness"], "extent": [5540, 5552], "body": [{"type": "para", "indent": 4, "text": ["The thickness of generated hair at its thickest point."], "extent": [5572, 5632]}, {"type": "include_group", "body": [{"ext": "fur_common#parmoverride", "type": "include", "indent": 4, "role": "item", "extent": [5632, 5671]}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "thickness"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Thickness Ramp"], "extent": [5671, 5687], "body": [{"type": "para", "indent": 4, "text": ["The profile of thickness along the length of each hair."], "extent": [5711, 5772]}], "container": true, "attrs": {"id": "thicknessramp"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Attributes"], "extent": [5772, 5789], "body": [{"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Skin Attribute Transfer"], "extent": [5789, 5822], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Point Attributes"], "extent": [6381, 6399], "body": [{"type": "para", "indent": 4, "text": ["A list of attributes to transfer from the skin geometry\u2019s points to the\n    hair primitives."], "extent": [6422, 6520]}, {"type": "para", "indent": 4, "text": ["Uses the interpolated value at the skin location closest to each hair root."], "extent": [6520, 6601]}], "container": true, "attrs": {"id": "pointattribs"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Vertex Attributes"], "extent": [6601, 6620], "body": [{"type": "para", "indent": 4, "text": ["A list of attributes to transfer from the skin geometry\u2019s vertices to the\n    hair primitives."], "extent": [6642, 6742]}, {"type": "para", "indent": 4, "text": ["Uses the interpolated value at the skin location closest to each hair root."], "extent": [6742, 6823]}], "container": true, "attrs": {"id": "vertattribs"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Primitive Attributes"], "extent": [6823, 6845], "body": [{"type": "para", "indent": 4, "text": ["A list of attributes to transfer from the skin geometry\u2019s primitives to the\n    hair primitives."], "extent": [6867, 6969]}, {"type": "para", "indent": 4, "text": ["Uses the values of the primitive closest to the hair\u2019s root location."], "extent": [6969, 7044]}], "container": true, "attrs": {"id": "primattribs"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Detail Attributes"], "extent": [7044, 7063], "body": [{"type": "para", "indent": 4, "text": ["A list of attributes to transfer from the skin geometry\u2019s detail to the\n    hair primitives."], "extent": [7087, 7185]}], "container": true, "attrs": {"id": "detailattribs"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Guide Attribute Transfer"], "extent": [5994, 6027], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Point Attributes"], "extent": [7218, 7237], "body": [{"type": "para", "indent": 4, "text": ["A list of attributes to transfer from the guide points to the generate\n    hair points."], "extent": [7265, 7358]}], "container": true, "attrs": {"id": "guidepointattribs"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Primitive Attributes"], "extent": [7358, 7380], "body": [{"type": "para", "indent": 4, "text": ["A list of attribute to transfer from the guide primitives to the generated\n    hair primitives."], "extent": [7407, 7508]}], "container": true, "attrs": {"id": "guideprimattribs"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Output Attributes"], "extent": [6123, 6149], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Point Attributes"], "extent": [6149, 6168], "body": [{"type": "para", "indent": 4, "text": ["Point attributes to keep for rendering."], "extent": [6195, 6240]}], "container": true, "attrs": {"id": "keeppointattribs"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Vertex Attributes"], "extent": [6240, 6259], "body": [{"type": "para", "indent": 4, "text": ["Vertex attributes to keep for rendering."], "extent": [6285, 6331]}], "container": true, "attrs": {"id": "keepvertattribs"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Primitive Attributes"], "extent": [6331, 6353], "body": [{"type": "para", "indent": 4, "text": ["Primitive attributes to keep for rendering."], "extent": [6379, 6428]}], "container": true, "attrs": {"id": "keepprimattribs"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Detail Attributes"], "extent": [6428, 6447], "body": [{"type": "para", "indent": 4, "text": ["Detail attributes to keep for rendering."], "extent": [6475, 6521]}], "container": true, "attrs": {"id": "keepdetailattribs"}, "role": "item"}], "container": true, "role": "item_group"}]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Skin"], "extent": [6521, 6532], "body": [{"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Subdivision"], "extent": [6532, 6553], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Move Curves To Subdivision Surface"], "extent": [6553, 6590], "body": [{"type": "para", "indent": 4, "text": ["Moves the generated hair to subdivision limit surfaces. This should be\n    enabled when the underlying skin geometry is rendered as a subdivision\n    surface."], "extent": [6609, 6773]}], "container": true, "attrs": {"id": "skinsubd"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Mode"], "extent": [6773, 6779], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Match Skin Object"], "extent": [6802, 6825], "body": [{"type": "para", "indent": 12, "text": ["Moves curves to the skin\u2019s limit surface when the skin geometry has subdivision rendering enabled."], "extent": [6825, 6937]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Always On"], "extent": [6937, 6952], "body": [{"type": "para", "indent": 12, "text": ["Always move curves to the skin\u2019s subdivision limit surface, regardless of whether subdivision is enabled on the skin."], "extent": [6952, 7083]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "skinsubdmode"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Referenced Subdivision Values"], "extent": [7083, 7121], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Enabled"], "extent": [7121, 7131], "body": [{"type": "para", "indent": 4, "text": ["Displays whether subdivision is enabled on the skin geometry when subdivision mode is set to ", {"type": "ui", "text": ["Match Skin Object"]}, "."], "extent": [7157, 7278]}], "container": true, "attrs": {"id": "skinsubdenabled"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Displacement"], "extent": [7278, 7299], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Displace Curves"], "extent": [7299, 7317], "body": [{"type": "para", "indent": 4, "text": ["Apply displacement along the skin normal to the generated curves. This can\n    be used to match displacement shading applied to the skin geometry."], "extent": [7336, 7488]}, {"type": "note_group", "body": [{"type": "note", "indent": 4, "role": "item", "extent": [7488, 7498], "body": [{"type": "para", "indent": 12, "text": ["Currently only ", {"type": "ui", "text": ["Displace Along Normal"]}, " mode is supported."], "extent": [7498, 7572]}], "container": true}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "displace"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Mode"], "extent": [7572, 7578], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Match Skin Shader (Only Supports Displace Along Normal)"], "extent": [7601, 7662], "body": [{"type": "para", "indent": 12, "text": ["Attempts to find the skin shader referenced by this groom and uses it\u2019s displacement values."], "extent": [7662, 7768]}, {"type": "para", "indent": 12, "text": ["This is done by stepping along each referenced groom object to find a Guide Groom which has a reference to skin geometry. The shader assigned to the geometry\u2019s object is used to detect displacement values."], "extent": [7768, 7987]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Match Specified Shader (Only Supports Displace Along Normal)"], "extent": [7987, 8053], "body": [{"type": "para", "indent": 12, "text": ["Use the displacement values of a specified reference shader."], "extent": [8053, 8127]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Displace Along Normal"], "extent": [8127, 8154], "body": [{"type": "para", "indent": 12, "text": ["Manually set displacement values."], "extent": [8154, 8202]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "displacemode"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Reference Shader"], "extent": [8202, 8220], "body": [{"type": "para", "indent": 4, "text": ["The shader used by ", {"type": "ui", "text": ["Match Specified Shader"]}, " to find displacement parameter values."], "extent": [8247, 8338]}], "container": true, "attrs": {"id": "displacerefshader"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Displacement Values"], "extent": [8338, 8366], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Texture"], "extent": [8366, 8376], "body": [{"type": "para", "indent": 4, "text": ["The manually specified displacement texture."], "extent": [8397, 8447]}], "container": true, "attrs": {"id": "displacetex"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Offset"], "extent": [8447, 8455], "body": [{"type": "para", "indent": 4, "text": ["The manually specified displacement texture value offset."], "extent": [8479, 8542]}], "container": true, "attrs": {"id": "displaceoffset"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Scale"], "extent": [8542, 8549], "body": [{"type": "para", "indent": 4, "text": ["The manually specified displacement scale."], "extent": [8572, 8621]}], "container": true, "attrs": {"id": "displacescale"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Referenced Displacement Values"], "extent": [8621, 8660], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Skin Shader"], "extent": [8660, 8674], "body": [{"type": "para", "indent": 4, "text": ["Displays the detected skin shader when ", {"type": "ui", "text": ["Mode"]}, " is set to ", {"type": "ui", "text": ["Match Skin Shader"]}, "."], "extent": [8702, 8788]}], "container": true, "attrs": {"id": "displaceskinshader"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Texture"], "extent": [8788, 8797], "body": [{"type": "para", "indent": 4, "text": ["Displays the referenced texture when a shader is detected or assigned and\n    when that shader has displacement set up and enabled."], "extent": [8821, 8958]}], "container": true, "attrs": {"id": "displacereftex"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Offset"], "extent": [8958, 8966], "body": [{"type": "para", "indent": 4, "text": ["Displays the referenced offset when a shader is detected or assigned and\n    when that shader has displacement set up and enabled."], "extent": [8993, 9129]}], "container": true, "attrs": {"id": "displacerefoffset"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Scale"], "extent": [9129, 9136], "body": [{"type": "para", "indent": 4, "text": ["Displays the referenced scale when a shader is detected or assigned and\n    when that shader has displacement set up and enabled."], "extent": [9162, 9297]}], "container": true, "attrs": {"id": "displacerefscale"}, "role": "item"}], "container": true, "role": "item_group"}]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Render"], "extent": [9297, 9310], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Hair Generation"], "extent": [9310, 9328], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Use SOP Geometry"], "extent": [9364, 9386], "body": [{"type": "para", "indent": 12, "text": ["Render the same SOP geometry as the viewport."], "extent": [9386, 9445]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Generate Geometry in Mantra"], "extent": [9445, 9478], "body": [{"type": "para", "indent": 12, "text": ["Generate hair geometry in the renderer. This allows rendering the full hair while using optimizations like ", {"type": "ui", "text": ["Limit to Bounding Box"]}, " and ", {"type": "ui", "text": ["Pruning"]}, " in the viewport."], "extent": [9478, 9657]}], "container": true}], "container": true}, {"type": "note_group", "body": [{"type": "note", "indent": 4, "role": "item", "extent": [9657, 9667], "body": [{"type": "para", "indent": 12, "text": ["Generating hair in the renderer is only supported with Mantra."], "extent": [9667, 9743]}, {"type": "para", "indent": 12, "text": ["Rendering with 3rd party renderers is only possible when setting this parameter to ", {"type": "ui", "text": ["Use SOP Geometry"]}, ", which causes the full generated hair to be written prior to rendering."], "extent": [9743, 9932]}], "container": true}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "vm_auto_engine_procedural"}, "role": "item"}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Render Visibility"], "role": "item", "extent": [104141, 104162], "body": [{"type": "para", "indent": 4, "text": ["Controls the visibility of an object to different types of rays using a category expression. This parameter generalizes the Phantom and Renderable toggles and allows more specific control over the visibility of an object to the different ray types supported by mantra and VEX."], "extent": [104237, 104518]}, {"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "q", "text": ["primary"]}, " - Rays sent from the camera"], "extent": [104518, 104562]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "q", "text": ["shadow"]}, " - Shadow rays"], "extent": [104562, 104591]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "q", "text": ["diffuse"]}, " - Diffuse rays"], "extent": [104591, 104622]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "q", "text": ["reflect"]}, " - Reflections"], "extent": [104622, 104652]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "q", "text": ["refract"]}, " - Refractions"], "extent": [104652, 104683]}], "container": true}, {"type": "para", "indent": 4, "text": ["For example, to create a phantom object, set the expression to ", {"type": "q", "text": ["-primary"]}, ". To create an unrenderable object, set the expression to the empty string ", {"type": "q", "text": []}, ". These tokens correspond to the string given to ", {"type": "q", "text": ["raystyle"]}, " in the VEX trace() and gather() functions."], "extent": [104683, 104941]}], "container": true, "attrs": {"hprop": "vm_rendervisibility", "ifdprop": "object:rendervisibility"}, "id": "vm_rendervisibility"}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Polygons as subdivision (Mantra)"], "role": "item", "extent": [105304, 105340], "body": [{"type": "para", "indent": 4, "text": ["Render polygons as a subdivision surface. The ", {"type": "code", "text": ["creaseweight"]}, " attribute is used to perform linear creasing. This attribute may appear on points, vertices or primitives."], "extent": [105399, 105572]}, {"type": "para", "indent": 4, "text": ["When rendering using OpenSubdiv, in addition to the ", {"type": "code", "text": ["creaseweight"]}, ", ", {"type": "code", "text": ["cornerwieght"]}, " attributes and the ", {"type": "code", "text": ["subdivision_hole"]}, " group, additional attributes are scanned to control the behaviour of refinement.  These override any other settings:"], "extent": [105572, 105814]}, {"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["int osd_scheme"]}, ", ", {"type": "code", "text": ["string osd_scheme"]}, ":  Specifies the scheme for OSD subdivision (0 or ", {"type": "q", "text": ["catmull-clark"]}, "; 1 or ", {"type": "q", "text": ["loop"]}, ";  2 or ", {"type": "q", "text": ["bilinear"]}, ").  Note that for Loop subdivision, the geometry can only contain triangles."], "extent": [105814, 106030]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["int osd_vtxboundaryinterpolation"]}, ": The Vertex Boundary Interpolation method (see ", {"type": "code", "text": ["vm_osd_vtxinterp"]}, " for further details)"], "extent": [106030, 106158]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["int osd_fvarlinearinterpolation"]}, ": The Face-Varying Linear Interpolation method (see ", {"type": "code", "text": ["vm_osd_fvarinterp"]}, " for further details)"], "extent": [106158, 106290]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["int osd_creasingmethod"]}, ": Specify the creasing method, 0 for Catmull-Clark, 1 for Chaikin"], "extent": [106290, 106386]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["int osd_trianglesubdiv"]}, ": Specifies the triangle weighting algorithm, 0 for Catmull-Clark weights, 1 for ", {"type": "q", "text": ["smooth triangle"]}, " weights."], "extent": [106386, 106525]}], "container": true}], "container": true, "attrs": {"hprop": "vm_rendersubd", "ifdprop": "object:rendersubd"}, "id": "vm_rendersubd"}], "container": true, "role": "item_group"}, {"level": 3, "id": "render_tab", "container": true, "type": "h", "indent": 0, "text": ["Render"], "extent": [5931, 5957], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Material"], "extent": [5957, 5968], "body": [{"type": "para", "indent": 4, "text": ["Path to the Material node."], "extent": [5968, 6000]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Display"], "extent": [6000, 6009], "body": [{"type": "para", "indent": 4, "text": ["Whether or not this object is displayed in the viewport and rendered.\n    Turn on the checkbox to have Houdini use this parameter,\n    then set the value to 0 to hide the object in the viewport and not render it,\n    or 1 to show and render the object.\n    If the checkbox is off, Houdini ignores the value."], "extent": [6031, 6344]}], "container": true, "attrs": {"id": "display"}, "role": "item"}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Phantom"], "role": "item", "extent": [103504, 103515], "body": [{"type": "para", "indent": 4, "text": ["When ", {"type": "code", "text": ["true"]}, ", the object will not be rendered by primary rays. Only secondary rays will hit the object."], "extent": [103572, 103680]}, {"type": "para", "indent": 4, "text": ["(See the ", {"scheme": "Mantra", "value": "/props/mantra#vm_rendervisibility", "type": "link", "text": ["Render Visibility"], "fallback_text": "vm_rendervisibility", "fullpath": "/props/mantra#vm_rendervisibility", "fragment": "#vm_rendervisibility"}, " property)."], "extent": [103680, 103752]}], "container": true, "attrs": {"hprop": "vm_phantom", "ifdprop": "object:phantom"}, "id": "vm_phantom"}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Renderable"], "role": "item", "extent": [103752, 103766], "body": [{"type": "para", "indent": 4, "text": ["If this option is turned off, then the instance will not be rendered. The object\u2019s properties can still be queried from within VEX, but no geometry will be rendered. This is roughly equivalent to turning the object into a transform space object."], "extent": [103825, 104076]}, {"type": "para", "indent": 4, "text": ["See ", {"type": "ui", "text": ["Render Visibility"]}, " (", {"type": "code", "text": ["vm_rendervisibility"]}, " property)."], "extent": [104076, 104141]}], "container": true, "attrs": {"hprop": "vm_renderable", "ifdprop": "object:renderable"}, "id": "vm_renderable"}, {"type": "parameters_item", "indent": 0, "text": ["Display As"], "extent": [6402, 6414], "body": [{"type": "para", "indent": 4, "text": ["How to display your geometry in the viewport."], "extent": [6414, 6465]}], "container": true, "role": "item"}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Polygons as subdivision (Mantra)"], "role": "item", "extent": [105304, 105340], "body": [{"type": "para", "indent": 4, "text": ["Render polygons as a subdivision surface. The ", {"type": "code", "text": ["creaseweight"]}, " attribute is used to perform linear creasing. This attribute may appear on points, vertices or primitives."], "extent": [105399, 105572]}, {"type": "para", "indent": 4, "text": ["When rendering using OpenSubdiv, in addition to the ", {"type": "code", "text": ["creaseweight"]}, ", ", {"type": "code", "text": ["cornerwieght"]}, " attributes and the ", {"type": "code", "text": ["subdivision_hole"]}, " group, additional attributes are scanned to control the behaviour of refinement.  These override any other settings:"], "extent": [105572, 105814]}, {"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["int osd_scheme"]}, ", ", {"type": "code", "text": ["string osd_scheme"]}, ":  Specifies the scheme for OSD subdivision (0 or ", {"type": "q", "text": ["catmull-clark"]}, "; 1 or ", {"type": "q", "text": ["loop"]}, ";  2 or ", {"type": "q", "text": ["bilinear"]}, ").  Note that for Loop subdivision, the geometry can only contain triangles."], "extent": [105814, 106030]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["int osd_vtxboundaryinterpolation"]}, ": The Vertex Boundary Interpolation method (see ", {"type": "code", "text": ["vm_osd_vtxinterp"]}, " for further details)"], "extent": [106030, 106158]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["int osd_fvarlinearinterpolation"]}, ": The Face-Varying Linear Interpolation method (see ", {"type": "code", "text": ["vm_osd_fvarinterp"]}, " for further details)"], "extent": [106158, 106290]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["int osd_creasingmethod"]}, ": Specify the creasing method, 0 for Catmull-Clark, 1 for Chaikin"], "extent": [106290, 106386]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["int osd_trianglesubdiv"]}, ": Specifies the triangle weighting algorithm, 0 for Catmull-Clark weights, 1 for ", {"type": "q", "text": ["smooth triangle"]}, " weights."], "extent": [106386, 106525]}], "container": true}], "container": true, "attrs": {"hprop": "vm_rendersubd", "ifdprop": "object:rendersubd"}, "id": "vm_rendersubd"}], "container": true}, {"level": 4, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Shading"], "extent": [6496, 6512], "body": [{"type": "parameters_item_group", "body": [{"ext": null, "type": "parameters_item", "indent": 0, "text": ["Categories"], "role": "item", "extent": [166123, 166137], "body": [{"type": "para", "indent": 4, "text": ["The space or comma separated list of categories to which this object belongs."], "extent": [166193, 166280]}, {"type": "para", "indent": 4, "text": ["Currently not supported for per-primitive material assignment (material SOP)."], "extent": [166280, 166363]}], "container": true, "attrs": {"hprop": "categories", "ifdprop": "object:categories"}, "id": "categories"}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Reflection mask"], "role": "item", "extent": [167275, 167294], "body": [{"type": "para", "indent": 4, "text": ["A list of patterns. Objects matching these patterns will reflect in this object. You can use wildcards (for example, ", {"type": "code", "text": ["key_*"]}, ") and\n    ", {"scheme": null, "value": "/basics/bundles", "type": "link", "text": ["bundle references"], "fullpath": "/basics/bundles"}, "  to specify objects."], "extent": [167352, 167552]}, {"type": "para", "indent": 4, "text": ["You can also use the  ", {"scheme": null, "value": "/ref/panes/linker", "type": "link", "text": ["link editor pane"], "fullpath": "/ref/panes/linker"}, "  to edit the relationships between lights and objects using a graphical\n    interface."], "extent": [167552, 167703]}, {"type": "para", "indent": 4, "text": ["The ", {"type": "code", "text": ["object:reflectmask"]}, " property in Mantra is a computed property containing the results of combining reflection categories and reflection masks."], "extent": [167703, 167855]}], "container": true, "attrs": {"hprop": "reflectmask", "ifdprop": "object:reflectmask"}, "id": "reflectmask"}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Refraction mask"], "role": "item", "extent": [168049, 168068], "body": [{"type": "para", "indent": 4, "text": ["A list of patterns. Objects matching these patterns will be visible in refraction rays. You can use wildcards (for example, ", {"type": "code", "text": ["key_*"]}, ") and ", {"scheme": null, "value": "/basics/bundles", "type": "link", "text": ["bundle references"], "fullpath": "/basics/bundles"}, "  to specify objects."], "extent": [168126, 168329]}, {"type": "para", "indent": 4, "text": ["You can also use the  ", {"scheme": null, "value": "/ref/panes/linker", "type": "link", "text": ["link editor pane"], "fullpath": "/ref/panes/linker"}, "  to edit the relationships between lights and objects using a graphical\n    interface."], "extent": [168329, 168480]}, {"type": "para", "indent": 4, "text": ["The ", {"type": "code", "text": ["object:refractmask"]}, " property in Mantra is a computed property containing the results of combining reflection categories and reflection masks."], "extent": [168480, 168632]}], "container": true, "attrs": {"hprop": "refractmask", "ifdprop": "object:refractmask"}, "id": "refractmask"}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Light mask"], "role": "item", "extent": [166363, 166377], "body": [{"type": "para", "indent": 4, "text": ["A list of patterns. Lights matching these patterns will illuminate this object. You can use wildcards (for example, ", {"type": "code", "text": ["key_*"]}, ") and\n    ", {"scheme": null, "value": "/basics/bundles", "type": "link", "text": ["bundle references"], "fullpath": "/basics/bundles"}, "  to specify lights."], "extent": [166435, 166633]}, {"type": "para", "indent": 4, "text": ["You can also use the  ", {"scheme": null, "value": "/ref/panes/linker", "type": "link", "text": ["link editor pane"], "fullpath": "/ref/panes/linker"}, "  to edit the relationships between lights and objects using a graphical\n    interface."], "extent": [166633, 166788]}, {"type": "para", "indent": 4, "text": ["The ", {"type": "code", "text": ["object:lightmask"]}, " property in Mantra is a computed property containing the results of combining light categories and light masks."], "extent": [166788, 166928]}], "container": true, "attrs": {"hprop": "lightmask", "ifdprop": "object:lightmask"}, "id": "lightmask"}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Volume filter"], "role": "item", "extent": [162189, 162206], "body": [{"type": "para", "indent": 4, "text": ["Some volume primitives (Geometry Volumes, Image3D) can use a filter during evaluation of volume channels. This specifies the filter.  The default box filter is fast to evaluate and produces sharp renders for most smooth fluid simulations.  If your voxel data contains aliasing (stairstepping along edges), you may need to use a larger filter width or smoother filter to produce acceptable results.  For aliased volume data, ", {"type": "code", "text": ["gauss"]}, " is a good filter with a filter width of 1.5."], "extent": [162263, 162749]}, {"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["point"]}], "extent": [162749, 162763]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["box"]}], "extent": [162763, 162775]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["gauss"]}], "extent": [162775, 162789]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["bartlett"]}], "extent": [162789, 162806]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["blackman"]}], "extent": [162806, 162823]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["catrom"]}], "extent": [162823, 162838]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["hanning"]}], "extent": [162838, 162854]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["mitchell"]}], "extent": [162854, 162872]}], "container": true}], "container": true, "attrs": {"hprop": "vm_volumefilter", "ifdprop": "object:filter"}, "id": "vm_volumefilter"}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Volume filter width"], "role": "item", "extent": [162872, 162895], "body": [{"type": "para", "indent": 4, "text": ["This specifies the filter width for the object:filter property. The filter width is specified in number of voxels. Larger filter widths take longer to render and produce blurrier renders, but may be necessary to combat aliasing in some kinds of voxel data."], "extent": [162962, 163224]}], "container": true, "attrs": {"hprop": "vm_volumefilterwidth", "ifdprop": "object:filterwidth"}, "id": "vm_volumefilterwidth"}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Matte shading"], "role": "item", "extent": [160061, 160078], "body": [{"type": "para", "indent": 4, "text": ["When enabled, the object\u2019s surface shader will be replaced with a matte\n    shader for primary rays. The default matte shader causes the object to\n    render as fully opaque but with an alpha of 0 - effectively cutting a\n    hole in the image where the object would have appeared. This setting is\n    useful when manually splitting an image into passes, so that the\n    background elements can be rendered separately from a foreground\n    object.  The default matte shader is the ", {"type": "q", "text": ["Matte"]}, " VEX shader, though it\n    is possible to set a different matte shader by adding the\n    ", {"type": "code", "text": ["vm_matteshader"]}, " render property and assigning another shader.\n    Secondary rays will still use the object\u2019s assigned surface shader,\n    allowing it to appear in reflections and indirect lighting even though\n    it will not render directly."], "extent": [160131, 160959]}, {"type": "para", "indent": 4, "text": ["For correct matte shading of volumes:"], "extent": [160959, 161001]}, {"type": "ord_group", "body": [{"blevel": 6, "type": "ord", "indent": 4, "text": ["Add the ", {"type": "code", "text": ["vm_matteshader"]}, " property to the object."], "extent": [161001, 161056]}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["Create a ", {"type": "ui", "text": ["Volume Matte"]}, " shader."], "extent": [161056, 161096]}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["Set the density on this shader to match the density on the geometry shader."], "extent": [161096, 161178]}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["Assign this shader to ", {"type": "code", "text": ["vm_matteshader"]}, "."], "extent": [161178, 161225]}], "container": true}, {"type": "para", "indent": 4, "text": ["Then when the ", {"type": "ui", "text": ["Matte Shading"]}, " toggle is enabled, it will use your custom volume matte shader rather than the default (which just sets the density to 1). If you want fully opaque matte, you can use the matte shader rather than volume matte. "], "extent": [161225, 161473]}], "container": true, "attrs": {"hprop": "vm_matte", "ifdprop": "object:matte"}, "id": "vm_matte"}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Raytrace shading"], "role": "item", "extent": [163224, 163244], "body": [{"type": "para", "indent": 4, "text": ["Shade every sample rather than shading micropolygon vertices. This setting enables the raytrace rendering on a per-object basis."], "extent": [163299, 163433]}, {"type": "para", "indent": 4, "text": ["When micro-polygon rendering, shading normally occurs at micro-polygon vertices at the beginning of the frame. To determine the color of a sample, the corner vertices are interpolated. Turning on ", {"type": "code", "text": ["object:rayshade"]}, " will cause the ray-tracing shading algorithm to be invoked. This will cause each sample to be shaded independently. This means that the shading cost may be significantly increased. However, each sample will be shaded at the correct time, and location."], "extent": [163433, 163904]}, {"type": "para", "indent": 4, "text": ["Currently not supported for per-primitive material assignment (material SOP)."], "extent": [163904, 163987]}], "container": true, "attrs": {"hprop": "vm_rayshade", "ifdprop": "object:rayshade"}, "id": "vm_rayshade"}], "container": true, "role": "item_group"}]}, {"level": 4, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Sampling"], "extent": [6745, 6762], "body": [{"type": "parameters_item_group", "body": [{"ext": null, "type": "parameters_item", "indent": 0, "text": ["Geometry velocity blur"], "role": "item", "extent": [121299, 121325], "body": [{"type": "para", "indent": 4, "text": ["This menu lets you choose what type of ", {"type": "em", "text": ["geometry velocity blur"]}, " to do on an object, if any. Separate from ", {"type": "em", "text": ["transform blur"]}, " and ", {"type": "em", "text": ["deformation blur"]}, ", you can render motion blur based on point movement, using attributes stored on the points that record change over time. You should use this type of blur if the number points in the geometry changes over time (for example, a particle simulation where points are born and die)."], "extent": [121389, 121817]}, {"type": "para", "indent": 4, "text": ["If your geometry changes topology frame-to-frame, Mantra will not be able to interpolate the geometry to correctly calculate Motion Blur. In these cases, motion blur can use a ", {"type": "code", "text": ["v"]}, " and/or ", {"type": "code", "text": ["accel"]}, " attribute which is consistent even while the underlying geometry is changing. The surface of a fluid simulation is a good example of this. In this case, and other types of simulation data, the solvers will automatically create the velocity attribute."], "extent": [121817, 122268]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["No Velocity Blur"], "extent": [122268, 122290], "body": [{"type": "para", "indent": 8, "text": ["Do not render motion blur on this object, even if the renderer is set to allow motion blur."], "extent": [122290, 122391]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Velocity Blur"], "extent": [122391, 122410], "body": [{"type": "para", "indent": 8, "text": ["To use velocity blur, you must compute and store point velocities in a point attribute ", {"type": "code", "text": ["v"]}, ". The renderer uses this attribute, if it exists, to render velocity motion blur (assuming the renderer is set to allow motion blur). The ", {"type": "code", "text": ["v"]}, " attribute may be created automatically by simulation nodes (such as particle DOPs), or you can compute and add it using the ", {"scheme": "Node", "value": "/nodes/sop/pointvelocity", "type": "link", "text": ["Point velocity SOP"], "fullpath": "/nodes/sop/pointvelocity"}, "."], "extent": [122410, 122820]}, {"type": "para", "indent": 8, "text": ["The ", {"type": "code", "text": ["v"]}, " attribute value is measured in Houdini units per second."], "extent": [122820, 122894]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Acceleration Blur"], "extent": [122894, 122917], "body": [{"type": "para", "indent": 8, "text": ["To use acceleration blur, you must compute and store point acceleration in a point attribute ", {"type": "code", "text": ["accel"]}, " (you can change the acceleration attribute name using the ", {"scheme": "Mantra", "value": "/props/mantra#geo_accelattribute", "type": "link", "text": "", "fallback_text": "geo_accelattribute", "fullpath": "/props/mantra#geo_accelattribute", "fragment": "#geo_accelattribute"}, " property). The renderer uses this attribute, if it exists, to render multi-segment acceleration motion blur (assuming the renderer is set to allow motion blur). The ", {"type": "code", "text": ["accel"]}, " attribute may be created automatically by simulation nodes, or you can compute and add it using the ", {"scheme": "Node", "value": "/nodes/sop/pointvelocity", "type": "link", "text": ["Point velocity SOP"], "fullpath": "/nodes/sop/pointvelocity"}, "."], "extent": [122917, 123431]}, {"type": "para", "indent": 8, "text": ["When Acceleration Blur is on, if the geometry has a ", {"type": "em", "text": ["angular velocity"]}, " attribute (", {"type": "code", "text": ["w"]}, "), rapid rotation will also be blurred. This should be a vector attribute, where the components represent rotation speeds in radians per second around X, Y, and Z."], "extent": [123431, 123689]}], "container": true}], "container": true}, {"type": "para", "indent": 4, "text": ["When this is set to ", {"type": "q", "text": ["Velocity Blur"]}, " or ", {"type": "q", "text": ["Acceleration Blur"]}, ", deformation blur is not applied to the object. When this is set to ", {"type": "q", "text": ["Acceleration Blur"]}, ", you can use the ", {"scheme": "Mantra", "value": "/props/mantra#geo_motionsamples", "type": "link", "text": "", "fallback_text": "geo_motionsamples", "fullpath": "/props/mantra#geo_motionsamples", "fragment": "#geo_motionsamples"}, " property to set the number of acceleration samples."], "extent": [123689, 123937]}, {"type": "col_group", "body": [{"ext": null, "type": "col", "indent": 4, "role": "item", "extent": [123937, 123947], "body": [{"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 8, "text": [{"scheme": "Image", "value": "/images/render/motionblur_velocity.jpg", "type": "link", "text": "", "fullpath": "/images/render/motionblur_velocity.jpg"}], "role": "item", "extent": [123947, 124007], "body": [{"type": "summary", "indent": 12, "text": ["Velocity motion blur used the velocity attribute (", {"type": "code", "text": ["v"]}, ") to do linear motion blur."], "extent": [124007, 124106]}], "container": true}], "container": true, "role": "item_group"}], "container": true}, {"ext": null, "type": "col", "indent": 4, "role": "item", "extent": [124106, 124116], "body": [{"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 8, "text": [{"scheme": "Image", "value": "/images/render/motionblur_acceleration.jpg", "type": "link", "text": "", "fullpath": "/images/render/motionblur_acceleration.jpg"}], "role": "item", "extent": [124116, 124180], "body": [{"type": "summary", "indent": 12, "text": ["Acceleration motion blur uses the change in velocity to more accurately blue objects turning at high speed."], "extent": [124180, 124306]}], "container": true}], "container": true, "role": "item_group"}], "container": true}, {"ext": null, "type": "col", "indent": 4, "role": "item", "extent": [124306, 124316], "body": [{"type": "fig_group", "body": [{"ext": null, "type": "fig", "indent": 8, "text": [{"scheme": "Image", "value": "/images/render/motionblur_angular_acceleration.jpg", "type": "link", "text": "", "fullpath": "/images/render/motionblur_angular_acceleration.jpg"}], "role": "item", "extent": [124316, 124388], "body": [{"type": "summary", "indent": 12, "text": ["Angular acceleration blur works with object spin, such as these fast-spinning cubes."], "extent": [124388, 124492]}], "container": true}], "container": true, "role": "item_group"}], "container": true}], "container": true, "role": "item_group"}], "container": true, "attrs": {"hprop": "geo_velocityblur", "ifdprop": "object:velocityblur"}, "id": "geo_velocityblur"}], "container": true, "role": "item_group"}]}, {"level": 4, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Dicing"], "extent": [6797, 6812], "body": [{"type": "parameters_item_group", "body": [{"ext": null, "type": "parameters_item", "indent": 0, "text": ["Shading quality"], "role": "item", "extent": [10283, 10303], "body": [{"type": "para", "indent": 4, "text": ["This parameter controls the geometric subdivision resolution for all rendering engines and additionally controls the shading resolution for micropolygon rendering.  With all other parameters at their defaults, a value of 1 means that approximately 1 micropolygon will be created per pixel.  A higher value will generate smaller micropolygons meaning that more shading will occur - but the quality will be higher."], "extent": [10374, 10792]}, {"type": "para", "indent": 4, "text": ["In ray tracing engines, shading quality only affects the geometric subdivision quality for smooth surfaces (NURBS, render as subdivision) and for displacements - without changing the amount of surface shading.  When using ray tracing, pixel samples and ray sampling parameters must be used to improve surface shading quality."], "extent": [10792, 11123]}, {"type": "para", "indent": 4, "text": ["The effect of changing the shading quality is to increase or decrease the amount of shading by a factor of ", {"type": "code", "text": ["vm_shadingquality"]}, " ", {"type": "strong", "text": ["squared"]}, " - so a shading quality of 2 will perform 4 times as much shading and a shading quality of 0.5 will perform 1/4 times as much shading."], "extent": [11123, 11399]}], "container": true, "attrs": {"hprop": "vm_shadingquality", "ifdprop": "object:shadingquality"}, "id": "vm_shadingquality"}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Dicing flatness"], "role": "item", "extent": [18405, 18424], "body": [{"type": "para", "indent": 4, "text": ["This property controls the tesselation levels for nearly flat primitives. By increasing the value, more primitives will be considered flat and will be sub-divided less. Turn this option ", {"type": "em", "text": ["down"]}, " for more accurate (less optimized) nearly-flat surfaces."], "extent": [18479, 18734]}], "container": true, "attrs": {"hprop": "vm_flatness", "ifdprop": "object:flatness"}, "id": "vm_flatness"}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Ray predicing"], "role": "item", "extent": [18734, 18751], "body": [{"type": "para", "indent": 4, "text": ["This property will cause this object to generate all displaced and subdivided geometry before the render begins. Ray tracing can be significantly faster when this setting is enabled at the cost of potentially huge memory requirements."], "extent": [18810, 19050]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Disable Predicing"], "extent": [19050, 19073], "body": [{"type": "para", "indent": 8, "text": ["Geometry is diced when it is hit by a ray."], "extent": [19073, 19133]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Full Predicing"], "extent": [19133, 19153], "body": [{"type": "para", "indent": 8, "text": ["Generate and store all diced geometry at once."], "extent": [19153, 19217]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Precompute Bounds"], "extent": [19217, 19240], "body": [{"type": "para", "indent": 8, "text": ["Generate all diced geometry just to compute accurate bounding boxes.  This setting will discard the diced geometry as soon as the box has been computed, so it is very memory efficient.  This can be useful to improve efficiency when using displacements with a large displacement bound without incurring the memory cost of full predicing."], "extent": [19240, 19586]}], "container": true}], "container": true}, {"type": "para", "indent": 4, "text": ["When ray-tracing, if all polygons on the model are visible (either to primary or secondary rays) it can be more efficient to pre-dice all the geometry in that model rather than caching portions of the geometry and re-generating the geometry on the fly. This is especially true when global illumination is being computed (since there is less coherency among rays)."], "extent": [19586, 19955]}, {"type": "para", "indent": 4, "text": ["Currently not supported for per-primitive material assignment (material SOP)."], "extent": [19955, 20038]}], "container": true, "attrs": {"hprop": "vm_raypredice", "ifdprop": "object:raypredice"}, "id": "vm_raypredice"}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Shade curves as surfaces"], "role": "item", "extent": [11399, 11427], "body": [{"type": "para", "indent": 4, "text": ["When rendering a curve, turns the curve into a surface and dices the surface, running the surface shader on multiple points across the surface. This may be useful when the curves become curved surfaces, but is less efficient. The default is to simply run the shader on the points of the curve and duplicate those shaded points across the created surface."], "extent": [11494, 11854]}], "container": true, "attrs": {"hprop": "vm_curvesurface", "ifdprop": "object:curvesurface"}, "id": "vm_curvesurface"}], "container": true, "role": "item_group"}]}, {"level": 4, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Geometry"], "extent": [6980, 6997], "body": [{"type": "parameters_item_group", "body": [{"ext": null, "type": "parameters_item", "indent": 0, "text": ["Backface removal (Mantra)"], "role": "item", "extent": [43504, 43533], "body": [{"type": "para", "indent": 4, "text": ["If enabled, geometry that are facing away from the camera are not\n    rendered."], "extent": [43592, 43677]}], "container": true, "attrs": {"hprop": "vm_rmbackface", "ifdprop": "object:rmbackface"}, "id": "vm_rmbackface"}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Procedural shader"], "role": "item", "extent": [32321, 32342], "body": [{"type": "para", "indent": 4, "text": ["Geometry SHOP used by the renderer to generate render geometry for this object."], "extent": [32377, 32462]}], "container": true, "attrs": {"hprop": "shop_geometrypath"}, "id": "shop_geometrypath"}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Force procedural geometry output"], "role": "item", "extent": [40829, 40865], "body": [{"type": "para", "indent": 4, "text": ["Enables output of geometry when a procedural shader is assigned.  If you know that the procedural you have assigned does not rely on geometry being present for the procedural to operate correctly, you can disable this toggle."], "extent": [40895, 41126]}], "container": true, "attrs": {"hprop": "vm_forcegeometry"}, "id": "vm_forcegeometry"}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Polygons as subdivision (Mantra)"], "role": "item", "extent": [105304, 105340], "body": [{"type": "para", "indent": 4, "text": ["Render polygons as a subdivision surface. The ", {"type": "code", "text": ["creaseweight"]}, " attribute is used to perform linear creasing. This attribute may appear on points, vertices or primitives."], "extent": [105399, 105572]}, {"type": "para", "indent": 4, "text": ["When rendering using OpenSubdiv, in addition to the ", {"type": "code", "text": ["creaseweight"]}, ", ", {"type": "code", "text": ["cornerwieght"]}, " attributes and the ", {"type": "code", "text": ["subdivision_hole"]}, " group, additional attributes are scanned to control the behaviour of refinement.  These override any other settings:"], "extent": [105572, 105814]}, {"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["int osd_scheme"]}, ", ", {"type": "code", "text": ["string osd_scheme"]}, ":  Specifies the scheme for OSD subdivision (0 or ", {"type": "q", "text": ["catmull-clark"]}, "; 1 or ", {"type": "q", "text": ["loop"]}, ";  2 or ", {"type": "q", "text": ["bilinear"]}, ").  Note that for Loop subdivision, the geometry can only contain triangles."], "extent": [105814, 106030]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["int osd_vtxboundaryinterpolation"]}, ": The Vertex Boundary Interpolation method (see ", {"type": "code", "text": ["vm_osd_vtxinterp"]}, " for further details)"], "extent": [106030, 106158]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["int osd_fvarlinearinterpolation"]}, ": The Face-Varying Linear Interpolation method (see ", {"type": "code", "text": ["vm_osd_fvarinterp"]}, " for further details)"], "extent": [106158, 106290]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["int osd_creasingmethod"]}, ": Specify the creasing method, 0 for Catmull-Clark, 1 for Chaikin"], "extent": [106290, 106386]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["int osd_trianglesubdiv"]}, ": Specifies the triangle weighting algorithm, 0 for Catmull-Clark weights, 1 for ", {"type": "q", "text": ["smooth triangle"]}, " weights."], "extent": [106386, 106525]}], "container": true}], "container": true, "attrs": {"hprop": "vm_rendersubd", "ifdprop": "object:rendersubd"}, "id": "vm_rendersubd"}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Render as points (Mantra)"], "role": "item", "extent": [33168, 33197], "body": [{"type": "para", "indent": 4, "text": ["Controls how points from geometry are rendered. At the default settings, ", {"type": "ui", "text": ["No Point Rendering"]}, ", only points from particle systems are rendered. \n    Setting this value to ", {"type": "ui", "text": ["Render Only Points"]}, ", will render the geometry using only the point attributes, ignoring all vertex and primitive information.\n    ", {"type": "ui", "text": ["Render Unconnected Points"]}, " works in a similar way, but only for points not used by any of the geometry\u2019s primitives."], "extent": [33260, 33694]}, {"type": "para", "indent": 4, "text": ["Two attributes control the point primitives if they exist."], "extent": [33694, 33762]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["orient"]}], "extent": [33762, 33776], "body": [{"type": "para", "indent": 8, "text": ["A vector which determines the normal of the point geometry. If the attribute doesn\u2019t exist, points are oriented to face the incoming ray (the VEX ", {"type": "code", "text": ["I"]}, " variable)."], "extent": [33776, 33954]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["width"]}], "extent": [33954, 33967], "body": [{"type": "para", "indent": 8, "text": ["Determines the 3D size of the points (defaults to 0.05)."], "extent": [33967, 34033]}], "container": true}], "container": true}], "container": true, "attrs": {"hprop": "vm_renderpoints", "ifdprop": "object:renderpoints"}, "id": "vm_renderpoints"}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Use N for point rendering"], "role": "item", "extent": [38952, 38981], "body": [{"type": "para", "indent": 4, "text": ["Mantra will initialize the ", {"type": "code", "text": ["N"]}, " global from the ", {"type": "code", "text": ["N"]}, " attribute when rendering point primitives. When disabled (the default), point normals will be initialized to face the camera."], "extent": [39046, 39228]}], "container": true, "attrs": {"hprop": "vm_usenforpoints", "ifdprop": "object:usenforpoints"}, "id": "vm_usenforpoints"}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Metaballs as volume"], "role": "item", "extent": [39228, 39251], "body": [{"type": "para", "indent": 4, "text": ["Render metaballs as volumes as opposed to surfaces.  The volume quality for metaballs will be set based on the average size of all metaballs in the geometry, so increasing or decreasing the metaball size will automatically adjust the render quality to match."], "extent": [39310, 39574]}], "container": true, "attrs": {"hprop": "vm_metavolume", "ifdprop": "object:metavolume"}, "id": "vm_metavolume"}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Coving"], "role": "item", "extent": [41126, 41136], "body": [{"type": "para", "indent": 4, "text": ["Whether Mantra will try to prevent cracks."], "extent": [41187, 41239]}, {"type": "para", "indent": 4, "text": ["Coving is the process of filling cracks in diced geometry\n    at render time, where different levels of dicing side-by-side\n    create gaps at T-junctions."], "extent": [41239, 41404]}, {"type": "para", "indent": 4, "text": ["The default setting, ", {"type": "ui", "text": ["Coving for displacement/sub-d"]}, ", only does\n    coving for surfaces with a displacement shader and subdivision\n    surfaces, where the displacement of points can potentially create\n    large cracks. This is sufficient for more rendering, however\n    you may want to use ", {"type": "ui", "text": ["Coving for all primitives"]}, " if you are\n    using a very low shading rate or see cracks in the alpha of the\n    rendered image."], "extent": [41404, 41834]}, {"type": "para", "indent": 4, "text": ["Do not use ", {"type": "ui", "text": ["Disable coving"]}, ". It has no performance\n    benefit, and may actually harm performance since Houdini has to\n    render any geometry visible through the crack."], "extent": [41834, 42015]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["0"]}], "extent": [42015, 42024], "body": [{"type": "para", "indent": 8, "text": ["No coving."], "extent": [42024, 42043]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["1"]}], "extent": [42043, 42052], "body": [{"type": "para", "indent": 8, "text": ["Only displaced surfaces and sub-division surfaces will be coved."], "extent": [42052, 42125]}], "container": true}, {"type": "dt", "indent": 4, "text": [{"type": "code", "text": ["2"]}], "extent": [42125, 42134], "body": [{"type": "para", "indent": 8, "text": ["All primitives will be coved."], "extent": [42134, 42173]}], "container": true}], "container": true}], "container": true, "attrs": {"hprop": "vm_coving", "ifdprop": "object:coving"}, "id": "vm_coving"}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Material Override"], "role": "item", "extent": [31568, 31589], "body": [{"type": "para", "indent": 4, "text": ["Controls how material overrides are evaluated and output to the IFD. "], "extent": [31666, 31745]}, {"type": "para", "indent": 4, "text": ["When set to ", {"type": "ui", "text": ["Evaluate Once"]}, ", any parameter on the material, that\n    uses channels or expressions, will be evaluated only once\n    for the entire detail. This results in significantly faster IFD \n    generation, due to the material parameter assignment being handled\n    entirely by Mantra, rather than Houdini. \n    Setting the parameter value to ", {"type": "ui", "text": ["Evaluate for Each Primitive/Point"]}, "  \n    will evaluate those parameters for each primitive and/or point. \n    It\u2019s also possible to skip material overrides entirely by setting \n    the parameter value to ", {"type": "ui", "text": ["Disabled"]}, "."], "extent": [31745, 32321]}], "container": true, "attrs": {"hprop": "vm_materialoverride", "ifdprop": "geometry:materialoverride"}, "id": "vm_materialoverride"}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Automatically Compute Normals (Old)"], "role": "item", "extent": [44751, 44790], "body": [{"type": "para", "indent": 4, "text": ["Whether mantra should compute the N attribute automatically. If the N attribute exists, the value will remain unchanged. However, if no N attribute exists, it will be created. This allows polygon geometry which doesn\u2019t have the N attribute already computed to be smooth shaded."], "extent": [44847, 45130]}, {"type": "para", "indent": 4, "text": ["Not supported for per-primitive material assignment (material SOP)."], "extent": [45130, 45203]}], "container": true, "attrs": {"hprop": "vm_computeN", "ifdprop": "geometry:computeN"}, "id": "vm_computeN"}, {"ext": null, "type": "parameters_item", "indent": 0, "text": ["Ignore geometry attribute shaders"], "role": "item", "extent": [30389, 30427], "body": [{"type": "para", "indent": 4, "text": ["When geometry has shaders defined on a per-primitive basis, this parameter will override these shaders and use only the object\u2019s shader. This is useful when performing matte shading on objects."], "extent": [30494, 30693]}, {"type": "para", "indent": 4, "text": ["Not supported for per-primitive material assignment (material SOP)."], "extent": [30693, 30766]}], "container": true, "attrs": {"hprop": "vm_overridedetail", "ifdprop": "object:overridedetail"}, "id": "vm_overridedetail"}], "container": true, "role": "item_group"}]}]}]}], "text": "Parameters"}, {"level": 1, "id": "locals", "container": true, "type": "locals_section", "indent": 0, "role": "section", "extent": [10026, 10034], "body": [], "text": "Locals"}, {"level": 1, "id": "related", "container": true, "type": "related_section", "indent": 0, "role": "section", "extent": [10034, 10045], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/obj/guidegroom", "type": "link", "text": "", "fullpath": "/nodes/obj/guidegroom"}], "extent": [10045, 10069]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/obj/guidedeform", "type": "link", "text": "", "fullpath": "/nodes/obj/guidedeform"}], "extent": [10069, 10094]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/obj/guidesim", "type": "link", "text": "", "fullpath": "/nodes/obj/guidesim"}], "extent": [10094, 10116]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/obj/groommerge", "type": "link", "text": "", "fullpath": "/nodes/obj/groommerge"}], "extent": [10116, 10141]}], "container": true}], "text": "Related"}], "title": ["Hair Generate"], "summary": ["Generates hair from a skin geometry and guide curves."], "included": ["/nodes/obj/common", "/nodes/sop/adaptiveprune", "/nodes/sop/fur_common", "/nodes/sop/guidedeform", "/nodes/sop/hairgen", "/props/_minmax_styles", "/props/mantra"]}