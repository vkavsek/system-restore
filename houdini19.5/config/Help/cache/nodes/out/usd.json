{"type": "root", "attrs": {"type": "node", "context": "out", "internal": "usd", "icon": "COMMON/usd", "since": "17.0", "version": null, "namespace": null}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["USD"], "extent": [0, 8]}, {"type": "summary", "indent": 0, "text": ["Renders a LOP network out to one or more USD files. This node is available as render node or as a LOP."], "extent": [81, 191]}, {"type": "tip_group", "body": [{"type": "tip", "indent": 0, "role": "item", "extent": [191, 196], "body": [{"type": "para", "indent": 8, "text": ["This node renders out ", {"type": "strong", "text": ["USD files"]}, ". To render images from a LOP network, use the ", {"scheme": "Node", "value": "/nodes/out/karma", "type": "link", "text": ["Karma render node"], "fullpath": "/nodes/out/karma"}, " or ", {"scheme": "Node", "value": "/nodes/out/usdrender", "type": "link", "text": ["USD Render render node"], "fullpath": "/nodes/out/usdrender"}, "."], "extent": [196, 368]}], "container": true}], "container": true, "role": "item_group"}, {"level": 2, "id": "filepaths", "container": true, "type": "h", "indent": 0, "text": ["Where the files go"], "extent": [1584, 1621], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": ["In the ", {"scheme": "Node", "value": "/nodes/out/usd", "type": "link", "text": ["USD node"], "fullpath": "/nodes/out/usd"}, ", you specify a file path (in the ", {"type": "ui", "text": ["Output file"]}, " parameter) for the ", {"type": "q", "text": ["top-level"]}, " USD file, containing data from the root layer."], "extent": [1621, 1783], "body": [{"type": "para", "indent": 4, "text": ["In addition to this file, the node writes any layers that have their save path metadata set to their own USD files."], "extent": [1783, 1904]}], "container": true}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["You can use the ", {"scheme": "Node", "value": "/nodes/lop/configurelayer", "type": "link", "text": ["Configure Layer LOP"], "fullpath": "/nodes/lop/configurelayer"}, " to assign/change a save path for any layer in the network. When you render to USD the layer will be written out to disk."], "extent": [1904, 2090]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["The ", {"scheme": "Node", "value": "/nodes/lop/sopimport", "type": "link", "text": ["SOP Import LOP"], "fullpath": "/nodes/lop/sopimport"}, " and ", {"scheme": "Node", "value": "/nodes/lop/sopcreate", "type": "link", "text": ["SOP Create LOP"], "fullpath": "/nodes/lop/sopcreate"}, " also let you specify a save path where the geometry will be written when you write out USD."], "extent": [2090, 2265]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["Save paths should be specified as absolute paths, often using global variables such as HIP (", {"type": "code", "text": ["$HIP/props/lamp.usd"]}, "). During the save process, the ", {"scheme": "Node", "value": "/nodes/out/usd", "type": "link", "text": ["USD node"], "fullpath": "/nodes/out/usd"}, " by default will use an ", {"scheme": null, "value": "#processor", "type": "link", "text": ["output processor"], "fullpath": "/solaris/output#processor", "fragment": "#processor"}, " that translates these absolute paths to relative references between the layer files, which makes it easy to move all the layer files from one location to another."], "extent": [2265, 2653]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["The ", {"type": "ui", "text": ["Flush Data After Each Frame"]}, " parameter on the render node controls whether it writes out data to disk after calculating each frame. This option can be used to generate a sequence of USD files each containing a single time sample (for example, ", {"type": "code", "text": ["lamp_0001.usd"]}, ", ", {"type": "code", "text": ["lamp_0002.usd"]}, ", and so on), or single files containing time sample data from all frames, depending on whether the output file name or save paths contain a time-varying component (such as ", {"type": "code", "text": ["$F"]}, ")."], "extent": [2653, 3119]}], "container": true}]}, {"level": 2, "id": "anim", "container": true, "type": "h", "indent": 0, "text": ["Saving animation"], "extent": [14664, 14694], "body": [{"type": "para", "indent": 0, "text": ["The ", {"type": "ui", "text": ["Flush Data After Each Frame"]}, " parameter on the USD render node controls whether it writes data out after each frame of data is generated. This feature can be used to create individual files containing the data for each frame, or arbitrarily large files containing time sample data across all frames."], "extent": [14694, 15002]}, {"type": "para", "indent": 0, "text": ["When the USD render node writes out a frame range with ", {"type": "ui", "text": ["Flush Data After Each Frame"]}, " off:"], "extent": [15002, 15095]}, {"type": "ord_group", "body": [{"blevel": 2, "type": "ord", "indent": 0, "text": ["For each frame the ROP will generate a set of layers ready to be saved to disk, but which still exist in-memory."], "extent": [15095, 15211]}, {"blevel": 2, "type": "ord", "indent": 0, "text": ["It uses ", {"scheme": "Node", "value": "/nodes/out/usdstitch", "type": "link", "text": ["USD Stitch"], "fullpath": "/nodes/out/usdstitch"}, " to combine the generated frames with previously cooked frames in-memory."], "extent": [15211, 15327]}], "container": true}, {"type": "para", "indent": 0, "text": ["If the LOP Network is generating a lot of data, this can quickly use a lot of memory (even though the stitch operation does not duplicate data which is the same from frame to frame)."], "extent": [15327, 15511]}, {"type": "para", "indent": 0, "text": ["If you find writing out animated USD runs out of memory in Houdini, you can enable this option to limit Houdini to only have a single frame\u2019s data in memory at any one time. The result may take longer to write to disk, and the final file size may be larger than with this option disabled. But the amount of data that can be written will not be limited by the computer\u2019s available memory."], "extent": [15511, 15900]}, {"type": "para", "indent": 0, "text": ["Another approach is to write out a sequence of USD files each containing a single time sample of data, then using the ", {"scheme": "Node", "value": "/nodes/out/usdstitchclips", "type": "link", "text": ["USD Stitch Clips ROP"], "fullpath": "/nodes/out/usdstitchclips"}, " to generate a USD value clip. This approach only works if there is an isolated branch in the scene graph tree where the large data set exists, and the data for this branch can be written to a separate USD file."], "extent": [15900, 16278]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Tips"], "extent": [438, 449], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": ["This node writes output files when you click ", {"type": "ui", "text": ["Save to disk"]}, ", or when you click the Render flag on the node (in a render network), or when the node is triggered by an input dependency (in a render network)."], "extent": [449, 661]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["You can add this node to a ", {"scheme": null, "value": "/nodes/out/", "type": "link", "text": ["render node network"], "fullpath": "/nodes/out/index"}, ", or put it at the end of a ", {"scheme": null, "value": "/nodes/lop/", "type": "link", "text": ["lop node network"], "fullpath": "/nodes/lop/index"}, "."], "extent": [661, 784]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["If you set an output path to have a ", {"type": "code", "text": [".usda"]}, " extension, the node will write them using the ", {"scheme": null, "value": "/solaris/usd", "type": "link", "text": ["text format"], "fullpath": "/solaris/usd"}, ". This may occasionally be useful for debugging. Note that writing out textual files is slow compared to the regular binary format."], "extent": [784, 1035]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["If the node doesn\u2019t seem to be generating a file it should, double check if you have patterns in the ", {"type": "ui", "text": ["Files to save"]}, " parameter."], "extent": [1035, 1169]}], "container": true}]}, {"level": 1, "id": "parameters", "container": true, "type": "parameters_section", "indent": 0, "role": "section", "extent": [1169, 1181], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Save to Disk"], "extent": [1181, 1196], "body": [{"type": "para", "indent": 8, "text": ["Click to write out the layers generated by a LOP network to USD files."], "extent": [1218, 1298]}], "container": true, "attrs": {"id": "execute"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Save to Disk in Background"], "extent": [1298, 1326], "body": [{"type": "para", "indent": 8, "text": ["Starts another copy of Houdini in the background and instructs that copy to cook and save the USD files generated by the LOP network.  This allows one to continue working in the current Houdini session."], "extent": [1358, 1570]}], "container": true, "attrs": {"id": "executebackground"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Controls"], "extent": [1570, 1580], "body": [{"type": "para", "indent": 8, "text": ["Click to open a dialog that lets you launch a ", {"type": "q", "text": ["one-off"]}, " render with different frame range and dependency settings."], "extent": [1607, 1731]}], "container": true, "attrs": {"id": "renderdialog"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Valid Frame Range"], "extent": [1731, 1750], "body": [{"type": "para", "indent": 8, "text": ["See ", {"scheme": null, "value": "#anim", "type": "link", "text": ["saving animation"], "fullpath": "/nodes/out/usd#anim", "fragment": "#anim"}, " above for more information."], "extent": [1771, 1837]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["Render Current Frame"], "extent": [1837, 1867], "body": [{"type": "para", "indent": 16, "text": ["Render the current frame number (in the playbar)."], "extent": [1867, 1934]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Render Frame Range"], "extent": [1934, 1962], "body": [{"type": "para", "indent": 16, "text": ["Render each frame in the range set by the ", {"type": "ui", "text": ["Start/End/Inc"]}, " parameters below. The ", {"type": "ui", "text": ["Flush Data After Each Frame"]}, " parameter controls whether to write out data to disk after each frame, or to generate animated data in memory before writing out all the data at once."], "extent": [1962, 2244]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Render Frame Range (Strict)"], "extent": [2244, 2281], "body": [{"type": "para", "indent": 16, "text": ["The ", {"type": "q", "text": ["Render Frame Range"]}, " option may generate frames outside the given range if they're requested by a render dependency. If you choose this option, this node will never render frames outside the given range."], "extent": [2281, 2506]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Render Frame Range From Stage"], "extent": [2506, 2545], "body": [{"type": "para", "indent": 16, "text": ["Examines the USD stage of the source LOP node for a start and end timecode value. These are used as the start and end of the frame range to save to disk. If the stage does not have this metadata set, executing a save operation will result in an error."], "extent": [2545, 2814]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "trange"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Start/End/Inc"], "extent": [2814, 2829], "body": [{"type": "para", "indent": 8, "text": ["When ", {"type": "ui", "text": ["Valid frame range"]}, " is ", {"type": "q", "text": ["Render frame range"]}, " or ", {"type": "q", "text": ["Render frame range (strict)"]}, ", the start and end frames (inclusive) and interval."], "extent": [2845, 2990]}], "container": true, "attrs": {"id": "f"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Preroll/Postroll/Inc"], "extent": [2990, 3012], "body": [{"type": "para", "indent": 8, "text": ["When ", {"type": "ui", "text": ["Valid frame range"]}, " is ", {"type": "q", "text": ["Render stage\u2019s frame range"]}, ", the number of frames before and after the stage\u2019s official start and end frame to save, and the interval between time samples."], "extent": [3034, 3230]}], "container": true, "attrs": {"id": "foffset"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Render with Take"], "extent": [3230, 3248], "body": [{"type": "para", "indent": 8, "text": ["Render with the parameter values stored in this ", {"scheme": null, "value": "/basics/takes", "type": "link", "text": ["take"], "fullpath": "/basics/takes"}, "."], "extent": [3267, 3346]}], "container": true, "attrs": {"id": "take"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["LOP Path"], "extent": [3346, 3356], "body": [{"type": "para", "indent": 8, "text": ["Node path to the LOP node whose output this node will render. If this node is in a LOP network and you connect its input, the node disables and ignores this parameter, and renders the data from the input instead."], "extent": [3356, 3578]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Output File"], "extent": [3578, 3591], "body": [{"type": "para", "indent": 8, "text": ["The ", {"type": "q", "text": ["top-level"]}, " USD file to write the root layer to. Other layers that have file path metadata set will be written to their own USD files. A default output processor (see below) translates external file references in nodes to be relative to this file\u2019s directory, as is recommended."], "extent": [3615, 3907]}], "container": true, "attrs": {"id": "lopoutput"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Save Style"], "extent": [3907, 3919], "body": [{"type": "para", "indent": 8, "text": ["This node can apply some transformations to the layer stack before writing out files. These transformations do not affect the final composed stage, only the number of layer files generated."], "extent": [3943, 4142]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["Flatten Implicit Layers (Collapse Implicit Sublayers, Preserve References)"], "extent": [4142, 4226], "body": [{"type": "para", "indent": 16, "text": ["The default. Composes anonymous in-memory layers down onto the nearest layer with a file path (so the node will write out any layers that have file path metadata to separate USD files). This preserves references, variants, and other composition arcs."], "extent": [4226, 4494]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Flatten All Layers (Combine All Sublayers, Preserve References)"], "extent": [4494, 4567], "body": [{"type": "para", "indent": 16, "text": ["This composes all layers (both anonymous layers and layers with file paths) into a single layer. This preserves references, variants, and other composition arcs, so the node may still write out more than one file if external files were referenced in."], "extent": [4567, 4835]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Separate Layers (Preserve All Sublayers and References)"], "extent": [4835, 4900], "body": [{"type": "para", "indent": 16, "text": ["Don\u2019t compose any layers in any way. Even anonymous in-memory layers will be saved out to their own files (you should turn off ", {"type": "ui", "text": ["Error saving layers with implicit paths"]}, " so the node doesn\u2019t error trying to save anonymous layers)."], "extent": [4900, 5148]}, {"type": "para", "indent": 16, "text": ["This may be useful for debugging, especially in combination with debug flags on nodes, to see what each LOP node is doing."], "extent": [5148, 5288]}, {"type": "para", "indent": 16, "text": ["When the node has to write out a layer without file path metadata, it will automatically generate a relative file path based on information such as the node path of the node that generated the layer."], "extent": [5288, 5505]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Flatten Stage (Collapse All Sublayers and References)"], "extent": [5505, 5568], "body": [{"type": "para", "indent": 16, "text": ["This flattens all layers into a single stage, and ", {"type": "q", "text": ["bakes in"]}, " all composition arcs, even variant selections. This discards information such as which opinions came from which layer, and unused variants. This writes out a single USD file."], "extent": [5568, 5821]}, {"type": "para", "indent": 16, "text": ["This may be useful if you want to ", {"type": "q", "text": ["delete history"]}, " and make it seem like it a file wasn\u2019t composed from layers, references, variants, and so on."], "extent": [5821, 5983]}, {"type": "tip_group", "body": [{"type": "tip", "indent": 16, "role": "item", "extent": [5983, 6004], "body": [{"type": "para", "indent": 24, "text": ["If you want to ", {"type": "q", "text": ["preserve history"]}, " but want the convenience and portability of a single file, use the ", {"scheme": "Node", "value": "/nodes/out/usdzip", "type": "link", "text": ["USD Zip render node"], "fullpath": "/nodes/out/usdzip"}, " to generate a ", {"type": "code", "text": [".usdz"]}, " file."], "extent": [6004, 6196]}], "container": true}], "container": true, "role": "item_group"}], "container": true}], "container": true}], "container": true, "attrs": {"id": "savestyle"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Strip Layers Above Layer Breaks"], "extent": [6196, 6229], "body": [{"type": "para", "indent": 8, "text": ["Enable this option to prevent layers authored above Layer Break nodes from being written to disk by this ROP. This allows a Layer Break node to dictate which portions of the LOP Network are to be saved. Disabling this option allows this behavior to be overridden, forcing the full stage authored by the LOP network to be written to disk. This may be used for debugging purposes, or to write a complete scene to disk for rendering."], "extent": [6260, 6700]}], "container": true, "attrs": {"id": "striplayerbreaks"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Strip Post-Layers"], "extent": [6700, 6719], "body": [{"type": "para", "indent": 8, "text": ["Enable this option to prevent layers added using the ", {"scheme": "Hom", "value": "/hom/hou/LopNetwork#editablePostLayer", "type": "link", "text": "", "fallback_text": "hou.LopNetwork.editablePostLayer", "fullpath": "/hom/hou/LopNetwork#editablePostLayer", "fragment": "#editablePostLayer"}, " method from being written to disk. With this option disabled, these post-layers are flattened into the layer ", {"type": "ui", "text": ["Output file"]}, " layer."], "extent": [6749, 6982]}], "container": true, "attrs": {"id": "strippostlayers"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Flush Data After Each Frame"], "extent": [6982, 7011], "body": [{"type": "para", "indent": 8, "text": ["When this is on, the node writes out each frame\u2019s data to disk before cooking the LOP Network to generate the next frame of data. When this is off (the default), the node cooks the data for all frames into memory and writes out the animated files all at once. Turning on this option ensures that only a single frame worth of data is in RAM at any one time, allowing arbitrarily large USD files to be created. But saving each frame can be slightly slower, and the generated files may be larger because of the way USD files append new data to an existing file. See ", {"scheme": null, "value": "#anim", "type": "link", "text": ["saving animation"], "fullpath": "/nodes/out/usd#anim", "fragment": "#anim"}, " above."], "extent": [7038, 7642]}, {"type": "para", "indent": 8, "text": ["When this option is on, this ROP can also generate separate USD files for each frame. To do this, embed the local variable for the current frame number in the ", {"type": "ui", "text": ["Output file"]}, " path (and other layer save paths) so each frame will write out files with unique names. For example:"], "extent": [7642, 7927]}, {"lang": null, "type": "pre", "indent": 8, "text": ["\n        $HIP/usd/scene_$F4.usd\n        "], "extent": [7927, 7982]}, {"type": "para", "indent": 8, "text": ["See ", {"scheme": null, "value": "/render/expressions", "type": "link", "text": ["expression in filenames"], "fullpath": "/render/expressions"}, " for more information."], "extent": [7982, 8064]}], "container": true, "attrs": {"id": "fileperframe"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Track Primitive Existence to Set Visibility"], "extent": [8064, 8109], "body": [{"type": "para", "indent": 8, "text": ["LOP networks may generate vastly different scene graphs from one frame to the next. When combining these scene graphs over a frame range into a single animated scene graph, the set of primitives in the combined scene graph will be the union of the primitives in each frame\u2019s hierarchy. But if a mesh appears at frame 50, this generally means that it is desired for this mesh to not be visible prior to frame 50. Enable this option to cause this node to track a list of all primitives at each frame, and automatically author animated visibility attributes for any primitives that are added to or removed from the scene graph over time. This gives the appearance of primitives being added and removed over time."], "extent": [8142, 8861]}, {"type": "para", "indent": 8, "text": ["Only subclasses of ", {"type": "code", "text": ["UsdGeomImageable"]}, " primitives will be tracked this way, since these are the only USD primitive types which respect the visibility attribute."], "extent": [8861, 9030]}], "container": true, "attrs": {"id": "trackprimexistence"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Use Network Drive Safe Save (Windows Only)"], "extent": [9030, 9074], "body": [{"type": "para", "indent": 8, "text": ["When running on Windows, the USD library often has issues saving layers to network mounted drives when those layers are currently loaded into a USD stage. This can make it impossible to overwrite a USD layer that is in use, even by the current Houdini session. This option works around this issue by having the USD ROP mute each layer right before ti is saved to disk (but only when running under Windows - on Linux and MacOS this parameter has no effect). Once the layer is saved, it is un-muted. This approach incurs a performance penalty as any stages using this layer will be recomposed twice instead of once. But in some settings this can make the save process much more robust."], "extent": [9107, 9800]}], "container": true, "attrs": {"id": "usenetworksafesave"}, "role": "item"}], "container": true, "role": "item_group"}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Extra files"], "extent": [9800, 9818], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 8, "text": ["Files to Save"], "extent": [9849, 9872], "body": [{"type": "para", "indent": 16, "text": ["A list of patterns matching which files the node is ", {"type": "em", "text": ["allowed"]}, " to save. If this is blank (the default), the node saves all files. You can use this, for example, to avoid rewriting layer files that you know will never change."], "extent": [9872, 10113]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Error Saving Layers With Implicit Paths"], "extent": [10113, 10162], "body": [{"type": "para", "indent": 16, "text": ["When this is on (the default), the node errors if it would otherwise write an anonymous in-memory layer (that is, a layer with no file path metadata) to disk."], "extent": [10162, 10338]}, {"type": "para", "indent": 16, "text": ["You will usually only turn this off if you are using the ", {"type": "ui", "text": ["Save style"]}, " ", {"type": "q", "text": ["Separate layers"]}, " to write out every layer separate for debugging purposes."], "extent": [10338, 10503]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Save Updates to Modified Files From Disk"], "extent": [10503, 10553], "body": [{"type": "para", "indent": 16, "text": ["If you use the ", {"scheme": "Node", "value": "/nodes/lop/loadlayer", "type": "link", "text": ["Load Layer LOP"], "fullpath": "/nodes/lop/loadlayer"}, " to bring a layer onto the stage, this ", {"type": "q", "text": ["editable"]}, " version of the layer on disk has metadata marking it as originally coming from disk, rather than being created from scratch by LOPs. When this is on, layers created this way are saved to disk just like any other layer with file path metadata."], "extent": [10593, 10953]}, {"type": "para", "indent": 16, "text": ["Turning this off prevents saving these layers to disk. This can be useful if you never want these ", {"type": "q", "text": ["edited from disk"]}, " layers to overwrite the original files, or at least prevent overwriting them until you are certain the output of the LOP network is correct, when you can allow the edited layers to be written to disk."], "extent": [10953, 11288]}], "container": true, "attrs": {"id": "savefilesfromdisk"}, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Flatten File Layers"], "extent": [11288, 11317], "body": [{"type": "para", "indent": 16, "text": ["When ", {"type": "ui", "text": ["Save Style"]}, " is ", {"type": "q", "text": ["Flatten Implicit Layers"]}, ", files loaded from disk with a Sublayer LOP are not considered anonymous layers, and so are not composed down. Turn this on to flatten layers from disk as if they were anonymous layers. This can be useful for generating more portable USD layers that rely on a minimal number of external layers. It can also be used to ", {"type": "q", "text": ["harden"]}, " the sublayered files on disk in their current state if they may be changing, but you are generating a USD file for archiving purposes and do not want it to reflect any upcoming changes to the external files."], "extent": [11317, 11918]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Flatten SOP Layers"], "extent": [11918, 11946], "body": [{"type": "para", "indent": 16, "text": ["When ", {"type": "ui", "text": ["Save Style"]}, " is ", {"type": "q", "text": ["Flatten Implicit Layers"]}, ", layers generated by importing data from SOPs with ", {"scheme": "Node", "value": "/nodes/lop/sopimport", "type": "link", "text": ["SOP Import"], "fullpath": "/nodes/lop/sopimport"}, " are not considered anonymous layers, and so are not composed down. Turn this on to flatten layers imported from SOPs as if they were anonymous layers. This can be useful for generating more portable USD layers that rely on a minimal number of external layers."], "extent": [11946, 12356]}], "container": true, "role": "item"}], "container": true, "role": "item_group"}], "attrs": {"id": "extrafiles_group"}}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Output processing"], "extent": [12356, 12380], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 8, "text": ["Output Processors"], "extent": [12417, 12444], "body": [{"type": "para", "indent": 16, "text": ["Add an ", {"scheme": null, "value": "/solaris/output#processors", "type": "link", "text": ["output processor"], "fullpath": "/solaris/output#processors", "fragment": "#processors"}, " to this node. Output processors are Python plugins that can alter the file locations and file path strings used for external files. The USD render node starts with one default output processor (called ", {"type": "code", "text": ["Use Relative Paths"]}, ", see below)."], "extent": [12483, 12788]}, {"type": "para", "indent": 16, "text": ["(See ", {"scheme": null, "value": "/solaris/output#processors", "type": "link", "text": ["output processors"], "fullpath": "/solaris/output#processors", "fragment": "#processors"}, " for information on how to write an output processor plugin.)"], "extent": [12788, 12918]}, {"type": "para", "indent": 16, "text": ["The following built-in processors are available:"], "extent": [12918, 12984]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 16, "text": ["Use Relative Paths"], "extent": [12984, 13020], "body": [{"type": "para", "indent": 24, "text": ["This is automatically added by default. This processor changes absolute file paths to relative paths in layer files. This allows you to use paths such as ", {"type": "code", "text": ["$HIP/usd/foo.usd"]}, " for loading, but have them written out as paths relative to the source file. This is recommended practice so you probably do not want to remove this processor."], "extent": [13020, 13378]}], "container": true}, {"type": "dt", "indent": 16, "text": ["Make Output Layer Extension"], "extent": [13378, 13423], "body": [{"type": "para", "indent": 24, "text": ["Normally, if you change the extension of the output file, it only affects that ", {"type": "q", "text": ["top-level"]}, " output file. All other external files are written to their embedded save paths, with their embedded extension. This processor changes the extension on all paths to match the extension of the output file. This means if you change the output file to use ", {"type": "code", "text": [".usda"]}, " (the textual format), when this processor is active, all external USD files will also switch to ", {"type": "code", "text": [".usda"]}, "."], "extent": [13423, 13904]}], "container": true}, {"type": "dt", "indent": 16, "text": ["Save Paths Relative to Output Path"], "extent": [13904, 13956], "body": [{"type": "para", "indent": 24, "text": ["Causes any Save Path parameters that are relative paths to be treated as if they are relative to the Output File parameter value. This makes it easy to ensure all files generated by a LOP network are saved into a common root directory. Changing the save location of the output file will implicitly change the save location of all other files."], "extent": [13956, 14324]}, {"type": "para", "indent": 24, "text": ["This processor has a ", {"type": "ui", "text": ["Root Directory"]}, " parameter which, if set, specifies a location other than the Output File to which Save Paths will be considered relative."], "extent": [14324, 14511]}], "container": true}, {"type": "dt", "indent": 16, "text": ["Use Search Paths"], "extent": [14511, 14545], "body": [{"type": "para", "indent": 24, "text": ["This processor includes a Search Path parameter. Each asset path is compared against the directories listed in this path. If the asset is inside one of the search paths, the asset will be referenced with a search path rather than a full path or relative path."], "extent": [14545, 14830]}], "container": true}, {"type": "dt", "indent": 16, "text": ["Copy All Assets to Referencing Layer Directory"], "extent": [14830, 14894], "body": [{"type": "para", "indent": 24, "text": ["This processor makes copies of all non-USD assets (such as texture maps and volume files) in the same directory as the USD file that references them. The USD file is updated to refer to these local copies of the assets. These updated references will use absolute paths, so it is recommended that you use this in conjunction with a ", {"type": "code", "text": ["Use Relative Paths"]}, " output processor. This localizing of assets makes it much easier to create USDZ archives of assets, since that format requires texture maps and similar assets to be in or contained under same directory holding the USD file."], "extent": [14894, 15495]}, {"type": "para", "indent": 24, "text": ["This processor has an ", {"type": "ui", "text": ["Output subdirectory"]}, " parameter which causes the assets to be copied into a specific subdirectory inside the directory where the USD file is being written. This parameter should be a relative path, such as ", {"type": "code", "text": ["textures"]}, ", not a full path to a directory."], "extent": [15495, 15794]}, {"type": "para", "indent": 24, "text": ["USD assets are not localized because doing so would break relative path references within those USD files. If USD data must also be localized to a single directory, it is recommended that this be accomplished by setting the ", {"type": "code", "text": ["Save Style"]}, " on the USD ROP to ", {"type": "code", "text": ["Flatten Stage"]}, ", which will gather all USD data into a single layer."], "extent": [15794, 16143]}, {"type": "para", "indent": 24, "text": ["If an asset file doesn\u2019t exist, or the asset file is already located in the same directory or any subdirectory of the referencing layer file, the asset is not copied."], "extent": [16143, 16336]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "outputprocessors"}, "role": "item"}], "container": true, "role": "item_group"}], "attrs": {"id": "outputprocessing_group"}}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Layer metadata"], "extent": [16336, 16357], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 8, "text": ["Default Primitive"], "extent": [16391, 16418], "body": [{"type": "para", "indent": 16, "text": ["Set this to the ", {"type": "strong", "text": ["name"]}, " of a root primitive on the current stage to set it as the ", {"scheme": null, "value": "/solaris/usd#default_prim", "type": "link", "text": ["default primitive"], "fullpath": "/solaris/usd#default_prim", "fragment": "#default_prim"}, " for the top-level file."], "extent": [16418, 16586]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Error Saving Layer With No Default Primitive"], "extent": [16586, 16640], "body": [{"type": "para", "indent": 16, "text": ["When this is on, the render node will error and stop cooking if you haven\u2019t specified a ", {"scheme": null, "value": "/solaris/usd#default_prim", "type": "link", "text": ["default primitive"], "fullpath": "/solaris/usd#default_prim", "fragment": "#default_prim"}, " for all layers being written out."], "extent": [16681, 16866]}, {"type": "para", "indent": 16, "text": ["This is a way to force yourself to make sure layers have default prims, so you know you can reference in files without having to manually specify a top-level prim."], "extent": [16866, 17047]}], "container": true, "attrs": {"id": "requiredefaultprim"}, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Save ROP\u2019s Time Information to Output"], "extent": [17047, 17094], "body": [{"type": "para", "indent": 16, "text": ["Write the start and end frames, as well as the current frames per second setting, to the top-level output file."], "extent": [17129, 17258]}], "container": true, "attrs": {"id": "savetimeinfo"}, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Clear Houdini-Specific Custom Data"], "extent": [17258, 17302], "body": [{"type": "para", "indent": 16, "text": ["LOP networks often attach Houdini-specific custom data to layers, prims, and properties. Houdini does not need this data to be stored on disk (usually it is related to how to write files), so by default Houdini strips out this data before saving. Normally there\u2019s no reason to turn this parameter off (it\u2019s possible it might help SideFX diagnosing a problem)."], "extent": [17347, 17724]}], "container": true, "attrs": {"id": "clearhoudinicustomdata"}, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Ensure Basic Metrics are Set on All Layers"], "extent": [17724, 17776], "body": [{"type": "para", "indent": 16, "text": ["This options ensures that the ", {"type": "code", "text": ["upAxis"]}, " and ", {"type": "code", "text": ["metersPerUnit"]}, " metadata is set in every USD file written to disk. If a value has not been explicitly authored on a layer by the LOP Network, the default up axis and meters per unit values from the Lighting Preferences are used."], "extent": [17815, 18105]}], "container": true, "attrs": {"id": "ensuremetricsset"}, "role": "item"}], "container": true, "role": "item_group"}], "attrs": {"id": "layermetadata_group"}}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Context options"], "extent": [18105, 18127], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 8, "text": ["Set ROP Cook Context Options"], "extent": [18163, 18201], "body": [{"type": "para", "indent": 16, "text": ["Controls whether this node sets the ", {"type": "code", "text": ["@ropcook"]}, ", ", {"type": "code", "text": ["@ropstart"]}, ", ", {"type": "code", "text": ["@ropend"]}, ", and ", {"type": "code", "text": ["@ropinc"]}, " context options when rendering. If enabled, these context options are automatically set to ", {"type": "code", "text": ["1"]}, " ro ", {"type": "code", "text": ["@ropcook"]}, ", and the values of the Start, End, and Increment Frame values from this node for ", {"type": "code", "text": ["@ropstart"]}, ", ", {"type": "code", "text": ["@ropend"]}, ", and ", {"type": "code", "text": ["@ropinc"]}, ". Using these standard context options it is easier to set up predictable behavior for Cache LOPs, LOPs that create ranges of time sampled values, and LOP nodes that are only used for generating viewport previews or final rendered output."], "extent": [18234, 18803]}], "container": true, "attrs": {"id": "setropcook"}, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Number of Options"], "extent": [18803, 18830], "body": [{"type": "para", "indent": 16, "text": ["Lets you specify context options that only apply while writing out files from this node. Set the number of context options to define/override, or use the plus and minus buttons to add or remove options."], "extent": [18864, 19084]}, {"type": "para", "indent": 16, "text": ["You could have two separate USD render nodes with different context options, so they would write out different USD from the same LOP network depending on uses of ", {"type": "code", "text": ["@contextoption"]}, " references in expressions. This could be useful for wedging, or to cause the LOP network to configure the stage in ways that are not good for interactively, but should be written to disk."], "extent": [19084, 19468]}], "container": true, "attrs": {"id": "optioncount"}, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Option Name"], "extent": [19468, 19489], "body": [{"type": "para", "indent": 16, "text": ["For each option, the name of the option. You can reference this option in an expression using ", {"type": "code", "text": ["@", {"type": "var", "text": ["name"]}]}, "."], "extent": [19521, 19645]}], "container": true, "attrs": {"id": "optionname"}, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Option Type"], "extent": [19645, 19666], "body": [{"type": "para", "indent": 16, "text": ["For each option, the type of data stored in the option, either a floating point number of a string."], "extent": [19699, 19816]}], "container": true, "attrs": {"id": "optiontype"}, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Option Value"], "extent": [19816, 19838], "body": [{"type": "para", "indent": 16, "text": ["For each option, the value of the option (while this node writes out USD)."], "extent": [19872, 19964]}], "container": true, "attrs": {"id": "optionvalue"}, "role": "item"}], "container": true, "role": "item_group"}], "attrs": {"id": "contextoptions_group2"}}, {"level": 2, "id": "scripts_tab", "container": true, "type": "h", "indent": 0, "text": ["Scripts"], "extent": [5360, 5388], "body": [{"type": "para", "indent": 4, "text": ["A script command can be specified for execution at the various execution\n    points. The expression language selected for the parameter determines\n    whether this command are hscript or python statements."], "extent": [5388, 5600]}, {"type": "para", "indent": 4, "text": ["Prior to execution, this node is automatically set as the global current\n    node."], "extent": [5600, 5688]}, {"type": "para", "indent": 4, "text": ["To run statements from a file instead, specify the path to the file with\n    either a ", {"type": "code", "text": [".cmd"]}, " extension (when the language is set to Hscript), or ", {"type": "code", "text": [".py"]}, "\n    extension (when the language is set to Python). Additional arguments to the\n    script can also be supplied, they will be parsed in a shell-like manner."], "extent": [5688, 6001]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 4, "text": ["Pre-Render Script"], "extent": [6001, 6024], "body": [{"type": "para", "indent": 8, "text": ["Run this script before any rendering."], "extent": [6024, 6070]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Pre-Frame Script"], "extent": [6070, 6092], "body": [{"type": "para", "indent": 8, "text": ["Run this script before each frame."], "extent": [6092, 6135]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Post-Frame Script"], "extent": [6135, 6158], "body": [{"type": "para", "indent": 8, "text": ["Run this script after each frame."], "extent": [6158, 6200]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Post-Render Script"], "extent": [6200, 6224], "body": [{"type": "para", "indent": 8, "text": ["Run this script after all rendering."], "extent": [6224, 6270]}], "container": true, "role": "item"}], "container": true}]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Initialize Simulation OPs"], "extent": [19996, 20023], "body": [{"type": "para", "indent": 4, "text": ["Initialize DOP simulations before rendering."], "extent": [20045, 20095]}], "container": true, "attrs": {"id": "initsim"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Alfred Style Progress"], "extent": [20095, 20118], "body": [{"type": "para", "indent": 8, "text": ["Print percentage complete value as files are written. This is in the style expected by Pixar\u2019s Alfred render queue."], "extent": [20144, 20269]}], "container": true, "attrs": {"id": "alfprogress"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Report Network Use"], "extent": [20269, 20289], "body": [{"type": "para", "indent": 8, "text": ["Print the number of bytes sent or received by the distributed simulation nodes during cooks triggered by this node."], "extent": [20317, 20446]}, {"type": "para", "indent": 4, "text": ["This does not track network usage from, for example, saving a file to an NFS mount. It only tracks the network communication of distributed Houdini nodes."], "extent": [20446, 20609]}], "container": true, "attrs": {"id": "reportnetwork"}, "role": "item"}], "container": true, "role": "item_group"}], "text": "Parameters"}], "title": ["USD"], "summary": ["Renders a LOP network out to one or more USD files. This node is available as render node or as a LOP."], "included": ["/nodes/out/standard", "/solaris/output"]}