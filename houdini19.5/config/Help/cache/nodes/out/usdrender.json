{"type": "root", "attrs": {"type": "node", "context": "out", "internal": "usdrender", "icon": "ROP/usdrender", "since": "18.0", "version": null, "namespace": null}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["USD Render"], "extent": [0, 15]}, {"type": "summary", "indent": 0, "text": ["Renders an output image from the stage generated by a LOP network."], "extent": [97, 172]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Overview"], "extent": [172, 187], "body": [{"type": "para", "indent": 0, "text": ["This node writes the USD generated by a LOP network to a temp file, then launches an external process (by default, ", {"scheme": null, "value": "/ref/utils/husk", "type": "link", "text": ["husk"], "fullpath": "/ref/utils/husk"}, ") to render an image or image sequence from the USD."], "extent": [187, 379]}, {"type": "para", "indent": 0, "text": ["Rendering uses the same USD interface (Hydra) as is used to render the Solaris viewport, but instead of displaying the generated pixel buffers, the renderer saves them to image files. You can choose to render using any Hydra client registered with USD."], "extent": [379, 634]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Configuration"], "extent": [634, 654], "body": [{"type": "para", "indent": 0, "text": ["Traditionally in Houdini, the renderer was configured using parameters on the render node. In USD, however, render settings are stored in a ", {"type": "code", "text": ["RenderSettings"]}, " primitive in the scene tree."], "extent": [654, 842]}, {"type": "para", "indent": 0, "text": ["See the help for the ", {"scheme": "Node", "value": "/nodes/lop/rendersettings", "type": "link", "text": ["Render Settings LOP"], "fullpath": "/nodes/lop/rendersettings"}, ", ", {"scheme": "Node", "value": "/nodes/lop/renderproduct", "type": "link", "text": ["Render Product LOP"], "fullpath": "/nodes/lop/renderproduct"}, ", and ", {"scheme": "Node", "value": "/nodes/lop/rendervar", "type": "link", "text": ["Render Var LOP"], "fullpath": "/nodes/lop/rendervar"}, " for more information about creating USD render settings."], "extent": [842, 1053]}, {"type": "para", "indent": 0, "text": ["The parameters on this node primarily deal with launching the render process, with just a few options to override key options for controlling the render."], "extent": [1053, 1209]}]}, {"level": 2, "id": "list", "container": true, "type": "h", "indent": 0, "text": ["Available renderers"], "extent": [1209, 1242], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": ["The list of renderers is filtered based on the data returned by the ", {"type": "code", "text": ["usdrenderers.py"]}, " script. The ", {"scheme": null, "value": "/ref/utils/husk", "type": "link", "text": ["husk"], "fullpath": "/ref/utils/husk"}, " utility, and by extension the USD Render node, only support renderers that can generate AOV buffers (that is, renderers whose ", {"type": "code", "text": ["aovsupport"]}, " attribute is ", {"type": "code", "text": ["True"]}, ")."], "extent": [1242, 1528]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["To render to other delegates, such as Houdini GL and Storm, that do not support AOV generation, use the ", {"scheme": "Node", "value": "/nodes/out/opengl", "type": "link", "text": ["OpenGL ROP"], "fullpath": "/nodes/out/opengl"}, " (this basically updates the viewport and takes a snapshot of its contents)."], "extent": [1528, 1740]}], "container": true}, {"type": "tip_group", "body": [{"type": "tip", "indent": 0, "role": "item", "extent": [1516, 1521], "body": [{"type": "para", "indent": 4, "text": ["You need to make sure the render delegate is found by the USD plug-in search, using the ", {"type": "code", "text": ["PXR_PLUGINPATH_NAME"]}, " environment variable."], "extent": [1551, 1688]}, {"type": "para", "indent": 4, "text": ["You can also set the environment variable ", {"type": "code", "text": ["TF_DEBUG"]}, " to ", {"type": "code", "text": ["PLUG_*"]}, ", which causes the USD library to print out useful information as it scans for and loads plug-ins."], "extent": [1688, 1857]}], "container": true, "attrs": {"id": "render_delegate_tip"}}], "container": true, "role": "item_group"}]}, {"level": 1, "id": "parameters", "container": true, "type": "parameters_section", "indent": 0, "role": "section", "extent": [1786, 1798], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Render to Disk"], "extent": [1798, 1815], "body": [{"type": "para", "indent": 4, "text": ["Renders with the last render control settings. This blocks Houdini until the render completes."], "extent": [1833, 1933]}], "container": true, "attrs": {"id": "execute"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Render to MPlay"], "extent": [1933, 1950], "body": [{"type": "para", "indent": 4, "text": ["Render directly into an MPlay preview window, instead of to an image file. (You can save the image to disk from inside MPlay.)"], "extent": [1974, 2106]}], "container": true, "attrs": {"id": "renderpreview"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Render to Disk in Background"], "extent": [2106, 2136], "body": [{"type": "para", "indent": 4, "text": ["Renders with the last render control settings in a background process."], "extent": [2164, 2240]}], "container": true, "attrs": {"id": "executebackground"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Controls"], "extent": [1570, 1580], "body": [{"type": "para", "indent": 8, "text": ["Click to open a dialog that lets you launch a ", {"type": "q", "text": ["one-off"]}, " render with different frame range and dependency settings."], "extent": [1607, 1731]}], "container": true, "attrs": {"id": "renderdialog"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Valid Frame Range"], "extent": [2268, 2287], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Render Current Frame"], "extent": [2287, 2313], "body": [{"type": "para", "indent": 8, "text": ["Render the current frame number (in the playbar)."], "extent": [2313, 2372]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Render Frame Range"], "extent": [2372, 2396], "body": [{"type": "para", "indent": 8, "text": ["Render each frame in the range set by the ", {"type": "ui", "text": ["Start/End/Inc"]}, " parameters below."], "extent": [2396, 2483]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Render Frame Range (Strict)"], "extent": [2483, 2516], "body": [{"type": "para", "indent": 8, "text": ["The ", {"type": "q", "text": ["Render Frame Range"]}, " option may generate frames outside the given range if they're requested by a render dependency. If you choose this option, this node will never render frames outside the given range."], "extent": [2516, 2733]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["Render Frame Range From Stage"], "extent": [2733, 2772], "body": [{"type": "para", "indent": 16, "text": ["Examines the USD stage of the source LOP node for a start and end timecode value. These are used as the start and end of the frame range to render. If the stage does not have this metadata set, executing a render operation will result in an error."], "extent": [2772, 3037]}], "container": true}], "container": true}], "container": true}], "container": true}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Start/End/Inc"], "extent": [2814, 2829], "body": [{"type": "para", "indent": 8, "text": ["When ", {"type": "ui", "text": ["Valid frame range"]}, " is ", {"type": "q", "text": ["Render frame range"]}, " or ", {"type": "q", "text": ["Render frame range (strict)"]}, ", the start and end frames (inclusive) and interval."], "extent": [2845, 2990]}], "container": true, "attrs": {"id": "f"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Preroll/Postroll/Inc"], "extent": [2990, 3012], "body": [{"type": "para", "indent": 8, "text": ["When ", {"type": "ui", "text": ["Valid frame range"]}, " is ", {"type": "q", "text": ["Render stage\u2019s frame range"]}, ", the number of frames before and after the stage\u2019s official start and end frame to save, and the interval between time samples."], "extent": [3034, 3230]}], "container": true, "attrs": {"id": "foffset"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Render All Frames With a Single Process"], "extent": [3077, 3118], "body": [{"type": "para", "indent": 4, "text": ["Render all frames in a background process. Default is off. This allows continued interaction with Houdini while the render process runs."], "extent": [3144, 3286]}, {"type": "para", "indent": 4, "text": ["To render multiple frames, the render process renders an image then advances the time on the scene and renders the next image (just like how the Solaris viewport plays back animation). If there is a lot of data shared between frames, this can render significantly faster compared to rendering a single frame per process."], "extent": [3286, 3612]}], "container": true, "attrs": {"id": "allframesatonce"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Render Delegate"], "extent": [3612, 3629], "body": [{"type": "para", "indent": 4, "text": ["The Hydra client to use to render the images. The default is Karma. Alternate Hydra clients must be registered with Houdini\u2019s USD libraries. See how the node gets the ", {"scheme": null, "value": "#list", "type": "link", "text": ["list of available renderers"], "fullpath": "/nodes/out/usdrender#list", "fragment": "#list"}, " above."], "extent": [3629, 3844]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["LOP Path"], "extent": [3844, 3854], "body": [{"type": "para", "indent": 4, "text": ["Render the USD stage output by this node. If this is blank, the node uses the node with the display flag."], "extent": [3872, 3983]}], "container": true, "attrs": {"id": "loppath"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Render Settings"], "extent": [3983, 4000], "body": [{"type": "para", "indent": 4, "text": ["Scene graph path to the ", {"type": "code", "text": ["RenderSettings"]}, " prim to render with. If this is blank, the node looks for default render settings on the root prim. If the root prim has no render settings, the node will use default settings."], "extent": [4025, 4248]}], "container": true, "attrs": {"id": "rendersettings"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Override Camera"], "extent": [4248, 4265], "body": [{"type": "para", "indent": 4, "text": ["Scene graph path to the ", {"type": "code", "text": ["Camera"]}, " prim to render from. If this is blank, the node uses the camera specified on the render settings primitive."], "extent": [4291, 4437]}], "container": true, "attrs": {"id": "override_camera"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Override Output Image"], "extent": [4437, 4460], "body": [{"type": "para", "indent": 4, "text": ["If this is not blank, render to this file path instead of the output specified in the ", {"type": "code", "text": ["RenderSettings"]}, " prim."], "extent": [4482, 4596]}], "container": true, "attrs": {"id": "outputimage"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Override Resolution"], "extent": [4596, 4617], "body": [{"type": "para", "indent": 4, "text": ["Override the resolution by either scaling the USD resolution by a percentage or by specifying a specific resolution."], "extent": [4640, 4762]}], "container": true, "attrs": {"id": "override_res"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Resolution Scale"], "extent": [4762, 4780], "body": [{"type": "para", "indent": 4, "text": ["Specify a scale (as a percentage) for the output resolution."], "extent": [4800, 4866]}], "container": true, "attrs": {"id": "res_scale"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Resolution"], "extent": [4866, 4878], "body": [{"type": "para", "indent": 4, "text": ["Specify a resolution explicitly."], "extent": [4897, 4935]}], "container": true, "attrs": {"id": "res_user"}, "role": "item"}], "container": true, "role": "item_group"}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Husk"], "extent": [4935, 4946], "body": [{"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Rendering"], "extent": [4946, 4965], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Instantaneous Shutter"], "extent": [4965, 4989], "body": [{"type": "para", "indent": 4, "text": ["Disable motion blur by setting the camera to have an instantaneous shutter time."], "extent": [4989, 5075]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Purpose"], "extent": [5075, 5084], "body": [{"type": "para", "indent": 4, "text": [{"type": "strong", "text": ["Comma"]}, " separated list of purposes to render (from ", {"type": "code", "text": ["geometry"]}, ", ", {"type": "code", "text": ["guide"]}, ", ", {"type": "code", "text": ["proxy"]}, ", and ", {"type": "code", "text": ["render"]}, "). The default is ", {"type": "code", "text": ["geometry,render"]}, "."], "extent": [5107, 5242]}], "container": true, "attrs": {"id": "husk_purpose"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Complexity"], "extent": [5242, 5254], "body": [{"type": "para", "indent": 4, "text": ["For surfaces that are ", {"type": "q", "text": ["refine-able"]}, " such as subdivision surfaces, this controls how many iterations of refinement to apply. Higher numbers give higher levels of detail on these surfaces but take longer to render."], "extent": [5280, 5498]}, {"type": "para", "indent": 4, "text": ["Internally, this sets the ", {"type": "em", "text": ["refinement level"]}, " on the Hydra delegate."], "extent": [5498, 5571]}, {"type": "table", "thead": [{"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["Complexity "], "role": "th", "extent": [5571, 5589], "container": true}, {"type": "cell", "indent": 8, "text": ["Refinement level "], "role": "th", "extent": [5589, 5617], "container": true}, {"type": "cell", "indent": 12, "text": ["Notes "], "role": "th", "extent": [5617, 5638]}], "divider": false}], "body": [{"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["Low "], "role": "td", "extent": [5638, 5648], "container": true}, {"type": "cell", "indent": 8, "text": [{"type": "code", "text": ["0"]}, " "], "role": "td", "extent": [5648, 5662], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 12, "text": ["Subdivision disabled (render subdivision mesh directly)"], "extent": [5662, 5730]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["Medium "], "role": "td", "extent": [5730, 5743], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": [{"type": "code", "text": ["2"]}, " |"], "extent": [5743, 5757]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["High "], "role": "td", "extent": [5757, 5768], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": [{"type": "code", "text": ["4"]}, " |"], "extent": [5768, 5782]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": ["Very High "], "role": "td", "extent": [5782, 5798], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": [{"type": "code", "text": ["8"]}], "extent": [5798, 5811]}]}], "divider": false}]}], "container": true, "attrs": {"id": "husk_complexity"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Enable Legacy EXR Mode"], "extent": [5811, 5835], "body": [{"type": "para", "indent": 4, "text": ["When saving OpenEXR images with multiple AOVs, husk will normally save the images using multi-part EXR files.  This extension (introduced in 2013) lets programs read a single AOV without having to read the entire image.  This allows most software to work much more efficiently."], "extent": [5860, 6143]}, {"type": "para", "indent": 4, "text": ["Some applications have not transitioned to support multi-part images.  If your pipeline uses software that doesn\u2019t support OpenEXR v2.0, this option will force husk to write out images in an inefficient, but more compatible format."], "extent": [6143, 6380]}], "container": true, "attrs": {"id": "husk_legacyexr"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Delegate Products"], "extent": [6380, 6399], "body": [{"type": "para", "indent": 4, "text": ["Enable render delegate products.  These allow render delegates to save non-raster products like deep images or photon maps.  These render products are render delegate specific."], "extent": [6399, 6581]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Restart Delegate"], "extent": [6581, 6599], "body": [{"type": "para", "indent": 4, "text": ["Normally, when rendering sequences, ", {"type": "code", "text": ["husk"]}, " uses UDS delta operations to make rendering more efficient.  The delegate is only told about scene data that changes frame-to-frame so it can share work between frames."], "extent": [6599, 6816]}, {"type": "para", "indent": 4, "text": ["This option will force the render delegate to be restarted when rendering sequences."], "extent": [6816, 6906]}, {"type": "para", "indent": 4, "text": ["Since restarting the delegate will cause the scene to be rebuilt, using this option can have significant performance impact and should only be used if required."], "extent": [6906, 7072]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Snapshot Interval"], "extent": [7072, 7091], "body": [{"type": "para", "indent": 4, "text": ["When this is on, the renderer writes out a snapshot file and partial image at every interval of this many seconds."], "extent": [7091, 7211]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Time Limit"], "extent": [7211, 7223], "body": [{"type": "para", "indent": 4, "text": ["When this is on, the renderer will terminate if the render time limit is exceeded.  Note that ", {"type": "code", "text": ["husk"]}, " will save the partial result before terminating."], "extent": [7223, 7378]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Time Limit Per-Image"], "extent": [7378, 7400], "body": [{"type": "para", "indent": 4, "text": ["When rendering multiple frames in a single process (Render All Frames With a Single Process), the time limit specified is applied per image rather than the entire sequence of images."], "extent": [7400, 7589]}], "container": true, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Monitor"], "extent": [7589, 7605], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["MPlay Monitor"], "extent": [7605, 7621], "body": [{"type": "para", "indent": 4, "text": ["When rendering to disk, open an MPlay window to interactively monitor progress."], "extent": [7642, 7727]}], "container": true, "attrs": {"id": "husk_mplay"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["AOVs"], "extent": [7727, 7733], "body": [{"type": "para", "indent": 4, "text": ["This is the list of AOVs to display in the MPlay monitor.  Specifying ", {"type": "code", "text": ["-"]}, " will monitor all AOVs."], "extent": [7733, 7835]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Monitor Zoom"], "extent": [7835, 7849], "body": [{"type": "para", "indent": 4, "text": ["This is a zoom factor applied to the monitor.  The monitor will display images at a fraction of the full resolution while the image written to disk will be full resolution."], "extent": [7874, 8052]}], "container": true, "attrs": {"id": "husk_mplayzoom"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["MPlay Session Name"], "extent": [8052, 8072], "body": [{"type": "para", "indent": 4, "text": ["When rendering to MPlay, all Houdini sessions will send the output to the same MPlay flipbook. This can be problematic when running multiple Houdini sessions. The MPlay Label lets you specify a label for the MPlay associated with the output driver. Only renders which match the given label will be sent to that MPlay."], "extent": [8097, 8420]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Houdini Process ID"], "extent": [8420, 8444], "body": [{"type": "para", "indent": 8, "text": ["Uses the operating system process identifier so that the MPlay flipbook will only accept renders from that Houdini session."], "extent": [8444, 8577]}], "container": true}, {"type": "dt", "indent": 4, "text": ["HIP Name"], "extent": [8577, 8591], "body": [{"type": "para", "indent": 8, "text": ["Uses the ", {"type": "code", "text": ["$HIPNAME"]}, " variable so the MPlay will only accept renders from the running ", {"type": "code", "text": ["$HIP"]}, " file."], "extent": [8591, 8697]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Output Driver Name"], "extent": [8697, 8721], "body": [{"type": "para", "indent": 8, "text": ["The MPlay flipbook will only accept renders from the given output driver. For example, if you copy paste the output driver, each output driver will be sent to different MPlay flipbooks because the operators will have different names."], "extent": [8721, 8964]}, {"type": "para", "indent": 8, "text": ["If there are multiple Houdini sessions, there may be output drivers in the other session which match the same operator name."], "extent": [8964, 9098]}, {"type": "para", "indent": 8, "text": ["For example, say you have two output drivers: ", {"type": "q", "text": ["High quality"]}, " and ", {"type": "q", "text": ["Low Quality"]}, ". If you set the MPlay Label to different values for the two output drivers, each render will be sent to different MPlay sessions."], "extent": [9098, 9317]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "husk_mplayname"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Python"], "extent": [9317, 9332], "body": [{"type": "para", "indent": 0, "text": ["Similar to how Houdini can run scripts during rendering, ", {"type": "code", "text": ["husk"]}, " can also run Python scripts.  These Python scripts can access the Usd stage using the ", {"type": "code", "text": ["stage"]}, " variable in Python."], "extent": [9332, 9512]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Husk Pre-Render"], "extent": [9512, 9529], "body": [{"type": "para", "indent": 4, "text": ["The Python script ", {"type": "code", "text": ["husk"]}, " runs before any rendering begins."], "extent": [9529, 9593]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Husk Pre-Frame"], "extent": [9593, 9609], "body": [{"type": "para", "indent": 4, "text": ["The Python script ", {"type": "code", "text": ["husk"]}, " runs before rendering each frame."], "extent": [9609, 9673]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Husk Post-Frame"], "extent": [9673, 9690], "body": [{"type": "para", "indent": 4, "text": ["The Python script ", {"type": "code", "text": ["husk"]}, " runs after rendering each frame.  This is run after all render products are saved."], "extent": [9690, 9803]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Husk Post-Render"], "extent": [9803, 9821], "body": [{"type": "para", "indent": 4, "text": ["The Python script ", {"type": "code", "text": ["husk"]}, " runs after all rendering."], "extent": [9821, 9878]}], "container": true, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Tiles"], "extent": [9878, 9892], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Tiled Render"], "extent": [9892, 9907], "body": [{"type": "para", "indent": 4, "text": [{"type": "code", "text": ["husk"]}, " can break up a single large image into multiple tiles and render each tile independently.  It does this by overriding the ", {"type": "code", "text": ["dataWindowNDC"]}, " setting defined on the render settings."], "extent": [9907, 10097]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Count"], "extent": [10097, 10104], "body": [{"type": "para", "indent": 4, "text": ["The number of tiles in the X and Y resolutions."], "extent": [10104, 10157]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Index"], "extent": [10157, 10164], "body": [{"type": "para", "indent": 4, "text": ["This is the tile that ", {"type": "code", "text": ["husk"]}, " should render.  The value should be between ", {"type": "code", "text": ["0"]}, " and the total number of tiles (", {"type": "code", "text": ["Count.x*Count.y"]}, ")."], "extent": [10164, 10297]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Suffix"], "extent": [10297, 10305], "body": [{"type": "para", "indent": 4, "text": ["Each output image will be suffixed with this string.  The string supports the same variable expansion ", {"type": "code", "text": ["husk"]}, " does on output images, but replacing the ", {"type": "code", "text": ["%02d"]}, " with the tile index instead of the frame number."], "extent": [10305, 10517]}], "container": true, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Statistics"], "extent": [10517, 10536], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Print Command Line to Console"], "extent": [10536, 10568], "body": [{"type": "para", "indent": 4, "text": ["This option can be used to debug exactly what command the ROP is executing."], "extent": [10568, 10649]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Verbosity"], "extent": [10649, 10660], "body": [{"type": "para", "indent": 4, "text": ["How much information to print out while rendering. Normally you should avoid ", {"type": "q", "text": ["Full with VEX profiling"]}, " (slow) or ", {"type": "q", "text": ["Full with VEX Profiling and NaN checks"]}, " (very slow), though they may be useful for debugging."], "extent": [10660, 10873]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["USD Trace"], "extent": [10873, 10884], "body": [{"type": "para", "indent": 4, "text": ["This enables USD tracing.  This information can be used to profile Usd performance in ", {"type": "code", "text": ["husk"]}, "."], "extent": [10910, 11009]}], "container": true, "attrs": {"id": "husk_usdtracing"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Chrome File"], "extent": [11009, 11022], "body": [{"type": "para", "indent": 4, "text": ["When using Chrome tracing, this is the file where the trace log should be stored."], "extent": [11048, 11135]}], "container": true, "attrs": {"id": "husk_chromefile"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Log Output"], "extent": [11135, 11147], "body": [{"type": "para", "indent": 4, "text": ["Capture the output from ", {"type": "code", "text": ["husk"]}, " and store the log in a file on disk."], "extent": [11166, 11239]}], "container": true, "attrs": {"id": "husk_log"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Append to Log Instead of Overwriting"], "extent": [11239, 11277], "body": [{"type": "para", "indent": 4, "text": ["Normally ", {"type": "code", "text": ["husk"]}, " will overwrite the log file on each run.  This option will cause output to be appended to the text in existing files."], "extent": [11302, 11441]}], "container": true, "attrs": {"id": "husk_logappend"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Output Log"], "extent": [11441, 11453], "body": [{"type": "para", "indent": 4, "text": ["This is the file where normal messages should be saved."], "extent": [11475, 11536]}], "container": true, "attrs": {"id": "husk_stdout"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Error Log"], "extent": [11536, 11547], "body": [{"type": "para", "indent": 4, "text": ["This is the file to which error messages should be saved. If this is the same file specified for the Output Log, the output and error messages will be interleaved (in the same way they are written to the console)."], "extent": [11569, 11789]}], "container": true, "attrs": {"id": "husk_stderr"}, "role": "item"}], "container": true, "role": "item_group"}]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Usd"], "extent": [11789, 11799], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Resolver Context Asset Path"], "extent": [11799, 11829], "body": [{"type": "para", "indent": 4, "text": ["This file path is passed to the render command line as the ", {"type": "code", "text": ["resolver-context"]}, " option. This argument is used to create an asset resolver context that helps the asset resolver find files while composing the USD stage. The default of this parameter is an expression that returns the corresponding parameter on the LOP Network that contains the selected ", {"type": "ui", "text": ["LOP path"]}], "extent": [11855, 12223]}], "container": true, "attrs": {"id": "resolvercontext"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Output File"], "extent": [3578, 3591], "body": [{"type": "para", "indent": 8, "text": ["The ", {"type": "q", "text": ["top-level"]}, " USD file to write the root layer to. Other layers that have file path metadata set will be written to their own USD files. A default output processor (see below) translates external file references in nodes to be relative to this file\u2019s directory, as is recommended."], "extent": [3615, 3907]}], "container": true, "attrs": {"id": "lopoutput"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Delete USD Files"], "extent": [12248, 12266], "body": [{"type": "para", "indent": 4, "text": ["Controls whether or not USD files saved to disk are deleted when the render process completes. In addition to deleting the USD files, any containing directories are also deleted if they are empty after deleting the USD files:"], "extent": [12288, 12519]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Delete if Saved to Temp Directory"], "extent": [12519, 12558], "body": [{"type": "para", "indent": 8, "text": ["Files saved to the Houdini temporary directory (", {"type": "code", "text": ["$HOUDINI_TEMP_DIR"]}, ") are deleted. Files saved to any other directory are not deleted."], "extent": [12558, 12701]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Always Delete"], "extent": [12701, 12720], "body": [{"type": "para", "indent": 8, "text": ["All files generated by this ROP are deleted."], "extent": [12720, 12774]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Never Delete"], "extent": [12774, 12792], "body": [{"type": "para", "indent": 8, "text": ["Files generated by this ROP are not deleted."], "extent": [12792, 12846]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "deletefiles"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Save Style"], "extent": [3907, 3919], "body": [{"type": "para", "indent": 8, "text": ["This node can apply some transformations to the layer stack before writing out files. These transformations do not affect the final composed stage, only the number of layer files generated."], "extent": [3943, 4142]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["Flatten Implicit Layers (Collapse Implicit Sublayers, Preserve References)"], "extent": [4142, 4226], "body": [{"type": "para", "indent": 16, "text": ["The default. Composes anonymous in-memory layers down onto the nearest layer with a file path (so the node will write out any layers that have file path metadata to separate USD files). This preserves references, variants, and other composition arcs."], "extent": [4226, 4494]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Flatten All Layers (Combine All Sublayers, Preserve References)"], "extent": [4494, 4567], "body": [{"type": "para", "indent": 16, "text": ["This composes all layers (both anonymous layers and layers with file paths) into a single layer. This preserves references, variants, and other composition arcs, so the node may still write out more than one file if external files were referenced in."], "extent": [4567, 4835]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Separate Layers (Preserve All Sublayers and References)"], "extent": [4835, 4900], "body": [{"type": "para", "indent": 16, "text": ["Don\u2019t compose any layers in any way. Even anonymous in-memory layers will be saved out to their own files (you should turn off ", {"type": "ui", "text": ["Error saving layers with implicit paths"]}, " so the node doesn\u2019t error trying to save anonymous layers)."], "extent": [4900, 5148]}, {"type": "para", "indent": 16, "text": ["This may be useful for debugging, especially in combination with debug flags on nodes, to see what each LOP node is doing."], "extent": [5148, 5288]}, {"type": "para", "indent": 16, "text": ["When the node has to write out a layer without file path metadata, it will automatically generate a relative file path based on information such as the node path of the node that generated the layer."], "extent": [5288, 5505]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Flatten Stage (Collapse All Sublayers and References)"], "extent": [5505, 5568], "body": [{"type": "para", "indent": 16, "text": ["This flattens all layers into a single stage, and ", {"type": "q", "text": ["bakes in"]}, " all composition arcs, even variant selections. This discards information such as which opinions came from which layer, and unused variants. This writes out a single USD file."], "extent": [5568, 5821]}, {"type": "para", "indent": 16, "text": ["This may be useful if you want to ", {"type": "q", "text": ["delete history"]}, " and make it seem like it a file wasn\u2019t composed from layers, references, variants, and so on."], "extent": [5821, 5983]}, {"type": "tip_group", "body": [{"type": "tip", "indent": 16, "role": "item", "extent": [5983, 6004], "body": [{"type": "para", "indent": 24, "text": ["If you want to ", {"type": "q", "text": ["preserve history"]}, " but want the convenience and portability of a single file, use the ", {"scheme": "Node", "value": "/nodes/out/usdzip", "type": "link", "text": ["USD Zip render node"], "fullpath": "/nodes/out/usdzip"}, " to generate a ", {"type": "code", "text": [".usdz"]}, " file."], "extent": [6004, 6196]}], "container": true}], "container": true, "role": "item_group"}], "container": true}], "container": true}], "container": true, "attrs": {"id": "savestyle"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Strip Layers Above Layer Breaks"], "extent": [6196, 6229], "body": [{"type": "para", "indent": 8, "text": ["Enable this option to prevent layers authored above Layer Break nodes from being written to disk by this ROP. This allows a Layer Break node to dictate which portions of the LOP Network are to be saved. Disabling this option allows this behavior to be overridden, forcing the full stage authored by the LOP network to be written to disk. This may be used for debugging purposes, or to write a complete scene to disk for rendering."], "extent": [6260, 6700]}], "container": true, "attrs": {"id": "striplayerbreaks"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Strip Post-Layers"], "extent": [6700, 6719], "body": [{"type": "para", "indent": 8, "text": ["Enable this option to prevent layers added using the ", {"scheme": "Hom", "value": "/hom/hou/LopNetwork#editablePostLayer", "type": "link", "text": "", "fallback_text": "hou.LopNetwork.editablePostLayer", "fullpath": "/hom/hou/LopNetwork#editablePostLayer", "fragment": "#editablePostLayer"}, " method from being written to disk. With this option disabled, these post-layers are flattened into the layer ", {"type": "ui", "text": ["Output file"]}, " layer."], "extent": [6749, 6982]}], "container": true, "attrs": {"id": "strippostlayers"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Track Primitive Existence to Set Visibility"], "extent": [8064, 8109], "body": [{"type": "para", "indent": 8, "text": ["LOP networks may generate vastly different scene graphs from one frame to the next. When combining these scene graphs over a frame range into a single animated scene graph, the set of primitives in the combined scene graph will be the union of the primitives in each frame\u2019s hierarchy. But if a mesh appears at frame 50, this generally means that it is desired for this mesh to not be visible prior to frame 50. Enable this option to cause this node to track a list of all primitives at each frame, and automatically author animated visibility attributes for any primitives that are added to or removed from the scene graph over time. This gives the appearance of primitives being added and removed over time."], "extent": [8142, 8861]}, {"type": "para", "indent": 8, "text": ["Only subclasses of ", {"type": "code", "text": ["UsdGeomImageable"]}, " primitives will be tracked this way, since these are the only USD primitive types which respect the visibility attribute."], "extent": [8861, 9030]}], "container": true, "attrs": {"id": "trackprimexistence"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Use Network Drive Safe Save (Windows Only)"], "extent": [9030, 9074], "body": [{"type": "para", "indent": 8, "text": ["When running on Windows, the USD library often has issues saving layers to network mounted drives when those layers are currently loaded into a USD stage. This can make it impossible to overwrite a USD layer that is in use, even by the current Houdini session. This option works around this issue by having the USD ROP mute each layer right before ti is saved to disk (but only when running under Windows - on Linux and MacOS this parameter has no effect). Once the layer is saved, it is un-muted. This approach incurs a performance penalty as any stages using this layer will be recomposed twice instead of once. But in some settings this can make the save process much more robust."], "extent": [9107, 9800]}], "container": true, "attrs": {"id": "usenetworksafesave"}, "role": "item"}], "container": true, "role": "item_group"}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Extra files"], "extent": [9800, 9818], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 8, "text": ["Files to Save"], "extent": [9849, 9872], "body": [{"type": "para", "indent": 16, "text": ["A list of patterns matching which files the node is ", {"type": "em", "text": ["allowed"]}, " to save. If this is blank (the default), the node saves all files. You can use this, for example, to avoid rewriting layer files that you know will never change."], "extent": [9872, 10113]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Error Saving Layers With Implicit Paths"], "extent": [10113, 10162], "body": [{"type": "para", "indent": 16, "text": ["When this is on (the default), the node errors if it would otherwise write an anonymous in-memory layer (that is, a layer with no file path metadata) to disk."], "extent": [10162, 10338]}, {"type": "para", "indent": 16, "text": ["You will usually only turn this off if you are using the ", {"type": "ui", "text": ["Save style"]}, " ", {"type": "q", "text": ["Separate layers"]}, " to write out every layer separate for debugging purposes."], "extent": [10338, 10503]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Save Updates to Modified Files From Disk"], "extent": [10503, 10553], "body": [{"type": "para", "indent": 16, "text": ["If you use the ", {"scheme": "Node", "value": "/nodes/lop/loadlayer", "type": "link", "text": ["Load Layer LOP"], "fullpath": "/nodes/lop/loadlayer"}, " to bring a layer onto the stage, this ", {"type": "q", "text": ["editable"]}, " version of the layer on disk has metadata marking it as originally coming from disk, rather than being created from scratch by LOPs. When this is on, layers created this way are saved to disk just like any other layer with file path metadata."], "extent": [10593, 10953]}, {"type": "para", "indent": 16, "text": ["Turning this off prevents saving these layers to disk. This can be useful if you never want these ", {"type": "q", "text": ["edited from disk"]}, " layers to overwrite the original files, or at least prevent overwriting them until you are certain the output of the LOP network is correct, when you can allow the edited layers to be written to disk."], "extent": [10953, 11288]}], "container": true, "attrs": {"id": "savefilesfromdisk"}, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Flatten File Layers"], "extent": [11288, 11317], "body": [{"type": "para", "indent": 16, "text": ["When ", {"type": "ui", "text": ["Save Style"]}, " is ", {"type": "q", "text": ["Flatten Implicit Layers"]}, ", files loaded from disk with a Sublayer LOP are not considered anonymous layers, and so are not composed down. Turn this on to flatten layers from disk as if they were anonymous layers. This can be useful for generating more portable USD layers that rely on a minimal number of external layers. It can also be used to ", {"type": "q", "text": ["harden"]}, " the sublayered files on disk in their current state if they may be changing, but you are generating a USD file for archiving purposes and do not want it to reflect any upcoming changes to the external files."], "extent": [11317, 11918]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Flatten SOP Layers"], "extent": [11918, 11946], "body": [{"type": "para", "indent": 16, "text": ["When ", {"type": "ui", "text": ["Save Style"]}, " is ", {"type": "q", "text": ["Flatten Implicit Layers"]}, ", layers generated by importing data from SOPs with ", {"scheme": "Node", "value": "/nodes/lop/sopimport", "type": "link", "text": ["SOP Import"], "fullpath": "/nodes/lop/sopimport"}, " are not considered anonymous layers, and so are not composed down. Turn this on to flatten layers imported from SOPs as if they were anonymous layers. This can be useful for generating more portable USD layers that rely on a minimal number of external layers."], "extent": [11946, 12356]}], "container": true, "role": "item"}], "container": true, "role": "item_group"}], "attrs": {"id": "extrafiles_group"}}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Output processing"], "extent": [12356, 12380], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 8, "text": ["Output Processors"], "extent": [12417, 12444], "body": [{"type": "para", "indent": 16, "text": ["Add an ", {"scheme": null, "value": "/solaris/output#processors", "type": "link", "text": ["output processor"], "fullpath": "/solaris/output#processors", "fragment": "#processors"}, " to this node. Output processors are Python plugins that can alter the file locations and file path strings used for external files. The USD render node starts with one default output processor (called ", {"type": "code", "text": ["Use Relative Paths"]}, ", see below)."], "extent": [12483, 12788]}, {"type": "para", "indent": 16, "text": ["(See ", {"scheme": null, "value": "/solaris/output#processors", "type": "link", "text": ["output processors"], "fullpath": "/solaris/output#processors", "fragment": "#processors"}, " for information on how to write an output processor plugin.)"], "extent": [12788, 12918]}, {"type": "para", "indent": 16, "text": ["The following built-in processors are available:"], "extent": [12918, 12984]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 16, "text": ["Use Relative Paths"], "extent": [12984, 13020], "body": [{"type": "para", "indent": 24, "text": ["This is automatically added by default. This processor changes absolute file paths to relative paths in layer files. This allows you to use paths such as ", {"type": "code", "text": ["$HIP/usd/foo.usd"]}, " for loading, but have them written out as paths relative to the source file. This is recommended practice so you probably do not want to remove this processor."], "extent": [13020, 13378]}], "container": true}, {"type": "dt", "indent": 16, "text": ["Make Output Layer Extension"], "extent": [13378, 13423], "body": [{"type": "para", "indent": 24, "text": ["Normally, if you change the extension of the output file, it only affects that ", {"type": "q", "text": ["top-level"]}, " output file. All other external files are written to their embedded save paths, with their embedded extension. This processor changes the extension on all paths to match the extension of the output file. This means if you change the output file to use ", {"type": "code", "text": [".usda"]}, " (the textual format), when this processor is active, all external USD files will also switch to ", {"type": "code", "text": [".usda"]}, "."], "extent": [13423, 13904]}], "container": true}, {"type": "dt", "indent": 16, "text": ["Save Paths Relative to Output Path"], "extent": [13904, 13956], "body": [{"type": "para", "indent": 24, "text": ["Causes any Save Path parameters that are relative paths to be treated as if they are relative to the Output File parameter value. This makes it easy to ensure all files generated by a LOP network are saved into a common root directory. Changing the save location of the output file will implicitly change the save location of all other files."], "extent": [13956, 14324]}, {"type": "para", "indent": 24, "text": ["This processor has a ", {"type": "ui", "text": ["Root Directory"]}, " parameter which, if set, specifies a location other than the Output File to which Save Paths will be considered relative."], "extent": [14324, 14511]}], "container": true}, {"type": "dt", "indent": 16, "text": ["Use Search Paths"], "extent": [14511, 14545], "body": [{"type": "para", "indent": 24, "text": ["This processor includes a Search Path parameter. Each asset path is compared against the directories listed in this path. If the asset is inside one of the search paths, the asset will be referenced with a search path rather than a full path or relative path."], "extent": [14545, 14830]}], "container": true}, {"type": "dt", "indent": 16, "text": ["Copy All Assets to Referencing Layer Directory"], "extent": [14830, 14894], "body": [{"type": "para", "indent": 24, "text": ["This processor makes copies of all non-USD assets (such as texture maps and volume files) in the same directory as the USD file that references them. The USD file is updated to refer to these local copies of the assets. These updated references will use absolute paths, so it is recommended that you use this in conjunction with a ", {"type": "code", "text": ["Use Relative Paths"]}, " output processor. This localizing of assets makes it much easier to create USDZ archives of assets, since that format requires texture maps and similar assets to be in or contained under same directory holding the USD file."], "extent": [14894, 15495]}, {"type": "para", "indent": 24, "text": ["This processor has an ", {"type": "ui", "text": ["Output subdirectory"]}, " parameter which causes the assets to be copied into a specific subdirectory inside the directory where the USD file is being written. This parameter should be a relative path, such as ", {"type": "code", "text": ["textures"]}, ", not a full path to a directory."], "extent": [15495, 15794]}, {"type": "para", "indent": 24, "text": ["USD assets are not localized because doing so would break relative path references within those USD files. If USD data must also be localized to a single directory, it is recommended that this be accomplished by setting the ", {"type": "code", "text": ["Save Style"]}, " on the USD ROP to ", {"type": "code", "text": ["Flatten Stage"]}, ", which will gather all USD data into a single layer."], "extent": [15794, 16143]}, {"type": "para", "indent": 24, "text": ["If an asset file doesn\u2019t exist, or the asset file is already located in the same directory or any subdirectory of the referencing layer file, the asset is not copied."], "extent": [16143, 16336]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "outputprocessors"}, "role": "item"}], "container": true, "role": "item_group"}], "attrs": {"id": "outputprocessing_group"}}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Layer metadata"], "extent": [16336, 16357], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 8, "text": ["Default Primitive"], "extent": [16391, 16418], "body": [{"type": "para", "indent": 16, "text": ["Set this to the ", {"type": "strong", "text": ["name"]}, " of a root primitive on the current stage to set it as the ", {"scheme": null, "value": "/solaris/usd#default_prim", "type": "link", "text": ["default primitive"], "fullpath": "/solaris/usd#default_prim", "fragment": "#default_prim"}, " for the top-level file."], "extent": [16418, 16586]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Error Saving Layer With No Default Primitive"], "extent": [16586, 16640], "body": [{"type": "para", "indent": 16, "text": ["When this is on, the render node will error and stop cooking if you haven\u2019t specified a ", {"scheme": null, "value": "/solaris/usd#default_prim", "type": "link", "text": ["default primitive"], "fullpath": "/solaris/usd#default_prim", "fragment": "#default_prim"}, " for all layers being written out."], "extent": [16681, 16866]}, {"type": "para", "indent": 16, "text": ["This is a way to force yourself to make sure layers have default prims, so you know you can reference in files without having to manually specify a top-level prim."], "extent": [16866, 17047]}], "container": true, "attrs": {"id": "requiredefaultprim"}, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Save ROP\u2019s Time Information to Output"], "extent": [17047, 17094], "body": [{"type": "para", "indent": 16, "text": ["Write the start and end frames, as well as the current frames per second setting, to the top-level output file."], "extent": [17129, 17258]}], "container": true, "attrs": {"id": "savetimeinfo"}, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Clear Houdini-Specific Custom Data"], "extent": [17258, 17302], "body": [{"type": "para", "indent": 16, "text": ["LOP networks often attach Houdini-specific custom data to layers, prims, and properties. Houdini does not need this data to be stored on disk (usually it is related to how to write files), so by default Houdini strips out this data before saving. Normally there\u2019s no reason to turn this parameter off (it\u2019s possible it might help SideFX diagnosing a problem)."], "extent": [17347, 17724]}], "container": true, "attrs": {"id": "clearhoudinicustomdata"}, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Ensure Basic Metrics are Set on All Layers"], "extent": [17724, 17776], "body": [{"type": "para", "indent": 16, "text": ["This options ensures that the ", {"type": "code", "text": ["upAxis"]}, " and ", {"type": "code", "text": ["metersPerUnit"]}, " metadata is set in every USD file written to disk. If a value has not been explicitly authored on a layer by the LOP Network, the default up axis and meters per unit values from the Lighting Preferences are used."], "extent": [17815, 18105]}], "container": true, "attrs": {"id": "ensuremetricsset"}, "role": "item"}], "container": true, "role": "item_group"}], "attrs": {"id": "layermetadata_group"}}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Context options"], "extent": [18105, 18127], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 8, "text": ["Set ROP Cook Context Options"], "extent": [18163, 18201], "body": [{"type": "para", "indent": 16, "text": ["Controls whether this node sets the ", {"type": "code", "text": ["@ropcook"]}, ", ", {"type": "code", "text": ["@ropstart"]}, ", ", {"type": "code", "text": ["@ropend"]}, ", and ", {"type": "code", "text": ["@ropinc"]}, " context options when rendering. If enabled, these context options are automatically set to ", {"type": "code", "text": ["1"]}, " ro ", {"type": "code", "text": ["@ropcook"]}, ", and the values of the Start, End, and Increment Frame values from this node for ", {"type": "code", "text": ["@ropstart"]}, ", ", {"type": "code", "text": ["@ropend"]}, ", and ", {"type": "code", "text": ["@ropinc"]}, ". Using these standard context options it is easier to set up predictable behavior for Cache LOPs, LOPs that create ranges of time sampled values, and LOP nodes that are only used for generating viewport previews or final rendered output."], "extent": [18234, 18803]}], "container": true, "attrs": {"id": "setropcook"}, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Number of Options"], "extent": [18803, 18830], "body": [{"type": "para", "indent": 16, "text": ["Lets you specify context options that only apply while writing out files from this node. Set the number of context options to define/override, or use the plus and minus buttons to add or remove options."], "extent": [18864, 19084]}, {"type": "para", "indent": 16, "text": ["You could have two separate USD render nodes with different context options, so they would write out different USD from the same LOP network depending on uses of ", {"type": "code", "text": ["@contextoption"]}, " references in expressions. This could be useful for wedging, or to cause the LOP network to configure the stage in ways that are not good for interactively, but should be written to disk."], "extent": [19084, 19468]}], "container": true, "attrs": {"id": "optioncount"}, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Option Name"], "extent": [19468, 19489], "body": [{"type": "para", "indent": 16, "text": ["For each option, the name of the option. You can reference this option in an expression using ", {"type": "code", "text": ["@", {"type": "var", "text": ["name"]}]}, "."], "extent": [19521, 19645]}], "container": true, "attrs": {"id": "optionname"}, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Option Type"], "extent": [19645, 19666], "body": [{"type": "para", "indent": 16, "text": ["For each option, the type of data stored in the option, either a floating point number of a string."], "extent": [19699, 19816]}], "container": true, "attrs": {"id": "optiontype"}, "role": "item"}, {"type": "parameters_item", "indent": 8, "text": ["Option Value"], "extent": [19816, 19838], "body": [{"type": "para", "indent": 16, "text": ["For each option, the value of the option (while this node writes out USD)."], "extent": [19872, 19964]}], "container": true, "attrs": {"id": "optionvalue"}, "role": "item"}], "container": true, "role": "item_group"}], "attrs": {"id": "contextoptions_group2"}}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Driver"], "extent": [13144, 13157], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Render Command"], "extent": [13157, 13174], "body": [{"type": "para", "indent": 4, "text": ["This is the external command used to render. If this parameter is disabled (by turning off the ", {"type": "ui", "text": ["Run command"]}, " parameter) the command is not executed. The USD scene will still be output to disk, and the command will be output to the console (if ", {"type": "ui", "text": ["Print command line to console"]}, " is turned on), but the command will not actually be run. Disabling the running of the command also prevents the deletion of the generated USD files, even if they are in the Houdini temp directory. This mode can be very useful for debugging or for batch farm rendering."], "extent": [13174, 13727]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Wait for Render to Complete"], "extent": [13727, 13756], "body": [{"type": "para", "indent": 4, "text": ["Causes Houdini to freeze after starting the render process, and only resume when the renderer exits. (This is included mostly for parameter parity with the old Mantra render nodes. It may be useful to implement a crude form of dependency ordering when batch rendering.)"], "extent": [13786, 14061]}], "container": true, "attrs": {"id": "soho_foreground"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Alfred Style Progress"], "extent": [20095, 20118], "body": [{"type": "para", "indent": 8, "text": ["Print percentage complete value as files are written. This is in the style expected by Pixar\u2019s Alfred render queue."], "extent": [20144, 20269]}], "container": true, "attrs": {"id": "alfprogress"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Create Intermediate Directories"], "extent": [14088, 14121], "body": [{"type": "para", "indent": 4, "text": ["Create intermediate parent directories for output files as needed, such as for generated images."], "extent": [14138, 14240]}], "container": true, "attrs": {"id": "mkpath"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["USD Output Directory"], "extent": [14240, 14262], "body": [{"type": "para", "indent": 4, "text": ["The directory where any required USD files will be saved. If this directory is in the ", {"type": "code", "text": ["$HOUDINI_TEMP_DIR"]}, ", it will be deleted automatically when the render is complete."], "extent": [14262, 14436]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Maximum Threads"], "extent": [14436, 14453], "body": [{"type": "para", "indent": 4, "text": ["Uses the ", {"type": "code", "text": ["-j"]}, " command line option to ", {"type": "code", "text": ["husk"]}, " to specify the maximum number of threads that process should use. This parameter can be enabled to ensure that some portion of the computer\u2019s processing powere remains available for tasks other than the render. Positive values specify an absolute number of threads. Negative values indicate that the number of threads should be equal to the number of CPU cores on the machines minus the specified number."], "extent": [14453, 14907]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Initialize Simulation OPs"], "extent": [19996, 20023], "body": [{"type": "para", "indent": 4, "text": ["Initialize DOP simulations before rendering."], "extent": [20045, 20095]}], "container": true, "attrs": {"id": "initsim"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Scripts"], "extent": [14931, 14945], "body": [{"type": "include_group", "body": [{"ext": "usd#prerender", "type": "include", "indent": 0, "role": "item", "extent": [14945, 14971]}, {"ext": "usd#preframe", "type": "include", "indent": 0, "role": "item", "extent": [14971, 14995]}, {"ext": "usd#postframe", "type": "include", "indent": 0, "role": "item", "extent": [14995, 15020]}, {"ext": "usd#postrender", "type": "include", "indent": 0, "role": "item", "extent": [15020, 15046]}], "container": true, "role": "item_group"}]}], "text": "Parameters"}], "title": ["USD Render"], "summary": ["Renders an output image from the stage generated by a LOP network."], "included": ["/nodes/out/standard", "/nodes/out/usd", "/solaris/output", "/solaris/view"]}