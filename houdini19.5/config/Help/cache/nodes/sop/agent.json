{"type": "root", "attrs": {"type": "node", "context": "sop", "internal": "agent", "icon": "CROWDS/agent", "tags": "crowds, agents", "since": "14.0", "version": null, "namespace": null}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["Agent"], "extent": [0, 10]}, {"type": "summary", "indent": 0, "text": ["Creates agent primitives."], "extent": [110, 143]}, {"type": "para", "indent": 0, "text": ["This node is used to create agent primitives for a crowd of characters. To get\nthe definition of the agents, this can either be from files previously baked\nfrom an ", {"scheme": "Node", "value": "/nodes/out/agent", "type": "link", "text": "", "fullpath": "/nodes/out/agent"}, " output node, or directly from a character rig in the\nscene."], "extent": [143, 385]}, {"type": "para", "indent": 0, "text": ["An agent primitive contains references to:"], "extent": [385, 429]}, {"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": ["a Rig \u2013 The transform hierarchy of the agent."], "extent": [429, 478]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["a Shape Library \u2013 The geometry for the agent."], "extent": [478, 527]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["Layers \u2013 An assignment of the geometry from the Shape Library to a transform in the rig."], "extent": [527, 619]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["Clips \u2013 Animation used by the agent."], "extent": [619, 660]}], "container": true}, {"type": "tip_group", "body": [{"type": "tip", "indent": 0, "role": "item", "extent": [660, 665], "body": [{"type": "para", "indent": 4, "text": ["If the render gets clipped due to bounding boxes in crowds, try creating a collision layer by turning on the ", {"type": "ui", "text": ["Generate Collision Layer"]}, " parameter."], "extent": [665, 819]}], "container": true}], "container": true, "role": "item_group"}, {"level": 1, "id": "parameters", "container": true, "type": "parameters_section", "indent": 0, "role": "section", "extent": [819, 831], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Group"], "extent": [831, 839], "body": [{"type": "para", "indent": 4, "text": ["The points in the input geometry to use as agent positions."], "extent": [839, 904]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Agent Name"], "extent": [904, 916], "body": [{"type": "para", "indent": 4, "text": ["Base name of the agent. For each created agent, the\n    ", {"type": "code", "text": ["name"]}, " primitive attribute is set to this name with a ", {"type": "code", "text": ["_", {"type": "var", "text": ["number"]}]}, "\n    suffix. When ", {"type": "ui", "text": ["Allow Attributes to Override"]}, " is on, this is\n    replaced by any ", {"type": "code", "text": ["agentname"]}, " string attributes on the input points."], "extent": [916, 1181]}, {"type": "para", "indent": 4, "text": ["The value of this parameter can be referenced via the ", {"type": "code", "text": ["$AGENT"]}, " local\n    variable."], "extent": [1181, 1269]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Current Layer"], "extent": [1269, 1284], "body": [{"type": "para", "indent": 4, "text": ["Name of the layer to use.\n    When ", {"type": "ui", "text": ["Allow Attributes to Override"]}, " is enabled, this is replaced by any ", {"type": "code", "text": ["currentlayer"]}, " string attributes on the input points."], "extent": [1284, 1447]}, {"type": "para", "indent": 4, "text": ["By default, this parameter is empty, which means to use the value of the ", {"type": "ui", "text": ["Layer Name"]}, " parameter.\n    When loading from disk, the layer named ", {"type": "code", "text": ["default"]}, " will be used if it exists, and otherwise the first available layer in the agent definition will be used."], "extent": [1447, 1710]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Collision Layer"], "extent": [1710, 1727], "body": [{"type": "para", "indent": 4, "text": ["Name of the collision layer to use.\n    When ", {"type": "ui", "text": ["Allow Attributes to Override"]}, " is enabled, this is replaced by any ", {"type": "code", "text": ["collisionlayer"]}, " string attributes on the input points."], "extent": [1727, 1902]}, {"type": "para", "indent": 4, "text": ["By default, this parameter is empty, which means to use the value of the ", {"type": "ui", "text": ["Collision Layer Name"]}, " parameter.\n    When loading from disk, the layer named ", {"type": "code", "text": ["collision"]}, " will be used if it exists, and otherwise the first available layer in the agent definition will be used."], "extent": [1902, 2177]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Current Clip"], "extent": [2177, 2191], "body": [{"type": "para", "indent": 4, "text": ["Name of the animation clip the agents will be running.\n    When ", {"type": "ui", "text": ["Allow Attributes to Override"]}, " is enabled, this is replaced by any\n    ", {"type": "code", "text": ["currentclip"]}, " string attributes on the input points. By default, this\n    parameter is empty, which means to use the first available clip in the\n    agent definition."], "extent": [2191, 2500]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Clip Offset"], "extent": [2500, 2513], "body": [{"type": "para", "indent": 4, "text": ["Time into the current clip to begin playing at (in seconds).\n    When ", {"type": "ui", "text": ["Allow Attributes to Override"]}, " is enabled, and the input points\n    contain the ", {"type": "code", "text": ["clipoffset"]}, " float attribute, then those values are added\n    to this parameter value for each agent."], "extent": [2513, 2772]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Apply Clip Locomotion"], "extent": [2772, 2795], "body": [{"type": "para", "indent": 4, "text": ["If enabled, apply the ", {"type": "code", "text": ["__locomotion__"]}, " transform from the agent rig so that\n    you can easily previsualize locomotive clips."], "extent": [2795, 2926]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Allow Attributes to Override"], "extent": [2926, 2956], "body": [{"type": "para", "indent": 4, "text": ["Replace the values of ", {"type": "ui", "text": ["Current Layer"]}, ", ", {"type": "ui", "text": ["Current Clip"]}, ", and\n    ", {"type": "ui", "text": ["Clip Offset"]}, " with values from equivalent point attributes, if present."], "extent": [2956, 3102]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Keep Primitives"], "extent": [3102, 3119], "body": [{"type": "para", "indent": 4, "text": ["Normally, primitives are deleted for the points that agents are created on.\n    If this is enabled, then the primitives will not be deleted."], "extent": [3119, 3265]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Reload"], "extent": [3265, 3273], "body": [{"type": "para", "indent": 4, "text": ["Reloads the agent definition."], "extent": [3289, 3324]}], "container": true, "attrs": {"id": "reload"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Input"], "extent": [3324, 3331], "body": [{"type": "para", "indent": 4, "text": ["Specify the source to create agents from. See below for details on the\n    parameters for each of these input sources."], "extent": [3331, 3455]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Character Rig"], "extent": [3455, 3474], "body": [{"type": "para", "indent": 8, "text": ["Create the agent definition from an actual character subnetwork/asset in the scene.\n        To share agent definitions between multiple scenes and reduce the size of ", {"scheme": null, "value": "/crowds/caches", "type": "link", "text": ["caches"], "fullpath": "/crowds/caches"}, ", you may want to ", {"scheme": "Node", "value": "/nodes/sop/agentdefinitioncache", "type": "link", "text": ["save the agent definition to disk"], "fullpath": "/nodes/sop/agentdefinitioncache"}, "."], "extent": [3474, 3757]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Agent Definition Cache"], "extent": [3757, 3785], "body": [{"type": "para", "indent": 8, "text": ["Load the agent definition from disk (previously baked out using the ", {"scheme": "Node", "value": "/nodes/out/agent", "type": "link", "text": ["Agent render node"], "fullpath": "/nodes/out/agent"}, " or ", {"scheme": "Node", "value": "/nodes/sop/agentdefinitioncache", "type": "link", "text": ["Agent Definition Cache SOP"], "fullpath": "/nodes/sop/agentdefinitioncache"}, ")."], "extent": [3785, 3961]}], "container": true}, {"type": "dt", "indent": 4, "text": ["FBX"], "extent": [3961, 3970], "body": [{"type": "para", "indent": 8, "text": ["Get the information from an FBX file containing a character."], "extent": [3970, 4040]}], "container": true}, {"type": "dt", "indent": 4, "text": ["USD"], "extent": [4040, 4049], "body": [{"type": "para", "indent": 8, "text": ["Create the agent definition from a UsdSkel character (a USD ", {"type": "code", "text": ["SkelRoot"]}, " primitive).\n        The source USD stage can be a file on disk or a LOP node.\n        The animation clip\u2019s frame range is determined from the stage\u2019s ", {"type": "code", "text": ["startTimeCode"]}, " and ", {"type": "code", "text": ["endTimeCode"]}, " metadata, which can be modified using the ", {"scheme": "Node", "value": "/nodes/lop/configurelayer", "type": "link", "text": ["Configure Layer LOP"], "fullpath": "/nodes/lop/configurelayer"}, "."], "extent": [4049, 4402]}], "container": true}], "container": true}], "container": true, "role": "item"}], "container": true, "role": "item_group"}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Input: Character Rig"], "extent": [4402, 4429], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Character Rig"], "extent": [4429, 4445], "body": [{"type": "para", "indent": 4, "text": ["Path to the object subnetwork containing the character rig."], "extent": [4469, 4534]}], "container": true, "attrs": {"id": "objsubnet"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Traverse Outputs"], "extent": [4534, 4552], "body": [{"type": "para", "indent": 4, "text": ["When enabled, the ", {"type": "ui", "text": ["Character Rig"]}, " path is used to specify which nodes to import by traversing its outputs instead of its children."], "extent": [4577, 4715]}], "container": true, "attrs": {"id": "traverseoutputs"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Pattern"], "extent": [4715, 4724], "body": [{"type": "para", "indent": 4, "text": ["Pattern used to limit which nodes should be imported. Patterns using usual\n    ", {"scheme": "Cmd", "value": "/commands/opglob", "type": "link", "text": ["opglob"], "fallback_text": "opglob", "fullpath": "/commands/opglob"}, " syntax along with\n    ", {"scheme": null, "value": "/ref/panes/bundles", "type": "link", "text": [{"type": "code", "text": ["@", {"type": "var", "text": ["bundle"]}]}, " references"], "fullpath": "/ref/panes/bundles"}, " are accepted."], "extent": [4744, 4930]}, {"type": "note_group", "body": [{"type": "note", "indent": 4, "role": "item", "extent": [4930, 4940], "body": [{"type": "para", "indent": 8, "text": ["Relative paths specified here are relative to this node, not to the\n        ", {"type": "ui", "text": ["Character Rig"]}, "."], "extent": [4940, 5044]}], "container": true}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "objpattern"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Type"], "extent": [5044, 5050], "body": [{"type": "para", "indent": 4, "text": ["Optional mask to further restrict which ", {"scheme": null, "value": "/nodes/obj/index", "type": "link", "text": ["object node types"], "fullpath": "/nodes/obj/index"}, "  will be imported.\n    Disable the toggles to prevent baking particular types."], "extent": [5067, 5228]}], "container": true, "attrs": {"id": "objtype"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Minimal Nodes"], "extent": [5228, 5243], "body": [{"type": "para", "indent": 4, "text": ["Only import objects whose display flags are on. If you turn this off, ", {"type": "em", "text": ["all"]}, "\n    nodes in the character rig are imported into the animation clip."], "extent": [5270, 5420]}], "container": true, "attrs": {"id": "minimalnodes"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Keep Transforms for Deforming Shapes"], "extent": [5420, 5458], "body": [{"type": "para", "indent": 4, "text": ["When ", {"type": "ui", "text": ["Minimal Nodes"]}, " is enabled, specifies whether nodes containing deforming geometry are included in the agent\u2019s rig and clips."], "extent": [5493, 5630]}], "container": true, "attrs": {"id": "keepdeformingshapexforms"}, "role": "item"}], "container": true, "role": "item_group"}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Shape Library"], "extent": [5630, 5652], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Convert to Polygon Soups"], "extent": [5652, 5679], "body": [{"type": "para", "indent": 4, "text": ["Combine polygon primitives into ", {"scheme": "Node", "value": "/nodes/sop/polysoup", "type": "link", "text": ["polygon soup primitives"], "fullpath": "/nodes/sop/polysoup"}, " when creating the shape library.\n    This can reduce memory usage, particularly when rendering with Mantra."], "extent": [5712, 5901]}], "container": true, "attrs": {"id": "converttopolysoups"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Layers"], "extent": [5901, 5916], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Layer Name"], "extent": [5916, 5929], "body": [{"type": "para", "indent": 4, "text": ["The default layer for the agent, created using the display flags of the\n    objects.  Every agent must have at least one layer."], "extent": [5953, 6086]}], "container": true, "attrs": {"id": "layername"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Bounds Scale"], "extent": [6086, 6100], "body": [{"type": "para", "indent": 4, "text": ["Specifies a scale for the bounding box of each shape in the default layer.\n    See the ", {"scheme": null, "value": "/crowds/agents#boundingbox", "type": "link", "text": ["Agent Primitive help page"], "fullpath": "/crowds/agents#boundingbox", "fragment": "#boundingbox"}, " for more information on how an agent\u2019s bounding box is computed."], "extent": [6131, 6343]}], "container": true, "attrs": {"id": "layerboundsscale"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Generate Collision Layer"], "extent": [6343, 6369], "body": [{"type": "para", "indent": 4, "text": ["Generate a collision layer from geometry containing capture/deform weights.\n    This generates capture region primitives and assigns them to the\n    corresponding bones in the rig."], "extent": [6401, 6587]}], "container": true, "attrs": {"id": "generatecollision"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Collision Layer Name"], "extent": [6587, 6609], "body": [{"type": "para", "indent": 4, "text": ["When ", {"type": "ui", "text": ["Generate Collision Layer"]}, " is on, the name of the collision layer."], "extent": [6637, 6716]}], "container": true, "attrs": {"id": "collisionname"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Clip"], "extent": [6716, 6729], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Clip Name"], "extent": [6729, 6741], "body": [{"type": "para", "indent": 4, "text": ["Name of the baked out clip (agent animation).\n    The animation is taken from the current scene."], "extent": [6764, 6866]}], "container": true, "attrs": {"id": "clipname"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Additional Channels"], "extent": [6866, 6887], "body": [{"type": "para", "indent": 4, "text": ["Adds channels from the specified CHOP node to the agent\u2019s clip."], "extent": [6906, 6975]}], "container": true, "attrs": {"id": "choppath"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Frame Range"], "extent": [6975, 6988], "body": [{"type": "para", "indent": 4, "text": ["Whether to use the scene\u2019s global frame range\n    or the ", {"type": "ui", "text": ["Start/end/inc"]}, " parameters."], "extent": [6988, 7080]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Start/End/Inc"], "extent": [7080, 7095], "body": [{"type": "para", "indent": 4, "text": ["When ", {"type": "ui", "text": ["Frame Range"]}, " is ", {"type": "q", "text": ["Specific"]}, ", the start frame, end frame, and frame\n    increment to bake out."], "extent": [7095, 7205]}, {"type": "para", "indent": 4, "text": ["All values may be decimal (for example, start on frame 1.5)."], "extent": [7205, 7271]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Shift Clip to Frame 1"], "extent": [7271, 7294], "body": [{"type": "para", "indent": 4, "text": ["Shift output clips from the specified frame range to start at frame 1."], "extent": [7315, 7391]}], "container": true, "attrs": {"id": "shiftstart"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Locomotion"], "extent": [7391, 7410], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Create Locomotion Joint"], "extent": [7410, 7436], "body": [{"type": "para", "indent": 4, "text": ["When enabled, this will create an extra joint named ", {"type": "code", "text": ["__locomotion__"]}, " which\n    serves as a placeholder for factored out locomotion animation when\n    ", {"type": "ui", "text": ["Convert to In-Place Animation"]}, " is enabled."], "extent": [7468, 7669]}], "container": true, "attrs": {"id": "createlocomotionjoint"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Convert to In-Place Animation"], "extent": [7669, 7700], "body": [{"type": "para", "indent": 4, "text": ["Convert a moving character animation to an in-place clip, by subtracting\n    the positions of the ", {"type": "ui", "text": ["Locomotion Node"]}, " (relative to the origin or where\n    it was on the first frame depending on ", {"type": "ui", "text": ["Use Pivot from First Frame"]}, "\n    parameter)."], "extent": [7722, 7968]}], "container": true, "attrs": {"id": "inplace"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Locomotion Node"], "extent": [7968, 7985], "body": [{"type": "para", "indent": 4, "text": ["The object inside the ", {"type": "ui", "text": ["Character Rig"]}, " that controls the\n    locomotion of the character (the node in the character rig that has\n    translation channels that move it forward in space). When\n    ", {"type": "ui", "text": ["Convert to In-Place Animation"]}, ", Houdini uses this to remove the\n    translation from the character animation to keep the character in place.\n    (The ", {"scheme": "Node", "value": "/nodes/dop/crowdsolver", "type": "link", "text": ["crowd solver node"], "fullpath": "/nodes/dop/crowdsolver"}, " assumes that the agent\n    animation is in-place since it will be attached to a moving particle.)"], "extent": [8014, 8507]}, {"type": "para", "indent": 4, "text": ["The locomotion animation is placed in a separate transform in the rig named\n    ", {"type": "code", "text": ["__locomotion__"]}, ". If this parameter is empty, then ", {"type": "code", "text": ["__locomotion__"]}, " will\n    use the ", {"type": "ui", "text": ["Character Rig"]}, "."], "extent": [8507, 8696]}], "container": true, "attrs": {"id": "locomotionnode"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Locomotion Orient"], "extent": [8696, 8715], "body": [{"type": "para", "indent": 4, "text": ["If this parameter and ", {"type": "ui", "text": ["Locomotion Node"]}, " are specified, the generated\n    ", {"type": "code", "text": ["__locomotion__"]}, " transform will also contain rotational information using\n    the vector from the ", {"type": "ui", "text": ["Locomotion Node"]}, " to the ", {"type": "ui", "text": ["Locomotion Orient"]}, " node.\n    If this transform is the same as the ", {"type": "ui", "text": ["Locomotion Node"]}, ", its orientation will be directly extracted.\n    This parameter has no effect if ", {"type": "ui", "text": ["Locomotion Node"]}, " is empty."], "extent": [8746, 9151]}], "container": true, "attrs": {"id": "locomotionlookat"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Project Positions on Dominant Axis"], "extent": [9151, 9187], "body": [{"type": "para", "indent": 4, "text": ["When creating the animation of the ", {"type": "ui", "text": ["Locomotion Node"]}, ", project the positions along the dominant axis of motion in the XZ plane.\n    If the clip will be used as an in-place clip with the ", {"scheme": "Node", "value": "/nodes/dop/crowdsolver", "type": "link", "text": ["crowd solver"], "fullpath": "/nodes/dop/crowdsolver"}, ", enabling this option can help to maintain hip swaying in the motion."], "extent": [9219, 9517]}], "container": true, "attrs": {"id": "projectondominantaxis"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Use Pivot from First Frame"], "extent": [9517, 9545], "body": [{"type": "para", "indent": 4, "text": ["When creating the animation of the ", {"type": "ui", "text": ["Locomotion Node"]}, ", calculate the positions to be relative to the origin.\n    If this option is disabled (the default), then the positions will be relative to where it was on the first frame."], "extent": [9571, 9804]}], "container": true, "attrs": {"id": "firstframepivot"}, "role": "item"}], "container": true, "role": "item_group"}]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Input: Agent Definition Cache"], "extent": [9804, 9840], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Cache Directory"], "extent": [9840, 9858], "body": [{"type": "para", "indent": 4, "text": ["The parent directory of agent definition files. This parameter is\n    provided for convenience so that its value can be referenced via the\n    ", {"type": "code", "text": ["$CACHEDIR"]}, " local variable in the other filename parameters."], "extent": [9858, 10067]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Rig"], "extent": [10067, 10072], "body": [{"type": "para", "indent": 4, "text": ["Specifies the path to the ", {"scheme": null, "value": "/crowds/agents#rig", "type": "link", "text": ["agent\u2019s rig file"], "fullpath": "/crowds/agents#rig", "fragment": "#rig"}, "."], "extent": [10072, 10142]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Agent Layers"], "extent": [10142, 10156], "body": [{"type": "para", "indent": 4, "text": ["Filename pattern of the ", {"scheme": null, "value": "/crowds/agents#layer", "type": "link", "text": ["agent layer files"], "fullpath": "/crowds/agents#layer", "fragment": "#layer"}, " to load.\n    The ", {"type": "code", "text": ["${LAYER}"]}, " local variable is used as a ", {"type": "code", "text": ["*"]}, " placeholder here so that all matching files are loaded for only each particular agent."], "extent": [10156, 10373]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Shape Library"], "extent": [10373, 10388], "body": [{"type": "para", "indent": 4, "text": ["Specifies the path to the ", {"scheme": null, "value": "/crowds/agents#shapelib", "type": "link", "text": ["agent\u2019s shape library"], "fullpath": "/crowds/agents#shapelib", "fragment": "#shapelib"}, "."], "extent": [10388, 10468]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Clips"], "extent": [10468, 10475], "body": [{"type": "para", "indent": 4, "text": ["Filename pattern of the ", {"scheme": null, "value": "/crowds/agents#clip", "type": "link", "text": ["animation clips"], "fullpath": "/crowds/agents#clip", "fragment": "#clip"}, " to load.\n    The ", {"type": "code", "text": ["${CLIP}"]}, " local variable is used as a ", {"type": "code", "text": ["*"]}, " placeholder here so that all matching files are loaded for only each particular agent.\n    The actual name of the clip is inferred from the string matched by ", {"type": "code", "text": ["${CLIP}"]}, ", or the full filename without the extension if ", {"type": "code", "text": ["${CLIP}"]}, " is not used."], "extent": [10475, 10839]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Transform Groups"], "extent": [10839, 10857], "body": [{"type": "para", "indent": 4, "text": ["Filename pattern of the ", {"scheme": null, "value": "/crowds/agents#xformgroups", "type": "link", "text": ["transform group files"], "fullpath": "/crowds/agents#xformgroups", "fragment": "#xformgroups"}, " to load.\n    The ", {"type": "code", "text": ["${TRANSFORM_GROUP}"]}, " local variable is used as a ", {"type": "code", "text": ["*"]}, " placeholder here so that all matching files are loaded for only each particular agent."], "extent": [10857, 11094]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Metadata"], "extent": [11094, 11104], "body": [{"type": "para", "indent": 4, "text": ["Specifies the path to the ", {"scheme": null, "value": "/crowds/agents#metadata", "type": "link", "text": ["agent\u2019s optional metadata file"], "fullpath": "/crowds/agents#metadata", "fragment": "#metadata"}, "."], "extent": [11104, 11193]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Keep External References"], "extent": [11193, 11219], "body": [{"type": "para", "indent": 4, "text": ["Specifies whether the agent primitives should reference the agent\n    definition files on disk. If enabled, saving agents to a geometry file will\n    only store references to the agent definition files, instead of embedding\n    the agent definition in the ", {"type": "code", "text": [".bgeo"]}, " or ", {"type": "code", "text": [".geo"]}, " file (which produces a\n    self-contained, but larger, geometry file)."], "extent": [11244, 11594]}], "container": true, "attrs": {"id": "keepexternalref"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Delay Load Clips"], "extent": [11594, 11612], "body": [{"type": "para", "indent": 4, "text": ["If enabled, clips will only be loaded from disk when their data is needed.\n    This can improve load times and memory usage for large clip catalogs, but errors from loading clips may not be reported immediately."], "extent": [11636, 11853]}], "container": true, "attrs": {"id": "delayloadclips"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Input: FBX"], "extent": [11853, 11870], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["FBX File"], "extent": [11870, 11881], "body": [{"type": "para", "indent": 4, "text": ["Filename of the FBX file to generate agents from."], "extent": [11898, 11953]}], "container": true, "attrs": {"id": "fbxfile"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Import Principled Shader Values"], "extent": [11953, 11986], "body": [{"type": "para", "indent": 4, "text": ["When enabled, create ", {"type": "code", "text": ["material_override"]}, " attribute inside the shape\n    geometry which imports the material values from the FBX that are suitable\n    for use with Houdini\u2019s ", {"scheme": "Node", "value": "/nodes/vop/principledshader", "type": "link", "text": "", "fullpath": "/nodes/vop/principledshader"}, " material."], "extent": [12011, 12227]}, {"type": "note_group", "body": [{"type": "note", "indent": 4, "role": "item", "extent": [12227, 12237], "body": [{"type": "para", "indent": 8, "text": ["In order to get accurate texture paths, this causes the FBX file to be\n        imported with ", {"type": "q", "text": ["Extract Embedded Data"]}, " enabled, which will cause ", {"type": "code", "text": [".fbm"]}, "\n        directories on disk to be created with the textures extracted within\n        them."], "extent": [12237, 12487]}], "container": true}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "importmaterials"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Convert Units"], "extent": [12487, 12502], "body": [{"type": "para", "indent": 4, "text": ["Specifies whether to convert to Houdini units when importing the FBX file."], "extent": [12524, 12604]}], "container": true, "attrs": {"id": "convertunits"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Minimal Nodes"], "extent": [5228, 5243], "body": [{"type": "para", "indent": 4, "text": ["Only import objects whose display flags are on. If you turn this off, ", {"type": "em", "text": ["all"]}, "\n    nodes in the character rig are imported into the animation clip."], "extent": [5270, 5420]}], "container": true, "attrs": {"id": "minimalnodes"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Keep Transforms for Deforming Shapes"], "extent": [5420, 5458], "body": [{"type": "para", "indent": 4, "text": ["When ", {"type": "ui", "text": ["Minimal Nodes"]}, " is enabled, specifies whether nodes containing deforming geometry are included in the agent\u2019s rig and clips."], "extent": [5493, 5630]}], "container": true, "attrs": {"id": "keepdeformingshapexforms"}, "role": "item"}], "container": true, "role": "item_group"}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Shape Library"], "extent": [12698, 12720], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Load as Polygon Soups"], "extent": [12720, 12744], "body": [{"type": "para", "indent": 4, "text": ["Create ", {"scheme": "Node", "value": "/nodes/sop/polysoup", "type": "link", "text": ["polygon soup primitives"], "fullpath": "/nodes/sop/polysoup"}, " instead of polygon primitives when loading geometry from the FBX file.\n    This can reduce memory usage, particularly when rendering with Mantra."], "extent": [12770, 12972]}], "container": true, "attrs": {"id": "loadaspolysoups"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Include Unused Capture Regions"], "extent": [12972, 13004], "body": [{"type": "para", "indent": 4, "text": ["When importing a skinned mesh, additional capture regions with identity transforms are added to the ", {"type": "code", "text": ["boneCapture"]}, " attribute for the ancestor joints of any captured joints.\n    It is recommended to only enable this option for compatibility with older scene files, as it can introduce issues with unpacking or merging the rest geometry of multiple skinned shapes."], "extent": [13035, 13402]}], "container": true, "attrs": {"id": "includeunusedregions"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Layers"], "extent": [13402, 13417], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Layer Name"], "extent": [5916, 5929], "body": [{"type": "para", "indent": 4, "text": ["The default layer for the agent, created using the display flags of the\n    objects.  Every agent must have at least one layer."], "extent": [5953, 6086]}], "container": true, "attrs": {"id": "layername"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Bounds Scale"], "extent": [6086, 6100], "body": [{"type": "para", "indent": 4, "text": ["Specifies a scale for the bounding box of each shape in the default layer.\n    See the ", {"scheme": null, "value": "/crowds/agents#boundingbox", "type": "link", "text": ["Agent Primitive help page"], "fullpath": "/crowds/agents#boundingbox", "fragment": "#boundingbox"}, " for more information on how an agent\u2019s bounding box is computed."], "extent": [6131, 6343]}], "container": true, "attrs": {"id": "layerboundsscale"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Generate Collision Layer"], "extent": [6343, 6369], "body": [{"type": "para", "indent": 4, "text": ["Generate a collision layer from geometry containing capture/deform weights.\n    This generates capture region primitives and assigns them to the\n    corresponding bones in the rig."], "extent": [6401, 6587]}], "container": true, "attrs": {"id": "generatecollision"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Collision Layer Name"], "extent": [6587, 6609], "body": [{"type": "para", "indent": 4, "text": ["When ", {"type": "ui", "text": ["Generate Collision Layer"]}, " is on, the name of the collision layer."], "extent": [6637, 6716]}], "container": true, "attrs": {"id": "collisionname"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Clip"], "extent": [13589, 13602], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Clip Name"], "extent": [13602, 13614], "body": [{"type": "para", "indent": 4, "text": ["Specifies the names of the animation clip(s). A clip is created for each take in the FBX file.\n    The ", {"type": "code", "text": ["${FBX_TAKE_NAME}"]}, " and ", {"type": "code", "text": ["${FBX_TAKE_INDEX}"]}, " local variables can be used to generate clip names based on the take name and index from the FBX file."], "extent": [13636, 13890]}], "container": true, "attrs": {"id": "fbxclipname"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Override Sample Rate"], "extent": [13890, 13912], "body": [{"type": "para", "indent": 4, "text": ["Specifies whether to use the value of the ", {"type": "ui", "text": ["Sample Rate"]}, " parameter instead of the sample rate stored in the FBX file.\n    This is useful if the application that exported the original FBX file did not set the sample rate correctly."], "extent": [13944, 14181]}], "container": true, "attrs": {"id": "fbxoverridesamplerate"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Sample Rate"], "extent": [14181, 14194], "body": [{"type": "para", "indent": 4, "text": ["Sample rate to use for the clip when ", {"type": "ui", "text": ["Override Sample Rate"]}, " is enabled."], "extent": [14218, 14297]}], "container": true, "attrs": {"id": "fbxsamplerate"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Locomotion"], "extent": [14297, 14316], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Create Locomotion Joint"], "extent": [7410, 7436], "body": [{"type": "para", "indent": 4, "text": ["When enabled, this will create an extra joint named ", {"type": "code", "text": ["__locomotion__"]}, " which\n    serves as a placeholder for factored out locomotion animation when\n    ", {"type": "ui", "text": ["Convert to In-Place Animation"]}, " is enabled."], "extent": [7468, 7669]}], "container": true, "attrs": {"id": "createlocomotionjoint"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Convert to In-Place Animation"], "extent": [7669, 7700], "body": [{"type": "para", "indent": 4, "text": ["Convert a moving character animation to an in-place clip, by subtracting\n    the positions of the ", {"type": "ui", "text": ["Locomotion Node"]}, " (relative to the origin or where\n    it was on the first frame depending on ", {"type": "ui", "text": ["Use Pivot from First Frame"]}, "\n    parameter)."], "extent": [7722, 7968]}], "container": true, "attrs": {"id": "inplace"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Locomotion Node"], "extent": [14403, 14420], "body": [{"type": "para", "indent": 4, "text": ["The object inside the ", {"type": "ui", "text": ["Object Subnet"]}, " that controls the\n    locomotion of the character (the node in the character rig that has\n    translation channels that move it forward in space). When\n    ", {"type": "ui", "text": ["Convert to In-Place Animation"]}, ", Houdini uses this to remove the\n    translation from the character animation to keep the character in place.\n    (The ", {"scheme": "Node", "value": "/nodes/dop/crowdsolver", "type": "link", "text": ["crowd solver node"], "fullpath": "/nodes/dop/crowdsolver"}, " assumes that the agent\n    animation is in-place since it will be attached to a moving particle.)"], "extent": [14447, 14940]}, {"type": "para", "indent": 4, "text": ["The locomotion animation is placed in a separate transform in the rig named\n    ", {"type": "code", "text": ["__locomotion__"]}, ". If this parameter is empty, then ", {"type": "code", "text": ["__locomotion__"]}, " will\n    use the Object Subnet."], "extent": [14940, 15125]}], "container": true, "attrs": {"id": "fbxlocomotionnode"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Locomotion Orient"], "extent": [15125, 15144], "body": [{"type": "para", "indent": 4, "text": ["If this parameter and ", {"type": "ui", "text": ["Locomotion Node"]}, " are specified, the generated\n    ", {"type": "code", "text": ["__locomotion__"]}, " transform will also contain rotational information using\n    the vector from the ", {"type": "ui", "text": ["Locomotion Node"]}, " to the ", {"type": "ui", "text": ["Locomotion Orient"]}, " node.\n    If this transform is the same as the ", {"type": "ui", "text": ["Locomotion Node"]}, ", its orientation will be directly extracted.\n    This parameter has no effect if ", {"type": "ui", "text": ["Locomotion Node"]}, " is empty."], "extent": [15173, 15578]}], "container": true, "attrs": {"id": "fbxlocomotionlookat"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Project Positions on Dominant Axis"], "extent": [9151, 9187], "body": [{"type": "para", "indent": 4, "text": ["When creating the animation of the ", {"type": "ui", "text": ["Locomotion Node"]}, ", project the positions along the dominant axis of motion in the XZ plane.\n    If the clip will be used as an in-place clip with the ", {"scheme": "Node", "value": "/nodes/dop/crowdsolver", "type": "link", "text": ["crowd solver"], "fullpath": "/nodes/dop/crowdsolver"}, ", enabling this option can help to maintain hip swaying in the motion."], "extent": [9219, 9517]}], "container": true, "attrs": {"id": "projectondominantaxis"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Use Pivot from First Frame"], "extent": [9517, 9545], "body": [{"type": "para", "indent": 4, "text": ["When creating the animation of the ", {"type": "ui", "text": ["Locomotion Node"]}, ", calculate the positions to be relative to the origin.\n    If this option is disabled (the default), then the positions will be relative to where it was on the first frame."], "extent": [9571, 9804]}], "container": true, "attrs": {"id": "firstframepivot"}, "role": "item"}], "container": true, "role": "item_group"}]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Input: USD"], "extent": [15672, 15689], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Source"], "extent": [15689, 15698], "body": [{"type": "para", "indent": 4, "text": ["Specifies whether the source USD stage is from a LOP node or USD file on disk."], "extent": [15718, 15802]}], "container": true, "attrs": {"id": "usdsource"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["LOP Path"], "extent": [15802, 15812], "body": [{"type": "para", "indent": 4, "text": ["Specifies the path to a LOP node.\n    The agent definition will be constructed from a UsdSkel character in the USD stage output by this node."], "extent": [15829, 15976]}], "container": true, "attrs": {"id": "loppath"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["USD File"], "extent": [15976, 15986], "body": [{"type": "para", "indent": 4, "text": ["The path to a USD file on disk."], "extent": [16003, 16040]}], "container": true, "attrs": {"id": "usdfile"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["SkelRoot Primitive Path"], "extent": [16040, 16065], "body": [{"type": "para", "indent": 4, "text": ["The path of a ", {"type": "code", "text": ["SkelRoot"]}, " primitive in the USD stage.\n    If the path is empty, the first ", {"type": "code", "text": ["SkelRoot"]}, " prim in the stage will be used."], "extent": [16087, 16224]}], "container": true, "attrs": {"id": "skelrootpath"}, "role": "item"}], "container": true, "role": "item_group"}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Layers"], "extent": [16224, 16239], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Layer Name"], "extent": [5916, 5929], "body": [{"type": "para", "indent": 4, "text": ["The default layer for the agent, created using the display flags of the\n    objects.  Every agent must have at least one layer."], "extent": [5953, 6086]}], "container": true, "attrs": {"id": "layername"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Bounds Scale"], "extent": [6086, 6100], "body": [{"type": "para", "indent": 4, "text": ["Specifies a scale for the bounding box of each shape in the default layer.\n    See the ", {"scheme": null, "value": "/crowds/agents#boundingbox", "type": "link", "text": ["Agent Primitive help page"], "fullpath": "/crowds/agents#boundingbox", "fragment": "#boundingbox"}, " for more information on how an agent\u2019s bounding box is computed."], "extent": [6131, 6343]}], "container": true, "attrs": {"id": "layerboundsscale"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Generate Collision Layer"], "extent": [6343, 6369], "body": [{"type": "para", "indent": 4, "text": ["Generate a collision layer from geometry containing capture/deform weights.\n    This generates capture region primitives and assigns them to the\n    corresponding bones in the rig."], "extent": [6401, 6587]}], "container": true, "attrs": {"id": "generatecollision"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Collision Layer Name"], "extent": [6587, 6609], "body": [{"type": "para", "indent": 4, "text": ["When ", {"type": "ui", "text": ["Generate Collision Layer"]}, " is on, the name of the collision layer."], "extent": [6637, 6716]}], "container": true, "attrs": {"id": "collisionname"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Clip"], "extent": [16411, 16424], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Clip Name"], "extent": [6729, 6741], "body": [{"type": "para", "indent": 4, "text": ["Name of the baked out clip (agent animation).\n    The animation is taken from the current scene."], "extent": [6764, 6866]}], "container": true, "attrs": {"id": "clipname"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Locomotion"], "extent": [16462, 16481], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Create Locomotion Joint"], "extent": [7410, 7436], "body": [{"type": "para", "indent": 4, "text": ["When enabled, this will create an extra joint named ", {"type": "code", "text": ["__locomotion__"]}, " which\n    serves as a placeholder for factored out locomotion animation when\n    ", {"type": "ui", "text": ["Convert to In-Place Animation"]}, " is enabled."], "extent": [7468, 7669]}], "container": true, "attrs": {"id": "createlocomotionjoint"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Convert to In-Place Animation"], "extent": [7669, 7700], "body": [{"type": "para", "indent": 4, "text": ["Convert a moving character animation to an in-place clip, by subtracting\n    the positions of the ", {"type": "ui", "text": ["Locomotion Node"]}, " (relative to the origin or where\n    it was on the first frame depending on ", {"type": "ui", "text": ["Use Pivot from First Frame"]}, "\n    parameter)."], "extent": [7722, 7968]}], "container": true, "attrs": {"id": "inplace"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Locomotion Node"], "extent": [16568, 16585], "body": [{"type": "para", "indent": 4, "text": ["The name of the joint that controls the locomotion of the character (the\n    joint in the skeleton that has translation channels that move it forward in\n    space). When ", {"type": "ui", "text": ["Convert to In-Place Animation"]}, ", Houdini uses this to remove\n    the translation from the character animation to keep the character in\n    place.  (The ", {"scheme": "Node", "value": "/nodes/dop/crowdsolver", "type": "link", "text": ["crowd solver node"], "fullpath": "/nodes/dop/crowdsolver"}, " assumes that the\n    agent animation is in-place since it will be attached to a moving\n    particle.)"], "extent": [16612, 17084]}, {"type": "para", "indent": 4, "text": ["The locomotion animation is placed in a separate transform in the rig named\n    ", {"type": "code", "text": ["__locomotion__"]}, ". If this parameter is empty, then ", {"type": "code", "text": ["__locomotion__"]}, " will\n    use the Object Subnet."], "extent": [17084, 17269]}], "container": true, "attrs": {"id": "usdlocomotionnode"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Locomotion Orient"], "extent": [17269, 17288], "body": [{"type": "para", "indent": 4, "text": ["If this parameter and ", {"type": "ui", "text": ["Locomotion Node"]}, " are specified, the generated\n    ", {"type": "code", "text": ["__locomotion__"]}, " transform will also contain rotational information using\n    the vector from the ", {"type": "ui", "text": ["Locomotion Node"]}, " to the ", {"type": "ui", "text": ["Locomotion Orient"]}, " joint.\n    If this transform is the same as the ", {"type": "ui", "text": ["Locomotion Node"]}, ", its orientation will be directly extracted.\n    This parameter has no effect if ", {"type": "ui", "text": ["Locomotion Node"]}, " is empty."], "extent": [17317, 17723]}], "container": true, "attrs": {"id": "usdlocomotionlookat"}, "role": "item"}], "container": true, "role": "item_group"}]}]}], "text": "Parameters"}, {"level": 1, "id": "inputs", "container": true, "type": "inputs_section", "indent": 0, "role": "section", "extent": [17723, 17731], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 0, "text": ["Points to spawn agents"], "extent": [17731, 17756], "body": [{"type": "para", "indent": 4, "text": ["If given, the input points are used to spawn the agents. These points\n    may contain specific attributes that are used to control properties of\n    the created agents, allowing for multiple agent definitions to be used\n    via the ", {"type": "code", "text": ["$AGENT"]}, " local variable."], "extent": [17756, 18018]}], "container": true}], "container": true}], "text": "Inputs"}, {"level": 1, "id": "locals", "container": true, "type": "locals_section", "indent": 0, "role": "section", "extent": [18018, 18026], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 0, "text": ["AGENT"], "extent": [18026, 18034], "body": [{"type": "para", "indent": 4, "text": ["The name of agent. The value either comes from the ", {"type": "code", "text": ["agentname"]}, " string\n    attribute on the input points when ", {"type": "ui", "text": ["Allow Attributes to Override"]}, " is\n    enabled, or from the value of the ", {"type": "ui", "text": ["Agent Name"]}, " parameter."], "extent": [18034, 18248]}], "container": true}, {"type": "dt", "indent": 0, "text": ["CACHEDIR"], "extent": [18248, 18258], "body": [{"type": "para", "indent": 4, "text": ["A local variable provided for convenience so that the value of the ", {"type": "ui", "text": ["Cache\n    Directory"]}, " parameter can be easily referenced."], "extent": [18258, 18390]}], "container": true}, {"type": "dt", "indent": 0, "text": ["LAYER"], "extent": [18390, 18397], "body": [{"type": "para", "indent": 4, "text": ["Used as a wildcard in the ", {"type": "ui", "text": ["Agent Layers"]}, " parameter for specifying the layer files to load."], "extent": [18397, 18495]}], "container": true}, {"type": "dt", "indent": 0, "text": ["CLIP"], "extent": [18495, 18501], "body": [{"type": "para", "indent": 4, "text": ["Used as a wildcard in the ", {"type": "ui", "text": ["Clips"]}, " parameter for specifying the clip files to load."], "extent": [18501, 18591]}], "container": true}, {"type": "dt", "indent": 0, "text": ["TRANSFORM_GROUP"], "extent": [18591, 18608], "body": [{"type": "para", "indent": 4, "text": ["Used as a wildcard in the ", {"type": "ui", "text": ["Transform Groups"]}, " parameter for specifying the transform group files to load."], "extent": [18608, 18720]}], "container": true}, {"type": "dt", "indent": 0, "text": ["FBX_TAKE_NAME"], "extent": [18720, 18735], "body": [{"type": "para", "indent": 4, "text": ["Contains the name of the current take in the FBX file when evaluating the ", {"type": "ui", "text": ["Clip Name"]}, " parameter and ", {"type": "ui", "text": ["Input"]}, " is ", {"type": "ui", "text": ["FBX"]}, "."], "extent": [18735, 18864]}], "container": true}, {"type": "dt", "indent": 0, "text": ["FBX_TAKE_INDEX"], "extent": [18864, 18880], "body": [{"type": "para", "indent": 4, "text": ["Contains the index of the current take in the FBX file when evaluating the ", {"type": "ui", "text": ["Clip Name"]}, " parameter and ", {"type": "ui", "text": ["Input"]}, " is ", {"type": "ui", "text": ["FBX"]}, "."], "extent": [18880, 19010]}], "container": true}], "container": true}], "text": "Locals"}, {"level": 1, "id": "related", "container": true, "type": "related_section", "indent": 0, "role": "section", "extent": [19010, 19019], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/out/agent", "type": "link", "text": "", "fullpath": "/nodes/out/agent"}], "extent": [19019, 19039]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/sop/agentdefinitioncache", "type": "link", "text": "", "fullpath": "/nodes/sop/agentdefinitioncache"}], "extent": [19039, 19073]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/sop/agentclip", "type": "link", "text": "", "fullpath": "/nodes/sop/agentclip"}], "extent": [19073, 19096]}], "container": true}], "text": "Related"}], "title": ["Agent"], "summary": ["Creates agent primitives."]}