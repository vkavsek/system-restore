{"type": "root", "attrs": {"type": "node", "context": "sop", "internal": "bonedeform", "icon": "SOP/bonedeform", "tags": "capture, character", "since": "17.0", "verb_since": "17.0", "version": null, "namespace": null}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["Bone Deform"], "extent": [0, 16]}, {"type": "summary", "indent": 0, "text": ["Uses capture attributes created from bones to deform geometry according to their movement."], "extent": [145, 243]}, {"type": "tip_group", "body": [{"type": "tip", "indent": 0, "role": "item", "extent": [243, 248], "body": [{"type": "para", "indent": 4, "text": ["This node supports the character muscle/joint/etc. deformation\n    workflow. To do a cage deformation of geometry, use the\n    ", {"scheme": "Node", "value": "/nodes/sop/lattice", "type": "link", "text": ["Lattice node"], "fullpath": "/nodes/sop/lattice"}, "."], "extent": [248, 413]}], "container": true}], "container": true, "role": "item_group"}, {"type": "para", "indent": 0, "text": ["Bone Deform works in conjunction with a Bone Capture nodes (", {"scheme": "Node", "value": "/nodes/sop/capture", "type": "link", "text": "", "fullpath": "/nodes/sop/capture"}, ",\n", {"scheme": "Node", "value": "/nodes/sop/captureproximity", "type": "link", "text": "", "fullpath": "/nodes/sop/captureproximity"}, ", ", {"scheme": "Node", "value": "/nodes/sop/bonecapturebiharmonic", "type": "link", "text": "", "fullpath": "/nodes/sop/bonecapturebiharmonic"}, ") to\ndeform geometry. As the bones move, this node displaces the points on the\ngeometry according to the point weights."], "extent": [413, 675]}, {"type": "para", "indent": 0, "text": ["Typically one or more Capture Regions are placed in an object (usually a\nbone) and named ", {"type": "q", "text": ["capture_region"]}, ". The object is then read into a Capture\noperation through the object\u2019s hierarchy. The object is moved to deform\nthe Capture operation\u2019s geometry with a Deform operation."], "extent": [675, 952]}, {"type": "para", "indent": 0, "text": ["Bone Deform can use Linear, Dual Quaternion or mix both solutions linearly\nto compute the deformation."], "extent": [952, 1056]}, {"type": "para", "indent": 0, "text": ["Since Houdini 18.0, Bone Deform can also be used with point attributes in its\nsecond and third inputs. The capture paths in the boneCapture attribute in its\nfirst input are matched with the point ", {"type": "code", "text": ["name"]}, " attribute in the second and third\ninputs. Instead of using the rest transform within boneCapture, it is taken\nfrom the second input\u2019s ", {"type": "code", "text": ["P"]}, " and ", {"type": "code", "text": ["transform"]}, " (matrix3) point attribute values.\nInstead of using the transforms from bone objects, they are instead taken from\nthe third input\u2019s ", {"type": "code", "text": ["P"]}, " and ", {"type": "code", "text": ["transform"]}, " (matrix3) point attribute values."], "extent": [1056, 1599]}, {"level": 1, "id": "attributes", "container": true, "type": "attributes_section", "indent": 0, "role": "section", "extent": [1599, 1611], "body": [{"type": "attributes_item_group", "body": [{"type": "attributes_item", "indent": 0, "text": ["boneCapture"], "extent": [1611, 1625], "body": [{"type": "para", "indent": 4, "text": ["This required attribute defines the rest transforms and skinning weights\n    for the deformation. It can be created by various SOPs such as:\n    ", {"scheme": "Node", "value": "/nodes/sop/bonecapturebiharmonic", "type": "link", "text": "", "fullpath": "/nodes/sop/bonecapturebiharmonic"}, ", ", {"scheme": "Node", "value": "/nodes/sop/captureproximity", "type": "link", "text": "", "fullpath": "/nodes/sop/captureproximity"}, ", or\n    ", {"scheme": "Node", "value": "/nodes/sop/capture", "type": "link", "text": "", "fullpath": "/nodes/sop/capture"}, "."], "extent": [1625, 1865]}], "container": true, "role": "item", "id": "bonecapture"}], "container": true, "role": "item_group"}], "text": "Attributes"}, {"level": 1, "id": "parameters", "container": true, "type": "parameters_section", "indent": 0, "role": "section", "extent": [1865, 1877], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Group"], "extent": [1877, 1885], "body": [{"type": "para", "indent": 4, "text": ["Optional point and/or primitive groups to limit the points which are deformed."], "extent": [1885, 1969]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Skeleton Root Path"], "extent": [1969, 1989], "body": [{"type": "para", "indent": 4, "text": ["Specifies the parent OBJ for the bones attached to the input geometry.\n    The ", {"type": "code", "text": ["pCaptSkelRoot"]}, " detail attribute is used by default when this\n    parameter is empty. If this parameter is non-empty, it overrides the\n    ", {"type": "code", "text": ["pCaptSkelRoot"]}, " detail attribute in the input geometry."], "extent": [1989, 2268]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Skinning Method"], "extent": [2268, 2285], "body": [{"type": "para", "indent": 4, "text": ["Choose the bone deform method."], "extent": [2301, 2337]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Linear Skinning"], "extent": [2337, 2358], "body": [{"type": "para", "indent": 12, "text": ["The standard, fastest method. However, artifacts can occur for twisting geometry between two bones, producing volume loss. To fix these artifacts, introduce additional bones to even out the deformation."], "extent": [2358, 2582]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Dual Quaternion Skinning"], "extent": [2582, 2612], "body": [{"type": "para", "indent": 12, "text": ["Dual quaternion skinning is an alternate way of computing the deformation from bones. This method is better for deforming twisting geometry and preventing volume loss than the traditional Linear Skinning method. This is often used for body parts, such as the shoulders of characters."], "extent": [2612, 2909]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Blend Dual Quaternion and Linear Skinning"], "extent": [2909, 2956], "body": [{"type": "para", "indent": 12, "text": ["Blends the deformation computed using both methods together based on a point attribute. For this method, a float point attribute must be supplied in the ", {"type": "code", "text": ["Blend Attribute"]}, " parameter.  A blend attribute value of 0.0, will use the Linear Skinning solution. A blend attribute value of 1.0 will use the Dual Quaternion solution. A blend value of 0.5 will mix both solutions together evenly."], "extent": [2956, 3355]}], "container": true}, {"type": "dt", "indent": 4, "text": ["From Input Geometry"], "extent": [3355, 3380], "body": [{"type": "para", "indent": 8, "text": ["When selected the ", {"type": "code", "text": ["deformSkinMethod"]}, " global attribute gives the method where the string value ", {"type": "code", "text": ["linear"]}, " specifies ", {"type": "ui", "text": ["Linear Skinning"]}, " skinning, ", {"type": "code", "text": ["dualquat"]}, " specifies ", {"type": "ui", "text": ["Dual Quaternion Skinning"]}, " skinning, and ", {"type": "code", "text": ["blenddualquat"]}, " specifies ", {"type": "ui", "text": ["Blend Dual Quaternion and Linear Skinning"]}, " skinning. The ", {"type": "code", "text": ["deformDualQuaternionBlendAttrib"]}, " global attribute also gives the ", {"type": "ui", "text": ["Blend Attribute"]}, " name."], "extent": [3380, 3774]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "method"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Blend Attribute"], "extent": [3774, 3791], "body": [{"type": "para", "indent": 4, "text": ["The name of the point attribute to use when blending dual quaternion and\n    linear solutions together."], "extent": [3791, 3900]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Transforms Path"], "extent": [3900, 3917], "body": [{"type": "para", "indent": 4, "text": ["An optional path to a CHOP node that contains channels for\n    the world bone transforms, overriding the current state of the\n    bones. In CHOPs, the Extract Bone Transforms node can be used\n    to capture the bone transforms."], "extent": [3917, 4150]}, {"type": "para", "indent": 4, "text": ["The ", {"type": "code", "text": ["deformTransformsPath"]}, " detail attribute is used by default when this\n    parameter is empty. If this parameter is non-empty, it overrides the\n    ", {"type": "code", "text": ["deformTransformsPath"]}, " detail attribute in the input geometry."], "extent": [4150, 4368]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Other Attributes"], "extent": [4368, 4386], "body": [{"type": "para", "indent": 4, "text": ["Name of other attributes (beyond positions and normals) to deform.\n    This is typically a list of attribute names separated by spaces but pattern\n    characters such as '*' can also be used match multiple attributes. The\n    interpretation of the attribute data is taken by their type qualifier such\n    as ", {"type": "q", "text": ["Position"]}, ", ", {"type": "q", "text": ["Vector"]}, ", ", {"type": "q", "text": ["Normal"]}, ". or ", {"type": "q", "text": ["Quaternion"]}, ". Attributes which don\u2019t\n    have these type qualifiers will be ignored."], "extent": [4386, 4823]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Deform Normals"], "extent": [4823, 4839], "body": [{"type": "para", "indent": 4, "text": ["Deforms the normals to match the deformation of the points."], "extent": [4839, 4904]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Delete Capture Attributes"], "extent": [4904, 4931], "body": [{"type": "para", "indent": 4, "text": ["Delete capture attributes lighten the geometry data such as ", {"type": "code", "text": ["boneCapture"]}, ",\n    ", {"type": "code", "text": ["pCaptAlpha"]}, ", ", {"type": "code", "text": ["pCaptSkelRoot"]}, ", ", {"type": "code", "text": ["pCaptFrame"]}, "."], "extent": [4931, 5064]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Delete Point Colors"], "extent": [5064, 5085], "body": [{"type": "para", "indent": 4, "text": ["Delete point color attribute to lighten the geometry data."], "extent": [5085, 5149]}], "container": true, "role": "item"}], "container": true, "role": "item_group"}], "text": "Parameters"}, {"level": 1, "id": "inputs", "container": true, "type": "inputs_section", "indent": 0, "role": "section", "extent": [5149, 5157], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 0, "text": ["Geometry to Deform"], "extent": [5157, 5178], "body": [{"type": "para", "indent": 4, "text": ["The skin geometry to deform. It\u2019s required to have a ", {"type": "code", "text": ["boneCapture"]}, "\n    attribute (eg. created by ", {"scheme": "Node", "value": "/nodes/sop/bonecapturebiharmonic", "type": "link", "text": "", "fullpath": "/nodes/sop/bonecapturebiharmonic"}, ")."], "extent": [5178, 5315]}], "container": true}, {"type": "dt", "indent": 0, "text": ["Rest Point Transforms"], "extent": [5315, 5338], "body": [{"type": "para", "indent": 4, "text": ["The capture paths from the first input\u2019s ", {"type": "code", "text": ["boneCapture"]}, " attribute are\n    matched with the ", {"type": "code", "text": ["name"]}, " point attribute in this input to provide rest\n    transforms that override the values found in ", {"type": "code", "text": ["boneCapture"]}, ". These\n    transforms are provided from the input\u2019s ", {"type": "code", "text": ["P"]}, " and ", {"type": "code", "text": ["transform"]}, " (matrix3)\n    point attribute values."], "extent": [5338, 5659]}], "container": true}, {"type": "dt", "indent": 0, "text": ["Deform Point Transforms"], "extent": [5659, 5684], "body": [{"type": "para", "indent": 4, "text": ["The capture paths from the first input\u2019s ", {"type": "code", "text": ["boneCapture"]}, " attribute are\n    matched with the ", {"type": "code", "text": ["name"]}, " point attribute in this input to provide\n    deformation transforms instead of obtaining them from ", {"scheme": "Node", "value": "/nodes/obj/bone", "type": "link", "text": "", "fullpath": "/nodes/obj/bone"}, " nodes\n    in the scene. These transforms are provided from the input\u2019s ", {"type": "code", "text": ["P"]}, " and\n    ", {"type": "code", "text": ["transform"]}, " (matrix3) point attribute values."], "extent": [5684, 6030]}], "container": true}], "container": true}], "text": "Inputs"}, {"level": 1, "id": "related", "container": true, "type": "related_section", "indent": 0, "role": "section", "extent": [6030, 6039], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/sop/bonecapturebiharmonic", "type": "link", "text": "", "fullpath": "/nodes/sop/bonecapturebiharmonic"}], "extent": [6039, 6075]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/sop/cregion", "type": "link", "text": "", "fullpath": "/nodes/sop/cregion"}], "extent": [6075, 6096]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/sop/capture", "type": "link", "text": "", "fullpath": "/nodes/sop/capture"}], "extent": [6096, 6117]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/sop/captureproximity", "type": "link", "text": "", "fullpath": "/nodes/sop/captureproximity"}], "extent": [6117, 6147]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/sop/shapediff", "type": "link", "text": "", "fullpath": "/nodes/sop/shapediff"}], "extent": [6147, 6170]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/sop/kinefx--jointdeform", "type": "link", "text": "", "fullpath": "/nodes/sop/kinefx--jointdeform"}], "extent": [6170, 6203]}], "container": true}], "text": "Related"}], "title": ["Bone Deform"], "summary": ["Uses capture attributes created from bones to deform geometry according to their movement."]}