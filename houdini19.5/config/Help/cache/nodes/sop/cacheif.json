{"type": "root", "attrs": {"type": "node", "context": "sop", "internal": "cacheif", "icon": "SOP/cacheif", "since": "19.0", "verb_since": "19.0", "version": null, "namespace": null}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["Cache If"], "extent": [0, 13]}, {"type": "summary", "indent": 0, "text": ["Chooses whether to cook the input or re-use cached output based on configurable conditions."], "extent": [110, 210]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Overview"], "extent": [210, 225], "body": [{"type": "para", "indent": 0, "text": ["The ", {"scheme": "Node", "value": "/nodes/sop/cache", "type": "link", "text": ["Cache"], "fullpath": "/nodes/sop/cache"}, " node can cache an input that\u2019s slow to compute to memory, and from then on, output from the memory cache instead of re-cooking. However, that node requires you to manually decide when to recache the input because the cache is invalid."], "extent": [225, 489]}, {"type": "para", "indent": 0, "text": ["The Cache If node is very useful when it\u2019s possible to ", {"type": "em", "text": ["automatically"]}, " tell when the cache is invalid and should be regenerated, based on testing one or more conditions. For example, if the value of an upstream parameter that contains a file path changes, the cache should be regenerated."], "extent": [489, 779]}, {"type": "para", "indent": 0, "text": ["This node lets you test different ", {"scheme": null, "value": "#conditions", "type": "link", "text": ["types of conditions"], "fullpath": "/nodes/sop/cacheif#conditions", "fragment": "#conditions"}, ", for example:"], "extent": [779, 862]}, {"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": ["If nodes are added, removed, or edited in the upstream network."], "extent": [862, 929]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["If the geometry from a node elsewhere in the network has changed."], "extent": [929, 998]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["If a parameter, or any parameters, on an upstream node have changed."], "extent": [998, 1070]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["If an arbitrary expression returns True, or if the result of an expression changes. This can be a simple HScript expression or a Python expression with full scripting power. For example, you could write a Python expression that queries the Web API of your asset management system to check if an asset\u2019s version number has changed."], "extent": [1070, 1404]}], "container": true}, {"type": "tip_group", "body": [{"type": "tip", "indent": 0, "role": "item", "extent": [1404, 1409], "body": [{"type": "para", "indent": 4, "text": ["This node is a ", {"type": "em", "text": ["memory (RAM) cache"]}, ". To cache to disk, use a ", {"scheme": "Node", "value": "/nodes/sop/filecache", "type": "link", "text": ["File Cache node"], "fullpath": "/nodes/sop/filecache"}, "."], "extent": [1409, 1513]}, {"type": "para", "indent": 4, "text": ["Unlike the File Cache node, where you can switch between cooking the input and reading the cached files, once this node cooks its input once, it ", {"type": "em", "text": ["always"]}, " outputs its memory cache. It is then up to the conditions you set up (or you manually clicking the ", {"type": "ui", "text": ["Recache"]}, " button) to cause the node to regenerate the cache when necessary."], "extent": [1513, 1850]}], "container": true}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["How to"], "extent": [1850, 1863], "body": [{"type": "ord_group", "body": [{"blevel": 2, "type": "ord", "indent": 0, "text": ["After a part of the geometry network that is slow to compute, add/insert a Cache If node."], "extent": [1863, 1957]}, {"blevel": 2, "type": "ord", "indent": 0, "text": ["Click ", {"type": "ui", "text": ["Recache"]}, " to cook and cache the node\u2019s input."], "extent": [1957, 2014]}, {"blevel": 2, "type": "ord", "indent": 0, "text": ["Set the parameters to ", {"scheme": null, "value": "#conditions", "type": "link", "text": ["test the conditions"], "fullpath": "/nodes/sop/cacheif#conditions", "fragment": "#conditions"}, " for whether the cache needs to be regenerated."], "extent": [2014, 2121]}], "container": true}]}, {"level": 2, "id": "conditions", "container": true, "type": "h", "indent": 0, "text": ["Conditions"], "extent": [2121, 2151], "body": [{"type": "para", "indent": 0, "text": ["For more information about the parameters mentioned here, see the full parameter help below."], "extent": [2151, 2246]}, {"type": "note_group", "body": [{"type": "note", "indent": 0, "role": "item", "extent": [2246, 2252], "body": [{"type": "para", "indent": 4, "text": ["The first input is for the incoming geometry to cache. The multi-input lets you wire in nodes, so that if the output of any of those nodes changes, this node will re-cook and re-cache the first input."], "extent": [2252, 2459]}], "container": true}], "container": true, "role": "item_group"}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Nodes added, removed, or edited in the upstream network"], "extent": [2459, 2523], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": ["Turn on ", {"type": "ui", "text": ["Check for upstream network changes"]}, "."], "extent": [2523, 2576]}], "container": true}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["The output of another node in the network changes"], "extent": [2576, 2634], "body": [{"type": "para", "indent": 0, "text": ["This node can check whether the output of another node has changed without doing a full cook of that node\u2019s output geometry. It uses the same ", {"type": "q", "text": ["data ID"]}, " metadata that Houdini uses to efficiently decide whether a node should recook its inputs. (For example, when any part of Houdini adds, deletes, or changes an attribute value, it changes the attribute\u2019s ", {"type": "q", "text": ["data ID"]}, ", so other parts of the code can tell that the attribute has changed.)"], "extent": [2634, 3070]}, {"type": "ord_group", "body": [{"blevel": 2, "type": "ord", "indent": 0, "text": ["Wire the node you want to check into this node\u2019s multi-input."], "extent": [3070, 3135]}, {"blevel": 2, "type": "ord", "indent": 0, "text": ["In this node\u2019s parameters, click the ", {"type": "ui", "text": ["Test Inputs"]}, " tab."], "extent": [3135, 3196]}, {"blevel": 2, "type": "ord", "indent": 0, "text": ["Create an instance of the multiparm corresponding to the input you wired in."], "extent": [3196, 3276], "body": [{"type": "para", "indent": 4, "text": ["For example, if you have connected one wire into the multi-input, you should create one instance of the Test Inputs multi-parm (", {"type": "q", "text": ["Test Input 1"]}, ") to control how to test the input. If you connect two wires into the multi-input, you should create two instances of the multiparm, with ", {"type": "q", "text": ["Test Input 1"]}, " controlling the first wire, and ", {"type": "q", "text": ["Test Input 2"]}, " controlling the second wire (counting from left to right)."], "extent": [3276, 3682]}], "container": true}, {"blevel": 2, "type": "ord", "indent": 0, "text": ["Use the checkboxes to tell the node what to look for in the other node\u2019s output."], "extent": [3682, 3766], "body": [{"type": "para", "indent": 4, "text": ["Each instance can only check a single node, but you can check multiple parameters on the node."], "extent": [3766, 3866]}], "container": true}], "container": true}, {"type": "para", "indent": 0, "text": ["You can check any combination of the following:"], "extent": [3866, 3915]}, {"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": ["Whether the content/size/existence of a certain point, vertex, primitive, or detail attribute has changed."], "extent": [3915, 4025], "body": [{"type": "para", "indent": 4, "text": ["Open the ", {"type": "ui", "text": ["Attribute Data IDs"]}, " sub-section. Turn on the checkbox next to the level of attribute you want to check (point, vertex, primitive, or detail). Enter a space-separated list of attribute names to check."], "extent": [4025, 4242]}], "container": true}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["Whether the content/size/existence of a certain point, vertex, primitive or edge group has changed."], "extent": [4242, 4345], "body": [{"type": "para", "indent": 4, "text": ["Open the ", {"type": "ui", "text": ["Group Data IDs"]}, " sub-section. Turn on the checkbox next to the level of group you want to check (point, vertex, primitive, or detail). Enter a space-separated list of group names to check."], "extent": [4345, 4550]}], "container": true}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["Whether the prim count or topology of the geometry has changed."], "extent": [4550, 4617], "body": [{"type": "para", "indent": 4, "text": ["Open the ", {"type": "ui", "text": ["Geometry metadata"]}, " sub-section. Turn on the checkbox next to one or more of the test methods. ", {"type": "ui", "text": ["Check primitives ID"]}, " and ", {"type": "ui", "text": ["Check topology"]}, " are the most reliable methods. See the parameter documentation for the ", {"scheme": null, "value": "#input_folder_metadata", "type": "link", "text": ["geometry metadata"], "fullpath": "/nodes/sop/cacheif#input_folder_metadata", "fragment": "#input_folder_metadata"}, " below for more information."], "extent": [4617, 4917]}], "container": true}], "container": true}, {"type": "para", "indent": 0, "text": ["You can use the drop-down menu button to the right of attribute/group text fields to choose from a list of known attribute/group names."], "extent": [4917, 5054]}, {"type": "tip_group", "body": [{"type": "tip", "indent": 0, "role": "item", "extent": [5054, 5059], "body": [{"type": "para", "indent": 4, "text": ["You can use the ", {"type": "ui", "text": ["Check test input"]}, " checkbox at the top of each instance to enable or disable that check temporarily."], "extent": [5059, 5184]}], "container": true}], "container": true, "role": "item_group"}]}, {"level": 3, "id": "parameter_change", "container": true, "type": "h", "indent": 0, "text": ["A parameter on an upstream parameter changes"], "extent": [5184, 5256], "body": [{"type": "ord_group", "body": [{"blevel": 2, "type": "ord", "indent": 0, "text": ["In this node\u2019s parameters, click the ", {"type": "ui", "text": ["Parameters"]}, " tab."], "extent": [5256, 5317]}, {"blevel": 2, "type": "ord", "indent": 0, "text": ["Create a new instance of the multiparm for each node you you want to check. Set the ", {"type": "ui", "text": ["Number of Patterns"]}, " or use the plus and minus buttons to set the number of instances of the multiparm."], "extent": [5317, 5510]}, {"blevel": 2, "type": "ord", "indent": 0, "text": ["Edit the instance options to tell this node which parameters it should check."], "extent": [5510, 5591], "body": [{"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": ["Set ", {"type": "ui", "text": ["Node Path"]}, " to the path of an upstream node. The Cache If will check for parameter changes on this node. You can click the ", {"scheme": "Icon", "value": "BUTTONS/chooser_node", "type": "link", "text": "", "fullpath": "/nodes/sop/BUTTONS/chooser_node"}, " chooser button to the right of the text field to choose the node interactive from a tree."], "extent": [5591, 5845]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": ["Set ", {"type": "ui", "text": ["Parameter names"]}, " to a space-separated list of parameter internal names or patterns. The default is ", {"type": "code", "text": ["*"]}, ", meaning check if the value of ", {"type": "em", "text": ["any"]}, " parameter on the node has changed. Adding/removing spare parameters does not usually trigger a re-cache (unless the user removes a spare parameter this node is watching)."], "extent": [5845, 6170]}], "container": true}], "container": true}], "container": true}, {"type": "tip_group", "body": [{"type": "tip", "indent": 0, "role": "item", "extent": [6170, 6175], "body": [{"type": "para", "indent": 4, "text": ["You can use the checkbox next to each instance to enable or disable that check temporarily."], "extent": [6175, 6273]}], "container": true}], "container": true, "role": "item_group"}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["The components matched by a ", {"type": "q", "text": ["Group"]}, " parameter change"], "extent": [6273, 6334], "body": [{"type": "para", "indent": 0, "text": [{"type": "ui", "text": ["Group"]}, " fields are common in SOPs, usually named ", {"type": "code", "text": ["group"]}, ". They let the user specify named groups or individual components the node should apply to."], "extent": [6334, 6486]}, {"type": "para", "indent": 0, "text": ["As a special kind of ", {"scheme": null, "value": "#parameter_change", "type": "link", "text": ["parameter check"], "fullpath": "/nodes/sop/cacheif#parameter_change", "fragment": "#parameter_change"}, ", you can check group fields to see if the group membership changed, even if the actual contents of the parameter didn\u2019t change."], "extent": [6486, 6672]}, {"type": "note_group", "body": [{"type": "note", "indent": 0, "role": "item", "extent": [6672, 6678], "body": [{"type": "para", "indent": 4, "text": ["You can only check for group match changes in nodes connected into this node\u2019s multi-input."], "extent": [6678, 6775]}], "container": true}], "container": true, "role": "item_group"}, {"type": "ord_group", "body": [{"blevel": 2, "type": "ord", "indent": 0, "text": ["On the ", {"type": "ui", "text": ["Parameters"]}, " tab, set up a node/parameter check using the instructions under ", {"scheme": null, "value": "#parameter_change", "type": "link", "text": ["checking if a parameter changes"], "fullpath": "/nodes/sop/cacheif#parameter_change", "fragment": "#parameter_change"}, " above."], "extent": [6775, 6923]}, {"blevel": 2, "type": "ord", "indent": 0, "text": ["Set ", {"type": "ui", "text": ["Group Names"]}, " to a space-separated list of the internal parameter names of the group fields you want to check. Any parameter names you list here must be included in the parameters named/matched in the ", {"type": "ui", "text": ["Parameter Names"]}, " field above."], "extent": [6923, 7166]}, {"blevel": 2, "type": "ord", "indent": 0, "text": ["Set ", {"type": "ui", "text": ["Group Type"]}, " to the The level (vertex, points, primitives, edges) at which to look for the groups specified in ", {"type": "ui", "text": ["Group Names"]}, "."], "extent": [7166, 7303]}, {"blevel": 2, "type": "ord", "indent": 0, "text": ["Set ", {"type": "ui", "text": ["On Test Input"]}, " to the number of the wire connected to this node\u2019s multi-input (counting from left to right) that comes from the node you want to check."], "extent": [7303, 7465]}, {"blevel": 2, "type": "ord", "indent": 0, "text": ["If group membership may change over time without user interverntion (for example, a computed group of all points within a bounding box, where the membership changes as points animate), set ", {"type": "ui", "text": ["Check groups"]}, " to ", {"type": "ui", "text": ["On Every Cook"]}, "."], "extent": [7465, 7697]}], "container": true}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["The result of an expression"], "extent": [7697, 7733], "body": [{"type": "ord_group", "body": [{"blevel": 2, "type": "ord", "indent": 0, "text": ["In this node\u2019s parameters, click the ", {"type": "ui", "text": ["Expressions"]}, " tab."], "extent": [7733, 7795]}, {"blevel": 2, "type": "ord", "indent": 0, "text": ["Create a new instance of the multiparm for each check you want to do. Set the ", {"type": "ui", "text": ["Number of Expressions"]}, " or use the plus and minus buttons to set the number of instances of the multiparm."], "extent": [7795, 7985]}, {"blevel": 2, "type": "ord", "indent": 0, "text": ["Edit the instance parameters to set up each test expression."], "extent": [7985, 8049], "body": [{"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": ["If the node should regenerate the cache when the expression returns a ", {"type": "strong", "text": ["non-zero value"]}, ", set ", {"type": "ui", "text": ["Cache When"]}, " to ", {"type": "ui", "text": ["Expression is True"]}, ". If the node should regenerate the cache when the value the expression returns ", {"type": "strong", "text": ["changes"]}, ", set ", {"type": "ui", "text": ["Cache When"]}, " to ", {"type": "ui", "text": ["Expression Changes"]}, "."], "extent": [8049, 8325]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": ["If you set ", {"type": "ui", "text": ["Cache When"]}, " to ", {"type": "ui", "text": ["Expression Changes"]}, ", set ", {"type": "ui", "text": ["Expression Type"]}, " to the type of value returned by the expression (", {"type": "ui", "text": ["Number"]}, " or ", {"type": "ui", "text": ["String"]}, ")."], "extent": [8325, 8485]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": ["Enter an expression in the ", {"type": "ui", "text": ["Expression"]}, " field."], "extent": [8485, 8541], "body": [{"type": "para", "indent": 8, "text": ["To edit the expression in a multi-line editor, right-click the parameter and choose ", {"type": "ui", "text": ["Expression \u25b8 Edit Expression"]}, "."], "extent": [8541, 8668]}, {"type": "para", "indent": 8, "text": ["To set the expression language in this parameter to Python, right-click the parameter and choose ", {"type": "ui", "text": ["Expression \u25b8 Change Language to Python"]}, "."], "extent": [8668, 8819]}], "container": true}], "container": true}], "container": true}], "container": true}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["An upstream Cache If node has regenerated"], "extent": [8819, 8869], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": ["See the docs for the ", {"scheme": null, "value": "#ccount", "type": "link", "text": ["cache count"], "fullpath": "/nodes/sop/cacheif#ccount", "fragment": "#ccount"}, " section below."], "extent": [8869, 8932]}], "container": true}]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Tips and notes"], "extent": [8932, 8953], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": ["This node ignores whether the first input is time-dependent. You can use this to remove time dependency from a section of a network by placing this node at the top and turning on the ", {"type": "ui", "text": ["Check for Upstream Network Changes"]}, " checkbox."], "extent": [8953, 9189]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["Re-caching on parameter change is very useful inside a digital asset, where you can cache the internal network and re-cache when the user changes a significant parameter on the parent asset."], "extent": [9189, 9384]}], "container": true}]}, {"level": 1, "id": "inputs", "container": true, "type": "inputs_section", "indent": 0, "role": "section", "extent": [9384, 9392], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 0, "text": ["Geometry to Cache"], "extent": [9392, 9412], "body": [{"type": "para", "indent": 4, "text": ["Connect the part of the network you want to cache into this input. "], "extent": [9412, 9485]}], "container": true}, {"type": "dt", "indent": 0, "text": ["Test Inputs"], "extent": [9485, 9498], "body": [{"type": "para", "indent": 4, "text": ["The multi-input can accept inputs from upstream nodes, or elsewhere in the network, and cause the node to regenerate the cache when the output of any of those nodes changes. See ", {"scheme": null, "value": "#conditions", "type": "link", "text": ["conditions"], "fullpath": "/nodes/sop/cacheif#conditions", "fragment": "#conditions"}, " above."], "extent": [9498, 9713]}], "container": true}], "container": true}], "text": "Inputs"}, {"level": 1, "id": "outputs", "container": true, "type": "outputs_section", "indent": 0, "role": "section", "extent": [9713, 9722], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 0, "text": ["Cached Geometry"], "extent": [9722, 9740], "body": [{"type": "para", "indent": 4, "text": ["The current cached geometry."], "extent": [9740, 9774]}], "container": true}], "container": true}], "text": "Outputs"}, {"level": 1, "id": "parameters", "container": true, "type": "parameters_section", "indent": 0, "role": "section", "extent": [9774, 9786], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Check for Upstream Network Changes"], "extent": [9786, 9823], "body": [{"type": "para", "indent": 4, "text": ["Re-cache any time a node is added, removed, or edited in the upstream network."], "extent": [9847, 9931]}], "container": true, "attrs": {"id": "checkupstream"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Re-Cache"], "extent": [9931, 9941], "body": [{"type": "para", "indent": 4, "text": ["Click to force this node to recook and re-cache the input geometry."], "extent": [9959, 10033]}], "container": true, "attrs": {"id": "recache"}, "role": "item"}], "container": true, "role": "item_group"}, {"level": 2, "id": "ccount", "container": true, "type": "h", "indent": 0, "text": ["Cache Count"], "extent": [10033, 10060], "body": [{"type": "para", "indent": 0, "text": ["These parameters let you use a detail (global) attribute which records the number of times this node has re-cached. These options let you wire up a series of Cache If nodes through the Test multi-input so that, if one Cache If re-caches (changing the detail attribute value), the downstream Cache If nodes will also re-cache (when they see the detail attribute value has changed)."], "extent": [10060, 10443]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Output Attribute"], "extent": [10443, 10461], "body": [{"type": "para", "indent": 4, "text": ["When this node re-caches, incremement the value of the detail attribute in ", {"type": "ui", "text": ["Attribute name"]}, " below. (If you specify a name below but turn this off, the attribute will not be in the output, even if it existed in the input.)"], "extent": [10484, 10713]}], "container": true, "attrs": {"id": "outputattrib"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Check Attribute"], "extent": [10713, 10730], "body": [{"type": "para", "indent": 4, "text": ["This node should re-cache if the detail attribute in ", {"type": "ui", "text": ["Attribute name"]}, " exists in the input and its value changes."], "extent": [10752, 10872]}], "container": true, "attrs": {"id": "checkattrib"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Attribute Name"], "extent": [10872, 10888], "body": [{"type": "para", "indent": 4, "text": ["Set/get the re-cache count in a detail attribute by this name. (If this string is not empty, but ", {"type": "ui", "text": ["Output attribute"]}, " is off, the detail attribute will be ", {"type": "em", "text": ["deleted"]}, " from the input if it exists. Set this to empty string to avoid this.)"], "extent": [10909, 11150]}], "container": true, "attrs": {"id": "attribname"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Test Inputs"], "extent": [11150, 11168], "body": [{"type": "para", "indent": 0, "text": ["These parameters manage what metadata is checked on each of this SOP\u2019s test inputs. If any of the metadata which you specify changes, the node will re-cache."], "extent": [11168, 11328]}, {"type": "para", "indent": 0, "text": ["The metadata which can be checked on a test input includes the data IDs of any attribute or group on the geometry, the detail and topology IDs of the geometry, and the change count of the input geometry."], "extent": [11328, 11533]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Check Test Input"], "extent": [11533, 11551], "body": [{"type": "para", "indent": 4, "text": ["Enable or disable this multi-parm instance."], "extent": [11575, 11625]}], "container": true, "attrs": {"id": "input_enable#"}, "role": "item"}], "container": true, "role": "item_group"}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Attribute Data IDs"], "extent": [11625, 11652], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Point Attributes"], "extent": [11652, 11671], "body": [{"type": "para", "indent": 4, "text": ["Re-cache if the any of the named point attributes in the input change."], "extent": [11701, 11777]}], "container": true, "attrs": {"id": "input_pointattribs#"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Vertex Attributes"], "extent": [11777, 11796], "body": [{"type": "para", "indent": 4, "text": ["Re-cache if the any of the named vertex attributes in the input change."], "extent": [11831, 11908]}], "container": true, "attrs": {"id": "input_vertexattribs#"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Primitive Attributes"], "extent": [11908, 11930], "body": [{"type": "para", "indent": 4, "text": ["Re-cache if the any of the named primitive attributes in the input change."], "extent": [11968, 12048]}], "container": true, "attrs": {"id": "input_primitiveattribs#"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Detail Attributes"], "extent": [12048, 12067], "body": [{"type": "para", "indent": 4, "text": ["Re-cache if the any of the named detail attributes in the input change."], "extent": [12102, 12180]}], "container": true, "attrs": {"id": "input_vertexattribs#"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Group Data IDs"], "extent": [12180, 12203], "body": [{"type": "para", "indent": 0, "text": ["These parameter can be used to specify groups on the test geometry. A re-cache will be triggered whenever the data IDs of these attributes change."], "extent": [12203, 12352]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Point Groups"], "extent": [12352, 12366], "body": [{"type": "para", "indent": 4, "text": ["Re-cache if the content of any of the named point groups in the input change."], "extent": [12395, 12478]}], "container": true, "attrs": {"id": "input_pointgroups#"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Vertex Groups"], "extent": [12478, 12493], "body": [{"type": "para", "indent": 4, "text": ["Re-cache if the content of any of the named vertex groups in the input change."], "extent": [12527, 12611]}], "container": true, "attrs": {"id": "input_vertexgroups#"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Primitive Groups"], "extent": [12611, 12629], "body": [{"type": "para", "indent": 4, "text": ["Re-cache if the content of any of the named primitive groups in the input change."], "extent": [12666, 12753]}], "container": true, "attrs": {"id": "input_primitivegroups#"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Edge Groups"], "extent": [12753, 12766], "body": [{"type": "para", "indent": 4, "text": ["Re-cache if the content of any of the named edge groups in the input change."], "extent": [12798, 12881]}], "container": true, "attrs": {"id": "input_edgegroups#"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 3, "id": "input_folder_metadata", "container": true, "type": "h", "indent": 0, "text": ["Geometry Metadata"], "extent": [12881, 12931], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Check Detail ID"], "extent": [12931, 12949], "body": [{"type": "para", "indent": 4, "text": ["Re-cache if the incoming geometry\u2019s ", {"type": "q", "text": ["Detail ID"]}, " changes. This means the ", {"type": "q", "text": ["origin"]}, " of the geometry (the creating node in the network that started that geometry stream) changed, for example when a Switch node switches between two different branches. You can use this with ", {"type": "ui", "text": ["Check change count"]}, " (below), if you want to catch ", {"type": "em", "text": ["any"]}, " change to the input."], "extent": [12980, 13334]}], "container": true, "attrs": {"id": "input_checkdetailid#"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Check Primitives ID"], "extent": [13334, 13355], "body": [{"type": "para", "indent": 4, "text": ["Re-cache if metadata changes on any primitives (this includes metaball weights, tube tapers, volume and packed primitive transforms, volume voxel data changes, packed primitive data changes, and NURBS basis changes)."], "extent": [13390, 13612]}], "container": true, "attrs": {"id": "input_checkprimitivesid#"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Check Topology"], "extent": [13612, 13628], "body": [{"type": "para", "indent": 4, "text": ["Re-cache if the topology (number, point count, and/or connectivity of primitives) of the input geometry changes."], "extent": [13659, 13777]}], "container": true, "attrs": {"id": "input_checktopology#"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Check Change Count"], "extent": [13777, 13797], "body": [{"type": "para", "indent": 4, "text": ["Re-cache if the incoming geometry\u2019s ", {"type": "q", "text": ["change count"]}, " metadata changes (Houdini generally updates the change count anytime the geometry is modified). Some nodes tend to create new geometry objects instead of ", {"type": "q", "text": ["changing"]}, " the existing one, so it\u2019s useful to turn both this and ", {"type": "ui", "text": ["Check detail ID"]}, " on if you want to catch ", {"type": "em", "text": ["any"]}, " change to the input."], "extent": [13831, 14179]}], "container": true, "attrs": {"id": "input_checkchangecount#"}, "role": "item"}], "container": true, "role": "item_group"}]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Parameters"], "extent": [14179, 14196], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Number of Patterns"], "extent": [14196, 14217], "body": [{"type": "para", "indent": 4, "text": ["A multiparm for each check you want to do (each instance can check multiple nodes at once using a pattern). Set this number or use the plus and minus buttons to set the number of instances of the multiparm."], "extent": [14239, 14451]}], "container": true, "attrs": {"id": "numpatterns"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Node Path"], "extent": [14451, 14462], "body": [{"type": "para", "indent": 4, "text": ["Space-separated list of node paths or patterns. The Cache If will check for parameter changes on these nodes. You can click the ", {"scheme": "Icon", "value": "BUTTONS/chooser_node", "type": "link", "text": "", "fullpath": "/nodes/sop/BUTTONS/chooser_node"}, " chooser button to the right of the text field to choose the nodes interactive from a tree."], "extent": [14487, 14739]}], "container": true, "attrs": {"id": "parm_nodepath#"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Parameter Names"], "extent": [14739, 14756], "body": [{"type": "para", "indent": 4, "text": ["Space-separated list of parameter internal names or patterns. The default is ", {"type": "code", "text": ["*"]}, ", meaning check if the value of ", {"type": "em", "text": ["any"]}, " parameter on the node(s) has changed. Adding/removing spare parameters does ", {"type": "em", "text": ["not"]}, " trigger a re-cache. (To match parameters in multiparm instances, specify both the multiparm folder name and the contained parameter name)."], "extent": [14783, 15127]}], "container": true, "attrs": {"id": "parm_parmfilter#"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Expand Multiparms"], "extent": [15127, 15146], "body": [{"type": "para", "indent": 4, "text": ["When a name in the ", {"type": "ui", "text": ["Parameter filter"]}, " matches a multiparm folder, automatically check all the multiparm instance parameters inside."], "extent": [15179, 15318]}], "container": true, "attrs": {"id": "parm_expandmultiparms#"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Group Names"], "extent": [15318, 15331], "body": [{"type": "para", "indent": 4, "text": ["A space-separated list of ", {"type": "q", "text": ["group"]}, " parameters to check for group membership changes. (These types of parameters are common in SOPs, usually named ", {"type": "code", "text": ["group"]}, ". The let the user specify named groups or individual components the node should apply to.) If the content of the group changes, this node will re-cache the geometry."], "extent": [15359, 15683]}], "container": true, "attrs": {"id": "parm_groupfilter#"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Check Groups"], "extent": [15683, 15697], "body": [{"type": "para", "indent": 4, "text": ["When to check if group membership has changed. When this is ", {"type": "ui", "text": ["On upstream change"]}, " (the default), the node only checks for group changes when the upstream geometry is manually edited. When this is ", {"type": "ui", "text": ["On every cook"]}, ", the node checks for group changes every time it cooks (that is, every time the geometry needs to be displayed or rendered). Set this to ", {"type": "ui", "text": ["On every cook"]}, " if group membership may change over time without user interverntion (for example, a computed group of all points within a bounding box, where the membership changes as points animate)."], "extent": [15719, 16279]}], "container": true, "attrs": {"id": "checkgroups"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Group Type"], "extent": [16279, 16291], "body": [{"type": "para", "indent": 4, "text": ["The level (vertex, points, primitives, edges) at which to look for the groups specified in ", {"type": "ui", "text": ["Group Names"]}, "."], "extent": [16317, 16430]}], "container": true, "attrs": {"id": "parm_grouptype#"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["On Test Input"], "extent": [16430, 16445], "body": [{"type": "para", "indent": 4, "text": ["The number of the wire connected to this node\u2019s multi-input (counting from left to right) in which to look for the groups specified in ", {"type": "ui", "text": ["Group Names"]}, "."], "extent": [16469, 16627]}], "container": true, "attrs": {"id": "parm_oninput#"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Expressions"], "extent": [16627, 16645], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Number of Expressions"], "extent": [16645, 16669], "body": [{"type": "para", "indent": 4, "text": ["Set this number or use the plus or minus buttons to set the number of expression checks."], "extent": [16699, 16793]}], "container": true, "attrs": {"id": "expr_numexpressions"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Cache When"], "extent": [16793, 16805], "body": [{"type": "para", "indent": 4, "text": ["If the node should regenerate the cache when the expression returns a ", {"type": "strong", "text": ["non-zero value"]}, ", set this to ", {"type": "ui", "text": ["Expression is True"]}, ". If the node should regenerate the cache when the value the expression returns ", {"type": "strong", "text": ["changes"]}, ", set this to ", {"type": "ui", "text": ["Expression Changes"]}, "."], "extent": [16831, 17085]}], "container": true, "attrs": {"id": "expr_cachewhen#"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Expression Type"], "extent": [17085, 17102], "body": [{"type": "para", "indent": 4, "text": ["When ", {"type": "ui", "text": ["Cache When"]}, " is ", {"type": "ui", "text": ["Expression Changes"]}, ", set this to the type of value returned by the expression (", {"type": "ui", "text": ["Number"]}, " or ", {"type": "ui", "text": ["String"]}, ")."], "extent": [17127, 17264]}], "container": true, "attrs": {"id": "expr_exprtype#"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Expression"], "extent": [17264, 17276], "body": [{"type": "para", "indent": 4, "text": ["The expression to test. To edit the expression in a multi-line editor, right-click the parameter and choose ", {"type": "ui", "text": ["Expression \u25b8 Edit Expression"]}, ". To set the expression language in this parameter to Python, right-click the parameter and choose ", {"type": "ui", "text": ["Expression \u25b8 Change Language to Python"]}, "."], "extent": [17328, 17616]}], "container": true, "attrs": {"id": "expr_exprval# expr_numexpr# expr_strexpr#"}, "role": "item"}], "container": true, "role": "item_group"}]}], "text": "Parameters"}, {"level": 1, "id": "related", "container": true, "type": "related_section", "indent": 0, "role": "section", "extent": [17616, 17625], "body": [{"type": "related_item_group", "body": [{"ext": null, "type": "related_item", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/sop/cache", "type": "link", "text": "", "fullpath": "/nodes/sop/cache"}], "role": "item", "extent": [17625, 17645]}, {"ext": null, "type": "related_item", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/sop/filecache", "type": "link", "text": "", "fullpath": "/nodes/sop/filecache"}], "role": "item", "extent": [17645, 17668]}], "container": true, "role": "item_group"}], "text": "Related"}], "title": ["Cache If"], "summary": ["Chooses whether to cook the input or re-use cached output based on configurable conditions."]}