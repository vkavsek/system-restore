{"type": "root", "attrs": {"type": "node", "context": "sop", "internal": "connectadjacentpieces", "icon": "SOP/connectadjacentpieces", "tags": "lowlevel, tech, rbd, dynamics, breaking", "since": "13.0", "version": null, "namespace": null}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["Connect Adjacent Pieces"], "extent": [0, 28]}, {"type": "summary", "indent": 0, "text": ["Creates lines between nearby pieces."], "extent": [182, 226]}, {"type": "para", "indent": 0, "text": ["This node creates a set of polygons that connect points together from nearby\npieces. This is useful for creating a ", {"scheme": "Node", "value": "/nodes/dop/constraintnetwork", "type": "link", "text": ["Constraint Network"], "fullpath": "/nodes/dop/constraintnetwork"}, " that constrains or glues together adjacent objects in a simulation."], "extent": [226, 458]}, {"type": "para", "indent": 0, "text": ["The ", {"type": "code", "text": ["name"]}, " primitive attribute is used to determine which primitives in the input geometry belong to each piece. The output geometry contains a ", {"type": "code", "text": ["name"]}, " point attribute to identify the piece that each point belongs to."], "extent": [458, 676]}, {"level": 1, "id": "parameters", "container": true, "type": "parameters_section", "indent": 0, "role": "section", "extent": [676, 688], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Connection Type"], "extent": [688, 706], "body": [{"type": "para", "indent": 4, "text": ["Specifies how connections between nearby pieces will be created."], "extent": [706, 776]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Adjacent Pieces from Points"], "extent": [776, 809], "body": [{"type": "para", "indent": 8, "text": ["Each point will be connected to the closest point from another\n        piece. The ", {"type": "ui", "text": ["Max Connections"]}, " parameter can be used to allow\n        connections to multiple nearby pieces."], "extent": [809, 998]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Adjacent Pieces from Surface Points"], "extent": [998, 1039], "body": [{"type": "para", "indent": 8, "text": ["The centroids of nearby pieces will be connected together. Before\n        searching for adjacent pieces, points will be scattered across the\n        surface to aid the detection of close surfaces."], "extent": [1039, 1245]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Adjacent Points"], "extent": [1245, 1266], "body": [{"type": "para", "indent": 8, "text": ["Connections will be made between raw points, ignoring any\n        name attribute.  This is useful if the geometry is already\n        packed, or constraints are being built for the sand solver."], "extent": [1266, 1468]}], "container": true}], "container": true}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Assume Uniform Radius"], "extent": [1468, 1499], "body": [{"type": "para", "indent": 4, "text": ["When connection ", {"type": "ui", "text": ["Adjacent Points"]}, ", any ", {"type": "code", "text": ["pscale"]}, " attibute found\n    will be assumed to be the same for all points.  This allows\n    a much faster query to be performed."], "extent": [1499, 1674]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Piece Attribute"], "extent": [1674, 1691], "body": [{"type": "para", "indent": 4, "text": ["Specifies the string primitive attribute used to determine which primitives in the input geometry belong to each piece.\n    This attribute will be transferred to the points of the output geometry.\n    The default value is ", {"type": "code", "text": ["name"]}, ", which is the standard attribute used for rigid bodies."], "extent": [1691, 1981]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Find Boundary Connections"], "extent": [1981, 2008], "body": [{"type": "para", "indent": 4, "text": ["Only create connections between adjacent pieces that have different values of the ", {"type": "ui", "text": ["Cluster Attribute"]}, ".\n    This can be useful for creating constraints between pieces at the boundary between different material types."], "extent": [2008, 2231]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Cluster Attribute"], "extent": [2231, 2250], "body": [{"type": "para", "indent": 4, "text": ["Specifies the primitive attribute used to determine which pieces belong to each cluster when ", {"type": "ui", "text": ["Find Boundary Connections"]}, " is enabled.\n    This attribute can be either an integer or a string."], "extent": [2250, 2447]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Points per Area"], "extent": [2447, 2464], "body": [{"type": "para", "indent": 4, "text": ["When connecting ", {"type": "ui", "text": ["Adjacent Pieces from Surfaces"]}, ", points are first seeded on the\n    surface of all the objects. There must be enough points for close\n    points to occur to detect close surfaces. This should be scaled down\n    by the square of the geometry size. For example, if your geometry is 10\u00d7 bigger, you\n    should have 1/100 the points per area."], "extent": [2464, 2826]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Relax Iterations"], "extent": [2826, 2844], "body": [{"type": "para", "indent": 4, "text": ["When connecting ", {"type": "ui", "text": ["Adjacent Pieces from Surfaces"]}, ", the scattered points\n    will be pushed away from each other to avoid clumping. This is done\n    gradually, to avoid chaotic behavior and to allow control over how much\n    relaxation takes place. More relaxation iterations will result in\n    points that are more separated from each other."], "extent": [2844, 3191]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Search Radius"], "extent": [3191, 3206], "body": [{"type": "para", "indent": 4, "text": ["Specifies the maximum allowed distance when searching for nearby points."], "extent": [3206, 3284]}, {"type": "para", "indent": 4, "text": ["If in ", {"type": "ui", "text": ["Adjacent Points"]}, " mode, this will be multiplied by any ", {"type": "code", "text": ["pscale"]}, " attribute.  If ", {"type": "code", "text": ["pscale"]}, " isn\u2019t present, it is treated as 1 so this refers to an absolute distance."], "extent": [3284, 3459]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Max Search Points"], "extent": [3459, 3478], "body": [{"type": "para", "indent": 4, "text": ["Specifies an upper limit on the number of nearby points that can be\n    inspected. Lower numbers will improve performance, but run the risk\n    that only points from the same piece will be detected rather than\n    points on nearby pieces, causing connections to be missed."], "extent": [3478, 3756]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Cone Angle"], "extent": [3756, 3768], "body": [{"type": "para", "indent": 4, "text": ["Restricts the search for nearby points to only consider points within the cone defined by this angle from the query point\u2019s normal.\n    This can be used to avoid creating connections to points that are ", {"type": "q", "text": ["behind"]}, " the query point. "], "extent": [3788, 4026]}, {"type": "note_group", "body": [{"type": "note", "indent": 4, "role": "item", "extent": [4026, 4036], "body": [{"type": "para", "indent": 8, "text": ["You can optionally turn this parameter off to search in all directions around the point."], "extent": [4036, 4134]}], "container": true}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "coneangle"}, "role": "item"}], "container": true, "role": "item_group"}, {"type": "para", "indent": 0, "text": ["Minimum Distance"], "extent": [4134, 4151], "body": [{"type": "para", "indent": 4, "text": ["Restricts the search for nearby points to only consider points that are at least this distance from the query point."], "extent": [4169, 4291]}], "container": true, "attrs": {"id": "mindist"}}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Max Connections"], "extent": [4291, 4308], "body": [{"type": "para", "indent": 4, "text": ["Specifies an upper limit on the number of pieces that each seed point\n    can be connected to. This is primarily useful when connecting\n    ", {"type": "ui", "text": ["Adjacent Pieces from Points"]}, ", but may also improve the detection of ", {"type": "ui", "text": ["Adjacent\n    Pieces from Surface Points"]}, ". However, increasing this value will reduce performance."], "extent": [4308, 4625]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Centroid Method"], "extent": [4625, 4642], "body": [{"type": "para", "indent": 4, "text": ["Specifies how the centroid is computed."], "extent": [1091, 1136]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Center of Mass"], "extent": [1136, 1156], "body": [{"type": "para", "indent": 8, "text": ["Computes the center of mass of the geometry in the same manner as the ", {"scheme": "Node", "value": "/nodes/dop/bulletrbdsolver", "type": "link", "text": ["Bullet solver"], "fullpath": "/nodes/dop/bulletrbdsolver"}, "."], "extent": [1156, 1277]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Bounding Box Center"], "extent": [1277, 1302], "body": [{"type": "para", "indent": 8, "text": ["Computes the center of the geometry\u2019s bounding box."], "extent": [1302, 1363]}], "container": true}], "container": true}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Offset From Centroid"], "extent": [4692, 4714], "body": [{"type": "para", "indent": 4, "text": ["When connecting ", {"type": "ui", "text": ["Adjacent Pieces from Surface Points"]}, ", each point is moved away from the\n    centroid in the direction of the other point that it is connected to. A\n    value of 0 will leave the point at the centroid, and a value of 1 will\n    move the point to the surface of its piece."], "extent": [4714, 5009]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Create Length Attribute"], "extent": [5009, 5034], "body": [{"type": "para", "indent": 4, "text": ["Create a primitive attribute that contains the length of each connection."], "extent": [5034, 5113]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Length Attribute"], "extent": [5113, 5131], "body": [{"type": "para", "indent": 4, "text": ["Specifies the name of the primitive attribute used to record the length\n    of each connection."], "extent": [5131, 5236]}], "container": true, "role": "item"}], "container": true, "role": "item_group"}], "text": "Parameters"}, {"level": 1, "id": "inputs", "container": true, "type": "inputs_section", "indent": 0, "role": "section", "extent": [5236, 5244], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 0, "text": ["Pieces"], "extent": [5244, 5253], "body": [{"type": "para", "indent": 4, "text": ["The geometry to find adjacent pieces in."], "extent": [5253, 5299]}], "container": true}], "container": true}], "text": "Inputs"}, {"level": 1, "id": "related", "container": true, "type": "related_section", "indent": 0, "role": "section", "extent": [5299, 5308], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/dop/constraintnetwork", "type": "link", "text": "", "fullpath": "/nodes/dop/constraintnetwork"}], "extent": [5308, 5339]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/sop/assemble", "type": "link", "text": "", "fullpath": "/nodes/sop/assemble"}], "extent": [5339, 5361]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/sop/voronoifracture", "type": "link", "text": "", "fullpath": "/nodes/sop/voronoifracture"}], "extent": [5361, 5390]}], "container": true}], "text": "Related"}], "title": ["Connect Adjacent Pieces"], "summary": ["Creates lines between nearby pieces."], "included": ["/nodes/sop/extractcentroid"]}