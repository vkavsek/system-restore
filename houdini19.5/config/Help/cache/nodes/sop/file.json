{"type": "root", "attrs": {"type": "node", "context": "sop", "internal": "file", "icon": "COMMON/file", "tags": "io", "version": null, "namespace": null}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["File"], "extent": [0, 9]}, {"type": "summary", "indent": 0, "text": ["Reads, writes, or caches geometry on disk."], "extent": [82, 132]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Overview"], "extent": [132, 147], "body": [{"type": "para", "indent": 0, "text": ["This node has two modes of operation. ", {"type": "em", "text": ["If its input is connected"]}, ", you can choose a ", {"type": "ui", "text": ["File mode"]}, " to control how the node reads, writes, or caches geometry on disk. If no input is connected, you can specify a geometry file to read in from disk and send through the node\u2019s output."], "extent": [147, 429]}, {"type": "para", "indent": 0, "text": ["It also supports reading, but not writing, of ", {"type": "code", "text": [".sim"]}, " and ", {"type": "code", "text": [".simdata"]}, " files\ncreated from File and File Data DOPs."], "extent": [429, 542]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Tips"], "extent": [542, 553], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": ["You can also write out the geometry from ", {"type": "em", "text": ["any surface node"]}, " as a one-shot action by right-clicking the node and choosing ", {"type": "ui", "text": ["Save Geometry"]}, "."], "extent": [553, 701], "body": [{"type": "para", "indent": 4, "text": ["To set up a procedural workflow where the geometry\n    output of a surface node network is always written to disk as part of a render dependency network, set up a\n    ", {"scheme": "Node", "value": "/nodes/out/geometry", "type": "link", "text": ["Geometry render driver"], "fullpath": "/nodes/out/geometry"}, "."], "extent": [701, 917]}], "container": true}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["You can ", {"type": "q", "text": ["import"]}, " the loaded geometry into the ", {"type": "code", "text": [".hip"]}, " file so it works without the external file by ", {"scheme": null, "value": "/model/lock_nodes", "type": "link", "text": ["locking the File node"], "fullpath": "/model/lock_nodes"}, "."], "extent": [917, 1062]}], "container": true}]}, {"level": 1, "id": "parameters", "container": true, "type": "parameters_section", "indent": 0, "role": "section", "extent": [1062, 1074], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["File Mode"], "extent": [1074, 1086], "body": [{"type": "para", "indent": 4, "text": ["How this node reads/writes the geometry to/from the disk file."], "extent": [1086, 1154]}, {"type": "para", "indent": 4, "text": ["This parameter is only available when the node\u2019s input is\n    connected."], "extent": [1154, 1232]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Automatic"], "extent": [1232, 1247], "body": [{"type": "para", "indent": 8, "text": ["Writes the file if it doesn\u2019t exist, reads it if it does\n        exist."], "extent": [1247, 1336]}, {"type": "para", "indent": 8, "text": ["This is useful for caching, where the node will\n        write the cache to disk the first time it cooks, and\n        use the cache file from then on."], "extent": [1336, 1503]}, {"type": "para", "indent": 8, "text": ["To force a refresh of the cache, manually delete the file\n        on disk."], "extent": [1503, 1591]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Read Files"], "extent": [1591, 1607], "body": [{"type": "para", "indent": 8, "text": ["Reads the geometry from the file. If the node\u2019s input\n        is connected, it\u2019s ignored."], "extent": [1607, 1714]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Write Files"], "extent": [1714, 1731], "body": [{"type": "para", "indent": 8, "text": ["Writes the input geometry to disk."], "extent": [1731, 1783]}], "container": true}, {"type": "dt", "indent": 4, "text": ["No Operation"], "extent": [1783, 1801], "body": [{"type": "para", "indent": 8, "text": ["No file access will occur. Pass through the input geometry\n        to the output, like a ", {"scheme": "Node", "value": "/nodes/sop/null", "type": "link", "text": ["Null surface node"], "fullpath": "/nodes/sop/null"}, "."], "extent": [1801, 1934]}], "container": true}], "container": true}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Geometry File"], "extent": [1934, 1949], "body": [{"type": "para", "indent": 4, "text": ["The name of the file to read or write."], "extent": [1964, 2008]}], "container": true, "attrs": {"id": "file"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Reload Geometry"], "extent": [2008, 2025], "body": [{"type": "para", "indent": 4, "text": ["Force a reload of the file.  This will also clear any cached data for\n    packed disk primitives (see also the ", {"scheme": "Cmd", "value": "/commands/geocache", "type": "link", "text": ["geocache"], "fallback_text": "geocache", "fullpath": "/commands/geocache"}, " command)."], "extent": [2042, 2192]}], "container": true, "attrs": {"id": "reload"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Object Mask"], "extent": [2192, 2205], "body": [{"type": "para", "indent": 4, "text": ["When loading ", {"type": "code", "text": [".sim"]}, " files this determines which objects should\n    be loaded from disk.  Any objects matching this pattern will\n    be loaded."], "extent": [2205, 2353]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Geometry Data Path"], "extent": [2353, 2373], "body": [{"type": "para", "indent": 4, "text": ["For each object loaded from a ", {"type": "code", "text": [".sim"]}, " file, any data attached to\n    the object that matches this path will be loaded.  Patterns\n    like ", {"type": "code", "text": ["*"]}, " can be used to match multiple data.  If blank, only the\n    Geometry data will be loaded."], "extent": [2373, 2609]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Missing Frame"], "extent": [2609, 2624], "body": [{"type": "para", "indent": 4, "text": ["What should be done if the specified file does not exist on disk.\n    This is only used if in Read Files mode.  By default, if no file\n    of the given name exists, the SOP will error.  This can be\n    troublesome in a network that can recover from the error.  In\n    these cases the behavior can be set to No Geometry so only a\n    warning is posted."], "extent": [2624, 2981]}, {"type": "note_group", "body": [{"type": "note", "indent": 4, "role": "item", "extent": [2981, 2991], "body": [{"type": "para", "indent": 8, "text": ["In ", {"type": "ui", "text": ["No Geometry"]}, " mode, if an input exists to the File SOP, it will be passed through.  This allows the File SOP to become a read-only cache."], "extent": [2991, 3143]}], "container": true}], "container": true, "role": "item_group"}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Load"], "extent": [3143, 3149], "body": [{"type": "para", "indent": 4, "text": ["Some file formats, in particular ", {"type": "code", "text": [".bgeo"]}, ", ", {"type": "code", "text": [".bgeo.sc"]}, ", and ", {"type": "code", "text": [".geo"]}, ", contain meta-data in the header than can be loaded without loading the entire file. This is useful for dealing with large data sets."], "extent": [3167, 3375]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["All Geometry"], "extent": [3375, 3393], "body": [{"type": "para", "indent": 8, "text": ["Loads the whole file. Potentially with some parts delayed (see below)"], "extent": [3393, 3472]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Info"], "extent": [3472, 3482], "body": [{"type": "para", "indent": 8, "text": ["Creates one point if the file loads successfully and attach attributes for each named component of the meta-data."], "extent": [3482, 3605]}, {"type": "para", "indent": 8, "text": ["Metadata is created by whatever writes the file, so may vary.  Common metadata are:"], "extent": [3605, 3698]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["artist"], "extent": [3698, 3714], "body": [{"type": "para", "indent": 12, "text": ["The username that generated the file.  You can override this with the ", {"type": "code", "text": ["HOUDINI_AUTHOR"]}, " environment variable."], "extent": [3714, 3835]}], "container": true}, {"type": "dt", "indent": 8, "text": ["hostname"], "extent": [3835, 3853], "body": [{"type": "para", "indent": 12, "text": ["The name of the machine that generated the file. This is very useful when tracking strange behavior on a farm.  It can also be overridden with the ", {"type": "code", "text": ["HOUDINI_AUTHOR"]}, " environment variable."], "extent": [3853, 4051]}], "container": true}, {"type": "dt", "indent": 8, "text": ["date"], "extent": [4051, 4065], "body": [{"type": "para", "indent": 12, "text": ["The time the file was created, which may not match the date stamp of the file."], "extent": [4065, 4156]}], "container": true}, {"type": "dt", "indent": 8, "text": ["software"], "extent": [4156, 4174], "body": [{"type": "para", "indent": 12, "text": ["The version of Houdini used to create the file."], "extent": [4174, 4234]}], "container": true}, {"type": "dt", "indent": 8, "text": ["time"], "extent": [4234, 4248], "body": [{"type": "para", "indent": 12, "text": ["The time, in seconds, on the playbar when the file was saved."], "extent": [4248, 4322]}], "container": true}, {"type": "dt", "indent": 8, "text": ["timetocook"], "extent": [4322, 4342], "body": [{"type": "para", "indent": 12, "text": ["How long it took to compute the file.  Created by ROP Geometry,\n            this is the wall-clock time in seconds to generate the file. If multiple output drivers are present, caching may cause undercounting of what it would take to cook the file on its own."], "extent": [4342, 4615]}], "container": true}], "container": true}], "container": true}, {"type": "dt", "indent": 4, "text": ["Info Bounding Box"], "extent": [4615, 4638], "body": [{"type": "para", "indent": 8, "text": ["Tries to build a bounding box using the information stored in the header of the file."], "extent": [4638, 4733]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Point Cloud"], "extent": [4733, 4750], "body": [{"type": "para", "indent": 8, "text": ["Tries to load just the points from a disk file.  This will be faster and use less memory than loading primitives."], "extent": [4750, 4873]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Packed Disk Primitive"], "extent": [4873, 4900], "body": [{"type": "para", "indent": 8, "text": ["Instead of loading the geometry into memory, create a packed disk primitive.  Copies of the delayed load primitive will share geometry meaning that multiple copies will use less memory."], "extent": [4900, 5095]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Packed Disk Sequence"], "extent": [5095, 5121], "body": [{"type": "para", "indent": 8, "text": ["Instead of loading the geometry into memory, this will create a packed disk sequence primitive.  Unlike a packed disk primitive, the packed disk sequence stores a list of filenames along with an index of which file to unpack during rendering.  Since the packed disk sequence primitive is aware of all the files in the disk sequence, it is able to compute blended sub-frame geometry at render time (provided topology matches between frames).  This means that motion blur can be computed correctly. When creating the packed disk sequence primitive, the ", {"type": "ui", "text": ["Geometry File"]}, " parameter is evaluated for each frame in the frame range.  The index of the packed disk sequence primitive is set to the value of the ", {"type": "ui", "text": ["Sequence Index"]}, " parameter."], "extent": [5121, 5863]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Packed Geometry"], "extent": [5863, 5884], "body": [{"type": "para", "indent": 8, "text": ["This will load the geometry into memory, and create a standalone packed geometry primitive containing it."], "extent": [5884, 5999]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "loadtype"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Pack Using Expanded/Absolute File Path"], "extent": [5999, 6039], "body": [{"type": "para", "indent": 4, "text": ["When loading the geometry as ", {"type": "ui", "text": ["Packed Disk Primitive"]}, ", this toggle controls whether the file name stored with the primitive will have variables expanded.  By default, variables will be preserved. For example, a file such as ", {"type": "code", "text": ["$HIP/geo/tree.bgeo"]}, " will be portable if the value of the ", {"type": "code", "text": ["$HIP"]}, " variable changes.  This is only important if you are saving the packed primitive to disk and may move the geometry file."], "extent": [6061, 6477]}, {"type": "para", "indent": 4, "text": ["When storing variables in the packed primitive (i.e. the toggle is turned off), the primitive itself performs variable expansion.  Since the primitive can be accessed in applications other than Houdini (", {"type": "code", "text": ["mantra"]}, ", ", {"type": "code", "text": ["gplay"]}, ", ", {"type": "code", "text": ["gconvert"]}, ", etc.), the expansion of variables is limited in function.  For example, using variables local to the .hip file or using expressions which reference other nodes may not work as expected."], "extent": [6477, 6902]}], "container": true, "attrs": {"id": "packexpanded"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Display As"], "extent": [6902, 6914], "body": [{"type": "para", "indent": 4, "text": ["When loading the geometry as ", {"type": "ui", "text": ["Packed Disk Primitive"]}, " or when delayed loading, you can set the viewport display to a lighter representation of the packed geometry.  This setting only applies to rendering in the viewport, at render time, the full geometry will be rendered."], "extent": [6935, 7214]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Use File Setting"], "extent": [7214, 7236], "body": [{"type": "para", "indent": 8, "text": ["Packed primitives have viewport display settings that are saved to file. This option reads these and uses them. All others override the saved setting. "], "extent": [7236, 7397]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Full Geometry"], "extent": [7397, 7416], "body": [{"type": "para", "indent": 8, "text": ["The full geometry will be displayed in the viewport."], "extent": [7416, 7478]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Point Cloud"], "extent": [7478, 7495], "body": [{"type": "para", "indent": 8, "text": ["Only the points of the geometry will be displayed.  This will take less memory and be faster to render."], "extent": [7495, 7608]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Bounding Box"], "extent": [7608, 7626], "body": [{"type": "para", "indent": 8, "text": ["Only display the bounding box of the geometry in the viewport."], "extent": [7626, 7698]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Centroid"], "extent": [7698, 7712], "body": [{"type": "para", "indent": 8, "text": ["Display a single point at the center of the bounding box."], "extent": [7712, 7779]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Hidden"], "extent": [7779, 7791], "body": [{"type": "para", "indent": 8, "text": ["Don\u2019t display the geometry in the viewport."], "extent": [7791, 7844]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "viewportlod"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Delay Load Geometry"], "extent": [7844, 7865], "body": [{"type": "para", "indent": 4, "text": ["If this parameter is set, packed primitives and other shared data will not be loaded immediately but will be loaded only as needed. This can be useful when opening a large scene to reduce load times.  "], "extent": [7884, 8091]}], "container": true, "attrs": {"id": "delayload"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Create Intermediate Directories"], "extent": [8091, 8124], "body": [{"type": "para", "indent": 4, "text": ["Create intermediate parent directories for output files as needed."], "extent": [8124, 8196]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Cache Frames"], "extent": [8196, 8210], "body": [{"type": "para", "indent": 4, "text": ["The total number of frames to cache in memory.  These sorted by filename,\n    not by time, so if multiple frames evaluate to the same file name they will\n    share the same cached geometry.  "], "extent": [8229, 8426]}, {"type": "note_group", "body": [{"type": "note", "indent": 4, "role": "item", "extent": [8426, 8436], "body": [{"type": "para", "indent": 8, "text": ["A value of 1 is almost the same as the default behavior of the File SOP.  However, the new geometry will be loaded before the old geometry is freed.  When loading agent primitives, this avoids possible flushing shared agent shape caches."], "extent": [8436, 8683]}], "container": true}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "cachesize"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Pre-fetch Geometry"], "extent": [8683, 8703], "body": [{"type": "para", "indent": 4, "text": ["Attempt to predict the next frame that will be needed and load it in\n    the background.  This lets computation be overlapped with file IO."], "extent": [8721, 8866]}, {"type": "para", "indent": 4, "text": ["If you are blending multiple frames, the Cache Frames needs to be large\n    enough for only the net-new frame to be loaded each cook.  Otherwise\n    the simple predictive model of the prefetcher will be confused and stop working."], "extent": [8866, 9101]}], "container": true, "attrs": {"id": "prefetch"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Frame Range"], "extent": [9101, 9114], "body": [{"type": "para", "indent": 4, "text": ["When creating ", {"type": "ui", "text": ["Packed Disk Sequence"]}, " primitives, this parameter specifies the number of filenames in the disk sequence.  When evaluating the ", {"type": "ui", "text": ["Geometry File"]}, ", the ", {"type": "code", "text": ["$F"]}, ", and ", {"type": "code", "text": ["$FF"]}, " variables will be set to the values in the frame range."], "extent": [9114, 9357]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Sequence Index"], "extent": [9357, 9373], "body": [{"type": "para", "indent": 4, "text": ["When creating ", {"type": "ui", "text": ["Packed Disk Sequence"]}, " primitives, this parameter specifies which geometry from the sequence will be used at render time.  The index is linear, with values between 0 and the number of geometry files in the disk sequence (not based on the frame number).  Index values out of range will automatically wrap to generate animation cycles."], "extent": [9388, 9743]}, {"type": "para", "indent": 4, "text": ["The index values can have non-integer values.  If the topology matches between disk files, the geometry will be blended at render time.  See also the ", {"type": "code", "text": ["vm_pack_sequencesubsteps"]}, " rendering property."], "extent": [9743, 9945]}, {"type": "tip_group", "body": [{"type": "tip", "indent": 4, "role": "item", "extent": [9945, 9954], "body": [{"type": "para", "indent": 8, "text": ["To offset a sequence of images or geo files when you have padding in your frames, you should enter something like this:"], "extent": [9954, 10082]}, {"lang": null, "type": "pre", "indent": 8, "text": ["    \n        <path_to_image>/frame`padzero(3, $F+1)`.tga\n        "], "extent": [10082, 10162]}, {"type": "para", "indent": 8, "text": ["Where 3 is the number of digits in your sequence, for example 001 is pad 3, 0002 pad 4, etc. The back ticks are necessary so the expression gets evaluated inside the string parameter."], "extent": [10162, 10360]}], "container": true}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "index"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Wrap Mode"], "extent": [10360, 10371], "body": [{"type": "para", "indent": 4, "text": ["When creating ", {"type": "ui", "text": ["Packed Disk Sequence"]}, " primitives, this parameter specifies behavior when ", {"type": "ui", "text": ["Sequence Index"]}, " is outside of the frame range."], "extent": [10385, 10534]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Cycle"], "extent": [10534, 10545], "body": [{"type": "para", "indent": 8, "text": ["File sequence repeats."], "extent": [10545, 10577]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Clamp"], "extent": [10577, 10588], "body": [{"type": "para", "indent": 8, "text": ["First file is used used when ", {"type": "ui", "text": ["Sequence Index"]}, " is before the range.  Last file is used when ", {"type": "ui", "text": ["Sequence Index"]}, " is after the range."], "extent": [10588, 10729]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Strict"], "extent": [10729, 10741], "body": [{"type": "para", "indent": 8, "text": ["No geometry outside of the range."], "extent": [10741, 10784]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Mirror"], "extent": [10784, 10796], "body": [{"type": "para", "indent": 8, "text": ["File sequence repeats with each repetition reversing order."], "extent": [10796, 10865]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "wrap"}, "role": "item"}], "container": true, "role": "item_group"}], "text": "Parameters"}, {"level": 1, "id": "related", "container": true, "type": "related_section", "indent": 0, "role": "section", "extent": [10865, 10874], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/sop/filecache", "type": "link", "text": "", "fullpath": "/nodes/sop/filecache"}], "extent": [10874, 10897]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/sop/filemerge", "type": "link", "text": "", "fullpath": "/nodes/sop/filemerge"}], "extent": [10897, 10920]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/sop/dopio", "type": "link", "text": "", "fullpath": "/nodes/sop/dopio"}], "extent": [10920, 10939]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/sop/vellumio", "type": "link", "text": "", "fullpath": "/nodes/sop/vellumio"}], "extent": [10939, 10961]}], "container": true}], "text": "Related"}], "title": ["File"], "summary": ["Reads, writes, or caches geometry on disk."]}