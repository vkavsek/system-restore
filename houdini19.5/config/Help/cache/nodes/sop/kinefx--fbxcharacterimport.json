{"type": "root", "attrs": {"type": "node", "context": "sop", "namespace": "kinefx", "internal": "fbxcharacterimport", "icon": "SOP/kinefx-fbxcharacterimport", "tags": "character, import, rigging, animation", "since": "18.5", "version": null}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["FBX Character Import"], "extent": [176, 201]}, {"type": "summary", "indent": 0, "text": ["Import a skinned character from an FBX file with animation."], "extent": [201, 269]}, {"type": "para", "indent": 0, "text": ["This is a high-level node that combines ", {"scheme": "Node", "value": "/nodes/sop/kinefx--fbxskinimport", "type": "link", "text": "", "fullpath": "/nodes/sop/kinefx--fbxskinimport"}, " and\n", {"scheme": "Node", "value": "/nodes/sop/kinefx--fbxanimimport", "type": "link", "text": "", "fullpath": "/nodes/sop/kinefx--fbxanimimport"}, " SOPs to provide a full geometry-based\ncharacter that can then be directly deformed by a ", {"scheme": "Node", "value": "/nodes/sop/kinefx--jointdeform", "type": "link", "text": "", "fullpath": "/nodes/sop/kinefx--jointdeform"}, "\nSOP."], "extent": [269, 504]}, {"level": 1, "id": "parameters", "container": true, "type": "parameters_section", "indent": 0, "role": "section", "extent": [504, 516], "body": [{"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Import"], "extent": [516, 530], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["FBX File"], "extent": [530, 541], "body": [{"type": "para", "indent": 4, "text": ["Path to FBX file to import."], "extent": [280, 313]}], "container": true, "attrs": {"id": "fbxfile"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Animation FBX File"], "extent": [607, 627], "body": [{"type": "para", "indent": 4, "text": ["Specify an alternate FBX file to import the animation. By default, both\n    skin geometry and the animation is taken from ", {"type": "ui", "text": ["FBX File"]}, "."], "extent": [648, 789]}], "container": true, "attrs": {"id": "animfbxfile"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Clip Name"], "extent": [789, 800], "body": [{"type": "para", "indent": 4, "text": ["Specify the name of the non-default animation clip to import."], "extent": [346, 413]}, {"type": "para", "indent": 4, "text": ["An FBX file may contain multiple clips and this parameter can be used to choose which particular clip to import."], "extent": [413, 531]}], "container": true, "attrs": {"id": "clipname"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Set New Clip Name"], "extent": [869, 888], "body": [{"type": "para", "indent": 4, "text": ["Sets a new name for the clip instead of using the original clip name from the FBX file (", {"type": "ui", "text": ["FBX Clip Name"]}, ")."], "extent": [574, 687]}], "container": true, "attrs": {"id": "setnewclipname"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["New Clip Name"], "extent": [969, 984], "body": [{"type": "para", "indent": 4, "text": ["Specifies a name for the animation clip.\n    This is saved to the ", {"type": "code", "text": ["clipinfo"]}, " detail attribute."], "extent": [1078, 1178]}], "container": true, "attrs": {"id": "newclipname"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Rig Color"], "extent": [1055, 1066], "body": [{"type": "para", "indent": 4, "text": ["The point color used for the output skeleton\u2019s ", {"type": "code", "text": ["Cd"]}, " point attribute."], "extent": [1200, 1274]}], "container": true, "attrs": {"id": "rigcolor"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Convert Units"], "extent": [1131, 1146], "body": [{"type": "para", "indent": 4, "text": ["When enabled, the imported scene is scaled to convert from the FBX file\u2019s measurement unit (default centimeters) to Houdini scene\u2019s measurement unit as specified in Main Preferences > Hip File Options (default meters)."], "extent": [1056, 1280]}], "container": true, "attrs": {"id": "convertunits"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Import Invisible Shapes"], "extent": [1222, 1247], "body": [{"type": "para", "indent": 4, "text": ["Specifies whether to import geometry from nodes that are not visible.\n    If enabled, the invisible shapes will belong to the ", {"type": "code", "text": ["_3d_hidden_primitives"]}, " primitive group (similar to using the ", {"scheme": "Node", "value": "/nodes/sop/visibility", "type": "link", "text": ["Visibility SOP"], "fullpath": "/nodes/sop/visibility"}, ")."], "extent": [1556, 1788]}], "container": true, "attrs": {"id": "importinvisibleshapes"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Reload"], "extent": [1341, 1349], "body": [{"type": "para", "indent": 4, "text": ["Reload from the FBX file."], "extent": [1559, 1590]}], "container": true, "attrs": {"id": "reload"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Timing"], "extent": [1413, 1426], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Method"], "extent": [16, 24], "body": [{"type": "para", "indent": 4, "text": ["The time units for specifying animation parameters."], "extent": [49, 110]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["By Time"], "extent": [110, 123], "body": [{"type": "para", "indent": 8, "text": ["The timing parameters below will be specified in seconds."], "extent": [123, 190]}], "container": true}, {"type": "dt", "indent": 4, "text": ["By Frame"], "extent": [190, 204], "body": [{"type": "para", "indent": 8, "text": ["The timing parameters below will be specified in frames."], "extent": [204, 270]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "timeshiftmethod"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Time"], "extent": [270, 276], "body": [{"type": "para", "indent": 4, "text": ["The time (in seconds) to import the animated pose from."], "extent": [291, 352]}], "container": true, "attrs": {"id": "time"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Animation Start"], "extent": [352, 369], "body": [{"type": "para", "indent": 4, "text": ["The time at which the ", {"type": "em", "text": ["source"]}, " animation starts, earlier poses will be\n    clamped to this value. When disabled, this value is taken from the source\n    animation where available. If it has no range information, Houdini\u2019s scene\n    start (", {"type": "code", "text": ["$TSTART"]}, ") value will be used."], "extent": [398, 673]}, {"type": "para", "indent": 4, "text": ["Note that no clamping is done when this is disabled."], "extent": [673, 731]}], "container": true, "attrs": {"id": "animationstarttime"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Animation End"], "extent": [731, 746], "body": [{"type": "para", "indent": 4, "text": ["The time at which the ", {"type": "em", "text": ["source"]}, " animation ends, later poses will be clamped\n    to this value. When disabled, this value is taken from the source animation\n    where available. If it has no range information, Houdini\u2019s scene end\n    (", {"type": "code", "text": ["$TEND"]}, ") value will be used."], "extent": [773, 1040]}, {"type": "para", "indent": 4, "text": ["Note that no clamping is done when this is disabled."], "extent": [1040, 1098]}], "container": true, "attrs": {"id": "animationendtime"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Playback Start"], "extent": [1098, 1114], "body": [{"type": "para", "indent": 4, "text": ["The destination time at which the specified animation will begin to\n    playback. When disabled, Houdini\u2019s scene start (", {"type": "code", "text": ["$TSTART"]}, ") value is used."], "extent": [1142, 1293]}], "container": true, "attrs": {"id": "playbackstarttime"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Frame"], "extent": [1293, 1300], "body": [{"type": "para", "indent": 4, "text": ["The number to import the animated pose from."], "extent": [1316, 1366]}], "container": true, "attrs": {"id": "frame"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Animation Start"], "extent": [1366, 1383], "body": [{"type": "para", "indent": 4, "text": ["The frame at which the ", {"type": "em", "text": ["source"]}, " animation starts, earlier poses will be\n    clamped to this value.  When disabled, this value is taken from the source\n    animation where available. If it has no range information, Houdini\u2019s scene\n    start (", {"type": "code", "text": ["$FSTART"]}, ") value will be used."], "extent": [1413, 1690]}, {"type": "para", "indent": 4, "text": ["Note that no clamping is done when this is disabled."], "extent": [1690, 1748]}], "container": true, "attrs": {"id": "animationstartframe"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Animation End"], "extent": [1748, 1763], "body": [{"type": "para", "indent": 4, "text": ["The frame at which the ", {"type": "em", "text": ["source"]}, " animation ends, later poses will be clamped\n    to this value. When disabled, this value is taken from the source animation\n    where available. If it has no range information, Houdini\u2019s scene end\n    (", {"type": "code", "text": ["$FEND"]}, ") value will be used."], "extent": [1791, 2059]}, {"type": "para", "indent": 4, "text": ["Note that no clamping is done when this is disabled."], "extent": [2059, 2117]}], "container": true, "attrs": {"id": "animationendframe"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Playback Start"], "extent": [2117, 2133], "body": [{"type": "para", "indent": 4, "text": ["The destination frame at which the specified animation will begin to\n    playback. When disabled, Houdini\u2019s scene start (", {"type": "code", "text": ["$FSTART"]}, ") value is used."], "extent": [2162, 2314]}], "container": true, "attrs": {"id": "playbackstartframe"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Speed"], "extent": [56, 63], "body": [{"type": "para", "indent": 4, "text": ["Sets the speed factor for the playback of the animation. This is\n    applied after any clamping is performed from the Animation Start/End\n    parameters."], "extent": [79, 237]}], "container": true, "attrs": {"id": "speed"}, "role": "item"}], "container": true}]}], "text": "Parameters"}, {"level": 1, "id": "attributes", "container": true, "type": "attributes_section", "indent": 0, "role": "section", "extent": [1478, 1490], "body": [{"type": "attributes_item_group", "body": [{"type": "attributes_item", "indent": 0, "text": ["clipinfo"], "extent": [16, 26], "body": [{"type": "para", "indent": 4, "text": ["This detail attribute records the current animation range and sample rate\n    as well as the original animation range and sample rate of the imported\n    animation."], "extent": [45, 215]}], "container": true, "attrs": {"id": "clipinfo"}, "role": "item", "id": "clipinfo"}], "container": true, "role": "item_group"}], "text": "Attributes"}, {"level": 1, "id": "outputs", "container": true, "type": "outputs_section", "indent": 0, "role": "section", "extent": [1526, 1535], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 0, "text": ["Rest Geometry"], "extent": [16, 31], "body": [{"type": "para", "indent": 4, "text": ["The character\u2019s rest geometry."], "extent": [31, 67]}, {"type": "para", "indent": 4, "text": ["Typically, this will contain polygons with the ", {"type": "code", "text": ["boneCapture"]}, " point capture attribute, which can be deformed using the ", {"scheme": "Node", "value": "/nodes/sop/kinefx--jointdeform", "type": "link", "text": ["Joint Deform SOP"], "fullpath": "/nodes/sop/kinefx--jointdeform"}, "."], "extent": [67, 239]}], "container": true}, {"type": "dt", "indent": 0, "text": ["Capture Pose"], "extent": [239, 253], "body": [{"type": "para", "indent": 4, "text": ["The character\u2019s capture pose."], "extent": [253, 288]}, {"type": "para", "indent": 4, "text": ["Each joint in the skeleton is represented by a point, where the ", {"type": "code", "text": ["P"]}, " and ", {"type": "code", "text": ["transform"]}, " (", {"type": "code", "text": ["matrix3"]}, ") attributes contain the joint\u2019s transform.\n    The point\u2019s ", {"type": "code", "text": ["name"]}, " attribute contains the joint\u2019s name, and is matched up with the capture paths in the rest geometry\u2019s ", {"type": "code", "text": ["boneCapture"]}, " attribute when deforming the skin.\n    The skeleton\u2019s hierarchy is represented by two-point polygons between the points for each child joint and its parent."], "extent": [288, 726]}], "container": true}, {"type": "dt", "indent": 0, "text": ["Animated Pose"], "extent": [726, 741], "body": [{"type": "para", "indent": 4, "text": ["The character\u2019s animated pose, which is represented in the same manner as the ", {"type": "ui", "text": ["Capture Pose"]}, "."], "extent": [741, 841]}], "container": true}], "container": true}], "text": "Outputs"}, {"level": 1, "id": "related", "container": true, "type": "related_section", "indent": 0, "role": "section", "extent": [1577, 1586], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/sop/kinefx--fbxskinimport", "type": "link", "text": "", "fullpath": "/nodes/sop/kinefx--fbxskinimport"}], "extent": [1586, 1621]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/sop/kinefx--fbxanimimport", "type": "link", "text": "", "fullpath": "/nodes/sop/kinefx--fbxanimimport"}], "extent": [1621, 1656]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/sop/kinefx--usdcharacterimport", "type": "link", "text": "", "fullpath": "/nodes/sop/kinefx--usdcharacterimport"}], "extent": [1656, 1696]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/sop/kinefx--scenecharacterimport", "type": "link", "text": "", "fullpath": "/nodes/sop/kinefx--scenecharacterimport"}], "extent": [1696, 1738]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/sop/kinefx--agentcharacterunpack", "type": "link", "text": "", "fullpath": "/nodes/sop/kinefx--agentcharacterunpack"}], "extent": [1738, 1780]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/sop/kinefx--rop_fbxcharacteroutput", "type": "link", "text": "", "fullpath": "/nodes/sop/kinefx--rop_fbxcharacteroutput"}], "extent": [1780, 1824]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/sop/kinefx--jointdeform", "type": "link", "text": "", "fullpath": "/nodes/sop/kinefx--jointdeform"}], "extent": [1824, 1857]}], "container": true}], "text": "Related"}], "title": ["FBX Character Import"], "summary": ["Import a skinned character from an FBX file with animation."], "included": ["/nodes/sop/_kinefx_common", "/nodes/sop/agent", "/nodes/sop/kinefx--fbxanimimport", "/nodes/sop/kinefx--fbxskinimport", "/nodes/sop/kinefx--usdanimimport", "/nodes/sop/kinefx--usdskinimport", "/nodes/sop/standard_kinefx_importoutputs", "/nodes/sop/standard_kinefx_timing_parms", "/nodes/sop/standard_kinefx_timing_parms_with_speed"]}