{"type": "root", "attrs": {"type": "node", "context": "sop", "internal": "switchif", "icon": "SOP/switchif", "since": "18.0", "verb_since": "18.0", "version": null, "namespace": null}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["Switch-If"], "extent": [0, 14]}, {"type": "summary", "indent": 0, "text": ["Switches between two network branches based on an expression or geometry test."], "extent": [122, 209]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Overview"], "extent": [209, 224], "body": [{"type": "para", "indent": 0, "text": ["This node switches between passing through the first or second input. If you use a single test on an expression, then this is equivalent to a ", {"scheme": "Node", "value": "/nodes/sop/switch", "type": "link", "text": ["Switch SOP"], "fullpath": "/nodes/sop/switch"}, ". However, this node also lets you test certain aspects of the incoming geometry, and also combine multiple tests using ", {"type": "q", "text": ["All conditions true"]}, " (AND) or ", {"type": "q", "text": ["Any conditions true"]}, " (OR) logic."], "extent": [224, 581]}, {"type": "para", "indent": 0, "text": ["See the ", {"type": "ui", "text": ["Test type"]}, " parameter below for the list of tests you can run on incoming geometry."], "extent": [581, 676]}, {"type": "note_group", "body": [{"type": "note", "indent": 0, "role": "item", "extent": [676, 682], "body": [{"type": "para", "indent": 4, "text": ["This node will pass one of the two inputs through unchanged, it does\n    not apply the switching on a per-point or per-primitive level."], "extent": [682, 823]}], "container": true}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Examples"], "extent": [823, 838], "body": [{"type": "task_group", "body": [{"ext": null, "type": "task", "indent": 0, "text": ["Use ", {"type": "q", "text": ["default"]}, " geometry if an asset\u2019s input isn\u2019t connected"], "role": "item", "extent": [838, 906], "body": [{"type": "ord_group", "body": [{"blevel": 6, "type": "ord", "indent": 4, "text": ["Wire the ", {"type": "q", "text": ["default"]}, " geometry into the Switch If node\u2019s first input."], "extent": [906, 980]}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["Wire the subnet input you want to test into the second input."], "extent": [980, 1049]}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["Set ", {"type": "ui", "text": ["Test input"]}, " to ", {"type": "q", "text": ["Second input"]}, "."], "extent": [1049, 1094]}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["Set ", {"type": "ui", "text": ["Test type"]}, " to ", {"type": "q", "text": ["Input connected"]}, "."], "extent": [1094, 1141]}], "container": true}], "container": true}, {"ext": null, "type": "task", "indent": 0, "text": ["Report an error in an asset if an input doesn\u2019t have at least one point"], "role": "item", "extent": [1141, 1225], "body": [{"type": "ord_group", "body": [{"blevel": 6, "type": "ord", "indent": 4, "text": ["Wire an ", {"scheme": "Node", "value": "/nodes/sop/error", "type": "link", "text": ["Error SOP"], "fullpath": "/nodes/sop/error"}, " to the Switch If node\u2019s first input. Set the ", {"type": "ui", "text": ["Error message"]}, ", set ", {"type": "ui", "text": ["Severity"]}, " to ", {"type": "q", "text": ["Error"]}, ", and set ", {"type": "ui", "text": ["Report this error"]}, " to ", {"type": "code", "text": ["1"]}, "."], "extent": [1225, 1398]}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["Wire the subnet input you want to test into the second input."], "extent": [1398, 1467]}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["Set ", {"type": "ui", "text": ["Test input"]}, " to ", {"type": "q", "text": ["Second input"]}, "."], "extent": [1467, 1512]}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["Set ", {"type": "ui", "text": ["Test type"]}, " to ", {"type": "q", "text": ["Element count"]}, ", and configure the rest of the parameters:"], "extent": [1512, 1599], "body": [{"type": "table", "thead": [], "body": [{"type": "row", "body": [{"type": "cell", "indent": 8, "text": [{"type": "ui", "text": ["Enable when"]}, " "], "role": "td", "extent": [1599, 1625], "container": true, "attrs": {"width": "20%"}}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 12, "text": [{"type": "q", "text": ["Number of Points"]}], "extent": [1649, 1680]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 8, "text": [{"type": "ui", "text": ["Is"]}, " "], "role": "td", "extent": [1680, 1697], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 12, "text": [{"type": "q", "text": ["Greater than"]}], "extent": [1697, 1724]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 8, "text": [{"type": "ui", "text": ["Value"]}, " "], "role": "td", "extent": [1724, 1744], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 12, "text": [{"type": "code", "text": ["0"]}], "extent": [1744, 1761]}]}], "divider": false}]}], "container": true}], "container": true}, {"type": "para", "indent": 4, "text": ["If the second input has at least one point, it will flow down. Otherwise, the error will propagate down instead."], "extent": [1761, 1880]}], "container": true}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Tips"], "extent": [1880, 1891], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": ["To test if the parent asset has an input wired, you can use the expression ", {"type": "code", "text": ["opinputpath(\"..\", ", {"type": "var", "text": ["n"]}, ")"]}, " where ", {"type": "var", "text": ["n"]}, " is the input number to test (starting at ", {"type": "code", "text": ["0"]}, ")."], "extent": [1891, 2057]}], "container": true}]}, {"level": 1, "id": "inputs", "container": true, "type": "inputs_section", "indent": 0, "role": "section", "extent": [2057, 2065], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 0, "text": ["First (False)"], "extent": [2065, 2081], "body": [{"type": "para", "indent": 4, "text": ["Passed through if the test returns False (or ", {"type": "code", "text": ["0"]}, ")."], "extent": [2081, 2137]}], "container": true}, {"type": "dt", "indent": 0, "text": ["Second (True)"], "extent": [2137, 2152], "body": [{"type": "para", "indent": 4, "text": ["Passed through if the test returns True (or non-zero)."], "extent": [2152, 2212]}], "container": true}], "container": true}, {"type": "para", "indent": 0, "text": ["(You might intuitively expect True to be first, but this order makes the most sense considering that for expressions and scripting the inputs are numbered ", {"type": "code", "text": ["0"]}, " and ", {"type": "code", "text": ["1"]}, ".)"], "extent": [2212, 2383]}], "text": "Inputs"}, {"level": 1, "id": "parameters", "container": true, "type": "parameters_section", "indent": 0, "role": "section", "extent": [2383, 2395], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Use Second Input If"], "extent": [2395, 2417], "body": [{"type": "para", "indent": 4, "text": ["How to decide whether to pass through the second input, based on the results of the test(s) below."], "extent": [2442, 2546]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["All conditions true"], "extent": [2546, 2571], "body": [{"type": "para", "indent": 8, "text": ["Pass through the second input if ", {"type": "strong", "text": ["all"]}, " tests evaluate to True (or non-zero)."], "extent": [2571, 2657]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Any condition true"], "extent": [2657, 2681], "body": [{"type": "para", "indent": 8, "text": ["Pass through the second input if ", {"type": "strong", "text": ["any"]}, " tests evaluate to True (or non-zero)."], "extent": [2681, 2767]}], "container": true}, {"type": "dt", "indent": 4, "text": ["All conditions false"], "extent": [2767, 2793], "body": [{"type": "para", "indent": 8, "text": ["Pass through the second input if ", {"type": "strong", "text": ["all"]}, " tests evaluate to False (or ", {"type": "code", "text": ["0"]}, ")."], "extent": [2793, 2875]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Any condition true"], "extent": [2875, 2899], "body": [{"type": "para", "indent": 8, "text": ["Pass through the second input if ", {"type": "strong", "text": ["any"]}, " tests evaluate to False (or ", {"type": "code", "text": ["0"]}, ")."], "extent": [2899, 2981]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "mergecondition"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Test Input"], "extent": [2981, 2993], "body": [{"type": "para", "indent": 4, "text": ["For tests below based on geometry, use the geometry from this input. The chosen input always cooks."], "extent": [3013, 3118]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["First input"], "extent": [3118, 3135], "body": [{"type": "para", "indent": 8, "text": ["Test the geometry wired into the first input."], "extent": [3135, 3190]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Second input"], "extent": [3190, 3208], "body": [{"type": "para", "indent": 8, "text": ["Test the geometry wired into the second input."], "extent": [3208, 3264]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Spare input 0"], "extent": [3264, 3283], "body": [{"type": "para", "indent": 8, "text": ["Test the geometry in the node at a certain node path."], "extent": [3283, 3346]}, {"type": "para", "indent": 8, "text": ["If you choose this option, a script automatically adds a spare node path parameter for you. If you then choose another option, the spare parameter remains (unless you manually delete it), however it will only be used if ", {"type": "ui", "text": ["Test input"]}, " is set to this option."], "extent": [3346, 3613]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "testinput"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Number of tests"], "extent": [3613, 3630], "body": [{"type": "para", "indent": 4, "text": ["This node can run multiple tests (with the results combined using the ", {"type": "ui", "text": ["Use second input if"]}, " parameter). Set this to the number of tests you want to run, or click the plus and minus buttons to add or remove tests."], "extent": [3630, 3850]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Test Type"], "extent": [3850, 3861], "body": [{"type": "para", "indent": 4, "text": ["What type of test to perform."], "extent": [3876, 3915]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Expression"], "extent": [3915, 3931], "body": [{"type": "para", "indent": 8, "text": ["Evaluates an ", {"scheme": null, "value": "/expressions/", "type": "link", "text": ["HScript expression"], "fullpath": "/expressions/index"}, " in the ", {"type": "ui", "text": ["Enable"]}, " parameter. If the expression returns a value (rounded to the nearest integer) other than ", {"type": "code", "text": ["0"]}, ", it is considered True."], "extent": [3931, 4123]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Attribute Presence"], "extent": [4123, 4147], "body": [{"type": "para", "indent": 8, "text": ["Tests whether the geometry has (or doesn\u2019t have) an attribute with the given name. Configure this test using the ", {"type": "ui", "text": ["Enable when"]}, ", ", {"type": "ui", "text": ["Class"]}, ", and ", {"type": "ui", "text": ["Attributes"]}, " parameters."], "extent": [4147, 4328]}, {"type": "para", "indent": 8, "text": ["Presence of keys in dictionary attributes can be tested by\n        using ", {"type": "code", "text": ["attribname.key"]}, " syntax.  This will use the first\n        element\u2019s dictionary."], "extent": [4328, 4490]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Element count"], "extent": [4490, 4509], "body": [{"type": "para", "indent": 8, "text": ["Tests based on the number of components (points, primitives, vertices) in the geometry. Configure this test using the ", {"type": "ui", "text": ["Enable when"]}, ", ", {"type": "ui", "text": ["In group"]}, ", ", {"type": "ui", "text": ["Is"]}, ", and ", {"type": "ui", "text": ["Value"]}, " parameters."], "extent": [4509, 4701]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Attribute value"], "extent": [4701, 4722], "body": [{"type": "para", "indent": 8, "text": ["Tests whether a given attribute ", {"type": "strong", "text": ["on the first point, primitive, or vertex"]}, "\u2020 matches a certain value. Configure this test using the ", {"type": "ui", "text": ["Class"]}, ", ", {"type": "ui", "text": ["Attributes"]}, ", ", {"type": "ui", "text": ["Of type"]}, ", ", {"type": "ui", "text": ["Is"]}, ", and ", {"type": "ui", "text": ["Value"]}, " parameters."], "extent": [4722, 4936]}, {"type": "para", "indent": 8, "text": ["Normally, this test only tests against the first attribute value it finds. However, for string attributes, you can use the comparison ", {"type": "q", "text": ["Containing Any Element Matching"]}, ", which is True if any attribute value in the geometry matches the pattern in ", {"type": "ui", "text": ["Value"]}, "."], "extent": [4936, 5201]}, {"type": "para", "indent": 8, "text": ["The values of keys in dictionary attributes can be tested by\n        using ", {"type": "code", "text": ["attribname.key"]}, " syntax."], "extent": [5201, 5310]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Input wired"], "extent": [5310, 5327], "body": [{"type": "para", "indent": 8, "text": ["Is True if the input specified in ", {"type": "ui", "text": ["Test input"]}, " has geometry wired into it. If ", {"type": "ui", "text": ["Test input"]}, " is ", {"type": "q", "text": ["Spare input 0"]}, ", this is True if the node at the path in the spare input exists."], "extent": [5327, 5515]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "type"}, "role": "item"}], "container": true, "role": "item_group"}, {"type": "box_group", "body": [{"ext": null, "type": "box", "indent": 0, "role": "item", "extent": [5515, 5521], "body": [{"type": "parameters_item_group", "body": [{"ext": null, "type": "parameters_item", "indent": 4, "text": ["Enable"], "role": "item", "extent": [5543, 5557], "body": [{"type": "para", "indent": 8, "text": ["The expression to test. Floating point results are rounded to the nearest integer."], "extent": [5576, 5676]}], "container": true, "attrs": {"id": "expr"}}, {"ext": null, "type": "parameters_item", "indent": 4, "text": ["Enable When"], "role": "item", "extent": [5676, 5695], "body": [{"type": "para", "indent": 8, "text": ["When testing for attribute presence, allows you to control whether you are testing for attributes to be present or absent. The list of ", {"type": "ui", "text": ["Attributes"]}, " can include patterns. If no matching ", {"type": "ui", "text": ["Attributes"]}, " are found, ", {"type": "q", "text": ["all present"]}, " is True, ", {"type": "q", "text": ["any present"]}, " is False, ", {"type": "q", "text": ["all absent"]}, " is True, ", {"type": "q", "text": ["any absent"]}, " is False."], "extent": [5720, 6042]}], "container": true, "attrs": {"id": "attribtype"}}, {"ext": null, "type": "parameters_item", "indent": 4, "text": ["Class"], "role": "item", "extent": [6042, 6055], "body": [{"type": "para", "indent": 8, "text": ["The attribute type(s) to look for."], "extent": [6081, 6133]}], "container": true, "attrs": {"id": "attribowner"}}, {"ext": null, "type": "parameters_item", "indent": 4, "text": ["Attributes"], "role": "item", "extent": [6133, 6151], "body": [{"type": "para", "indent": 8, "text": ["A space-separated list of attribute names to look for. The names may be patterns (for example, ", {"type": "code", "text": ["color_*"]}, ")."], "extent": [6176, 6300]}], "container": true, "attrs": {"id": "attributes"}}, {"ext": null, "type": "parameters_item", "indent": 4, "text": ["Of Type"], "role": "item", "extent": [6300, 6315], "body": [{"type": "para", "indent": 8, "text": ["Whether the attribute(s) you are testing against are numeric or strings. This affects what comparisons are available in the ", {"type": "ui", "text": ["Is"]}, " parameter."], "extent": [6351, 6502]}], "container": true, "attrs": {"id": "attribvaltype"}}, {"ext": null, "type": "parameters_item", "indent": 4, "text": ["Is"], "role": "item", "extent": [6502, 6512], "body": [{"type": "para", "indent": 8, "text": ["How to compare the value of numeric attribute(s) to the ", {"type": "ui", "text": ["Value"]}, " parameter. Note: the exact ", {"type": "q", "text": ["equal to"]}, " and ", {"type": "q", "text": ["not equal to"]}, " comparisons are only guaranteed to work reliably with integer attributes (this is because a floating point value that seems to be ", {"type": "code", "text": ["1.113"]}, " might actually be ", {"type": "code", "text": ["1.1130000000000000000000001"]}, ")."], "extent": [6542, 6862]}], "container": true, "attrs": {"id": "attribfloatcomp"}}, {"ext": null, "type": "parameters_item", "indent": 4, "text": ["Is"], "role": "item", "extent": [6862, 6872], "body": [{"type": "para", "indent": 8, "text": ["How to compare the value of string attribute(s) to the ", {"type": "ui", "text": ["Value"]}, " parameter. When this is ", {"type": "q", "text": ["Matching"]}, ", ", {"type": "q", "text": ["Not Matching"]}, ", or ", {"type": "q", "text": ["Containing Any Element Matching"]}, ", the ", {"type": "ui", "text": ["Value"]}, " can be a pattern containing wildcards."], "extent": [6903, 7128]}], "container": true, "attrs": {"id": "attribstringcomp"}}, {"ext": null, "type": "parameters_item", "indent": 4, "text": ["Value"], "role": "item", "extent": [7128, 7141], "body": [{"type": "para", "indent": 8, "text": ["The value to compare with numeric attribute values. Note: the exact ", {"type": "q", "text": ["equal to"]}, " and ", {"type": "q", "text": ["not equal to"]}, " comparisons are only guaranteed to work reliably with integer attributes."], "extent": [7165, 7363]}], "container": true, "attrs": {"id": "attribval"}}, {"ext": null, "type": "parameters_item", "indent": 4, "text": ["Value"], "role": "item", "extent": [7363, 7376], "body": [{"type": "para", "indent": 8, "text": ["The string value or pattern to compare with string attribute values."], "extent": [7401, 7487]}], "container": true, "attrs": {"id": "attribsval"}}, {"ext": null, "type": "parameters_item", "indent": 4, "text": ["Enable When"], "role": "item", "extent": [7487, 7506], "body": [{"type": "para", "indent": 8, "text": ["What to count: the total number of points, primitives, or vertices in the test geometry (or group)."], "extent": [7530, 7639]}], "container": true, "attrs": {"id": "counttype"}}, {"ext": null, "type": "parameters_item", "indent": 4, "text": ["In Group"], "role": "item", "extent": [7639, 7655], "body": [{"type": "para", "indent": 8, "text": ["Only count components in the given group(s). This is a space-separated list of group names or ", {"scheme": null, "value": "/model/groups", "type": "link", "text": ["group syntax"], "fullpath": "/model/groups"}, ". Since you can use group syntax, you can do further filtering, such as ", {"type": "code", "text": ["@Cd.r>0.5"]}, " (only count points where the red component of the ", {"type": "code", "text": ["Cd"]}, " attribute is greater than ", {"type": "code", "text": ["0.5"]}, "). The contents of multiple group names/patterns are combined together."], "extent": [7680, 8053]}], "container": true, "attrs": {"id": "countgroup"}}, {"ext": null, "type": "parameters_item", "indent": 4, "text": ["Is"], "role": "item", "extent": [8053, 8063], "body": [{"type": "para", "indent": 8, "text": ["How to compare the element count with the ", {"type": "ui", "text": ["Value"]}, "."], "extent": [8095, 8165]}], "container": true, "attrs": {"id": "countcomp"}}, {"ext": null, "type": "parameters_item", "indent": 4, "text": ["Value"], "role": "item", "extent": [8165, 8178], "body": [{"type": "para", "indent": 8, "text": ["The value to compare the element count to."], "extent": [8209, 8261]}], "container": true, "attrs": {"id": "countval"}}, {"ext": null, "type": "parameters_item", "indent": 4, "text": ["Enable When"], "role": "item", "extent": [8261, 8280], "body": [{"type": "para", "indent": 8, "text": ["When testing for input wired, allows you to check if the node is wired or not wired."], "extent": [8307, 8402]}], "container": true, "attrs": {"id": "hasinputtype"}}], "container": true, "role": "item_group"}], "container": true, "attrs": {"display": "hidden"}}], "container": true, "role": "item_group"}], "text": "Parameters"}, {"level": 1, "id": "related", "container": true, "type": "related_section", "indent": 0, "role": "section", "extent": [8402, 8411], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/sop/switch", "type": "link", "text": "", "fullpath": "/nodes/sop/switch"}], "extent": [8411, 8432]}], "container": true}], "text": "Related"}], "title": ["Switch-If"], "summary": ["Switches between two network branches based on an expression or geometry test."]}