{"type": "root", "attrs": {"type": "node", "context": "sop", "internal": "triangulate2d", "icon": "SOP/triangulate2d", "version": "3.0", "since": "17.0", "verb_since": "17.0", "tags": "polygons, topology, cleanup, cloth", "namespace": null}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["Triangulate 2D"], "extent": [165, 184]}, {"type": "summary", "indent": 0, "text": ["Connects points to form well-shaped triangles."], "extent": [184, 239]}, {"type": "para", "indent": 0, "text": ["Triangulate 2D connects 2D points in the input geometry to create\na 2D triangle mesh which is as ", {"type": "q", "text": ["well-shaped"]}, " as possible \n(avoiding acute angles as much as possible). "], "extent": [239, 410]}, {"type": "para", "indent": 0, "text": ["Since it works on points in a plane, Triangulate 2D needs to assign \na 2D position to each 3D input point. This can be done in three ways:"], "extent": [410, 550]}, {"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": ["The points are projected into a plane that best fits the 3D point set,"], "extent": [550, 624]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["The user chooses a plane into which the points are projected, or"], "extent": [624, 692]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["The user provides a point attribute consisting of the 2D coordinates \n  for each point."], "extent": [692, 783]}], "container": true}, {"type": "para", "indent": 0, "text": ["Triangulate 2D can ensure that certain pairs of points appear as edges\n(or subdivisions of edges when refinement is performed) in the output\nmesh. These edges are called ", {"type": "q", "text": ["constraints"]}, ". You can specify constraints\nby providing either an edge group or a primitive group (or both) under \nthe ", {"type": "ui", "text": ["Constraints"]}, " tab. "], "extent": [783, 1095]}, {"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": ["To make sure certain boundary edges are present in the final\n  triangulation, enter the primitive number(s) of the edge(s) in the\n  ", {"type": "ui", "text": ["Constraint primitives"]}, " parameter or list the edges you want as \n  an edge group in the ", {"type": "ui", "text": ["Constraint edges"]}, " parameter."], "extent": [1095, 1352]}], "container": true}, {"type": "para", "indent": 0, "text": ["Triangulate 2D can also remove triangles deemed as belong to the outside\nof the intended area in various ways which are specified under the \n", {"type": "ui", "text": ["Outside Removal"]}, " tab."], "extent": [1352, 1519]}, {"type": "para", "indent": 0, "text": ["You can also improve how well shaped the triangles are by allowing \nTriangulate 2D to add additional points under ", {"type": "ui", "text": ["Refine"]}, " tab. "], "extent": [1519, 1651]}, {"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": ["To triangulate the input without adding new points, turn off\n  ", {"type": "ui", "text": ["Refine"]}, " and leave ", {"type": "ui", "text": ["Constraint primitives"]}, " empty."], "extent": [1651, 1771]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["To increase the number of points to allow better triangles, turn on\n  ", {"type": "ui", "text": ["Refine"]}, ". You can control the triangle quality with the ", {"type": "ui", "text": ["Maximum\n  Area"]}, " (controls triangle size) and ", {"type": "ui", "text": ["Minimum Angle"]}, " (larger values\n  prevent long skinny triangles with acute angles) parameters. You can \n  limit refinement to large triangles by setting ", {"type": "ui", "text": ["Minimum Edge Length"]}, "\n  parameter."], "extent": [1771, 2141]}], "container": true}, {"type": "tip_group", "body": [{"type": "tip", "indent": 0, "role": "item", "extent": [2141, 2146], "body": [{"type": "para", "indent": 4, "text": ["To introduce randomness into the triangulation, pipe the original\n    geometry through a ", {"scheme": "Node", "value": "/nodes/sop/scatter", "type": "link", "text": ["Scatter SOP"], "fullpath": "/nodes/sop/scatter"}, " to add extra\n    points at random locations."], "extent": [2146, 2316]}], "container": true}], "container": true, "role": "item_group"}, {"type": "para", "indent": 0, "text": ["Technically, Triangulate 2D produces a ", {"type": "em", "text": ["constrained Delaunay\ntriangulation"]}, ", which has the largest minimum angle among all possible \ntriangulations for the same set of points, and the refinement process \nis ", {"type": "em", "text": ["Delaunay refinement"]}, "."], "extent": [2316, 2550]}, {"level": 1, "id": "parameters", "container": true, "type": "parameters_section", "indent": 0, "role": "section", "extent": [2550, 2562], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 4, "text": ["Points"], "extent": [2562, 2574], "body": [{"type": "para", "indent": 8, "text": ["Subset of points to use for triangulation."], "extent": [2602, 2654]}], "container": true, "attrs": {"channels": "/points"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["2D Positions"], "extent": [2654, 2673], "body": [{"type": "para", "indent": 8, "text": ["Determines the method for determining the 2D positions of the \n        points used in triangulation. "], "extent": [2707, 2826]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["Fit Plane"], "extent": [2826, 2845], "body": [{"type": "para", "indent": 12, "text": ["Obtains 2D positions of the points by projecting them into \n            a plane that best fits the 3D point set. "], "extent": [2845, 2984]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Select Projection Plane"], "extent": [2984, 3017], "body": [{"type": "para", "indent": 12, "text": ["Allows the user to specify a projection plane, into which the \n            3D points are projected."], "extent": [3017, 3142]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Origin"], "extent": [3142, 3158], "body": [{"type": "para", "indent": 12, "text": ["When ", {"type": "ui", "text": ["Select Projection Plane"]}, " is used, the projection plane is\n            determined relative to this point which is treated as ", {"type": "q", "text": ["origin"]}, "."], "extent": [3202, 3365]}], "container": true, "attrs": {"channels": "/origin"}}, {"type": "dt", "indent": 8, "text": ["Distance"], "extent": [3365, 3383], "body": [{"type": "para", "indent": 12, "text": ["When ", {"type": "ui", "text": ["Select Projection Plane"]}, " is used, this parameter determines the \n            distance between the projection plane and the point specified by ", {"type": "ui", "text": ["Origin"]}, "."], "extent": [3425, 3612]}], "container": true, "attrs": {"channels": "/dist"}}, {"type": "dt", "indent": 8, "text": ["Direction"], "extent": [3612, 3631], "body": [{"type": "para", "indent": 12, "text": ["When ", {"type": "ui", "text": ["Select Projection Plane"]}, " is used, this vector determines the\n            direction along which the projection plane is shifted away from\n            the point specified by ", {"type": "ui", "text": ["Origin"]}, ". "], "extent": [3672, 3890]}], "container": true, "attrs": {"channels": "/dir"}}, {"type": "dt", "indent": 8, "text": ["Use Attribute"], "extent": [3890, 3913], "body": [{"type": "para", "indent": 12, "text": ["Reads the 2D position of each point from a supplied point\n            attribute (the attribute must be a floating point vector \n            with at least two components)."], "extent": [3913, 4109]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Attribute Name"], "extent": [4109, 4133], "body": [{"type": "para", "indent": 12, "text": ["When ", {"type": "ui", "text": ["Use Attribute"]}, " is used,, the 2D position \n            of the points are read from the attribute with this name."], "extent": [4185, 4318]}], "container": true, "attrs": {"channels": "/pos2attrib"}}], "container": true}], "container": true, "attrs": {"channels": "/planepossrc"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Restore Original Point Positions"], "extent": [4318, 4356], "body": [{"type": "para", "indent": 8, "text": ["If selected, triangles of the generated triangulation are \n        transformed to use the original 3D positions of the input \n        points. Newly generated points (for refinement or constraint\n        conflict resolution) are accordingly assigned interpolated \n        positions based on the 3D positions of the input points. "], "extent": [4396, 4738]}], "container": true, "attrs": {"channels": "/restorepos"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Keep Primitives"], "extent": [4738, 4759], "body": [{"type": "para", "indent": 8, "text": ["Keep all input primitives (except the constraint primitives) in\n        the output in addition to new primitives created during\n        triangulation. When this option is off, the input primitives do \n        not appear in the output."], "extent": [4790, 5035]}], "container": true, "attrs": {"channels": "/keepprims"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Recompute Point Normals"], "extent": [5035, 5064], "body": [{"type": "para", "indent": 8, "text": ["Recomputes point normals (if they exist)."], "extent": [5096, 5163]}], "container": true, "attrs": {"channels": "/updatenmls"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Remove Unused Points"], "extent": [5163, 5189], "body": [{"type": "para", "indent": 8, "text": ["If selected, points outside the input point group are deleted from\n        the output."], "extent": [5237, 5341]}], "container": true, "attrs": {"channels": "/removeunusedpoints"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Remove Duplicate Points from Triangulation"], "extent": [5341, 5389], "body": [{"type": "para", "indent": 8, "text": ["For any given 2D position only one point can be inserted into the \n        triangulation. If multiple points have the same 2D position\n        only one of them is inserted into the triangulation and the others\n        are ignored. If this option is selected, these duplicate points are\n        deleted from the output, otherwise, they are left in as isolated\n        points."], "extent": [5440, 5832]}], "container": true, "attrs": {"channels": "/removeduplicatepoints"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Random Seed"], "extent": [5832, 5849], "body": [{"type": "para", "indent": 8, "text": ["The triangulation and refinement algorithm implemented by this node\n        is ", {"type": "q", "text": ["randomized"]}, " in nature, meaning that its peek performance is expected \n        with high probability only if the input points are processed in ", {"type": "q", "text": ["random"]}, " \n        order. Since Houdini node outputs must be deterministic, a fixed random-like \n        reordering of the input points, determined by this parameter, is used. In \n        the majority of cases, this fixed reordering should perform close to optimal \n        but it is theoretically possible for any fixed reordering to perform poorly \n        for a specific point set. Changing the seed value in such case may have \n        tangible effects on the speed of the triangulation although it might affect\n        the generated output, particularly in terms of the point and primitive \n        numbers. "], "extent": [5887, 6739]}], "container": true, "attrs": {"channels": "/randseed"}, "role": "item"}], "container": true, "role": "item_group"}], "text": "Parameters"}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Constraints"], "extent": [6739, 6755], "body": [{"type": "para", "indent": 4, "text": ["Using constraints you can enforce certain pairs of points to be connected \n    by edges, aka. ", {"type": "em", "text": ["constrained edge"]}, ", in the output triangulation. You can \n    specify constraints using a constraint primitives group (consisting of \n    polygons or polygonal curves all whose edges are treated as constraints), \n    or using an edge group, or both. "], "extent": [6755, 7109]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Constraint Primitives"], "extent": [7109, 7136], "body": [{"type": "para", "indent": 8, "text": ["All edges of each polygon or polygonal curve in this primitive group\n        will be treated as a constraint and are forced upon to the output \n        triangulation. "], "extent": [7174, 7359]}], "container": true, "attrs": {"channels": "/conprims"}}, {"type": "dt", "indent": 4, "text": ["Constraint Edges"], "extent": [7359, 7381], "body": [{"type": "para", "indent": 8, "text": ["All edges in the supplied edge group are enacted as constraints in\n        the output triangulation. Note that edge groups edges need not exist \n        as primitive edges in the input. As an example, using the expression \n        ", {"type": "q", "text": ["p10-20 p16-24"]}, " as the constraint edge group ensures that points 10\n        and 20 are connected with an edge in the output as are point 16 and 24.        "], "extent": [7419, 7823]}], "container": true, "attrs": {"channels": "/conedges"}}, {"type": "dt", "indent": 4, "text": ["No New Points on Constraints"], "extent": [7823, 7857], "body": [{"type": "para", "indent": 8, "text": ["It is not possible to simultaneously enforce two constraints if their\n        corresponding 2D line segments intersect. Such constraints are said to be in\n        ", {"type": "q", "text": ["conflict"]}, " with one another. If this option is selected, one of each pair of \n        conflicting constraints is dropped so that the other one can be enforced. \n        Otherwise, conflicts are resolved by splitting constraints into smaller\n        ones by introducing new points at intersections."], "extent": [7898, 8377]}], "container": true, "attrs": {"channels": "/nonewconpts"}}, {"type": "dt", "indent": 4, "text": ["Create Group for New Points on Constraints"], "extent": [8377, 8425], "body": [{"type": "para", "indent": 8, "text": ["If selected, a point group is created for the points the are added \n        in order to resolve conflicts in constraints. "], "extent": [8470, 8610]}], "container": true, "attrs": {"channels": "/makenewconptgrp"}}, {"type": "dt", "indent": 4, "text": ["Group Name"], "extent": [8610, 8626], "body": [{"type": "para", "indent": 8, "text": ["When ", {"type": "ui", "text": ["Create Group for New Constraint Points on Constraints"]}, " is on,\n        Triangulate 2D creates a group with this name to contain points\n        created on the constrained edges."], "extent": [8667, 8873]}], "container": true, "attrs": {"channels": "/newconptgrp"}}, {"type": "dt", "indent": 4, "text": ["Create Group for Output Constraint Edges"], "extent": [8873, 8919], "body": [{"type": "para", "indent": 8, "text": ["If selected, an edge group is created which will contain all constraint\n        edge in the output triangulation."], "extent": [8966, 9089]}], "container": true, "attrs": {"channels": "/makenewconedgegrp"}}, {"type": "dt", "indent": 4, "text": ["Group Name"], "extent": [9089, 9105], "body": [{"type": "para", "indent": 8, "text": ["When ", {"type": "ui", "text": ["Create Group for Output Constraint Edges"]}, " is on,\n        an edge group is created with this name to contain the output \n        constrained edges."], "extent": [9148, 9333]}], "container": true, "attrs": {"channels": "/outconedgegrp"}}], "container": true}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Outside Removal"], "extent": [9333, 9353], "body": [{"type": "para", "indent": 4, "text": ["This node can optionally remove a subset of the generated triangles which can be \n    interpreted as belonging to the ", {"type": "strong", "text": ["exterior"]}, " determined by the constraints. This is \n    done through a series of ", {"type": "strong", "text": ["flooding"]}, " operations in which, starting from an initial \n    set of exterior triangles, the flood successively extends to neighboring triangles \n    that are ", {"type": "strong", "text": ["not"]}, " separated from the currently flooded set by constrained edges. In\n    other words, the removal flood is only blocked by constrained edges. "], "extent": [9353, 9865]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 4, "text": ["Remove Triangles"], "extent": [9865, 9890], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["Reachable From Convex Hull Boundary"], "extent": [9890, 9935], "body": [{"type": "para", "indent": 12, "text": ["If selected, a removal flood is started from the outer boundary of the\n            triangulation (coinciding with the boundary of the convex hull of \n            the point set) and is propagated through unconstrained edges of the \n            triangulation. "], "extent": [9983, 10263]}, {"type": "para", "indent": 12, "text": ["For example, on the following constrained triangulation:"], "extent": [10263, 10341]}, {"type": "para", "indent": 12, "text": [{"scheme": "Image", "value": "../images/tri2d_outside_1.png", "type": "link", "text": "", "fullpath": "/nodes/images/tri2d_outside_1.png"}], "extent": [10341, 10400]}, {"type": "para", "indent": 12, "text": ["removing triangles ", {"type": "ui", "text": ["Reachable From Convex Hull Boundary"]}, " \n            will produce this result:"], "extent": [10400, 10519]}, {"type": "para", "indent": 12, "text": [{"scheme": "Image", "value": "../images/tri2d_outside_2.png", "type": "link", "text": "", "fullpath": "/nodes/images/tri2d_outside_2.png"}], "extent": [10519, 10570]}], "container": true, "attrs": {"channels": "/removeconvhull"}}, {"type": "dt", "indent": 8, "text": ["Outward Reachable From Constraint Primitives"], "extent": [10570, 10624], "body": [{"type": "para", "indent": 12, "text": ["If selected, a removal flood is started right outside the boundary of each \n            closed constraint primitive. "], "extent": [10671, 10810]}, {"type": "para", "indent": 12, "text": ["For example, removing triangles ", {"type": "ui", "text": ["Outward Reachable From Constraint Primitives"]}, " on the\n            previous example will produce this result:"], "extent": [10810, 10974]}, {"type": "para", "indent": 12, "text": [{"scheme": "Image", "value": "../images/tri2d_outside_3.png", "type": "link", "text": "", "fullpath": "/nodes/images/tri2d_outside_3.png"}], "extent": [10974, 11046]}], "container": true, "attrs": {"channels": "/removeoutcons"}}], "container": true}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 4, "text": ["But Keep Triangles"], "extent": [11046, 11073], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["Inward Reachable From Constraint Primitives"], "extent": [11073, 11126], "body": [{"type": "para", "indent": 12, "text": ["This option cancels removal of a triangle in a flooding initiated outside\n            of a constraint primitive whenever the same triangle can be reached via\n            flooding from inside the boundary of another constraint primitive. "], "extent": [11176, 11435]}, {"type": "para", "indent": 12, "text": ["Removing triangles ", {"type": "ui", "text": ["Outward Reachable From Constraint Primitives"]}, " while \n            keeping triangles ", {"type": "ui", "text": ["Inward Reachable From Constraint Primitives"]}, " on the\n            previous example will produce this result: "], "extent": [11435, 11672]}, {"type": "para", "indent": 12, "text": [{"scheme": "Image", "value": "../images/tri2d_outside_4.png", "type": "link", "text": "", "fullpath": "/nodes/images/tri2d_outside_4.png"}], "extent": [11672, 11723]}], "container": true, "attrs": {"channels": "/dontremoveincons"}}], "container": true}]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Refinement"], "extent": [11723, 11740], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Refine"], "extent": [11740, 11752], "body": [{"type": "para", "indent": 8, "text": ["Improves the quality of the triangulation by adding new points.\n        The triangulation will include some new points beyond the ones\n        in the input, but the triangles will have better shapes."], "extent": [11780, 11997]}, {"type": "para", "indent": 8, "text": ["If you start with the following points:"], "extent": [11997, 12046]}, {"type": "para", "indent": 8, "text": [{"scheme": "Image", "value": "../images/tri2d_refine_original.png", "type": "link", "text": "", "fullpath": "/nodes/images/tri2d_refine_original.png"}], "extent": [12046, 12099]}, {"type": "para", "indent": 8, "text": ["With ", {"type": "ui", "text": ["Refine"]}, " off, Triangulate 2D will create triangles using\n        the available points, and may in the process introduce\n        undesirable long skinny triangles:"], "extent": [12099, 12278]}, {"type": "para", "indent": 8, "text": [{"scheme": "Image", "value": "../images/tri2d_refine_off.png", "type": "link", "text": "", "fullpath": "/nodes/images/tri2d_refine_off.png"}], "extent": [12278, 12326]}, {"type": "para", "indent": 8, "text": ["With ", {"type": "ui", "text": ["Refine"]}, " on, Triangulate 2D will add points to create\n        better triangles conforming to the ", {"type": "ui", "text": ["Maximum Area"]}, ", \n        ", {"type": "ui", "text": ["Minimum Angle"]}, ", and ", {"type": "ui", "text": ["Minimum Edge Length"]}, " parameters."], "extent": [12326, 12525]}, {"type": "para", "indent": 8, "text": [{"scheme": "Image", "value": "../images/tri2d_refine_on.png", "type": "link", "text": "", "fullpath": "/nodes/images/tri2d_refine_on.png"}], "extent": [12525, 12572]}], "container": true, "attrs": {"channels": "/refine"}}, {"type": "dt", "indent": 4, "text": ["Maximum Area"], "extent": [12572, 12590], "body": [{"type": "para", "indent": 8, "text": ["The maximum area for the interior of each triangle. Decrease\n        this value to get smaller and more similarly sized triangles.\n        Very small values can make the triangulation take a long time."], "extent": [12619, 12829]}], "container": true, "attrs": {"channels": "/maxarea"}}, {"type": "dt", "indent": 4, "text": ["Minimum Angle"], "extent": [12829, 12848], "body": [{"type": "para", "indent": 8, "text": ["The minimum angle, in degrees, for the interior of each\n        triangle. Increasing this value to get more symmetrical\n        triangles and eliminate long skinny triangles. Values larger\n        than 30 degrees cannot be guaranteed and often force the \n        refinement to go for ever, and only stopped by the reaching the \n        maximum allowed number of points (", {"type": "ui", "text": ["Maximum New Points"]}, ")"], "extent": [12878, 13289]}], "container": true, "attrs": {"channels": "/minangle"}}, {"type": "dt", "indent": 4, "text": ["Minimum Edge Length"], "extent": [13289, 13314], "body": [{"type": "para", "indent": 8, "text": ["To avoid over-refinement in a local area, you can specify \n        a minimum length for the longest edge of a triangle that is allowed \n        to be further refined. Once all edges of a triangle become shorter\n        than the specified length, no further attempts are made to \n        improve the shape of the triangle. "], "extent": [13357, 13689]}], "container": true, "attrs": {"channels": "/minedgelength"}}, {"type": "dt", "indent": 4, "text": ["Maximum New Points"], "extent": [13689, 13713], "body": [{"type": "para", "indent": 8, "text": ["Limits the number of new points that can be added during\n        triangulation. New points might be added to satisfy constraints\n        or during refinement, up to this limit. This is mostly useful to\n        ensure that the triangulation doesn\u2019t run forever, and should\n        usually be set to a value much larger than the number of points\n        you expect to generate."], "extent": [13744, 14146]}], "container": true, "attrs": {"channels": "/maxnewpts"}}], "container": true}]}, {"level": 1, "id": "related", "container": true, "type": "related_section", "indent": 0, "role": "section", "extent": [14146, 14155], "body": [{"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": [{"scheme": "Node", "value": "/nodes/sop/divide", "type": "link", "text": "", "fullpath": "/nodes/sop/divide"}], "extent": [14155, 14179]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"scheme": "Node", "value": "/nodes/sop/polyreduce", "type": "link", "text": "", "fullpath": "/nodes/sop/polyreduce"}], "extent": [14179, 14207]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"scheme": "Node", "value": "/nodes/sop/tetrahedralize", "type": "link", "text": "", "fullpath": "/nodes/sop/tetrahedralize"}], "extent": [14207, 14240]}], "container": true}], "text": "Related"}], "title": ["Triangulate 2D"], "summary": ["Connects points to form well-shaped triangles."]}