{"type": "root", "attrs": {"type": "node", "context": "sop", "internal": "vdbsmooth", "icon": "COMMON/openvdb", "since": "12.5", "verb_since": "16.5", "tags": "vdb, merge", "version": null, "namespace": null}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["VDB Smooth"], "extent": [120, 135]}, {"type": "summary", "indent": 0, "text": ["Smooths out the values in a VDB volume primitive."], "extent": [135, 193]}, {"type": "para", "indent": 0, "text": ["See ", {"scheme": null, "value": "/model/volumes", "type": "link", "text": ["volumes"], "fullpath": "/model/volumes"}, " for an explanation of standard volumes and OpenVDB volumes."], "extent": [16, 105]}, {"type": "para", "indent": 0, "text": ["For each voxel, this node computes an average (see the ", {"type": "ui", "text": ["Operation"]}, " parameter) from the surrounding values and sets the voxel to that average.\n(The ", {"type": "q", "text": ["surrounding area"]}, " is a cube, despite the name ", {"type": "ui", "text": ["Filter Voxel Radius"]}, ")."], "extent": [217, 440]}, {"type": "note_group", "body": [{"type": "note", "indent": 0, "role": "item", "extent": [440, 446], "body": [{"type": "para", "indent": 4, "text": ["To smooth an SDF, use ", {"scheme": "Node", "value": "/nodes/sop/vdbsmoothsdf", "type": "link", "text": ["VDB Smooth SDF"], "fullpath": "/nodes/sop/vdbsmoothsdf"}, "."], "extent": [446, 513]}], "container": true}], "container": true, "role": "item_group"}, {"level": 1, "id": "parameters", "container": true, "type": "parameters_section", "indent": 0, "role": "section", "extent": [513, 525], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Group"], "extent": [525, 533], "body": [{"type": "para", "indent": 4, "text": ["The name of VDB primitive(s) in the input to be smoothed.\n    See ", {"scheme": null, "value": "/model/volumes#group", "type": "link", "text": ["specifying volumes"], "fullpath": "/model/volumes#group", "fragment": "#group"}, "."], "extent": [533, 647]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Alpha Mask"], "extent": [647, 659], "body": [{"type": "para", "indent": 4, "text": ["If enabled, it will use the second input\u2019s VDB for alpha masking. Assumes\n    voxel values are between 0 to 1 inclusive.\n    See ", {"scheme": null, "value": "/model/volumes#group", "type": "link", "text": ["specifying volumes"], "fullpath": "/model/volumes#group", "fragment": "#group"}, " for more information."], "extent": [677, 875]}], "container": true, "attrs": {"id": "maskname"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Operation"], "extent": [875, 886], "body": [{"type": "para", "indent": 4, "text": ["How to smooth the voxel values."], "extent": [886, 923]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Mean Value"], "extent": [923, 939], "body": [{"type": "para", "indent": 8, "text": ["Find the mean (", {"type": "code", "text": ["total/count"]}, ") of the surrounding values.\n        This is equivalent to a box blur of the same radius."], "extent": [939, 1070]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Median Value"], "extent": [1070, 1088], "body": [{"type": "para", "indent": 8, "text": ["Find the median (middle value) of the surrounding values.\n        This is useful for de-spiking noisy data as extreme values will not contribute to the final result."], "extent": [1088, 1263]}], "container": true}], "container": true}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Filter Voxel Radius"], "extent": [1263, 1284], "body": [{"type": "para", "indent": 4, "text": ["The number of voxels to run the smooth operation over.\n    This is measured in voxels, not distance.\n    This distance defines a ", {"type": "em", "text": ["cube"]}, ", so increasing the ", {"type": "q", "text": ["radius"]}, " will exponentially increase the work."], "extent": [1305, 1512]}], "container": true, "attrs": {"id": "radius"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Iterations"], "extent": [1512, 1524], "body": [{"type": "para", "indent": 4, "text": ["Number of times to repeat the smoothing operation."], "extent": [1524, 1580]}, {"type": "para", "indent": 4, "text": ["For a cone blur, multiply the radius by ", {"type": "code", "text": ["0.454545"]}, " and use two passes.\n    For a gaussian, multiply the radius by ", {"type": "code", "text": ["0.33"]}, " and use four passes."], "extent": [1580, 1727]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Renorm Accuracy"], "extent": [995, 1012], "body": [{"type": "para", "indent": 4, "text": ["The method for smoothing the SDF after each iteration.\n    Later options in the list are slower but more accurate."], "extent": [1035, 1155]}], "container": true, "attrs": {"id": "accuracy"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Invert Alpha Mask"], "extent": [1765, 1784], "body": [{"type": "para", "indent": 4, "text": ["Inverts the alpha mask so that values from 0-1 maps to 1-0."], "extent": [1800, 1869]}], "container": true, "attrs": {"id": "invert"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Min Mask Cutoff"], "extent": [1869, 1886], "body": [{"type": "para", "indent": 4, "text": ["Alpha mask values below this are mapped to 0."], "extent": [1903, 1954]}], "container": true, "attrs": {"id": "minmask"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Max Mask Cutoff"], "extent": [1954, 1971], "body": [{"type": "para", "indent": 4, "text": ["Alpha mask values above this are mapped to 1."], "extent": [1988, 2039]}], "container": true, "attrs": {"id": "maxmask"}, "role": "item"}], "container": true, "role": "item_group"}], "text": "Parameters"}, {"level": 1, "id": "related", "container": true, "type": "related_section", "indent": 0, "role": "section", "extent": [2039, 2048], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/sop/vdbsmoothsdf", "type": "link", "text": "", "fullpath": "/nodes/sop/vdbsmoothsdf"}], "extent": [2048, 2076]}], "container": true}], "text": "Related"}], "title": ["VDB Smooth"], "summary": ["Smooths out the values in a VDB volume primitive."], "included": ["/nodes/sop/vdbrenormalizesdf", "/nodes/sop/volume_types"]}