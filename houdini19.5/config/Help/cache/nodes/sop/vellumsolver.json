{"type": "root", "attrs": {"type": "node", "context": "sop", "internal": "vellumsolver", "icon": "DOP/vellumsolver", "since": "17.0", "version": null, "namespace": null}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["Vellum Solver"], "extent": [97, 115]}, {"type": "summary", "indent": 0, "text": ["Runs a dynamic Vellum simulation."], "extent": [115, 157]}, {"type": "para", "indent": 0, "text": ["The Vellum Solver is a wrapper around a DOP network to simplify the running of\nVellum solves."], "extent": [157, 252]}, {"type": "para", "indent": 0, "text": ["Like most Vellum SOPs, it is a three input SOP.   The first input is\nthe surface geometry to solve.  The second input should have the same\nnumber of points as the first, with point-to-point correspondence\neither with point numbers or ", {"type": "code", "text": ["id"]}, " attributes.   The second input\nalso should have special primitives describing the constraint relationships.\nConstraints are how the connectivity between points are defined and controlled\nand can be created with a Vellum Constraints SOP.   Note that the network tab\nmenu has several macros to refer to common setups, such as Vellum\nConfigure Cloth.   The third input provides the collision geometry.\nThe collision geometry should have matching topology frame-to-frame.\nIn addition, some types of packed geometry are recognized."], "extent": [252, 1019]}, {"type": "para", "indent": 0, "text": ["You can dive into the solver to add DOP nodes to apply special forces.\nYou can also use the ", {"scheme": "Node", "value": "/nodes/dop/vellumconstraintproperty", "type": "link", "text": ["Vellum Constraint Property"], "fullpath": "/nodes/dop/vellumconstraintproperty"}, "\nDOP to adjust the constraint properties during the solve using these\ninternal nodes."], "extent": [1019, 1260]}, {"type": "para", "indent": 0, "text": ["If using ", {"type": "code", "text": ["collisionignore"]}, ", the third input\u2019s object can be referred\nto as ", {"type": "code", "text": ["external"]}, " and the generated ground plane as ", {"type": "code", "text": ["groundplane"]}, "."], "extent": [1260, 1396]}, {"level": 1, "id": "parameters", "container": true, "type": "parameters_section", "indent": 0, "role": "section", "extent": [1396, 1408], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Reset Simulation"], "extent": [1408, 1427], "body": [{"type": "para", "indent": 4, "text": ["Clears the entire simulation cache."], "extent": [1448, 1489]}], "container": true, "attrs": {"id": "resimulate"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Start Frame"], "extent": [1489, 1502], "body": [{"type": "para", "indent": 4, "text": ["What frame on the Houdini playbar that the simulation should begin at."], "extent": [1523, 1599]}], "container": true, "attrs": {"id": "startframe"}, "role": "item"}], "container": true, "role": "item_group"}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Solver"], "extent": [1599, 1612], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Time Scale"], "extent": [1612, 1625], "body": [{"type": "para", "indent": 4, "text": ["Scales the effective time of the Vellum solve.  This can be used to\n    create bullet-time like effects where the physics of the Vellum\n    solver run at a different rate than the Houdini playbar.  A\n    value of 2 will cause cloth to fall twice as fast, and 0.1\n    will slow it to a tenth the speed."], "extent": [1645, 1952]}], "container": true, "attrs": {"id": "timescale"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Substeps"], "extent": [1952, 1962], "body": [{"type": "para", "indent": 4, "text": ["Each frame will be broken into this number of substeps.  Additional\n    substeps are required for fast moving collisions or sudden forces."], "extent": [1981, 2125]}, {"type": "para", "indent": 4, "text": ["The default substeps can be very aggressive, usually if the\n    Vellum solver is too stretchy, raising substeps to 2 or 5 is\n    a good first start."], "extent": [2125, 2279]}], "container": true, "attrs": {"id": "substeps"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Constraint Iterations"], "extent": [2279, 2302], "body": [{"type": "para", "indent": 4, "text": ["Within each substep, this number of passes will be taken by the\n    constraint enforcement operations.   Stiff constraints can\n    require more iterations to converge.  A good starting point\n    is the diameter of the geometry - the number of edges between\n    the farthest points."], "extent": [2318, 2606]}], "container": true, "attrs": {"id": "niter"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Smoothing Iterations"], "extent": [2606, 2628], "body": [{"type": "para", "indent": 4, "text": ["The default constraint iterations use a Gauss-Seidel approach that\n    is fast to converge.  However, if it doesn\u2019t fully converge due to\n    too high stiffness, or impossible configurations, it will leave the error\n    as bad looking triangles.  The smoothing iterations use a Jacobi\n    approach which is slower to converge but leaves error spread out\n    in a more attractive fashion.  The default of ten passes helps\n    smooth out error, but might need to be increased if the overall\n    ", {"type": "ui", "text": ["Constraint Iterations"]}, " is very high."], "extent": [2649, 3187]}], "container": true, "attrs": {"id": "smoothiter"}, "role": "item"}], "container": true, "role": "item_group"}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Collisions"], "extent": [3187, 3206], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Enable Collisions"], "extent": [3206, 3226], "body": [{"type": "para", "indent": 4, "text": ["Controls if any collision detection is done at all."], "extent": [3253, 3310]}], "container": true, "attrs": {"id": "enablecollisions"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Self Collisions"], "extent": [3310, 3327], "body": [{"type": "para", "indent": 4, "text": ["Controls if self collisions are detected."], "extent": [3354, 3401]}], "container": true, "attrs": {"id": "doselfcollisions"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Ground Plane"], "extent": [3401, 3415], "body": [{"type": "para", "indent": 4, "text": ["Adds a ground plane to the simulation.  The ground plane will\n    be visualized with a blue grid."], "extent": [3435, 3538]}], "container": true, "attrs": {"id": "useground"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Ground Position"], "extent": [3538, 3555], "body": [{"type": "para", "indent": 4, "text": ["Location of the center of the ground plane."], "extent": [3575, 3625]}], "container": true, "attrs": {"id": "groundpos"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Collision Passes"], "extent": [3625, 3643], "body": [{"type": "para", "indent": 4, "text": ["Number of collision detection passes to perform.  These are interleaved\n    between the constraint iterations.  Since collision is expensive, it is\n    best to minimize this.   But frequent interleaving helps avoid tent-poling\n    effects where a small collider is fighting with the no-stretch constraints.\n    In practice we find 10 to be correct for most situations, and substeps\n    often being a better solution to increase quality."], "extent": [3668, 4111]}], "container": true, "attrs": {"id": "collisionsiter"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Post Collision Passes"], "extent": [4111, 4134], "body": [{"type": "para", "indent": 4, "text": ["After all constraints are performed, a final round of collision detection\n    is done.   Collisions are often the most noticeable failure mode, and it\n    is ideal if the next frame can start with non-intersecting geometry.\n    Thus a final cleanup pass can achieve these requirements.   We have\n    found that ", {"type": "q", "text": ["number of stacked layers + 2"]}, " is a good estimate for this\n    number.   This allows the effect of the underlying collider to ripple\n    through the stacked layers fully."], "extent": [4162, 4649]}], "container": true, "attrs": {"id": "postcollisioniter"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Polish Passes"], "extent": [4649, 4664], "body": [{"type": "para", "indent": 4, "text": ["In any collision pass, any colliding pair may not be fully resolved.   This\n    number of additional collider-pair passes will be run until they are\n    resolved.  Since these are only performed on active colliders (and no new\n    collision search is done) this is very cheap."], "extent": [4688, 4971]}], "container": true, "attrs": {"id": "resolveallmax"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Layer Shock"], "extent": [4971, 4984], "body": [{"type": "para", "indent": 4, "text": ["The ", {"type": "code", "text": ["layer"]}, " integer point attribute is used to flag point as belonging\n    to different layers of cloth.  Higher numbers refer to higher layers.\n    Layer Shock will make lower layers this many times heavier during collision\n    evaluation, ensuring the higher layers will move out of their way.  The\n    rest of the dynamics are unaffected by this, and the difference is fixed\n    regardless of the number of layers between the two.  This can be thought\n    of as a way to dial between one-way layering of sims and fully coupled\n    sims."], "extent": [5005, 5550]}], "container": true, "attrs": {"id": "layershock"}, "role": "item"}], "container": true, "role": "item_group"}]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Forces"], "extent": [5550, 5563], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Gravity"], "extent": [5563, 5573], "body": [{"type": "para", "indent": 4, "text": ["Uniform gravity force to apply."], "extent": [5591, 5629]}], "container": true, "attrs": {"id": "gravity"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Wind"], "extent": [5629, 5635], "body": [{"type": "para", "indent": 4, "text": ["A uniform wind direction.  Since this is a drag force, a wind of zero\n    will act like still air and slow everything down; and a high wind will\n    speed cloth up to that speed."], "extent": [5650, 5834]}], "container": true, "attrs": {"id": "wind"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Wind Drag"], "extent": [5834, 5845], "body": [{"type": "para", "indent": 4, "text": ["The amount the particles are dragged by the wind force.  This is also\n    scaled by the tangential and normal drag forces specified on the\n    Vellum Constraints SOP to provide unequal drag depending on orientation."], "extent": [5864, 6085]}], "container": true, "attrs": {"id": "winddrag"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Velocity Damping"], "extent": [6085, 6103], "body": [{"type": "para", "indent": 4, "text": ["A more brute force approach to reducing dynamic velocity - the velocity\n    is scaled directly by this amount, causing sudden movements to\n    be quickly damped."], "extent": [6124, 6291]}], "container": true, "attrs": {"id": "veldamping"}, "role": "item"}], "container": true, "role": "item_group"}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Friction"], "extent": [6291, 6308], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Static Threshold"], "extent": [6308, 6327], "body": [{"type": "para", "indent": 4, "text": ["A threshold at which to apply full friction.  When the ratio of the tangential velocity and the normal impulse is less than this, the tangential velocity will be fully eliminated through friction.  This is roughly tan() of the slope angle that will allow sliding under gravity."], "extent": [6354, 6638]}], "container": true, "attrs": {"id": "static_threshold"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Dynamic Scale"], "extent": [6638, 6653], "body": [{"type": "para", "indent": 4, "text": ["If the static threshold fails, this controls what percentage the tangential velocity will be reduced in the dynamic friction case."], "extent": [6677, 6813]}], "container": true, "attrs": {"id": "dynamic_scale"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Enable External"], "extent": [6813, 6830], "body": [{"type": "para", "indent": 4, "text": ["A scale factor on the amount of friction effect to apply for collisions with external geometry."], "extent": [6849, 6950]}], "container": true, "attrs": {"id": "friction"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Enable Self"], "extent": [6950, 6963], "body": [{"type": "para", "indent": 4, "text": ["A scale factor on the amount of friction effect to apply for collisions with self geometry."], "extent": [6986, 7083]}], "container": true, "attrs": {"id": "selffriction"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Ground Static Scale"], "extent": [7083, 7104], "body": [{"type": "para", "indent": 4, "text": ["A scale factor for the ground plane\u2019s static friction.  Useful to\n    create frictionless grounds."], "extent": [7130, 7234]}], "container": true, "attrs": {"id": "static_sdfscale"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Ground Dynamic Scale"], "extent": [7234, 7256], "body": [{"type": "para", "indent": 4, "text": ["A scale factor for the ground plane\u2019s dynamic friction.  Useful to\n    create frictionless grounds."], "extent": [7283, 7388]}], "container": true, "attrs": {"id": "dynamic_sdfscale"}, "role": "item"}], "container": true, "role": "item_group"}]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Simulation"], "extent": [7388, 7405], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Cache Enabled"], "extent": [7405, 7421], "body": [{"type": "para", "indent": 4, "text": ["Controls if the simulation is cached to memory."], "extent": [7444, 7497]}], "container": true, "attrs": {"id": "cacheenabled"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Cache Memory (MB)"], "extent": [7497, 7516], "body": [{"type": "para", "indent": 4, "text": ["Maximum size of the memory cache."], "extent": [7539, 7578]}], "container": true, "attrs": {"id": "cachemaxsize"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Enable Automatic Resimulation"], "extent": [7578, 7609], "body": [{"type": "para", "indent": 4, "text": ["When any parameter inside a DOP simulation is changed, or\n    when any referenced external node is changed, the cache of\n    the simulation is marked as invalid. If this parameter is\n    turned on, the next time the playbar is moved to reach a\n    simulation time of 0, the cache will be cleared and the\n    first simulation timestep will be recalculated. If the cache\n    is invalidated while at a simulation time of 0, the initial\n    state is recalculated immediately. If the current time is\n    beyond time 0, then the most recent timestep will be\n    recooked, and the cache beyond the current time will be\n    cleared. But all prior timesteps will be left untouched\n    other than to be marked invalid. If this parameter is off,\n    the cache is marked as invalid in exactly the same way, but\n    the cache is never cleared automatically. To recook a\n    simulation in this mode, the Recook Simulation button on\n    this parameter dialog or above the viewport must be used."], "extent": [7628, 8613]}], "container": true, "attrs": {"id": "autoresim"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Simulation Type"], "extent": [8613, 8630], "body": [{"type": "para", "indent": 4, "text": ["Style of the simulation."], "extent": [8655, 8685]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Quasistatic"], "extent": [8685, 8702], "body": [{"type": "para", "indent": 8, "text": ["Each frame the simulation takes the inputs and runs them forward\n        the given number of frames.  The final result becomes that frames\n        result.   No frame-to-frame coherency is present."], "extent": [8702, 8908]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Dynamic"], "extent": [8908, 8921], "body": [{"type": "para", "indent": 8, "text": ["Each frame is solved from the previous frame, and the inputs are\n        used to setup the first frame only."], "extent": [8921, 9039]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "simulationtype"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Quasistatic Frames"], "extent": [9039, 9059], "body": [{"type": "para", "indent": 4, "text": ["The number of frames to roll forward for the quasi-static simulation."], "extent": [9087, 9163]}], "container": true, "attrs": {"id": "quasistaticframes"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Clear Dynamics"], "extent": [9163, 9179], "body": [{"type": "para", "indent": 4, "text": ["All dynamic forces and states, such as velocities, are removed from\n    the output.   This allows the output of a clean state to start\n    a new simulation from, such as when completing a drape."], "extent": [9202, 9402]}], "container": true, "attrs": {"id": "zerodynamics"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Advanced"], "extent": [9402, 9417], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Target"], "extent": [9417, 9426], "body": [{"type": "para", "indent": 4, "text": ["Points on the simulation mesh can be marked as ", {"type": "ui", "text": ["Pin to Target"]}, " to follow the targeted animation.   By default, this target is the first input.  But in some cases the animation you wish to target may be present in another SOP node, so that can be specified here."], "extent": [9449, 9718]}], "container": true, "attrs": {"id": "targetmethod"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Target Path"], "extent": [9718, 9731], "body": [{"type": "para", "indent": 4, "text": ["The path of a node to refer to when simulation points are set to the\n    target animation.  Should have a one-to-one point correspondence\n    with the simulation points, either by point number or ", {"type": "code", "text": ["id"]}, "."], "extent": [9752, 9959]}], "container": true, "attrs": {"id": "targetpath"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Integration"], "extent": [9959, 9972], "body": [{"type": "para", "indent": 4, "text": ["When integrating points forward by their velocities, curved motions\n    like swinging pendulums will be mispredicted and be damped by\n    the constraint projections.   A second order predictor recovers more of\n    this curved motion and maintains more energy in the system."], "extent": [9994, 10273]}, {"type": "para", "indent": 4, "text": ["In any case, if collisions are detected the system will fall back\n    to first order to avoid excessive bouncing."], "extent": [10273, 10392]}], "container": true, "attrs": {"id": "integration"}, "role": "item"}], "container": true, "role": "item_group"}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Secondary Constraint Pass"], "extent": [10392, 10426], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Enable Secondary Constraint Pass"], "extent": [10426, 10461], "body": [{"type": "para", "indent": 4, "text": ["If this checkbox is turned on, all constraints in the specified ", {"type": "ui", "text": ["Constraint Group"]}, " will be solved in a separate, interleaved pass to the remaining constraints.  "], "extent": [10483, 10656]}, {"type": "para", "indent": 4, "text": ["There are two main uses for this option. First, there are some expensive constraint types that do not need to be solved as frequently as the rest of the constraints, so enabling this option and choosing a low ", {"type": "ui", "text": ["Solve Frequency"]}, " can improve performance.  For example, cloth bend constraints on high resolution cloth with low bend stiffness such a silk or cotton. You need to ensure that you're solving distance constraints every pass so the cloth doesn\u2019t stretch. However, bend constraints are expensive and don\u2019t need to be as strong, since silk and cotton have very low bend resistance and wrinkle easily. Solving the bend constraints as a secondary pass will give you strong performance gains. However, this method isn\u2019t practical for stiffer material such as leather."], "extent": [10656, 11433]}, {"type": "para", "indent": 4, "text": ["The second use case is constraints that cause frequent changes in the constraint topology,\n    which causes the solver to re-order the constraint solve, possibly causing jittering in the\n    remaining constraints.  An example is organic tissue represented by tetrahedra and attached\n    together with sliding Stitch constraints.  As the sliding causes changes in the constraint\n    topology the tetrahedra might jitter slightly as the constraint solve order changes.  Moving\n    the Stitch constraints to another pass by setting ", {"type": "ui", "text": ["Constraint Group"]}, " to ", {"type": "code", "text": ["@type=ptprim"]}, " and\n    increasing the ", {"type": "ui", "text": ["Solve Frequency"]}, " to 1 will retain the same stiffness but eliminate tetrahedral\n    jittering due to changes in the solve order."], "extent": [11433, 12160]}], "container": true, "attrs": {"id": "dosecondary"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Constraint Group"], "extent": [12160, 12178], "body": [{"type": "para", "indent": 4, "text": ["The constraint group(s) that should be solved in the interleaved secondary pass.  This parameter accepts standard group syntax, so can contain explicit group names and ad-hoc groups, often specifying one or more constraint types with something like ", {"type": "code", "text": ["@type==bend"]}, ". Any constraint not contained in these groups will be solved in the primary pass as usual."], "extent": [12203, 12562]}], "container": true, "attrs": {"id": "secondarygroup"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Solve Frequency"], "extent": [12562, 12579], "body": [{"type": "para", "indent": 4, "text": ["The frequency at which to solve the secondary pass.  A setting of 1 will solve the secondary pass as often as the primary pass, while a setting of 0.25 will solve once every four passes of the primary pass (one quarter of the time)."], "extent": [12608, 12846]}], "container": true, "attrs": {"id": "secondaryfrequency"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Multi-Pass Solve"], "extent": [12846, 12871], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Enable Multi-Pass"], "extent": [12871, 12891], "body": [{"type": "para", "indent": 4, "text": ["The multi-pass options allow a substep to be repeated until certain\n    conditions are met.  The current conditions are designed to fix\n    issues that are caused by disabled points causing geometry to be\n    caught and cause the undisabled points to generate stretching.  Since\n    collisions always pre-empt constraints, the result is cloth or\n    hair stretching.  Points adjacent to auto-disabled points will\n    be themselves disabled if too much stretching is detected.  The\n    solve step will then be repeated in the hopes this frees up the\n    geometry."], "extent": [12913, 13481]}], "container": true, "attrs": {"id": "domultipass"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Maximum Passes"], "extent": [13481, 13497], "body": [{"type": "para", "indent": 4, "text": ["The maximum number of times to repeat the substep.  If no new\n    points need to be disabled, the process will stop immediately."], "extent": [13520, 13654]}], "container": true, "attrs": {"id": "maxmultipass"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Disable Stretch Ratio"], "extent": [13654, 13677], "body": [{"type": "para", "indent": 4, "text": ["The amount of stretch at the end of a solve step that will trigger\n    points to be eligible for disabling.  This is to detect when failed\n    collisions are pulling the Vellum object apart. By failing additional\n    points the object usually can be released and result in a better\n    result than continuing to stretch."], "extent": [13707, 14033]}], "container": true, "attrs": {"id": "disablestretchratio"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Motion"], "extent": [14033, 14048], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Max Acceleration"], "extent": [14048, 14067], "body": [{"type": "para", "indent": 4, "text": ["Various acceleration limiting options can be used to prevent the\n    simulation from being over-eager to obey non-realistic forces.   These\n    can otherwise result in large energy spikes."], "extent": [14086, 14280]}], "container": true, "attrs": {"id": "maxaccel"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Fallback to First Order Integration on Collision"], "extent": [14280, 14330], "body": [{"type": "para", "indent": 4, "text": ["If ", {"type": "ui", "text": ["Max Acceleration"]}, " is exceeded for a point, assume it signals a sharp,\n    discontinuous collision where the second order prediction will be wrong\n    and add erroneous motion, often in the form of bouncing.  In this case,\n    fallback to first order integration for the affected point."], "extent": [14354, 14651]}, {"type": "note_group", "body": [{"type": "note", "indent": 4, "role": "item", "extent": [14651, 14661], "body": [{"type": "para", "indent": 8, "text": ["Grain and Fluid particles are always considered for fallback to first order,\n        not only in the case of collisions.  While this control is helpful to calm down\n        simulations and avoid stray particles, it can decrease overall splashiness\n        of grain and fluid motion. Increasing ", {"type": "ui", "text": ["Max Acceleration"]}, " can restore\n        that splashiness."], "extent": [14661, 15024]}], "container": true}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "accelfallback"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Limit Acceleration in Velocity Update"], "extent": [15024, 15063], "body": [{"type": "para", "indent": 4, "text": ["Cap the amount that velocity of a particle is allowed to change as a\n    result of any of the dynamics.   This is useful to prevent some\n    instant motion being mis-identified as a massive force, and thus\n    avoid fly-away particles."], "extent": [15084, 15325]}], "container": true, "attrs": {"id": "limitaccel"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Limit Displacement on Collision"], "extent": [15325, 15358], "body": [{"type": "para", "indent": 4, "text": ["During the collision resolution, if the collision correction moves a\n    particle more than the acceleration amount, cap the effect.  The hope\n    is to fail more gracefully when a part of a model snags on the cloth\n    and is pulling it in a surprising fashion."], "extent": [15382, 15650]}], "container": true, "attrs": {"id": "limitdisplace"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Disable Broken Welds"], "extent": [15650, 15672], "body": [{"type": "para", "indent": 4, "text": ["When a weld breaks, the two new points start off next to each other.\n    If the surfaces do not separate naturally due to whatever triggered\n    the break, they may trigger collision detection and be pushed out,\n    causing an explosive motion when breaking occurs.  This option\n    sets the ", {"type": "code", "text": ["disableself"]}, " attribute when points are de-welded to avoid\n    these self collisions.  Note that this may cause layered cloth to\n    self penetrate, however."], "extent": [15701, 16156]}], "container": true, "attrs": {"id": "disablebrokenwelds"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Normalize Stress"], "extent": [16156, 16174], "body": [{"type": "para", "indent": 4, "text": ["Normalize the stress computation over time, so that the computed values\n    are more predictable as the ", {"type": "ui", "text": ["Substeps"]}, " parameter changes."], "extent": [16200, 16341]}], "container": true, "attrs": {"id": "normalizestress"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Sliding Method"], "extent": [16341, 16357], "body": [{"type": "para", "indent": 4, "text": ["The method used for finding the next closest position on the target geometry\n    when sliding ", {"type": "ui", "text": ["Attach to Geometry"]}, " or ", {"type": "ui", "text": ["Stitch Points"]}, " constraints.\n    ", {"type": "ui", "text": ["Closest Point"]}, " simply chooses the closest point on the target geometry to\n    the projected sliding position.  This approach is fast but can improperly jump\n    across concavities in the target geometry.  ", {"type": "ui", "text": ["Traverse Polygons"]}, " starts from\n    the current target primitive and successively walks outwards, finding the closest\n    point on the surrounding primitives.  This approach is more expensive but handles\n    concave target geometry better.  ", {"type": "ui", "text": ["Traverse Triangles (Optimized)"]}, " is similar to\n    the previous option in its improved handling of concavities, but can be many times faster\n    as it uses specialized triangle distance functions.  However, it can only be used with\n    target geometry consisting of triangles."], "extent": [16381, 17272]}, {"type": "tip_group", "body": [{"type": "tip", "indent": 4, "role": "item", "extent": [17272, 17281], "body": [{"type": "para", "indent": 8, "text": ["Target geometry with quadrilaterals can be triangulated with the ", {"scheme": "Node", "value": "/nodes/sop/divide", "type": "link", "text": ["Divide"], "fullpath": "/nodes/sop/divide"}, " SOP."], "extent": [17281, 17385]}], "container": true}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "slidingmethod"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Sleeping"], "extent": [17385, 17402], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Enable Auto Sleep"], "extent": [17402, 17422], "body": [{"type": "para", "indent": 4, "text": ["Particles that remain near-stationary for sufficient time will be\n    put to sleep by setting their ", {"type": "code", "text": ["stopped"]}, " attribute to ", {"type": "code", "text": ["1"]}, "."], "extent": [17444, 17577]}, {"type": "para", "indent": 4, "text": ["You can use the Pinned visualization to visualize which points are\n    sleeping."], "extent": [17577, 17663]}], "container": true, "attrs": {"id": "doautosleep"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Velocity Threshold"], "extent": [17663, 17683], "body": [{"type": "para", "indent": 4, "text": ["How slowly particles need to be moving before they are eligible\n    for sleeping.  The amount of time they remain below this speed\n    is accumulated in the ", {"type": "code", "text": ["deactivation_time"]}, " attribute.  If they\n    exceed this speed, the ", {"type": "code", "text": ["deactivation_time"]}, " is reset to zero."], "extent": [17716, 17983]}], "container": true, "attrs": {"id": "sleep_velocitythreshold"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Sleep Delay"], "extent": [17983, 17996], "body": [{"type": "para", "indent": 4, "text": ["How many seconds particles need to remain at or below the\n    velocity threshold before they are put to sleep.  See the\n    ", {"scheme": "Node", "value": "/nodes/dop/popawaken", "type": "link", "text": ["POP Awaken"], "fullpath": "/nodes/dop/popawaken"}, " DOP for methods to wake the\n    particles back up again."], "extent": [18017, 18235]}], "container": true, "attrs": {"id": "sleep_delay"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Grain Collisions"], "extent": [18235, 18260], "body": [{"type": "para", "indent": 0, "text": ["Vellum grains use a separate collision pass to deal with collisions\nbetween the grains.  These parameters control that behavior.  They\nare similar to those on ", {"scheme": "Node", "value": "/nodes/dop/popgrains", "type": "link", "text": ["POP Grains"], "fullpath": "/nodes/dop/popgrains"}], "extent": [18260, 18453]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Search Scale"], "extent": [16, 30], "body": [{"type": "para", "indent": 4, "text": ["Potential intersection particles are any within this scaled distance\n    of the average of the two particles ", {"type": "code", "text": ["pscale"]}, " attribute.  This\n    is an overestimate because usually collisions are not updated\n    during the constraint iterations, so it needs to record not\n    just the currently colliding particles, but those that may\n    start to collide due to the earlier iterations."], "extent": [58, 443]}, {"type": "para", "indent": 4, "text": ["This also effects the range of the attraction force in clumping."], "extent": [443, 513]}], "container": true, "attrs": {"id": "grain_searchscale"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Max Neighbors"], "extent": [513, 528], "body": [{"type": "para", "indent": 4, "text": ["The maximum number of particles that will be considered when searching for potential collisions over the substep. Capping this is useful to avoid excessive computations, if too many particles are created at one spot.  This parameter is ignored if ", {"type": "ui", "text": ["OpenCL Neighbor Search"]}, " is enabled, in which\n    case all neighbors are considered within the radius determined by ", {"type": "ui", "text": ["Search Scale"]}, "."], "extent": [556, 944]}], "container": true, "attrs": {"id": "grain_maxneighbor"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Assume Uniform Radius"], "extent": [1338, 1361], "body": [{"type": "para", "indent": 4, "text": ["The ", {"type": "code", "text": ["pscale"]}, " attribute is used to determine the radius of each\n    particle.  If all particles have the same radius, faster acceleration\n    structures can be used to find neighbors."], "extent": [1391, 1579]}], "container": true, "attrs": {"id": "grain_uniformradius"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Ignore Neighbors with Same Name or Piece"], "extent": [1579, 1621], "body": [{"type": "para", "indent": 4, "text": ["Ignore any neighbors that have the same non-empty ", {"type": "code", "text": ["name"]}, " or non-negative ", {"type": "code", "text": ["piece"]}, " point attribute.\n    This option can be enabled to create separate clusters of grains that only interact\n    with other clusters, often in conjunction with a ", {"type": "ui", "text": ["Shape Match"]}, " constraint to give\n    rigid behavior."], "extent": [1643, 1942]}], "container": true, "attrs": {"id": "ignorepiece"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Repulsion Weight"], "extent": [2308, 2326], "body": [{"type": "para", "indent": 4, "text": ["A weighting for how much the particle collision forces are weighted.\n    A value of zero will disable particle collision."], "extent": [2352, 2479]}, {"type": "para", "indent": 4, "text": ["Scale with the ", {"type": "code", "text": ["repulsionweight"]}, " point attribute."], "extent": [2479, 2534]}], "container": true, "attrs": {"id": "repulsionweight"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Attraction Weight"], "extent": [2670, 2689], "body": [{"type": "para", "indent": 4, "text": ["A weighting for how much the particles will naturally stick together\n    when close.  A value of zero will disable particle clumping."], "extent": [2716, 2855]}, {"type": "para", "indent": 4, "text": ["Scale with the ", {"type": "code", "text": ["attractionweight"]}, " point attribute."], "extent": [2855, 2911]}], "container": true, "attrs": {"id": "attractionweight"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Fluids"], "extent": [18849, 18864], "body": [{"type": "para", "indent": 0, "text": ["Vellum fluids use a density constraint to keep fluids incompressible, as well\nas provide viscosity and surface tension.  Any particle with a non-zero ", {"type": "code", "text": ["phase"]}, "\nattribute is treated as fluid."], "extent": [18864, 19055]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Viscosity"], "extent": [4451, 4462], "body": [{"type": "para", "indent": 4, "text": ["The viscosity of the fluid.  Low values for viscosity help keep the simulation stable,\n    while higher values can simulate liquids like honey.  A per-particle ", {"type": "code", "text": ["viscosity"]}, " attribute\n    can be used to multiply this value for variable viscosity.  Fluid particles will different\n    ", {"type": "code", "text": ["phase"]}, " values will be solved independently for viscosity, allowing multi-phase fluid\n    behavior."], "extent": [4482, 4868]}], "container": true, "attrs": {"id": "viscosity"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Surface Tension"], "extent": [5743, 5760], "body": [{"type": "para", "indent": 4, "text": ["The surface tension of the fluid.  Higher values for this setting reduce the curvature of the fluid\n    and cause it to form blobs.  A per-particle ", {"type": "code", "text": ["surfacetension"]}, " attribute\n    can be used to multiply this value for variable surface tension.  Fluid particles will different\n    ", {"type": "code", "text": ["phase"]}, " values will be solved independently for surface tension, allowing multi-phase fluid\n    behavior."], "extent": [5785, 6176]}], "container": true, "attrs": {"id": "surfacetension"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Spatial Sort Interval"], "extent": [6176, 6199], "body": [{"type": "para", "indent": 4, "text": ["Vellum fluids and grains perform many calculations involving nearby points.  Generally performance\n    is greatly improved by ensuring that points that are near other in 3D space are also near each other in\n    memory.  This option enables a spatial sort of the particles at the specified interval of frames."], "extent": [6221, 6539]}, {"type": "note_group", "body": [{"type": "note", "indent": 4, "role": "item", "extent": [6539, 6549], "body": [{"type": "para", "indent": 8, "text": ["This sort will change the point numbers of the particles, so it can be useful to add an ", {"type": "code", "text": ["id"]}, " attribute before simulation."], "extent": [6549, 6680]}], "container": true}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "sortinterval"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["OpenCL"], "extent": [19242, 19257], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["OpenCL Graph Coloring"], "extent": [19257, 19281], "body": [{"type": "para", "indent": 4, "text": ["When doing graph coloring, a fast parallel OpenCL algorithm is used.\n    Unfortunately it may require 10\u00d7 more memory than the rest of the\n    solve on tetrahedral meshes.  Thus, systems that might fit in memory\n    for solving will not succeed the color pass.  Disabling this forces\n    all graph coloring to be done in a slower sequential manner, preserving\n    RAM for the actual solve."], "extent": [19305, 19700]}], "container": true, "attrs": {"id": "oclgraphcolor"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["OpenCL Neighbor Search"], "extent": [19700, 19724], "body": [{"type": "para", "indent": 4, "text": ["Perform any neighbor searches for grains and fluids using OpenCL, which\n    is faster than the CPU but can use a bit more GPU memory."], "extent": [19752, 19891]}], "container": true, "attrs": {"id": "oclneighborsearch"}, "role": "item"}], "container": true, "role": "item_group"}]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Visualize"], "extent": [19891, 19907], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Show Collision"], "extent": [19907, 19924], "body": [{"type": "para", "indent": 4, "text": ["Show the collision object as a blue wireframe."], "extent": [19948, 20001]}], "container": true, "attrs": {"id": "showcollision"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Show Guide Geometry"], "extent": [20001, 20022], "body": [{"type": "para", "indent": 4, "text": ["Show additional guide geometry from the solver."], "extent": [20042, 20095]}], "container": true, "attrs": {"id": "showguide"}, "role": "item"}], "container": true, "role": "item_group"}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Geometry"], "extent": [16, 33], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Thickness"], "extent": [33, 45], "body": [{"type": "para", "indent": 4, "text": ["Draw spheres for the ", {"type": "code", "text": ["pscale"]}, " of the geometry.   If the geometry has already\n    solved it may have set the ", {"type": "code", "text": ["overlap_self"]}, " attribute, if so, the actual\n    effective thickness is drawn in cyan.  This is useful to detect if\n    the original thickness was too high - if so the extra thickness will\n    be ignored by the simulation and just slow down the collisions."], "extent": [76, 445]}], "container": true, "attrs": {"id": "guide_thicknesscolor"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Extrude"], "extent": [445, 454], "body": [{"type": "para", "indent": 4, "text": ["Draw the thickness by offsetting the geometry in opposite directions rather\n    than by using spheres."], "extent": [491, 599]}], "container": true, "attrs": {"id": "guide_showthicknessextrude"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Failed Self Collision"], "extent": [599, 622], "body": [{"type": "para", "indent": 4, "text": ["Draw failed self collisions as red spheres.  These points will no\n    longer collide with their own geometry, nor will any edge or triangle\n    attached to them."], "extent": [649, 817]}], "container": true, "attrs": {"id": "guide_failedself"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Failed External Collision"], "extent": [817, 844], "body": [{"type": "para", "indent": 4, "text": ["Draw failed external collisions as orange spheres.  These points will\n    no longer collide with external geometry, nor will any edge or triangle\n    attached to them."], "extent": [875, 1048]}], "container": true, "attrs": {"id": "guide_failedexternal"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Welds"], "extent": [1048, 1055], "body": [{"type": "para", "indent": 4, "text": ["Draw which points have been semantically fused together with the\n    ", {"type": "code", "text": ["weld"]}, " attribute.  These can be broken during the solve using\n    the auto break options, or by setting ", {"type": "code", "text": ["weld"]}, " to -1."], "extent": [1081, 1273]}], "container": true, "attrs": {"id": "guide_weldcolor"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Radius Scale"], "extent": [1273, 1287], "body": [{"type": "para", "indent": 4, "text": ["Because the thickness may be small, the visualization spheres can sometimes\n    be lost.  This scales the visualization spheres allowing them to\n    be readily seen."], "extent": [1315, 1487]}], "container": true, "attrs": {"id": "guide_colvisscale"}, "role": "item"}], "container": true}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Constraints"], "extent": [1487, 1507], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Group"], "extent": [1507, 1515], "body": [{"type": "para", "indent": 4, "text": ["Constraints are often added to different groups.  This allows you to\n    isolate one particular group to visualize."], "extent": [1547, 1669]}], "container": true, "attrs": {"id": "guide_constraintgroup"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Pin to Target"], "extent": [1669, 1684], "body": [{"type": "para", "indent": 4, "text": ["Draw spheres over points pinned to the target animation."], "extent": [1709, 1771]}], "container": true, "attrs": {"id": "guide_pincolor"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Stitch Points"], "extent": [1771, 1786], "body": [{"type": "para", "indent": 4, "text": ["Draw stitch constraints of points stitched together."], "extent": [1814, 1872]}], "container": true, "attrs": {"id": "guide_stitchcolor"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Attach to Geometry"], "extent": [1872, 1892], "body": [{"type": "para", "indent": 4, "text": ["Draw attachment constraints for points attached to external geometry."], "extent": [1920, 1995]}], "container": true, "attrs": {"id": "guide_attachcolor"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Radius"], "extent": [1995, 2003], "body": [{"type": "para", "indent": 4, "text": ["The constraint guides are not scaled by the thickness of the object,\n    so this provides an absolute scale for their size."], "extent": [2039, 2169]}], "container": true, "attrs": {"id": "guide_constraintvisradius"}, "role": "item"}], "container": true}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Visualization"], "extent": [2169, 2191], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["False Color Mode"], "extent": [2191, 2210], "body": [{"type": "para", "indent": 4, "text": ["Visualize properties of the constraints using a blue-to-red infrared coloring."], "extent": [2229, 2313]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["None"], "extent": [2313, 2323], "body": [{"type": "para", "indent": 8, "text": ["Leave the original colors."], "extent": [2323, 2359]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Stretch Stress"], "extent": [2359, 2379], "body": [{"type": "para", "indent": 8, "text": ["Color according to the maximum stretching force applied by the constraints."], "extent": [2379, 2464]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Bend Stress"], "extent": [2464, 2481], "body": [{"type": "para", "indent": 8, "text": ["Color according to the maximum bending force applied by the constraints."], "extent": [2481, 2563]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Stretch Distance"], "extent": [2563, 2585], "body": [{"type": "para", "indent": 8, "text": ["Color according to how far constraints are stretched."], "extent": [2585, 2648]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Stretch Ratio"], "extent": [2648, 2667], "body": [{"type": "para", "indent": 8, "text": ["Color according the ratio between original and current stretch."], "extent": [2667, 2740]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Bend Angle"], "extent": [2740, 2756], "body": [{"type": "para", "indent": 8, "text": ["Color according to how many degrees the bend angle has deviated."], "extent": [2756, 2830]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Stretch Plastic Flow"], "extent": [2830, 2856], "body": [{"type": "para", "indent": 8, "text": ["Color according to how much the stretch plastic flow has been triggered."], "extent": [2856, 2938]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Bend Plastic Flow"], "extent": [2938, 2961], "body": [{"type": "para", "indent": 8, "text": ["Color according to how much the bend plastic flow has been triggered."], "extent": [2961, 3040]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Volume Stress"], "extent": [3040, 3059], "body": [{"type": "para", "indent": 8, "text": ["Color according to the maximum volumetric force applied by the constraints."], "extent": [3059, 3144]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Volume Distance"], "extent": [3144, 3165], "body": [{"type": "para", "indent": 8, "text": ["Color according to how far volumetric constraints have expanded from their rest state."], "extent": [3165, 3261]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Volume Ratio"], "extent": [3261, 3279], "body": [{"type": "para", "indent": 8, "text": ["Color according the ratio between volumetric expansion and the rest state."], "extent": [3279, 3364]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "vis_mode"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Display Visualization Geometry"], "extent": [3364, 3396], "body": [{"type": "para", "indent": 4, "text": ["Toggles if the simulation geometry is false-colored in addition to the constraints."], "extent": [3421, 3511]}], "container": true, "attrs": {"id": "vis_displaygeo"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Max Stretch Stress"], "extent": [3511, 3531], "body": [{"type": "para", "indent": 4, "text": ["Scales the maximum stretch stress to be the maximum coloration."], "extent": [3562, 3632]}], "container": true, "attrs": {"id": "vis_maxstretchstress"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Max Bend Stress"], "extent": [3632, 3649], "body": [{"type": "para", "indent": 4, "text": ["Scales the maximum bend stress to be the maximum coloration."], "extent": [3677, 3743]}], "container": true, "attrs": {"id": "vis_maxbendstress"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Max Stretch Distance"], "extent": [3743, 3765], "body": [{"type": "para", "indent": 4, "text": ["Sets the maximum stretch distance to be the maximum coloration."], "extent": [3798, 3867]}], "container": true, "attrs": {"id": "vis_maxstretchdistance"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Max Stretch Ratio"], "extent": [3867, 3886], "body": [{"type": "para", "indent": 4, "text": ["Sets the maximum stretch ratio to be the maximum coloration."], "extent": [3916, 3982]}], "container": true, "attrs": {"id": "vis_maxstretchratio"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Max Bend Angle"], "extent": [3982, 3998], "body": [{"type": "para", "indent": 4, "text": ["Sets the maximum bend angle to be the maximum coloration."], "extent": [4025, 4088]}], "container": true, "attrs": {"id": "vis_maxbendangle"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Max Stretch Plastic Flow"], "extent": [4088, 4114], "body": [{"type": "para", "indent": 4, "text": ["Sets the maximum stretch plastic flow to be the maximum coloration."], "extent": [4150, 4223]}], "container": true, "attrs": {"id": "vis_maxstretchplasticflow"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Max Bend Plastic Flow"], "extent": [4223, 4246], "body": [{"type": "para", "indent": 4, "text": ["Sets the maximum bend plastic flow to be the maximum coloration."], "extent": [4279, 4349]}], "container": true, "attrs": {"id": "vis_maxbendplasticflow"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Max Volume Stress"], "extent": [4349, 4368], "body": [{"type": "para", "indent": 4, "text": ["Scales the maximum volume stress to be the maximum coloration."], "extent": [4398, 4466]}], "container": true, "attrs": {"id": "vis_maxvolumestress"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Max Volume Distance"], "extent": [4466, 4487], "body": [{"type": "para", "indent": 4, "text": ["Scales the maximum volume distance to be the maximum coloration."], "extent": [4519, 4589]}], "container": true, "attrs": {"id": "vis_maxvolumedistance"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Max Volume Ratio"], "extent": [4589, 4607], "body": [{"type": "para", "indent": 4, "text": ["Scales the maximum volume ratio to be the maximum coloration."], "extent": [4636, 4702]}], "container": true, "attrs": {"id": "vis_maxvolumeratio"}, "role": "item"}], "container": true}]}]}], "text": "Parameters"}, {"level": 1, "id": "related", "container": true, "type": "related_section", "indent": 0, "role": "section", "extent": [20133, 20142], "body": [{"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": [{"scheme": "Node", "value": "/nodes/sop/vellumdrape", "type": "link", "text": "", "fullpath": "/nodes/sop/vellumdrape"}], "extent": [20142, 20171]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"scheme": "Node", "value": "/nodes/sop/vellumconstraints", "type": "link", "text": "", "fullpath": "/nodes/sop/vellumconstraints"}], "extent": [20171, 20206]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"scheme": "Node", "value": "/nodes/sop/vellumconstraints_grain", "type": "link", "text": "", "fullpath": "/nodes/sop/vellumconstraints_grain"}], "extent": [20206, 20247]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"scheme": "Node", "value": "/nodes/sop/vellumio", "type": "link", "text": "", "fullpath": "/nodes/sop/vellumio"}], "extent": [20247, 20273]}], "container": true}], "text": "Related"}], "title": ["Vellum Solver"], "summary": ["Runs a dynamic Vellum simulation."], "included": ["/nodes/dop/standard_fluid_grains_parms", "/nodes/sop/_vellum_common"]}