{"type": "root", "attrs": {"type": "node", "context": "top", "internal": "attributearray", "icon": "SOP/attribute", "since": "18.0", "version": null, "namespace": null}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["Attribute Array"], "extent": [0, 20]}, {"type": "summary", "indent": 0, "text": ["Creates and modifies array attributes on work items."], "extent": [120, 180]}, {"type": "para", "indent": 0, "text": ["This node provides methods for creating array attributes based on existing attributes or patterns of values."], "extent": [180, 290]}, {"level": 1, "id": "parameters", "container": true, "type": "parameters_section", "indent": 0, "role": "section", "extent": [290, 302], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Generate When"], "extent": [16, 31], "body": [{"type": "para", "indent": 4, "text": ["Determines when this node will generate work items. You should generally leave this set to ", {"type": "q", "text": ["Automatic"]}, " unless you know the node requires a specific generation mode, or that the work items need to be generated dynamically."], "extent": [64, 291]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["All Upstream Items are Generated"], "extent": [291, 329], "body": [{"type": "para", "indent": 11, "text": ["This node will generate work items once all of the input nodes have generated their work items."], "extent": [329, 437]}], "container": true}, {"type": "dt", "indent": 4, "text": ["All Upstream Items are Cooked"], "extent": [437, 472], "body": [{"type": "para", "indent": 11, "text": ["This node will generate work items once all of the input nodes have cooked their work items."], "extent": [472, 577]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Each Upstream Item is Cooked"], "extent": [577, 611], "body": [{"type": "para", "indent": 11, "text": ["This node will generate work items each time a work item in an input node is cooked."], "extent": [611, 708]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Automatic"], "extent": [708, 723], "body": [{"type": "para", "indent": 11, "text": ["The generation mode is selected based on the generation mode of the input nodes. If any of the input nodes are generating work items when their inputs cook, this node will be set to ", {"type": "ui", "text": ["Each Upstream Item is Cooked"]}, ". Otherwise, it will be set to ", {"type": "ui", "text": ["All Upstream Items are Generated"]}, "."], "extent": [723, 1018]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "pdg_workitemgeneration"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Create When"], "extent": [354, 367], "body": [{"type": "para", "indent": 4, "text": ["When this parameter is on, you can set it to an expression that\u2019s evaluated for each work item. The array attribute list below will only be created/updated on a work item if this parameter\u2019s expression returns to a non-zero value for that item. For example, to set only an attribute on work items whose ", {"type": "code", "text": ["tile_x"]}, " attribute is greater than 5, enable this parameter and set its expression to ", {"type": "code", "text": ["@tile_x > 5"]}, "."], "extent": [387, 796]}], "container": true, "attrs": {"id": "condition"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["New Attribute Name"], "extent": [796, 816], "body": [{"type": "para", "indent": 4, "text": ["Name of the attribute to create."], "extent": [837, 875]}], "container": true, "attrs": {"id": "attribname"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Existing Name"], "extent": [875, 890], "body": [{"type": "para", "indent": 4, "text": ["What to do when there is already an attribute with the name ", {"type": "ui", "text": ["New Attribute Name"]}, " ."], "extent": [913, 1003]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Replace Existing Attribute"], "extent": [1003, 1035], "body": [{"type": "para", "indent": 8, "text": ["Replace the attribute if it already exists."], "extent": [1035, 1088]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Keep Existing Attribute"], "extent": [1088, 1117], "body": [{"type": "para", "indent": 8, "text": ["The old attribute is kept and no values are modified."], "extent": [1117, 1180]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Update Existing Attribute"], "extent": [1180, 1211], "body": [{"type": "para", "indent": 8, "text": ["Overwrite the existing elements in-place, does not remove unaffected elements."], "extent": [1211, 1299]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Append to Existing Attribute"], "extent": [1299, 1333], "body": [{"type": "para", "indent": 8, "text": ["Adds new elements to the end of the existing array."], "extent": [1333, 1394]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Prepend to Existing Attribute"], "extent": [1394, 1429], "body": [{"type": "para", "indent": 8, "text": ["Adds new elements to the front of the existing array."], "extent": [1429, 1492]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Generate Warning on Type-mismatch"], "extent": [1492, 1531], "body": [{"type": "para", "indent": 8, "text": ["When the existing attribute has a different type, generate a node warning and does not change the attribute."], "extent": [1531, 1649]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Generate Error on Type Mis-match"], "extent": [1649, 1687], "body": [{"type": "para", "indent": 8, "text": ["When the existing attribute has a different type, generate a node error."], "extent": [1687, 1769]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "nameconflict"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Create Array From"], "extent": [1769, 1788], "body": [{"type": "para", "indent": 4, "text": ["How the array will be created."], "extent": [1809, 1845]}, {"type": "para", "indent": 4, "text": ["Value Pattern:\n    Enter a ", {"scheme": null, "value": "/tops/attributes#valuepattern", "type": "link", "text": ["Value Pattern"], "fullpath": "/tops/attributes#valuepattern", "fragment": "#valuepattern"}, " to generate the array values."], "extent": [1845, 1953]}, {"type": "para", "indent": 4, "text": ["Array Values:\n    Enter a multi-parm of values."], "extent": [1953, 2006]}, {"type": "para", "indent": 4, "text": ["Attribute Pattern:\n    ", {"scheme": null, "value": "tops/attributes#pattern", "type": "link", "text": ["Match"], "fullpath": "/nodes/top/tops/attributes#pattern", "fragment": "#pattern"}, " upstream attributes and append their contents to form the new array.  The attributes are matched in sorted order."], "extent": [2006, 2180]}, {"type": "para", "indent": 4, "text": ["Existing Array Attribute:\n    Copy values from another array attribute."], "extent": [2180, 2257]}, {"type": "para", "indent": 4, "text": ["Output Files:\n    Copy from Input Files."], "extent": [2257, 2303]}], "container": true, "attrs": {"id": "createfrom"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Array Type"], "extent": [2303, 2315], "body": [{"type": "para", "indent": 4, "text": ["The type of the array to create in ", {"type": "ui", "text": ["Array Values"]}, " and ", {"type": "ui", "text": ["Value Pattern"]}, " mode."], "extent": [2335, 2420]}], "container": true, "attrs": {"id": "arraytype"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Attribute Pattern"], "extent": [2420, 2439], "body": [{"type": "para", "indent": 4, "text": ["The ", {"scheme": null, "value": "tops/attributes#pattern", "type": "link", "text": ["Pattern"], "fullpath": "/nodes/top/tops/attributes#pattern", "fragment": "#pattern"}, " used to match attribute names."], "extent": [2463, 2537]}], "container": true, "attrs": {"id": "attribpattern"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Attribute Value Pattern"], "extent": [2537, 2562], "body": [{"type": "para", "indent": 4, "text": ["Enter a ", {"scheme": null, "value": "/tops/attributes#valuepattern", "type": "link", "text": ["Value Pattern"], "fullpath": "/tops/attributes#valuepattern", "fragment": "#valuepattern"}, " to generate the array values."], "extent": [2591, 2680]}], "container": true, "attrs": {"id": "attribvaluepattern"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Attribute Name"], "extent": [2680, 2696], "body": [{"type": "para", "indent": 4, "text": ["The attribute to copy values from in ", {"type": "ui", "text": ["Existing Array Attribute"]}, " mode."], "extent": [2725, 2802]}], "container": true, "attrs": {"id": "existingattribname"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Copy Values"], "extent": [2802, 2815], "body": [{"type": "para", "indent": 4, "text": ["Which elements to copy from the given attribute."], "extent": [2836, 2890]}, {"type": "para", "indent": 4, "text": ["Take All:\n    Copies all elements."], "extent": [2890, 2930]}, {"type": "para", "indent": 4, "text": ["Take Slice:\n    Copies values based on the start, end and step indicies."], "extent": [2930, 3008]}, {"type": "para", "indent": 4, "text": ["Take First:\n    Copies ", {"type": "ui", "text": ["Count"]}, " elements from the front of the array."], "extent": [3008, 3084]}, {"type": "para", "indent": 4, "text": ["Take Last:\n    Copies ", {"type": "ui", "text": ["Count"]}, " elements from the back of the array."], "extent": [3084, 3158]}, {"type": "para", "indent": 4, "text": ["Take Middle:\n    Copies the element at index ceil(N / 2) if N is the length of the array."], "extent": [3158, 3253]}, {"type": "para", "indent": 4, "text": ["Take At Index:\n    Copies the element at the given index."], "extent": [3253, 3316]}], "container": true, "attrs": {"id": "copyvalues"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["At Index"], "extent": [3316, 3326], "body": [{"type": "para", "indent": 4, "text": ["The index of the first element to copy, can count from the end by using a negative index."], "extent": [3347, 3442]}], "container": true, "attrs": {"id": "slicestart"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["End Index"], "extent": [3442, 3453], "body": [{"type": "para", "indent": 4, "text": ["If enabled, one past the last element to be copied.  If disabled the slice runs to the final element.  Can use a negative index to count from the end."], "extent": [3476, 3632]}], "container": true, "attrs": {"id": "sliceend    "}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Step"], "extent": [3632, 3638], "body": [{"type": "para", "indent": 4, "text": ["How many elements to skip when taking the slice.  1 means take every element, 2 means skip every other element."], "extent": [3658, 3775]}], "container": true, "attrs": {"id": "slicestep"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Count"], "extent": [3775, 3782], "body": [{"type": "para", "indent": 4, "text": ["How many elements to copy from the array."], "extent": [3802, 3849]}], "container": true, "attrs": {"id": "takecount"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Output File Tag"], "extent": [3849, 3866], "body": [{"type": "para", "indent": 4, "text": ["The ", {"scheme": null, "value": "/tops/filetags", "type": "link", "text": ["file tag"], "fullpath": "/tops/filetags"}, " to match input Files.  The matching files will be copied into the new array."], "extent": [3884, 3996]}], "container": true, "attrs": {"id": "filetag"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Sorted"], "extent": [3996, 4004], "body": [{"type": "para", "indent": 4, "text": ["If enabled the contents of the array will be sorted order."], "extent": [4021, 4085]}], "container": true, "attrs": {"id": "sorted"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Reversed"], "extent": [4085, 4095], "body": [{"type": "para", "indent": 4, "text": ["If enabled the contents of the array will be reversed."], "extent": [4114, 4174]}], "container": true, "attrs": {"id": "reversed"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["On Index Error"], "extent": [4174, 4190], "body": [{"type": "para", "indent": 4, "text": ["What do do if the node is not able to copy the elements because the given index range is invalid."], "extent": [4213, 4316]}, {"type": "para", "indent": 4, "text": ["Generate Error:\n    Generate a node error."], "extent": [4316, 4364]}, {"type": "para", "indent": 4, "text": ["Generate Warning:\n    Generate a node warning."], "extent": [4364, 4416]}], "container": true, "attrs": {"id": "onindexerror"}, "role": "item"}], "container": true, "role": "item_group"}], "text": "Parameters"}, {"level": 1, "id": "related", "container": true, "type": "related_section", "indent": 0, "role": "section", "extent": [4416, 4425], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/top/attributecreate", "type": "link", "text": "", "fullpath": "/nodes/top/attributecreate"}], "extent": [4425, 4454]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/top/attributecopy", "type": "link", "text": "", "fullpath": "/nodes/top/attributecopy"}], "extent": [4454, 4481]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/top/attributefromstring", "type": "link", "text": "", "fullpath": "/nodes/top/attributefromstring"}], "extent": [4481, 4514]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/top/partitionbyattribute", "type": "link", "text": "", "fullpath": "/nodes/top/partitionbyattribute"}], "extent": [4514, 4548]}], "container": true}], "text": "Related"}], "title": ["Attribute Array"], "summary": ["Creates and modifies array attributes on work items."], "included": ["/nodes/top/processor_common"]}