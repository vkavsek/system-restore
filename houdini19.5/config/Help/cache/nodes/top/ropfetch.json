{"type": "root", "attrs": {"type": "node", "context": "top", "internal": "ropfetch", "icon": "TOP/ropfetch", "since": "17.5", "version": null, "namespace": null}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["ROP Fetch"], "extent": [89, 103]}, {"type": "summary", "indent": 0, "text": ["Creates work items that cook a ROP node or network."], "extent": [103, 163]}, {"type": "para", "indent": 0, "text": ["This node cooks a ROP node or network using TOPs in either the current ", {"type": "code", "text": [".hip"]}, " file or an external file. It creates one work item per frame, based on the frame generation parameters."], "extent": [163, 346]}, {"type": "para", "indent": 0, "text": ["Optionally, you can batch the work items into a single job for all frames, or divide them into smaller groups of frames. This node cooks each batch as a single job on the farm or locally. Batching all frames into one job is typically used for simulations so that the simulation data can be kept in memory rather than be cached to disk. Smaller batch sizes, like a 4-frames-per job, can also help avoid overhead loading the ", {"type": "code", "text": [".hip"]}, " file when cooking a ROP that cooks quickly."], "extent": [346, 821]}, {"type": "tip_group", "body": [{"type": "tip", "indent": 0, "role": "item", "extent": [821, 826], "body": [{"type": "para", "indent": 4, "text": ["Oftentimes a custom driver node will write out several files which are ", {"type": "em", "text": ["not"]}, " automatically picked up as output files by PDG. "], "extent": [826, 957]}, {"type": "para", "indent": 4, "text": ["However, if you give the driver node a toggle parameter named ", {"type": "code", "text": ["pdg_logoutput"]}, ", and you toggle that parameter to ", {"type": "code", "text": ["true"]}, " before it is cooked by the ", {"type": "ui", "text": ["ROP Fetch"]}, ", then its printed output will be parsed for lines that match the pattern ", {"type": "code", "text": ["OUTPUT_FILE:{file_path};"]}, " and each matched ", {"type": "code", "text": ["file_path"]}, " will become output files for the ", {"type": "ui", "text": ["ROP Fetch"]}, " work items."], "extent": [957, 1310]}], "container": true}, {"type": "tip", "indent": 0, "role": "item", "extent": [1310, 1315], "body": [{"type": "para", "indent": 4, "text": ["The ", {"type": "code", "text": ["$HH/help/files/pdg_examples/top_ocean"]}, " example shows how you can use this node to cook ROPs in an existing scene file."], "extent": [1315, 1444]}], "container": true}], "container": true, "role": "item_group"}, {"level": 1, "id": "top_attributes", "container": true, "type": "top_attributes_section", "indent": 0, "role": "section", "extent": [1444, 1460], "body": [{"type": "top_attributes_item_group", "body": [{"ext": null, "type": "top_attributes_item", "indent": 0, "text": [{"type": "code", "text": ["hip"]}], "role": "item", "extent": [1460, 1470], "body": [{"type": "para", "indent": 4, "text": ["The path to the ", {"type": "code", "text": [".hip"]}, " file that contains the ROP node."], "extent": [1489, 1550]}], "container": true, "attrs": {"type": "string"}}, {"ext": null, "type": "top_attributes_item", "indent": 0, "text": [{"type": "code", "text": ["outputparm"]}], "role": "item", "extent": [1550, 1566], "body": [{"type": "para", "indent": 4, "text": ["The name of the parameter on the target ROP node that contains the output\n    file path. For example, when used with a ROP Geometry node, this attribute\n    will be set to ", {"type": "code", "text": ["sopoutput"]}, "."], "extent": [1585, 1775]}], "container": true, "attrs": {"type": "string"}}, {"ext": null, "type": "top_attributes_item", "indent": 0, "text": [{"type": "code", "text": ["executeparm"]}], "role": "item", "extent": [1775, 1792], "body": [{"type": "para", "indent": 4, "text": ["The name of the paramter on the target ROP node that is pressed in order to trigger a cook of the ROP node. If the node is an instance of ", {"scheme": "Hom", "value": "/hom/hou/RopNode", "type": "link", "text": "", "fallback_text": "hou.RopNode", "fullpath": "/hom/hou/RopNode"}, " the ", {"scheme": "Hom", "value": "/hom/hou/RopNode#render", "type": "link", "text": "", "fallback_text": "hou.RopNode.render", "fullpath": "/hom/hou/RopNode#render", "fragment": "#render"}, " method will be used instead of pressing a button parm. By default, this attribute is set to ", {"type": "code", "text": ["execute"]}, " unless a custom button name is specified using the ", {"type": "ui", "text": ["Execute Parm Name"]}, " parameter."], "extent": [1811, 2187]}], "container": true, "attrs": {"type": "string"}}, {"ext": null, "type": "top_attributes_item", "indent": 0, "text": [{"type": "code", "text": ["rop"]}], "role": "item", "extent": [2187, 2196], "body": [{"type": "para", "indent": 4, "text": ["The ROP node path within the ", {"type": "code", "text": [".hip"]}, " file."], "extent": [2215, 2262]}], "container": true, "attrs": {"type": "string"}}, {"ext": null, "type": "top_attributes_item", "indent": 0, "text": [{"type": "code", "text": ["top"]}], "role": "item", "extent": [2262, 2271], "body": [{"type": "para", "indent": 4, "text": ["If the ROP is contained within a TOP asset, such as the ROP Geometry\n    node, then this attribute is set to the path to that TOP node."], "extent": [2290, 2431]}], "container": true, "attrs": {"type": "string"}}, {"ext": null, "type": "top_attributes_item", "indent": 0, "text": [{"type": "code", "text": ["sourceop"]}], "role": "item", "extent": [2431, 2444], "body": [{"type": "para", "indent": 4, "text": ["If the ", {"scheme": null, "value": "#oppath", "type": "link", "text": ["Source Node Path"], "fullpath": "/nodes/top/ropfetch#oppath", "fragment": "#oppath"}, " is set, then this attribute contains the path to the source data used by the ROP this work item is cooking."], "extent": [2463, 2610]}], "container": true, "attrs": {"type": "string"}}, {"ext": null, "type": "top_attributes_item", "indent": 0, "text": [{"type": "code", "text": ["control"]}], "role": "item", "extent": [2610, 2623], "body": [{"type": "para", "indent": 4, "text": ["When running a distributed sim, this attribute is set to the path to the Control DOP\n    node."], "extent": [2642, 2742]}], "container": true, "attrs": {"type": "string"}}, {"ext": null, "type": "top_attributes_item", "indent": 0, "text": [{"type": "code", "text": ["sharedserver"]}], "role": "item", "extent": [2742, 2760], "body": [{"type": "para", "indent": 4, "text": ["When running a distributed sim, this attribute is set to the identifier for\n    the shared sim tracker process."], "extent": [2779, 2896]}], "container": true, "attrs": {"type": "string"}}, {"ext": null, "type": "top_attributes_item", "indent": 0, "text": [{"type": "code", "text": ["trackerhost"]}], "role": "item", "extent": [2896, 2913], "body": [{"type": "para", "indent": 4, "text": ["When running a distributed sim, this attribute is set to the hostname of the\n    machine that has the distributed sim tracker."], "extent": [2932, 3064]}], "container": true, "attrs": {"type": "string"}}, {"ext": null, "type": "top_attributes_item", "indent": 0, "text": [{"type": "code", "text": ["trackerport"]}], "role": "item", "extent": [3064, 3081], "body": [{"type": "para", "indent": 4, "text": ["When running a distributed sim, this attribute is set to the port used to\n    connect to the sim tracker. In combination with ", {"type": "code", "text": ["trackerhost"]}, ", this forms\n    the complete address of the simulation tracker. For example, ", {"type": "code", "text": ["trackerhost:trackerpor"]}, "."], "extent": [3101, 3349]}], "container": true, "attrs": {"type": "integer"}}, {"ext": null, "type": "top_attributes_item", "indent": 0, "text": [{"type": "code", "text": ["range"]}], "role": "item", "extent": [3349, 3360], "body": [{"type": "para", "indent": 4, "text": ["The start, end, and increment frame range values associated with the work\n    item. If the work item is in a batch, then these values refer to the range\n    for the entire batch."], "extent": [3379, 3563]}], "container": true, "attrs": {"type": "float3"}}, {"ext": null, "type": "top_attributes_item", "indent": 0, "text": [{"type": "code", "text": ["slice"]}], "role": "item", "extent": [3563, 3574], "body": [{"type": "para", "indent": 4, "text": ["When running a distributed sim, this attribute is set to the slice number\n    associated with the work item."], "extent": [3594, 3708]}], "container": true, "attrs": {"type": "integer"}}, {"ext": null, "type": "top_attributes_item", "indent": 0, "text": [{"type": "code", "text": ["slicetype"]}], "role": "item", "extent": [3708, 3723], "body": [{"type": "para", "indent": 4, "text": ["The type of distributed sim being used, set to either ", {"type": "code", "text": ["0"]}, " for particles or ", {"type": "code", "text": ["1"]}, " for volumes."], "extent": [3743, 3840]}], "container": true, "attrs": {"type": "integer"}}, {"ext": null, "type": "top_attributes_item", "indent": 0, "text": [{"type": "code", "text": ["slicedivs"]}], "role": "item", "extent": [3840, 3855], "body": [{"type": "para", "indent": 4, "text": ["When using volume slices, this attribute is set to the x, y, and z slice\n    divisions."], "extent": [3876, 3969]}], "container": true, "attrs": {"type": "integer3"}}, {"ext": null, "type": "top_attributes_item", "indent": 0, "text": [{"type": "code", "text": ["tileindex"]}], "role": "item", "extent": [3969, 3984], "body": [{"type": "para", "indent": 4, "text": ["When using the ", {"type": "ui", "text": ["ROP Fetch"]}, " node to cook a tiled Mantra render, this value is set\n    to the render tile index associated with the work item."], "extent": [4004, 4152]}], "container": true, "attrs": {"type": "integer"}}, {"ext": null, "type": "top_attributes_item", "indent": 0, "text": [{"type": "code", "text": ["ifdoutput"]}], "role": "item", "extent": [4152, 4167], "body": [{"type": "para", "indent": 4, "text": ["When using the ", {"type": "ui", "text": ["ROP Fetch"]}, " node to generate an IFD instead of render a scene, this will be set to the value of ", {"type": "ui", "text": ["Output Picture"]}, ", which is the path to the image file that will be written when the IFD is rendered with Mantra."], "extent": [4184, 4417]}], "container": true, "attrs": {"type": "file"}}], "container": true, "role": "item_group"}], "text": "Top_attributes"}, {"level": 1, "id": "parameters", "container": true, "type": "parameters_section", "indent": 0, "role": "section", "extent": [4417, 4429], "body": [{"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["ROP Fetch"], "extent": [4429, 4446], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Generate When"], "extent": [16, 31], "body": [{"type": "para", "indent": 4, "text": ["Determines when this node will generate work items. You should generally leave this set to ", {"type": "q", "text": ["Automatic"]}, " unless you know the node requires a specific generation mode, or that the work items need to be generated dynamically."], "extent": [64, 291]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["All Upstream Items are Generated"], "extent": [291, 329], "body": [{"type": "para", "indent": 11, "text": ["This node will generate work items once all of the input nodes have generated their work items."], "extent": [329, 437]}], "container": true}, {"type": "dt", "indent": 4, "text": ["All Upstream Items are Cooked"], "extent": [437, 472], "body": [{"type": "para", "indent": 11, "text": ["This node will generate work items once all of the input nodes have cooked their work items."], "extent": [472, 577]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Each Upstream Item is Cooked"], "extent": [577, 611], "body": [{"type": "para", "indent": 11, "text": ["This node will generate work items each time a work item in an input node is cooked."], "extent": [611, 708]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Automatic"], "extent": [708, 723], "body": [{"type": "para", "indent": 11, "text": ["The generation mode is selected based on the generation mode of the input nodes. If any of the input nodes are generating work items when their inputs cook, this node will be set to ", {"type": "ui", "text": ["Each Upstream Item is Cooked"]}, ". Otherwise, it will be set to ", {"type": "ui", "text": ["All Upstream Items are Generated"]}, "."], "extent": [723, 1018]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "pdg_workitemgeneration"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Cache Mode"], "extent": [1270, 1282], "body": [{"type": "para", "indent": 4, "text": ["Determines how the processor node handles work items that report expected file results."], "extent": [1306, 1399]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Automatic"], "extent": [1399, 1414], "body": [{"type": "para", "indent": 8, "text": ["If the expected result file exists on disk, the work item is marked as\n        cooked without being scheduled. If the file ", {"type": "em", "text": ["does not"]}, " exist on disk, the work item is scheduled as normal. If upstream work item dependencies write out new\n        files during a cook, the cache files on work items in this node will\n        also be marked as out-of-date."], "extent": [1414, 1775]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Automatic (Ignore Upstream)"], "extent": [1775, 1808], "body": [{"type": "para", "indent": 8, "text": ["The same as ", {"type": "ui", "text": ["Automatic"]}, ", except upstream file writes ", {"type": "em", "text": ["do not"]}, " invalidate\n        cache files on work items in this node and this node will only check output files for its own work items."], "extent": [1808, 2006]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Read Files"], "extent": [2006, 2022], "body": [{"type": "para", "indent": 8, "text": ["If the expected result file exists on disk, the work item is marked as cooked without being scheduled. Otherwise the work item is marked as failed."], "extent": [2022, 2179]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Write Files"], "extent": [2179, 2196], "body": [{"type": "para", "indent": 8, "text": ["Work items are always scheduled and the expected result file is ignored even if it exists on disk."], "extent": [2196, 2304]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "pdg_cachemode"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Cook Type"], "extent": [2304, 2315], "body": [{"type": "para", "indent": 4, "text": ["Determines how work items in the node should cook, e.g. if they should run in process, out of process, or using services."], "extent": [2338, 2465]}], "container": true, "attrs": {"id": "pdg_cooktype"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Service Name"], "extent": [2465, 2479], "body": [{"type": "para", "indent": 4, "text": ["When ", {"type": "ui", "text": ["Cook Type"]}, " is set to the ", {"type": "ui", "text": ["Service"]}, ", this parameter is used to specify the name of the service. For more information on using services, see the ", {"scheme": null, "value": "/tops/services", "type": "link", "text": ["PDG Service Manager"], "fullpath": "/tops/services"}, " documentation."], "extent": [2505, 2715]}], "container": true, "attrs": {"id": "pdg_servicename"}, "role": "item"}], "container": true, "role": "item_group"}, {"level": 3, "type": "sep", "indent": 0, "extent": [4625, 4629]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["ROP Cook Order"], "extent": [4629, 4646], "body": [{"type": "para", "indent": 4, "text": ["When ", {"type": "ui", "text": ["ROP Path"]}, " points to a chain of ROPs or a ROP network, this parameter determines how the ROP nodes should be cooked. This parameter only affects cooking when the ", {"type": "ui", "text": ["ROP Fetch TOP"]}, " is configured to use batching or a single work item for all frames."], "extent": [4665, 4929]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Frame by Frame"], "extent": [4929, 4949], "body": [{"type": "para", "indent": 8, "text": ["The entire ROP chain is cooked for the current frame before moving onto the next frame in the sequence. "], "extent": [4949, 5067]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Node by Node"], "extent": [5067, 5085], "body": [{"type": "para", "indent": 8, "text": ["Each ROP node in the chain is cooked for the entire frame range, one ROP at a time."], "extent": [5085, 5178]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "roporder"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["ROP Path"], "extent": [5178, 5188], "body": [{"type": "para", "indent": 4, "text": ["The path to the ROP node or network that is cooked by this TOP node."], "extent": [5206, 5280]}, {"type": "tip_group", "body": [{"type": "tip", "indent": 4, "role": "item", "extent": [5280, 5289], "body": [{"type": "para", "indent": 8, "text": ["When cooking as a batch, the target ROP should have the ", {"type": "code", "text": ["preframe"]}, " and ", {"type": "code", "text": ["postframe"]}, " callback parms."], "extent": [5289, 5397]}], "container": true}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "roppath"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Execute Parm Name"], "extent": [5397, 5416], "body": [{"type": "para", "indent": 4, "text": ["When on, specifies the name of the button parameter on the ", {"scheme": null, "value": "#roppath", "type": "link", "text": ["ROP Path"], "fullpath": "/nodes/top/ropfetch#roppath", "fragment": "#roppath"}, " that triggers a cook of that node. If this parameter is not specified, then the ", {"type": "ui", "text": ["ROP Fetch TOP"]}, " will first try to use the ", {"type": "code", "text": ["render"]}, " method on the ROP, and then fallback to pressing the button if the target ROP node has no render method. By default, the button name is ", {"type": "code", "text": ["execute"]}, "."], "extent": [5439, 5803]}], "container": true, "attrs": {"id": "custombutton"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Reload Parm Path"], "extent": [5803, 5821], "body": [{"type": "para", "indent": 4, "text": ["When on, specifies the path to a parameter that should be be pressed before each frame cooks. This can be useful when cooking a ROP that references nodes that need to manually reload external resources with a Reload button."], "extent": [5842, 6071]}], "container": true, "attrs": {"id": "reloadpath"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Source Node Path"], "extent": [6071, 6089], "body": [{"type": "para", "indent": 4, "text": ["When on, specifies the path to the underlying node or network that the ", {"scheme": null, "value": "#roppath", "type": "link", "text": ["ROP Path"], "fullpath": "/nodes/top/ropfetch#roppath", "fragment": "#roppath"}, " will use when the ROP evaluates. This creates a dependency between that node and this TOP node, so that this TOP node is correctly marked as dirty when the source node changes. "], "extent": [6106, 6380]}, {"type": "para", "indent": 4, "text": ["For example, if you're using this ROP Fetch node to cook a Geometry ROP, then you would set the value of this parameter to the SOP network associated with your Geometry ROP."], "extent": [6380, 6563]}, {"type": "para", "indent": 4, "text": ["If this parameter is ", {"type": "em", "text": ["not"]}, " set, then no dependency is created. Likewise, if ", {"type": "ui", "text": ["External HIP File"]}, " is ", {"type": "em", "text": ["on"]}, ", this parameter is ", {"type": "em", "text": ["not"]}, " used since the ROP being cooked is in a different ", {"type": "code", "text": [".hip"]}, " file."], "extent": [6563, 6762]}], "container": true, "attrs": {"id": "oppath"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["External HIP File"], "extent": [6762, 6781], "body": [{"type": "para", "indent": 4, "text": ["When on, specifies the path to the ", {"type": "code", "text": [".hip"]}, " file that contains the ROP node."], "extent": [6803, 6883]}, {"type": "para", "indent": 4, "text": ["This is most commonly used when generating a ", {"type": "code", "text": [".hip"]}, " file procedurally as part of an earlier step in the TOP network."], "extent": [6883, 7005]}, {"type": "para", "indent": 4, "text": ["When selecting a ROP in the current file, it is ", {"type": "em", "text": ["not"]}, " necessary to specify this parameter."], "extent": [7005, 7101]}], "container": true, "attrs": {"id": "externalhip"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Reset $HIP On Cook"], "extent": [7101, 7121], "body": [{"type": "para", "indent": 4, "text": ["When on, sets the ", {"type": "code", "text": ["$HIP"]}, " variable in the job to the value of the ", {"type": "code", "text": ["$HIP"]}, " on the submitting machine.  This can be used to keep ", {"type": "code", "text": ["$HIP"]}, "-based file references in the scene file valid when it is copied to the scheduler working directory at the start of the PDG cook.  The original ", {"type": "code", "text": [".hip"]}, " file can then be safely modified while the cook proceeds."], "extent": [7140, 7485]}], "container": true, "attrs": {"id": "resethip"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Ignore Scene Load Errors"], "extent": [7485, 7511], "body": [{"type": "para", "indent": 4, "text": ["When this parameter is enabled, work items ignore any errors that occur when loading the .hip file. This can be useful when the scene has a load error that does not interfere with the nodes involved in cooking the ", {"type": "ui", "text": ["ROP Path"]}, "."], "extent": [7534, 7767]}], "container": true, "attrs": {"id": "ignoreerrors"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Output Paths From"], "extent": [7767, 7786], "body": [{"type": "para", "indent": 4, "text": ["Determines how PDG should detect output file cache paths for work items on this node."], "extent": [7808, 7899]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["ROP Node Parameters"], "extent": [7899, 7924], "body": [{"type": "para", "indent": 8, "text": ["PDG uses the output path(s) from the ROP node specified using the using the ", {"type": "ui", "text": ["ROP Path"]}, " parameter."], "extent": [7924, 8033]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Custom Path List"], "extent": [8033, 8055], "body": [{"type": "para", "indent": 8, "text": ["PDG uses the list of custom output file paths specified by the ", {"type": "ui", "text": ["Output Paths"]}, " and ", {"type": "ui", "text": ["Output Files"]}, " parameters."], "extent": [8055, 8177]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "outputsfrom"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Output File Tag"], "extent": [8177, 8194], "body": [{"type": "para", "indent": 4, "text": ["Specifies a custom file tag for the output files. By default, the ", {"type": "ui", "text": ["ROP Fetch"]}, " node tags output files based on their file extensions. You can use this parameter to ", {"type": "em", "text": ["override"]}, " that behavior."], "extent": [8212, 8408]}, {"type": "para", "indent": 4, "text": ["This parameter is only available when ", {"type": "ui", "text": ["Output Paths From"]}, " is set to ", {"type": "ui", "text": ["ROP Node Parameters"]}, "."], "extent": [8408, 8508]}], "container": true, "attrs": {"id": "filetag"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Output Parm Name"], "extent": [8508, 8526], "body": [{"type": "para", "indent": 4, "text": ["Specifies the name of the output file parameter on the target ROP node. By default, for standard ROP nodes shipped with Houdini, PDG is able to automatically determine the output name based on the type of ROP. When using a custom ROP or a ROP that PDG fails to detect automatically, this parameter should be set to the string name of the output parameter on the ROP specified in the ", {"type": "ui", "text": ["ROP Path"]}, " field. If the output parameter is in a multiparm, you can specify the multiparm like ", {"type": "code", "text": ["outputfile#"]}, ". You can also set the parameter to a space-separated list of output parm names."], "extent": [8549, 9129]}, {"type": "para", "indent": 4, "text": ["This parameter is only available when ", {"type": "ui", "text": ["Output Paths From"]}, " is set to ", {"type": "ui", "text": ["ROP Node Parameters"]}, "."], "extent": [9129, 9229]}], "container": true, "attrs": {"id": "customoutput"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Output Paths"], "extent": [9229, 9243], "body": [{"type": "para", "indent": 4, "text": ["Determines the number of custom output files."], "extent": [9265, 9316]}, {"type": "para", "indent": 4, "text": ["This parameter is only available when ", {"type": "ui", "text": ["Output Paths From"]}, " is set to ", {"type": "ui", "text": ["Custom Path List"]}, "."], "extent": [9316, 9413]}], "container": true, "attrs": {"id": "outputpaths"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Output File"], "extent": [9413, 9426], "body": [{"type": "para", "indent": 4, "text": ["Specifies the path to a custom output file. This file is added as an ", {"type": "em", "text": ["expected output"]}, " to all the work items on this node. The file path can be an expression or contain work item attribute references."], "extent": [9451, 9657]}, {"type": "para", "indent": 4, "text": ["This parameter is only available when ", {"type": "ui", "text": ["Output Paths From"]}, " is set to ", {"type": "ui", "text": ["Custom Path List"]}, "."], "extent": [9657, 9754]}], "container": true, "attrs": {"id": "outputfilepath"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Output File Tag"], "extent": [9754, 9771], "body": [{"type": "para", "indent": 4, "text": ["Specifies the file tag that should be associated with the corresponding ", {"type": "ui", "text": ["Output File"]}, " entry. If a tag is not specified, PDG will choose one based on the file\u2019s extension."], "extent": [9791, 9969]}, {"type": "para", "indent": 4, "text": ["This parameter is only available when ", {"type": "ui", "text": ["Output Paths From"]}, " is set to ", {"type": "ui", "text": ["Custom Path List"]}, "."], "extent": [9969, 10066]}], "container": true, "attrs": {"id": "customtag"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Output Log Parsing"], "extent": [10066, 10086], "body": [{"type": "para", "indent": 4, "text": ["By default, the ROP Fetch TOP looks for a toggle named ", {"type": "code", "text": ["pdg_logoutput"]}, " on ROP nodes to determine if it should detect output files by parsing the standard output log when the ROP cooks. You can change that behavior so that PDG will always or never apply log parsing using this parameter."], "extent": [10106, 10398]}, {"type": "para", "indent": 4, "text": ["Log messages that match the format ", {"type": "code", "text": ["OUTPUT_FILE:<file_name>;<file_tag>"]}, " are matched and automatically added as work item outputs. The format string can be changed using the __Custom Log Format_ parameter."], "extent": [10398, 10608]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["None"], "extent": [10608, 10618], "body": [{"type": "para", "indent": 8, "text": ["No log parsing is done, regardless of the settings on the ROP itself"], "extent": [10618, 10696]}], "container": true}, {"type": "dt", "indent": 4, "text": ["If Supported by ROP Node"], "extent": [10696, 10726], "body": [{"type": "para", "indent": 8, "text": ["Log parsing is only performed is the ROP node has a ", {"type": "code", "text": ["pdg_logoutput"]}, " toggle. The toggle is enabled by the ROP Fetch job script."], "extent": [10726, 10862]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Always"], "extent": [10862, 10874], "body": [{"type": "para", "indent": 8, "text": ["The output log while cooking work items is always parsed for output file messages."], "extent": [10874, 10966]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "logoutput"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Custom Log Format"], "extent": [10966, 10985], "body": [{"type": "para", "indent": 4, "text": ["When output log parsing is not disabled by setting ", {"type": "ui", "text": ["Output Log Parsing"]}, " to ", {"type": "ui", "text": ["None"]}, ", this parameter determines the regular expression used to match output files in the work item log."], "extent": [11005, 11195]}, {"type": "para", "indent": 4, "text": ["The regular expression must have two capture groups \u2013 one for the file path, and one for the file tag. The second can optionally be empty/unset, and PDG will assign a tag based on the extension of the file instead."], "extent": [11195, 11416]}], "container": true, "attrs": {"id": "logformat"}, "role": "item"}], "container": true, "role": "item_group"}, {"level": 3, "type": "sep", "indent": 0, "extent": [11416, 11420]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Evaluate Using"], "extent": [3077, 3093], "body": [{"type": "para", "indent": 4, "text": ["Determines how the TOP node creates and executes work items."], "extent": [3119, 3185]}, {"type": "para", "indent": 4, "text": ["When using the ", {"type": "ui", "text": ["Single Frame"]}, " option, the node creates one work item for each upstream\n    frame. When using the ", {"type": "ui", "text": ["Frame Range"]}, " option, the node creates one work item per frame\n    in the range for each upstream work item. When using the ", {"type": "ui", "text": ["ROP Node Configuration"]}, " option, PDG cooks the ROP without passing any frame range options and uses whatever configuration is set on the target ROP. When using the ", {"type": "ui", "text": ["Automatic"]}, " option, the node automatically configures the node based on whether or not it has any inputs."], "extent": [3185, 3705]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Single Frame"], "extent": [3705, 3723], "body": [{"type": "para", "indent": 11, "text": ["The node creates a single work item per upstream item and sets the new work item\u2019s frame to match the upstream item\u2019s frame. If there are no input nodes, then the node creates a single work item set to frame 1. You can override the single frame value with the ", {"type": "ui", "text": ["Override Frame"]}, " parameter."], "extent": [3723, 4025]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Frame Range"], "extent": [4025, 4042], "body": [{"type": "para", "indent": 11, "text": ["For each upstream work item, the node creates the full frame range of work items. If there are no upstream items, the node creates one set of items for the specified frame range."], "extent": [4042, 4233]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Automatic"], "extent": [4233, 4248], "body": [{"type": "para", "indent": 8, "text": ["If the node has inputs, it generates one frame of work for each input. If the node does not have any inputs, it generates work items for the node\u2019s full frame range."], "extent": [4248, 4423]}], "container": true}, {"type": "dt", "indent": 4, "text": ["ROP Node Configuration"], "extent": [4423, 4451], "body": [{"type": "para", "indent": 11, "text": ["For each upstream work item, the node creates a single work item that cooks the ", {"type": "ui", "text": ["ROP Path"]}, " and PDG does ", {"type": "em", "text": ["not"]}, " pass any frame range settings to the ROP node. The number of frames to cook is determined by the parameters on the ROP itself."], "extent": [4451, 4702]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "framegeneration"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Override Frame"], "extent": [4702, 4718], "body": [{"type": "para", "indent": 4, "text": ["When this parameter is enabled, it overrides the frame used with the ", {"type": "ui", "text": ["Single Frame"]}, " Evaluation mode."], "extent": [4742, 4850]}], "container": true, "attrs": {"id": "frameoverride"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Frame Range"], "extent": [4850, 4863], "body": [{"type": "para", "indent": 4, "text": ["The frame start, end and step size to use when ", {"type": "ui", "text": ["Frame Generation"]}, " is set to ", {"type": "ui", "text": ["Frame Range"]}, "."], "extent": [4879, 4979]}], "container": true, "attrs": {"id": "range"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Cook Frames as Single Work Item"], "extent": [11541, 11574], "body": [{"type": "para", "indent": 4, "text": ["Groups the work for all frames into a single work item."], "extent": [11595, 11656]}, {"type": "para", "indent": 4, "text": ["This is most commonly used when cooking a ROP that produces an FBX, Alembic, or USD file which contains multiple frames of data in the same file."], "extent": [11656, 11807]}, {"type": "para", "indent": 4, "text": ["This parameter is only available when ", {"type": "ui", "text": ["Evaluate Using"]}, " is set to ", {"type": "ui", "text": ["Frame Range"]}, "."], "extent": [11807, 11896]}], "container": true, "attrs": {"id": "singletask"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Expand Input Files Across Frame Range"], "extent": [11896, 11935], "body": [{"type": "para", "indent": 4, "text": ["Spreads the input file list across the frame range."], "extent": [11958, 12015]}, {"type": "para", "indent": 4, "text": ["For example, if the upstream work item has 100 output files and the frame range on this node is set to 1 to 50, then each work item in this node will have 2 input files. The first work item will have file 1 and file 2, the second work item will have file 3 and file 4, and so on."], "extent": [12015, 12300]}, {"type": "para", "indent": 4, "text": ["This parameter is only available when ", {"type": "ui", "text": ["Evaluate Using"]}, " is set to ", {"type": "ui", "text": ["Frame Range"]}, "."], "extent": [12300, 12389]}], "container": true, "attrs": {"id": "expandinputs"}, "role": "item"}], "container": true, "role": "item_group"}, {"level": 3, "type": "sep", "indent": 0, "extent": [12389, 12393]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["All Frames in One Batch"], "extent": [4979, 5004], "body": [{"type": "para", "indent": 4, "text": ["When on, work items from the same frame range are grouped into a batch that is scheduled as a single job. This is used for simulations where each frame depends on the previous frame, and it is advantageous to keep everything in memory."], "extent": [5023, 5264]}], "container": true, "attrs": {"id": "batchall"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Frames per Batch"], "extent": [5264, 5282], "body": [{"type": "para", "indent": 4, "text": ["By default, when this parameter is at 1 each work item is cooked as a \n    separate job. When this parameter is set to a value greater than 1, work\n    items are grouped into batches."], "extent": [5307, 5496]}], "container": true, "attrs": {"id": "framesperbatch"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Cook Batch When"], "extent": [12474, 12491], "body": [{"type": "para", "indent": 4, "text": ["Determines when batches of frames are scheduled."], "extent": [12510, 12564]}, {"type": "para", "indent": 4, "text": ["By default, the batch is scheduled once the dependencies for all frames are cooked. However, it is possible to schedule the batch as soon as its first frame can run."], "extent": [12564, 12735]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["All Frames are Ready"], "extent": [12735, 12761], "body": [{"type": "para", "indent": 11, "text": ["The batch is scheduled only when all dependencies on all frames in the batch are satisfied."], "extent": [12761, 12865]}], "container": true}, {"type": "dt", "indent": 4, "text": ["First Frame is Ready"], "extent": [12865, 12891], "body": [{"type": "para", "indent": 11, "text": ["The batch is scheduled as soon as its first frame is ready."], "extent": [12891, 12963]}, {"type": "para", "indent": 7, "text": ["This is possible because the ROP wrapper script used by PDG ensures that subsequent frames correctly wait for their dependencies. This is done by communicating back to PDG as the job is running to check the status of the dependencies before each frame. This incurs slightly more network overhead, and requires ongoing communication between the job and PDG."], "extent": [12963, 13328]}, {"type": "para", "indent": 7, "text": ["This option is ", {"type": "em", "text": ["not"]}, " available when cooking a ", {"scheme": "Icon", "value": "NETWORKS/cop2.svg", "type": "link", "text": "", "fullpath": "/nodes/top/NETWORKS/cop2.svg"}, " ", {"scheme": "Node", "value": "/nodes/out/comp", "type": "link", "text": ["Composite ROP"], "fullpath": "/nodes/out/comp"}, " node since COP file nodes must be able to load their entire input file sequence on the first frame."], "extent": [13328, 13537]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Fixed Number of Frames are Ready"], "extent": [13537, 13575], "body": [{"type": "para", "indent": 12, "text": ["The batch is scheduled once a fixed number of frames have cook dependencies, starting from the first frame in the range. The number of frames is determined by the ", {"type": "ui", "text": ["Number of Frames"]}, " parameter."], "extent": [13575, 13783]}, {"type": "para", "indent": 12, "text": ["For example, if a batch is cooking from frame 1 to frame 24 and the ", {"type": "ui", "text": ["Number of Frames"]}, " parameter is set to 6, the batch will be scheduler after the dependencies for batch frames 1 to 6 have cooked."], "extent": [13783, 13996]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Percentage of Frames are Ready"], "extent": [13996, 14032], "body": [{"type": "para", "indent": 12, "text": ["The batch is scheduled once a percentage of its frames dependencies have been cooked. The percentage of frames is determined by the ", {"type": "ui", "text": ["Percentage of Frames"]}, " parameter."], "extent": [14032, 14213]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "cookwhen"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Automatically Set Missing Frames"], "extent": [14213, 14247], "body": [{"type": "para", "indent": 4, "text": ["When on, the node will attempt to assign a ", {"type": "code", "text": ["frame"]}, " and ", {"type": "code", "text": ["range"]}, " value to work items that are missing those values. It determines the range based on the number of input work items, and sets the frame based on the work item\u2019s position in the input list. If only ", {"type": "em", "text": ["some"]}, " of the input work items are missing a frame, the behavior may be inconsistent."], "extent": [14267, 14617]}], "container": true, "attrs": {"id": "setframes"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Resume Partially Cached Batches"], "extent": [14617, 14650], "body": [{"type": "para", "indent": 4, "text": ["Determines whether or not batches produced by this node should resume cooking from partially cached output files. You should only enable this option for simulations if the DOP network itself is already configured to write sim cache files."], "extent": [14672, 14916]}], "container": true, "attrs": {"id": "resumebatch"}, "role": "item"}], "container": true, "role": "item_group"}, {"level": 3, "type": "sep", "indent": 0, "text": [" Distribution "], "extent": [14916, 14937], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 4, "text": ["Distributed Sim"], "extent": [14937, 14959], "body": [{"type": "para", "indent": 8, "text": ["When on, the node treats the target ROP as part of a distributed simulation. This enables the parameters for configuring a distributed sim, and disables the frame generation parameters."], "extent": [14985, 15180]}], "container": true, "attrs": {"id": "distributed"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Control DOP"], "extent": [15180, 15197], "body": [{"type": "para", "indent": 8, "text": ["The control DOP for the distributed sim."], "extent": [15219, 15269]}], "container": true, "attrs": {"id": "control"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Custom Tracker Port"], "extent": [15269, 15294], "body": [{"type": "para", "indent": 8, "text": ["When this parameter is enabled, the specified port is used for the sim tracker that transmits slice information between jobs. Otherwise, if this parameter is disabled, PDG will automatically use an available port."], "extent": [15320, 15543]}], "container": true, "attrs": {"id": "trackerport"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Web Port"], "extent": [15543, 15557], "body": [{"type": "para", "indent": 8, "text": ["When this parameter is enabled, the specified port is used to host the web page for monitor distributed sim status. Otherwise, if this parameter is disabled, PDG will automatically use an available port."], "extent": [15579, 15792]}], "container": true, "attrs": {"id": "webport"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Slice Type"], "extent": [15792, 15808], "body": [{"type": "para", "indent": 8, "text": ["The type of slicing used for the distributed sim."], "extent": [15832, 15891]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["Particles"], "extent": [15891, 15910], "body": [{"type": "para", "indent": 15, "text": ["Use the particle slicing method for the distributed sim."], "extent": [15910, 15983]}], "container": true}, {"type": "dt", "indent": 8, "text": ["Volumes"], "extent": [15983, 16000], "body": [{"type": "para", "indent": 15, "text": ["Use the volume slicing method for the distributed sim."], "extent": [16000, 16071]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "slicetype"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Slice Count"], "extent": [16071, 16088], "body": [{"type": "para", "indent": 8, "text": ["Specifies the number of slices for the distributed sim."], "extent": [16113, 16178]}, {"type": "para", "indent": 8, "text": ["This parameter setting is only available when ", {"type": "ui", "text": ["Slice Type"]}, " is set to ", {"type": "ui", "text": ["Particles"]}, "."], "extent": [16178, 16273]}], "container": true, "attrs": {"id": "slicecount"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Slice Divisions"], "extent": [16273, 16294], "body": [{"type": "para", "indent": 8, "text": ["Determines the x, y, and z volume divisions for the distributed sim."], "extent": [16318, 16396]}, {"type": "para", "indent": 8, "text": ["This parameter setting is only available when ", {"type": "ui", "text": ["Slice Type"]}, " is set to ", {"type": "ui", "text": ["Volumes"]}, "."], "extent": [16396, 16489]}], "container": true, "attrs": {"id": "slicedivs"}, "role": "item"}], "container": true, "role": "item_group"}], "container": true}, {"level": 3, "type": "sep", "indent": 0, "text": [" Debugging and Performance "], "extent": [16489, 16523], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 4, "text": ["Enable Performance Monitor Logging"], "extent": [16550, 16590], "body": [{"type": "para", "indent": 8, "text": ["When on, the Performance Monitor is enabled when cooking the ROP. The Performance Monitor prints performance information to the work item log."], "extent": [16618, 16770]}], "container": true, "attrs": {"id": "enableperfmon"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Performance File"], "extent": [16770, 16792], "body": [{"type": "para", "indent": 8, "text": ["When on, this parameter determines where the performance monitor output is saved to on disk. When off, the output is written to the work item\u2019s output log instead."], "extent": [16815, 16988]}, {"type": "para", "indent": 8, "text": ["If the specified file ends with a ", {"type": "code", "text": [".csv"]}, " extension, then it is exported as the CSV format. If the specified file is any other file type, then the file is saved using the Houdini performance monitor output syntax. A file in that format can be imported back into the ", {"scheme": null, "value": "/ref/panes/perfmon", "type": "link", "text": ["Performance Monitor pane"], "fullpath": "/ref/panes/perfmon"}, " tab for viewing."], "extent": [16988, 17325]}, {"type": "para", "indent": 8, "text": ["One file is written out for each process that performs a ROP cook. For example, if batching is enabled, then a single ", {"type": "code", "text": [".hperf "]}, " file is written out for each batch process. If every frame is cooked in a separate process, then one performance file is written out for each frame."], "extent": [17325, 17611]}, {"type": "para", "indent": 8, "text": ["This parameter is only available when ", {"type": "ui", "text": ["Enable Performance Monitor Logging"]}, " is ", {"type": "em", "text": ["on"]}, ". "], "extent": [17611, 17707]}], "container": true, "attrs": {"id": "perffile"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Save Debug .hip File"], "extent": [17707, 17733], "body": [{"type": "para", "indent": 8, "text": ["When on, the state of the ", {"type": "code", "text": [".hip"]}, " file containing the ROP node is saved to the specified path after the cook has completed. This includes all wedge parameter and environment changes, or scene state modified by cooking the network. If the cook fails due to an error in the ROP evaluation, then the ", {"type": "code", "text": [".hip"]}, " file is still saved."], "extent": [17756, 18089]}], "container": true, "attrs": {"id": "debughip"}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Report Debug Files as Outputs"], "extent": [18089, 18124], "body": [{"type": "para", "indent": 8, "text": ["When on, if the generation of the performance monitor output file (", {"type": "ui", "text": ["Performance File"]}, ") or debug ", {"type": "code", "text": [".hip"]}, " file (", {"type": "ui", "text": ["Save Debig .hip File"]}, ") is enabled, then they are reported (attached) as work item outputs. This provides easier access to the files."], "extent": [18151, 18407]}], "container": true, "attrs": {"id": "debugoutputs"}, "role": "item"}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "debuggingandperf"}}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Schedulers"], "extent": [18407, 18424], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["TOP Scheduler Override"], "extent": [5496, 5520], "body": [{"type": "para", "indent": 4, "text": ["This parameter overrides the TOP scheduler for this node."], "extent": [5543, 5606]}], "container": true, "attrs": {"id": "topscheduler"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Schedule When"], "extent": [9609, 9624], "body": [{"type": "para", "indent": 4, "text": ["When enabled, this parameter can be used to specify an expression that determines which work items from the node should be scheduled. If the expression returns zero for a given work item, that work item will immediately be marked as cooked instead of being queued with a scheduler. If the expression returns a non-zero value, the work item is scheduled normally."], "extent": [9651, 10021]}], "container": true, "attrs": {"id": "pdg_schedulewhen"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Work Item Label"], "extent": [8474, 8491], "body": [{"type": "para", "indent": 4, "text": ["Determines how the node should label its work items. This parameter allows you to assign non-unique label strings to your work items which are then used to identify the work items in the attribute panel, task bar, and scheduler job names."], "extent": [8519, 8763]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Use Default Label"], "extent": [8763, 8787], "body": [{"type": "para", "indent": 8, "text": ["The work items in this node will use the default label from the TOP network, or have no label if the default is unset."], "extent": [8787, 8915]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Inherit From Upstream Item"], "extent": [8915, 8948], "body": [{"type": "para", "indent": 8, "text": ["The work items inherit their labels from their parent work items.        "], "extent": [8948, 9031]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Custom Expression"], "extent": [9031, 9055], "body": [{"type": "para", "indent": 8, "text": ["The work item label is set to the ", {"type": "ui", "text": ["Label Expression"]}, " custom expression which is evaluated for each item."], "extent": [9055, 9171]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Node Defines Label"], "extent": [9171, 9196], "body": [{"type": "para", "indent": 8, "text": ["The work item label is defined in the node\u2019s internal logic."], "extent": [9196, 9266]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "pdg_workitemlabel"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Label Expression"], "extent": [9266, 9284], "body": [{"type": "para", "indent": 4, "text": ["When on, this parameter specifies a custom label for work items created by this node. The parameter can be an expression that includes references to work item attributes or built-in properties. For example, ", {"type": "code", "text": ["$OS: @pdg_frame"]}, " will set the label of each work item based on its frame value."], "extent": [9316, 9609]}], "container": true, "attrs": {"id": "pdg_workitemlabelexpr"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Work Item Priority"], "extent": [6495, 6515], "body": [{"type": "para", "indent": 4, "text": ["This parameter determines how the current scheduler prioritizes the work items in this node."], "extent": [6546, 6644]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Inherit From Upstream Item"], "extent": [6644, 6677], "body": [{"type": "para", "indent": 11, "text": ["The work items inherit their priority from their parent items. If a work item has no parent, its priority is set to 0."], "extent": [6677, 6808]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Custom Expression"], "extent": [6808, 6832], "body": [{"type": "para", "indent": 11, "text": ["The work item priority is set to the value of ", {"type": "ui", "text": ["Priority Expression"]}, "."], "extent": [6832, 6915]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Node Defines Priority"], "extent": [6915, 6943], "body": [{"type": "para", "indent": 7, "text": ["The work item priority is set based on the node\u2019s own internal priority calculations."], "extent": [6943, 7048]}, {"type": "para", "indent": 7, "text": ["This option is only available on the ", {"scheme": "Icon", "value": "MISC/python.svg", "type": "link", "text": "", "fullpath": "/nodes/top/MISC/python.svg"}, " ", {"scheme": "Node", "value": "/nodes/top/pythonprocessor", "type": "link", "text": ["Python Processor TOP"], "fullpath": "/nodes/top/pythonprocessor"}, ", ", {"scheme": "Icon", "value": "TOP/ropfetch.svg", "type": "link", "text": "", "fullpath": "/nodes/top/TOP/ropfetch.svg"}, " ", {"scheme": "Node", "value": "/nodes/top/ropfetch", "type": "link", "text": ["ROP Fetch TOP"], "fullpath": "/nodes/top/ropfetch"}, ", and ROP Output TOP nodes. These nodes define their own prioritization schemes that are implemented in their node logic."], "extent": [7048, 7344]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "pdg_workitempriority"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Priority Expression"], "extent": [7344, 7365], "body": [{"type": "para", "indent": 4, "text": ["This parameter specifies an expression for work item priority. The expression is evaluated for each work item in the node."], "extent": [7400, 7528]}, {"type": "para", "indent": 4, "text": ["This parameter is only available when ", {"type": "ui", "text": ["Work Item Priority"]}, " is set to ", {"type": "ui", "text": ["Custom Expression"]}, "."], "extent": [7528, 7627]}], "container": true, "attrs": {"id": "pdg_workitempriorityexpr"}, "role": "item"}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["External Files"], "extent": [18709, 18730], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["File Dependencies"], "extent": [2715, 2734], "body": [{"type": "para", "indent": 4, "text": ["A list of files that should be copied to the PDG working directory before the first work item in this node is executed.  This can be used to ensure that supporting files like digital assets and custom scripts are available for the work item job."], "extent": [2756, 3007]}, {"type": "para", "indent": 4, "text": ["The specified paths can be absolute or relative to HOUDINI_PATH."], "extent": [3007, 3077]}], "container": true, "attrs": {"id": "pdgnodedeps"}, "role": "item"}], "container": true, "role": "item_group"}]}], "text": "Parameters"}, {"level": 1, "id": "related", "container": true, "type": "related_section", "indent": 0, "role": "section", "extent": [18771, 18780], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/top/hdaprocessor", "type": "link", "text": "", "fullpath": "/nodes/top/hdaprocessor"}], "extent": [18780, 18806]}], "container": true}], "text": "Related"}], "title": ["ROP Fetch"], "summary": ["Creates work items that cook a ROP node or network."], "included": ["/nodes/top/processor_common"]}