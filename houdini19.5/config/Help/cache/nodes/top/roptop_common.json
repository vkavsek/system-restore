{"type": "root", "attrs": {"type": "include"}, "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 0, "text": ["Reload Parm Path"], "extent": [16, 34], "body": [{"type": "para", "indent": 4, "text": ["When on, specifies the path to a parameter that should be be pressed before each frame cooks. This can be useful when cooking a ROP that references nodes that need to manually reload external resources with a Reload button."], "extent": [55, 284]}], "container": true, "attrs": {"id": "reloadpath"}}, {"type": "dt", "indent": 0, "text": ["Reset $HIP On Cook"], "extent": [284, 304], "body": [{"type": "para", "indent": 4, "text": ["When on, sets the ", {"type": "code", "text": ["$HIP"]}, " variable in the job to the value of the ", {"type": "code", "text": ["$HIP"]}, " on the submitting machine.  This can be used to keep ", {"type": "code", "text": ["$HIP"]}, "-based file references in the scene file valid when it is copied to the scheduler working directory at the start of the PDG cook.  The original ", {"type": "code", "text": [".hip"]}, " file can then be safely modified while the cook proceeds."], "extent": [323, 668]}], "container": true, "attrs": {"id": "resethip"}}, {"type": "dt", "indent": 0, "text": ["Ignore Scene Load Errors"], "extent": [668, 694], "body": [{"type": "para", "indent": 4, "text": ["When this parameter is enabled, work items ignore any errors that occur when loading the .hip file. This can be useful when the scene has a load error that does not interfere with the nodes involved in cooking the ", {"type": "ui", "text": ["ROP Path"]}, "."], "extent": [717, 950]}], "container": true, "attrs": {"id": "ignoreerrors"}}, {"type": "dt", "indent": 0, "text": ["Cook Frames as Single Work Item"], "extent": [950, 983], "body": [{"type": "para", "indent": 4, "text": ["Groups the work for all frames into a single work item."], "extent": [1004, 1065]}, {"type": "para", "indent": 4, "text": ["This is most commonly used when cooking a ROP that produces an FBX, Alembic, or USD file which contains multiple frames of data in the same file."], "extent": [1065, 1216]}, {"type": "para", "indent": 4, "text": ["This parameter is only available when ", {"type": "ui", "text": ["Evaluate Using"]}, " is set to ", {"type": "ui", "text": ["Frame Range"]}, "."], "extent": [1216, 1305]}], "container": true, "attrs": {"id": "singletask"}}, {"type": "dt", "indent": 0, "text": ["Cook Batch When"], "extent": [1305, 1322], "body": [{"type": "para", "indent": 4, "text": ["Determines when batches of frames are scheduled."], "extent": [1341, 1395]}, {"type": "para", "indent": 4, "text": ["By default, the batch is scheduled once the dependencies for all frames are cooked. However, it is possible to schedule the batch as soon as its first frame can run."], "extent": [1395, 1566]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["All Frames are Ready"], "extent": [1566, 1592], "body": [{"type": "para", "indent": 7, "text": ["The batch is scheduled only when all dependencies on all frames in the batch are satisfied."], "extent": [1592, 1692]}], "container": true}, {"type": "dt", "indent": 4, "text": ["First Frame is Ready"], "extent": [1692, 1718], "body": [{"type": "para", "indent": 7, "text": ["The batch is scheduled as soon as its first frame is ready."], "extent": [1718, 1786]}, {"type": "para", "indent": 7, "text": ["This is possible because the ROP wrapper script used by PDG ensures that subsequent frames correctly wait for their dependencies. This is done by communicating back to PDG as the job is running to check the status of the dependencies before each frame. This incurs slightly more network overhead, and requires ongoing communication between the job and PDG."], "extent": [1786, 2151]}, {"type": "para", "indent": 7, "text": ["This option is ", {"type": "em", "text": ["not"]}, " available when cooking a ", {"scheme": "Icon", "value": "NETWORKS/cop2.svg", "type": "link", "text": "", "fullpath": "/nodes/top/NETWORKS/cop2.svg"}, " ", {"scheme": "Node", "value": "/nodes/out/comp", "type": "link", "text": ["Composite ROP"], "fullpath": "/nodes/out/comp"}, " node since COP file nodes must be able to load their entire input file sequence on the first frame."], "extent": [2151, 2360]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Fixed Number of Frames are Ready"], "extent": [2360, 2398], "body": [{"type": "para", "indent": 8, "text": ["The batch is scheduled once a fixed number of frames have cook dependencies, starting from the first frame in the range. The number of frames is determined by the ", {"type": "ui", "text": ["Number of Frames"]}, " parameter."], "extent": [2398, 2602]}, {"type": "para", "indent": 8, "text": ["For example, if a batch is cooking from frame 1 to frame 24 and the ", {"type": "ui", "text": ["Number of Frames"]}, " parameter is set to 6, the batch will be scheduler after the dependencies for batch frames 1 to 6 have cooked."], "extent": [2602, 2811]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Percentage of Frames are Ready"], "extent": [2811, 2847], "body": [{"type": "para", "indent": 8, "text": ["The batch is scheduled once a percentage of its frames dependencies have been cooked. The percentage of frames is determined by the ", {"type": "ui", "text": ["Percentage of Frames"]}, " parameter."], "extent": [2847, 3024]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "cookwhen"}}, {"type": "dt", "indent": 0, "text": ["Automatically Set Missing Frames"], "extent": [3024, 3058], "body": [{"type": "para", "indent": 4, "text": ["When on, the node will attempt to assign a ", {"type": "code", "text": ["frame"]}, " and ", {"type": "code", "text": ["range"]}, " value to work items that are missing those values. It determines the range based on the number of input work items, and sets the frame based on the work item\u2019s position in the input list. If only ", {"type": "em", "text": ["some"]}, " of the input work items are missing a frame, the behavior may be inconsistent."], "extent": [3078, 3428]}], "container": true, "attrs": {"id": "setframes"}}, {"type": "dt", "indent": 0, "text": ["Resume Partially Cached Batches"], "extent": [3428, 3461], "body": [{"type": "para", "indent": 4, "text": ["Determines whether or not batches produced by this node should resume cooking from partially cached output files. You should only enable this option for simulations if the DOP network itself is already configured to write sim cache files."], "extent": [3483, 3727]}], "container": true, "attrs": {"id": "resumebatch"}}, {"type": "dt", "indent": 0, "text": ["Distributed Sim"], "extent": [3727, 3744], "body": [{"type": "para", "indent": 4, "text": ["When on, the node treats the target ROP as part of a distributed simulation. This enables the parameters for configuring a distributed sim, and disables the frame generation parameters."], "extent": [3766, 3957]}], "container": true, "attrs": {"id": "distributed"}}, {"type": "dt", "indent": 0, "text": ["Control DOP"], "extent": [3957, 3970], "body": [{"type": "para", "indent": 4, "text": ["The control DOP for the distributed sim."], "extent": [3988, 4034]}], "container": true, "attrs": {"id": "control"}}, {"type": "dt", "indent": 0, "text": ["Custom Tracker Port"], "extent": [4034, 4055], "body": [{"type": "para", "indent": 4, "text": ["When this parameter is enabled, the specified port is used for the sim tracker that transmits slice information between jobs. Otherwise, if this parameter is disabled, PDG will automatically use an available port."], "extent": [4077, 4296]}], "container": true, "attrs": {"id": "trackerport"}}, {"type": "dt", "indent": 0, "text": ["Custom Web Port"], "extent": [4296, 4313], "body": [{"type": "para", "indent": 4, "text": ["When this parameter is enabled, the specified port is used to host the web page for monitor distributed sim status. Otherwise, if this parameter is disabled, PDG will automatically use an available port."], "extent": [4331, 4540]}], "container": true, "attrs": {"id": "webport"}}, {"type": "dt", "indent": 0, "text": ["Verbose Tracking Logger"], "extent": [4540, 4565], "body": [{"type": "para", "indent": 4, "text": ["When on, enables verbose log messages on the distributed sim tracker."], "extent": [4590, 4665]}], "container": true, "attrs": {"id": "verbosetracker"}}, {"type": "dt", "indent": 0, "text": ["Slice Type"], "extent": [4665, 4677], "body": [{"type": "para", "indent": 4, "text": ["The type of slicing used for the distributed sim."], "extent": [4697, 4752]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Particles"], "extent": [4752, 4767], "body": [{"type": "para", "indent": 8, "text": ["Use the particle slicing method for the distributed sim."], "extent": [4767, 4833]}], "container": true}, {"type": "dt", "indent": 4, "text": ["Volumes"], "extent": [4833, 4846], "body": [{"type": "para", "indent": 8, "text": ["Use the volume slicing method for the distributed sim."], "extent": [4846, 4910]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "slicetype"}}, {"type": "dt", "indent": 0, "text": ["Slice Count"], "extent": [4910, 4923], "body": [{"type": "para", "indent": 4, "text": ["Specifies the number of slices for the distributed sim."], "extent": [4944, 5005]}, {"type": "para", "indent": 4, "text": ["This parameter setting is only available when ", {"type": "ui", "text": ["Slice Type"]}, " is set to ", {"type": "ui", "text": ["Particles"]}, "."], "extent": [5005, 5096]}], "container": true, "attrs": {"id": "slicecount"}}, {"type": "dt", "indent": 0, "text": ["Slice Divisions"], "extent": [5096, 5113], "body": [{"type": "para", "indent": 4, "text": ["Determines the x, y, and z volume divisions for the distributed sim."], "extent": [5133, 5207]}, {"type": "para", "indent": 4, "text": ["This parameter setting is only available when ", {"type": "ui", "text": ["Slice Type"]}, " is set to ", {"type": "ui", "text": ["Volumes"]}, "."], "extent": [5207, 5296]}], "container": true, "attrs": {"id": "slicedivs"}}, {"type": "dt", "indent": 0, "text": ["Enable Performance Monitor Logging"], "extent": [5296, 5332], "body": [{"type": "para", "indent": 4, "text": ["When on, the Performance Monitor is enabled when cooking the ROP. The Performance Monitor prints performance information to the work item log."], "extent": [5356, 5504]}], "container": true, "attrs": {"id": "enableperfmon"}}, {"type": "dt", "indent": 0, "text": ["Performance File"], "extent": [5504, 5522], "body": [{"type": "para", "indent": 4, "text": ["When on, this parameter determines where the performance monitor output is saved to on disk. When off, the output is written to the work item\u2019s output log instead."], "extent": [5541, 5710]}, {"type": "para", "indent": 4, "text": ["If the specified file ends with a ", {"type": "code", "text": [".csv"]}, " extension, then it is exported as the CSV format. If the specified file is any other file type, then the file is saved using the Houdini performance monitor output syntax. A file in that format can be imported back into the ", {"scheme": null, "value": "/ref/panes/perfmon", "type": "link", "text": ["Performance Monitor pane"], "fullpath": "/ref/panes/perfmon"}, " tab for viewing."], "extent": [5710, 6043]}, {"type": "para", "indent": 4, "text": ["One file is written out for each process that performs a ROP cook. For example, if batching is enabled, then a single ", {"type": "code", "text": [".hperf "]}, " file is written out for each batch process. If every frame is cooked in a separate process, then one performance file is written out for each frame."], "extent": [6043, 6325]}, {"type": "para", "indent": 4, "text": ["This parameter is only available when ", {"type": "ui", "text": ["Enable Performance Monitor Logging"]}, " is ", {"type": "em", "text": ["on"]}, ". "], "extent": [6325, 6417]}], "container": true, "attrs": {"id": "perffile"}}, {"type": "dt", "indent": 0, "text": ["Save Debug .hip File"], "extent": [6417, 6439], "body": [{"type": "para", "indent": 4, "text": ["When on, the state of the ", {"type": "code", "text": [".hip"]}, " file containing the ROP node is saved to the specified path after the cook has completed. This includes all wedge parameter and environment changes, or scene state modified by cooking the network. If the cook fails due to an error in the ROP evaluation, then the ", {"type": "code", "text": [".hip"]}, " file is still saved."], "extent": [6458, 6787]}], "container": true, "attrs": {"id": "debughip"}}, {"type": "dt", "indent": 0, "text": ["Report Debug Files as Outputs"], "extent": [6787, 6818], "body": [{"type": "para", "indent": 4, "text": ["When on, if the generation of the performance monitor output file (", {"type": "ui", "text": ["Performance File"]}, ") or debug ", {"type": "code", "text": [".hip"]}, " file (", {"type": "ui", "text": ["Save Debig .hip File"]}, ") is enabled, then they are reported (attached) as work item outputs. This provides easier access to the files."], "extent": [6841, 7093]}], "container": true, "attrs": {"id": "debugoutputs"}}], "container": true}]}