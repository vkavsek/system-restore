{"type": "root", "attrs": {"type": "node", "context": "vop", "internal": "inline", "icon": "VOP/inline", "version": null, "namespace": null}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["Inline Code"], "extent": [63, 79]}, {"type": "summary", "indent": 0, "text": ["Write VEX code that is put directly into your shader or operator\ndefinition."], "extent": [79, 164]}, {"type": "para", "indent": 0, "text": ["This operator lets you write VEX code that is put directly into your\nshader or operator definition."], "extent": [164, 265]}, {"type": "para", "indent": 0, "text": ["Up to 64 inputs can be connected to this operator, and they can be of\nany data type. You can also use the parameters of this operator to\ndefine up to 32 outputs that can also be of any data type, and be given\nany name."], "extent": [265, 485]}, {"type": "para", "indent": 0, "text": ["When writing your inline VEX code, you do not need to write variable\ndeclarations for any of the inputs or outputs to the operator. Any extra\nvariables that you do declare should be prefixed with a ", {"type": "code", "text": ["$"]}, ". This tells\nthe VOPNET code generator that it is a variable name, and should be made\nunique. Similarly, when referring to input or output variables, their\nnames should be prefixed with a ", {"type": "code", "text": ["$"]}, ", or the code generator will not use\nthe correct variable names. Do not use the ", {"type": "code", "text": ["$"]}, " prefix for global\nvariable names."], "extent": [485, 996]}, {"type": "para", "indent": 0, "text": ["The ", {"type": "code", "text": ["$"]}, " is needed if you are going to instantiate more than one copy of your VOP in the same shader. Without the ", {"type": "code", "text": ["$"]}, " before variable names, the variables will be declared with the same name in different Inline VOPs, resulting in the same value being referenced in each VOP. This sharing of values between VOPs is normally not wanted, so the ", {"type": "code", "text": ["$"]}, " makes a new version of the declared variable in each instance of the VOP."], "extent": [996, 1416]}, {"type": "para", "indent": 0, "text": ["Although it is possible to assign values to input variables, it is\nstrongly discouraged. There is no guarantee made about the order in\nwhich VOPs will generate their code, so assigning values to input\nvariables may give unpredictable results."], "extent": [1416, 1660]}, {"type": "para", "indent": 0, "text": ["You should use this operator only if you are familiar with VEX\nprogramming. It is very easy to introduce errors into your code using\nthis operator. If there are errors in your code, you will be able to see\nwhat they are by middle-clicking on the icon of any VOP in the network."], "extent": [1660, 1939]}, {"type": "para", "indent": 0, "text": ["As an example, the following inline code will output the length of the hypotenuse of a right angle triangle, if the Inline VOP node has two inputs named ", {"type": "code", "text": ["in1"]}, " and ", {"type": "code", "text": ["in2"]}, " and an output named ", {"type": "code", "text": ["out1"]}, ":"], "extent": [1939, 2137]}, {"lang": null, "type": "pre", "indent": 0, "text": ["\n$out1 = sqrt($in1 * $in1 + $in2 * $in2);\n"], "extent": [2137, 2186]}, {"type": "note_group", "body": [{"type": "note", "indent": 0, "role": "item", "extent": [2186, 2193], "body": [{"type": "para", "indent": 4, "text": ["The input names are found in the ", {"type": "ui", "text": ["Name"]}, " column. For example, in this illustration the second input is referred to as ", {"type": "code", "text": ["$freq"]}, ", since it\u2019s second in the list. Similarly the fifth input is ", {"type": "code", "text": ["$scale"]}, ", since it is fifth in the list."], "extent": [2193, 2431]}, {"type": "para", "indent": 4, "text": [{"scheme": "Image", "value": "/images/ui/inline1.png", "type": "img", "text": ""}], "extent": [2431, 2467]}, {"type": "para", "indent": 4, "text": [{"scheme": "Image", "value": "/images/ui/inline2.png", "type": "img", "text": ""}], "extent": [2467, 2503]}], "container": true}], "container": true, "role": "item_group"}, {"level": 1, "id": "parameters", "container": true, "type": "parameters_section", "indent": 0, "role": "section", "extent": [2503, 2515], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 4, "text": ["Inline VEX Code"], "extent": [2515, 2536], "body": [{"type": "para", "indent": 8, "text": ["This parameter is where you write the VEX code that is to be put\n        in your shader."], "extent": [2536, 2633]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Include Files"], "extent": [2633, 2652], "body": [{"type": "para", "indent": 8, "text": ["List any files that need to be included at the start of your\n        shader. You can use this facility to write complex functions,\n        and then call them with a single line of VEX code in the ", {"type": "ui", "text": ["Inline\n        VEX Code"]}, " parameter. This is simply a list of files, such as\n        ", {"type": "code", "text": ["voplib.h shading.h"]}, "."], "extent": [2695, 3008]}], "container": true, "attrs": {"channels": "/usr/vex/myinclude.h\"."}, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Outer Code"], "extent": [3008, 3024], "body": [{"type": "para", "indent": 8, "text": ["This parameter specifies any VEX code that should appear outside\n        (before) the shader function definition. "], "extent": [3024, 3147]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Expand Expressions in Code"], "extent": [3147, 3179], "body": [{"type": "para", "indent": 8, "text": ["Since the ", {"type": "code", "text": ["$"]}, " has to be used for prefixing variables to avoid\n        variable name conflicts with other VOP nodes, no expression\n        evaluation is normally done in the ", {"type": "ui", "text": ["Inline VEX Code"]}, " or \n        ", {"type": "ui", "text": ["Outer Code"]}, " parameters.  \n        However, this means that ", {"type": "code", "text": ["chsraw()"]}, " references won\u2019t\n        work to pull in code snippets from elsewhere.  This option turns on the\n        expression evaluation."], "extent": [3179, 3593]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Input Name/Label"], "extent": [3593, 3615], "body": [{"type": "para", "indent": 8, "text": ["For each input connected to this operator you can specify the\n        name and label for the input. To change the name or label for an\n        input, enter the new string directly in the table presented. If\n        an empty string is specified in the table, the name and label\n        will be copied from the operator connected to each input."], "extent": [3615, 3966]}], "container": true, "role": "item"}, {"type": "parameters_item", "indent": 4, "text": ["Output N Type, Name, and Label"], "extent": [3966, 4002], "body": [{"type": "para", "indent": 8, "text": ["These parameters specify the name, label, and data type for\n        each output you wish to define."], "extent": [4002, 4110]}], "container": true, "role": "item"}], "container": true, "role": "item_group"}], "text": "Parameters"}, {"level": 1, "id": "inputs", "container": true, "type": "inputs_section", "indent": 0, "role": "section", "extent": [4110, 4118], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Next Input"], "extent": [4118, 4134], "body": [{"type": "para", "indent": 8, "text": ["Where the next input value should be connected. Up to 64 inputs\n        can be specified."], "extent": [4134, 4233]}], "container": true}], "container": true}], "text": "Inputs"}, {"level": 1, "id": "related", "container": true, "type": "related_section", "indent": 0, "role": "section", "extent": [4233, 4242], "body": [{"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": [{"scheme": "Node", "value": "/nodes/vop/print", "type": "link", "text": "", "fullpath": "/nodes/vop/print"}], "extent": [4242, 4265]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"scheme": "Node", "value": "/nodes/vop/snippet", "type": "link", "text": "", "fullpath": "/nodes/vop/snippet"}], "extent": [4265, 4290]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"scheme": "Node", "value": "/nodes/vop/subnet", "type": "link", "text": "", "fullpath": "/nodes/vop/subnet"}], "extent": [4290, 4314]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"scheme": "Node", "value": "/nodes/vop/subinput", "type": "link", "text": "", "fullpath": "/nodes/vop/subinput"}], "extent": [4314, 4340]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"scheme": "Node", "value": "/nodes/vop/suboutput", "type": "link", "text": "", "fullpath": "/nodes/vop/suboutput"}], "extent": [4340, 4368]}], "container": true}], "text": "Related"}], "title": ["Inline Code"], "summary": ["Write VEX code that is put directly into your shader or operator\ndefinition."]}