{"type": "root", "attrs": {"type": "node", "context": "vop", "internal": "lighting", "icon": "VOP/lighting", "version": null, "namespace": null}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["Lighting Model"], "extent": [67, 86]}, {"type": "summary", "indent": 0, "text": ["Performs a lighting model calculation to generate a color."], "extent": [86, 153]}, {"type": "para", "indent": 0, "text": ["The available lighting models are:"], "extent": [153, 189]}, {"lang": null, "type": "pre", "indent": 0, "text": ["\nConstant              (string \"constant\")\nHead Light            (string \"headlight\")\nLambertian            (string \"lambert\")\nOren-Nayar            (string \"oren\")\nPhong                 (string \"phong\")\nBlinn                 (string \"blinn\")\nAnisotropic Specular  (string \"anisotropic\")\nVEX Specular          (string \"specular\")\n"], "extent": [189, 526]}, {"type": "para", "indent": 0, "text": ["Constant simply assigns the diffuse (diff) value to the color. Like Head\nLight, Lambertian, and Oren-Nayar, it ignores specular color. Constant\nand Head Light also ignore the ambient color."], "extent": [526, 718]}, {"type": "para", "indent": 0, "text": ["Oren-Nayar, Phong, Blinn, and VEX Specular use only the first roughness\nparameter (", {"type": "code", "text": ["urough"]}, ") to simulate surface roughness."], "extent": [718, 843]}, {"type": "para", "indent": 0, "text": ["Anisotropic Specular, also known as the ", {"type": "q", "text": ["Ward model"]}, ", is the only model\nthat also uses the second roughness parameter (", {"type": "code", "text": ["vrough"]}, "). However, if\n", {"type": "code", "text": ["urough"]}, " equals ", {"type": "code", "text": ["vrough"]}, ", the specular highlight becomes isotropic. Many\nmaterials can be simulated with this lighting model:"], "extent": [843, 1112]}, {"lang": null, "type": "pre", "indent": 0, "text": ["\nMaterial            Diffuse  Specular U-Rough V-Rough\n---------------------------+---------+-------+-------\nRolled brass           .1      .33     .05     .16\nRolled aluminum        .1      .21     .04     .09\nBrushed aluminum       .15     .19     .088    .13\nVarnished plywood      .25     .025    .04     .11\nEnamel finished metal  .25     .047    .08     .096\nPainted cardboard box  .19     .043    .076    .085\nWhite ceramic tile     .7      .05     .071    .071\nGlossy grey paper      .29     .083    .082    .082\nIvory computer plastic .45     .043    .13     .13\nPlastic laminate       .67     .07     .092    .092\n"], "extent": [1112, 1743]}, {"type": "para", "indent": 0, "text": ["Avoid using the Anisotropic Specular model on non-subdivided polygonal\ngeometry because it will look flat shaded."], "extent": [1743, 1859]}, {"type": "para", "indent": 0, "text": ["The basic Phong model works well for plastics, while Oren-Nayar is good\nfor simulating clays. The Constant model can be used for mattes, and so\non."], "extent": [1859, 2008]}, {"type": "para", "indent": 0, "text": ["The input normal (", {"type": "code", "text": ["N"]}, ") and incident (", {"type": "code", "text": ["I"]}, ") directions should be normalized if\nexplicitly connected as inputs, and front-face calculation is optional\nbut recommended. If either direction is not connected, the global\nvariable by the same name will be used instead."], "extent": [2008, 2271]}, {"type": "para", "indent": 0, "text": ["Typically, applying a lighting model is the last thing you do before\nconnecting the resulting color to the ", {"scheme": "Node", "value": "/nodes/vop/output", "type": "link", "text": ["Output Variable node\u2019s"], "fullpath": "/nodes/vop/output"}, " ", {"type": "code", "text": ["Cf"]}, " input."], "extent": [2271, 2432]}, {"level": 1, "id": "related", "container": true, "type": "related_section", "indent": 0, "role": "section", "extent": [2432, 2441], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/vop/matte", "type": "link", "text": "", "fullpath": "/nodes/vop/matte"}], "extent": [2441, 2461]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/vop/shadowmatte", "type": "link", "text": "", "fullpath": "/nodes/vop/shadowmatte"}], "extent": [2461, 2486]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/vop/twosided", "type": "link", "text": "", "fullpath": "/nodes/vop/twosided"}], "extent": [2486, 2508]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/vop/twotone", "type": "link", "text": "", "fullpath": "/nodes/vop/twotone"}], "extent": [2508, 2530]}], "container": true}], "text": "Related"}], "title": ["Lighting Model"], "summary": ["Performs a lighting model calculation to generate a color."]}