{"type": "root", "attrs": {"type": "node", "context": "vop", "internal": "mtlximage", "icon": "COMMON/materialx", "version": null, "namespace": null}, "body": [{"type": "summary", "indent": 0, "text": ["Samples data from a single image, or from a layer within a multi-layer image."], "extent": [72, 157]}, {"level": 0, "type": "title", "indent": 0, "text": ["MtlX Image"], "extent": [157, 172]}, {"type": "para", "indent": 0, "text": [{"scheme": "Image", "value": "/images/nodes/vop/mtlximage.jpg", "type": "img", "text": ""}], "extent": [172, 214]}, {"type": "para", "indent": 0, "text": ["Samples data from a single image, or from a layer within a multi-layer image. When used in the context of rendering a geometry, the image is mapped onto the geometry based on geometry UV coordinates, with the lower-left corner of an image mapping to the (0,0) UV coordinate (or to the fractional (0,0) UV coordinate for tiled images)."], "extent": [214, 550]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Tips"], "extent": [550, 561], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": ["When reading normal maps, set the type to ", {"type": "code", "text": ["vector3"]}, ", to ensure colorspace is not applied to the incoming data."], "extent": [561, 676]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["MaterialX nodes don\u2019t currently support string inputs. Karma can substitute this node with a ", {"scheme": "Node", "value": "/nodes/vop/usduvtexture", "type": "link", "text": ["USD UV Texture"], "fullpath": "/nodes/vop/usduvtexture"}, "; this lets you control an image path with a string primvar."], "extent": [676, 871]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["Color space parameters are not yet supported by UsdMaterialX. See the ", {"scheme": null, "value": "user guide", "type": "link", "text": "", "fullpath": "/nodes/vop/user guide"}, " for more details on how Karma currently handles color spaces and texture maps."], "extent": [871, 1036]}], "container": true}]}, {"level": 1, "id": "parameters", "container": true, "type": "parameters_section", "indent": 0, "role": "section", "extent": [1036, 1048], "body": [{"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["Layer"], "extent": [1048, 1056], "body": [{"type": "para", "indent": 4, "text": ["If the file has multiple layers, then the 'default' layer will be used, or 'rgba' if there is no 'default' layer. If no value for layer is provided and the input file has multiple layers, then the 'default' layer will be used, or 'rgba' if there is no 'default' layer."], "extent": [1072, 1346]}, {"type": "note_group", "body": [{"type": "note", "indent": 4, "role": "item", "extent": [1346, 1356], "body": [{"type": "para", "indent": 8, "text": ["The number of channels defined by the type of the ", {"type": "em", "text": ["image"]}, " must match the number of channels in the named layer."], "extent": [1356, 1478]}], "container": true}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "layer"}, "role": "item"}], "container": true, "role": "item_group"}, {"level": 4, "type": "sep", "indent": 0, "text": [" Common Image Parameters "], "extent": [1478, 1512]}, {"type": "parameters_item_group", "body": [{"type": "parameters_item", "indent": 0, "text": ["File Name"], "extent": [2918, 2929], "body": [{"type": "para", "indent": 4, "text": ["The URI or path of an image file."], "extent": [2944, 2983]}, {"type": "warning_group", "body": [{"type": "warning", "indent": 4, "role": "item", "extent": [2983, 2996], "body": [{"type": "para", "indent": 8, "text": ["UsdMaterialX does not currently support the filename substitution tokens that MaterialX provides."], "extent": [2996, 3103]}], "container": true}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "file"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Default"], "extent": [3103, 3112], "body": [{"type": "para", "indent": 4, "text": ["A default value to use if the given ", {"type": "ui", "text": ["file"]}, " can not be resolved, or if the specified ", {"type": "ui", "text": ["layer"]}, " does not exist in the file. The default value must be the same type as the ", {"type": "em", "text": ["image"]}, " element itself, and must be a constant color (i.e. it cannot be a varying primvar or some other pattern or image)."], "extent": [3130, 3429]}, {"type": "para", "indent": 4, "text": ["If default is not defined, the default color value will be 0.0 in all channels."], "extent": [3429, 3514]}], "container": true, "attrs": {"id": "default"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Texture Coordinate"], "extent": [3514, 3534], "body": [{"type": "para", "indent": 4, "text": ["The name of a vector2-type node specifying the 2D texture coordinate at which the image data is read. Default is to use the current u,v coordinate."], "extent": [3557, 3710]}], "container": true, "attrs": {"id": "texcoord"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["UV Address Mode"], "extent": [3710, 3727], "body": [{"type": "para", "indent": 4, "text": ["Determines how UV coordinates outside the 0-1 range are processed before sampling the image. Each UV component can be set independently to one of these modes:"], "extent": [3751, 3915]}, {"type": "para", "indent": 4, "text": [{"scheme": "Image", "value": "/images/nodes/vop/mtlx_uvaddress_modes.jpg", "type": "img", "text": ""}], "extent": [3915, 3971]}, {"type": "table", "thead": [], "body": [{"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "em", "text": ["Constant"]}, " "], "role": "td", "extent": [3971, 3988], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Texture coordinates outside the 0-1 range return the value of the node\u2019s ", {"type": "em", "text": ["default"]}, " color or float parameter."], "extent": [3988, 4105]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "em", "text": ["Clamp"]}, " "], "role": "td", "extent": [4105, 4119], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Texture coordinates are clamped to the 0-1 range before sampling the image."], "extent": [4119, 4203]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "em", "text": ["Periodic"]}, " "], "role": "td", "extent": [4203, 4220], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Texture coordinates outside the 0-1 range ", {"type": "q", "text": ["wrap around"]}, ", effectively being processed by a modulo 1 operation before sampling the image."], "extent": [4220, 4364]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "em", "text": ["Mirror"]}, " "], "role": "td", "extent": [4364, 4379], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Texture coordinates outside the 0-1 range will be mirrored back into the 0-1 range, e.g. u=-0.01 will return the u=0.01 texture coordinate value, and u=1.01 will return the u=0.99 texture coordinate value."], "extent": [4379, 4594]}]}], "divider": false}]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["U Address Mode"], "extent": [4594, 4614], "body": [{"type": "para", "indent": 8, "text": ["Determines how U coordinates outside the 0-1 range are processed before sampling the image. Default is ", {"type": "em", "text": ["periodic"]}, "."], "extent": [4641, 4765]}], "container": true, "attrs": {"id": "uaddressmode"}}, {"type": "dt", "indent": 4, "text": ["V Address Mode"], "extent": [4765, 4785], "body": [{"type": "para", "indent": 8, "text": ["Determines how V coordinates outside the 0-1 range are processed before sampling the image. Default is ", {"type": "em", "text": ["periodic"]}, "."], "extent": [4812, 4936]}], "container": true, "attrs": {"id": "vaddressmode"}}], "container": true}], "container": true, "attrs": {"id": "uvaddressmode"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Filter Type"], "extent": [4936, 4949], "body": [{"type": "para", "indent": 4, "text": ["The type of texture filtering to use; standard values include 'closest' (nearest-neighbor single-sample), 'linear', and 'cubic'.  If not specified, an application may use its own default texture filtering method."], "extent": [4974, 5192]}], "container": true, "attrs": {"id": "filtertype"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Frame Range"], "extent": [5192, 5205], "body": [{"type": "para", "indent": 4, "text": ["A string 'minframe-maxframe', e.g. '10-99', to specify the range of frames that the image file is allowed to have, usually the range of image files on disk.  Default is unbounded"], "extent": [5230, 5414]}], "container": true, "attrs": {"id": "framerange"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Frame Offset"], "extent": [5414, 5428], "body": [{"type": "para", "indent": 4, "text": ["A number that is added to the current frame number to get the image file frame number.  E.g. if frameoffset is 25, then processing frame 100 will result in reading frame 125 from the imagefile sequence.  Default is no frame offset."], "extent": [5454, 5691]}], "container": true, "attrs": {"id": "frameoffset"}, "role": "item"}, {"type": "parameters_item", "indent": 0, "text": ["Frame End Action"], "extent": [5691, 5709], "body": [{"type": "para", "indent": 4, "text": ["What to do when the resolved image frame number is outside the framerange range."], "extent": [5738, 5822]}], "container": true, "attrs": {"id": "frameendaction"}, "role": "item"}], "container": true}], "text": "Parameters"}, {"level": 1, "id": "outputs", "container": true, "type": "outputs_section", "indent": 0, "role": "section", "extent": [1560, 1569], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 0, "text": ["Out"], "extent": [1569, 1575], "body": [{"type": "para", "indent": 4, "text": ["Output from the texture image."], "extent": [1589, 1625]}], "container": true, "attrs": {"id": "out"}}], "container": true}], "text": "Outputs"}, {"level": 1, "id": "related", "container": true, "type": "related_section", "indent": 0, "role": "section", "extent": [1625, 1634], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/vop/mtlxtiledimage", "type": "link", "text": ["MtlX Tiled Image"], "fullpath": "/nodes/vop/mtlxtiledimage"}], "extent": [1634, 1680]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/vop/usduvtexture", "type": "link", "text": ["USD UV Texture"], "fullpath": "/nodes/vop/usduvtexture"}], "extent": [1680, 1720]}], "container": true}], "text": "Related"}], "summary": ["Samples data from a single image, or from a layer within a multi-layer image."], "title": ["MtlX Image"], "included": ["/nodes/vop/_materialx"]}