{"type": "root", "attrs": {"type": "node", "context": "vop", "internal": "turbnoise", "icon": "VOP/turbnoise", "version": null, "namespace": null}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["Turbulent Noise"], "extent": [69, 89]}, {"type": "summary", "indent": 0, "text": ["Can compute three types of 1D and 3D noise with the ability to compute turbulence with roughness and attenuation."], "extent": [89, 211]}, {"type": "para", "indent": 0, "text": ["This operator can compute three types of 1D and 3D noise with the\nability to compute turbulence with roughness and attenuation:"], "extent": [211, 340]}, {"lang": null, "type": "pre", "indent": 0, "text": ["\nPerlin noise              (string value \"pnoise\")\nOriginal Perlin noise     (string value \"onoise\")\nSparse Convolution noise  (string value \"snoise\")\nAlligator noise           (string value \"anoise\")\nSimplex noise             (string value \"xnoise\")\nZero Centered Perlin      (string value \"correctnoise\")\n"], "extent": [340, 654]}, {"type": "para", "indent": 0, "text": ["Original Perlin noise is similar to Perlin noise, but marginally less\nefficient in computation and with different characteristics. The bounds\non the noise are roughly (-1, 1) when turbulence is 0."], "extent": [654, 853]}, {"type": "para", "indent": 0, "text": ["Perlin noise sums octaves of a noise with range about (0, 1), resulting in a\nnon-zero centered result. Thus the zero centered perlin better matches the\nranges of the other noise fields."], "extent": [853, 1040]}, {"type": "para", "indent": 0, "text": ["Sparse Convolution noise is similar to Worley noise. The noise returned\nis based on the weights of all of the closest points, with each point\u2019s\ncontribution based on a meta-ball like rolloff curve. That is, if the\nsample point is close to the sphere, its contribution will be greater.\nThe bounds on the noise are roughly (-1.7, 1.7) when turbulence is 0."], "extent": [1040, 1396]}, {"type": "para", "indent": 0, "text": ["Alligator noise is similar to Worley noise. It is currently not possible\nto simulate Alligator noise using the Worley functions, but it is\npossible to get a very similar 'look'. The bounds on the noise are\nroughly (0, 0.5) when turbulence is 0."], "extent": [1396, 1642]}, {"type": "para", "indent": 0, "text": ["Simplex noise is very close to Perlin noise, except with the samples on a\nsimplex mesh rather than a grid.  This results in less grid artifacts.  It also\nuses a higher order ", {"type": "code", "text": ["bspline"]}, " to provide better derivatives."], "extent": [1642, 1858]}, {"type": "para", "indent": 0, "text": ["The relative costs for computing noise of different types is roughly:"], "extent": [1858, 1929]}, {"lang": null, "type": "pre", "indent": 0, "text": ["\nCost | Noise Type\n-----+-------------------------\n 1.0 | Perlin Noise             (see Periodic Noise operator)\n 1.1 | Original Perlin Noise\n 1.8 | Worley Noise             (see Worley Noise operator)\n 1.8 | Periodic Worley Noise    (see Periodic Worley Noise operator)\n 2.1 | Sparse Convolution Noise\n 2.3 | Alligator Noise\n"], "extent": [1929, 2262]}, {"type": "para", "indent": 0, "text": ["Make sure at least the Position (", {"type": "code", "text": ["pos"]}, ") input is connected in order to\nnotice any noise. The easiest way to accomplish this is to pipe the\nglobal variable ", {"type": "code", "text": ["P"]}, " into the ", {"type": "code", "text": ["pos"]}, " input. All global variables are\naccessible from the ", {"scheme": "Node", "value": "/nodes/vop/global", "type": "link", "text": ["Global Variables"], "fullpath": "/nodes/vop/global"}, " operator."], "extent": [2262, 2537]}, {"level": 1, "id": "related", "container": true, "type": "related_section", "indent": 0, "role": "section", "extent": [2537, 2546], "body": [{"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": [{"scheme": "Node", "value": "/nodes/vop/periodicnoise", "type": "link", "text": "", "fullpath": "/nodes/vop/periodicnoise"}], "extent": [2546, 2577]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"scheme": "Node", "value": "/nodes/vop/aanoise", "type": "link", "text": "", "fullpath": "/nodes/vop/aanoise"}], "extent": [2577, 2602]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"scheme": "Node", "value": "/nodes/vop/worleynoise", "type": "link", "text": "", "fullpath": "/nodes/vop/worleynoise"}], "extent": [2602, 2631]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"scheme": "Node", "value": "/nodes/vop/pworleynoise", "type": "link", "text": "", "fullpath": "/nodes/vop/pworleynoise"}], "extent": [2631, 2662]}], "container": true}], "text": "Related"}], "title": ["Turbulent Noise"], "summary": ["Can compute three types of 1D and 3D noise with the ability to compute turbulence with roughness and attenuation."]}