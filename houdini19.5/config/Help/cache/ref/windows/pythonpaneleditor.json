{"type": "root", "attrs": {"helpid": "h.pythonpanel.editor"}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["Python Panel Editor"], "extent": [0, 24]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Overview"], "extent": [56, 71], "body": [{"type": "para", "indent": 0, "text": ["The Python Panel Editor window lets you create, edit and delete PySide2 or PyQt5 interfaces that can be displayed in Python Panel panes.  The editor also lets you manage the entries in the Python Panel interfaces menu as well as the entries in the Houdini pane tab menu."], "extent": [71, 344]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Requirements"], "extent": [344, 365], "body": [{"type": "para", "indent": 0, "text": ["There are no requirements when building PySide2 interfaces.  Houdini ships with PySide2 modules out-of-the-box."], "extent": [365, 479]}, {"type": "para", "indent": 0, "text": ["To build interfaces with PyQt5, install the PyQt5 modules on your system.  Houdini does its best to find the PyQt5 modules automatically however, if the modules cannot be found then add the installed location to the Python search path."], "extent": [479, 716]}, {"type": "para", "indent": 0, "text": ["For example, if PyQt5 is installed at ", {"type": "code", "text": ["/path/to/site-packages/PyQt5"]}, ", then set ", {"type": "code", "text": ["PYTHONPATH=/path/to/site-packages"]}, " in your environment before starting Houdini.  Alternatively, append ", {"type": "code", "text": ["/path/to/site-packages"]}, " to the search path through Python code like so:"], "extent": [716, 973]}, {"lang": "python", "type": "pre", "indent": 0, "text": ["\n\n# Modify search path\nimport sys\nsys.path.append(\"/path/to/site-packages\")\n\n# Now you can import PyQt5\nfrom PyQt5 import QtWidgets\n"], "extent": [973, 1121]}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["New to Houdini 17.0"], "extent": [1121, 1150], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": ["Houdini 17.0 only supports Python Panels built with PySide2 or PyQt5.  PySide\n  and PyQt4 are no longer supported."], "extent": [1150, 1269]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["You can specify the placement of your interface in the pane tab type menu\n  using the new PaneTabTypeMenu.xml file.  See the ", {"scheme": null, "value": "/ref/windows/pythonpaneleditor#pane-tab-type-menu", "type": "link", "text": ["Pane tab type\n  menu"], "fullpath": "/ref/windows/pythonpaneleditor#pane-tab-type-menu", "fragment": "#pane-tab-type-menu"}, " section for details."], "extent": [1269, 1491]}], "container": true}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Creating and Editing Interfaces"], "extent": [1491, 1531], "body": [{"type": "ord_group", "body": [{"blevel": 2, "type": "ord", "indent": 0, "text": ["Open the Python Panel Editor from the Windows menu or from the ", {"scheme": "Icon", "value": "BUTTONS/gear", "type": "link", "text": "", "fullpath": "/ref/windows/BUTTONS/gear"}, " toolbar button in a Python Panel pane tab."], "extent": [1531, 1661]}, {"blevel": 2, "type": "ord", "indent": 0, "text": ["To create a new interface definition, choose the ", {"type": "ui", "text": ["Interfaces"]}, " tab and click the ", {"type": "ui", "text": ["New Interface"]}, " button. The interface will be loaded in the editor and added to the menu list."], "extent": [1661, 1843]}, {"blevel": 2, "type": "ord", "indent": 0, "text": ["To edit an existing interface, select the interface from the drop down menu on the ", {"type": "ui", "text": ["Interfaces"]}, " tab."], "extent": [1843, 1949]}, {"blevel": 2, "type": "ord", "indent": 0, "text": ["Edit the name, label, icon using the interface editor."], "extent": [1949, 2007]}, {"blevel": 2, "type": "ord", "indent": 0, "text": ["Write Python code in the script text area which builds the interface.  An ", {"type": "code", "text": ["onCreateInterface()"]}, " function must be defined which returns the root widget of your interface.  The returned root widget is embedded in the Python Panel."], "extent": [2007, 2239]}, {"blevel": 2, "type": "ord", "indent": 0, "text": ["Save changes by pressing the Accept or Apply button."], "extent": [2239, 2295]}], "container": true}]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Editing the Interface Menu"], "extent": [2295, 2328], "body": [{"type": "ord_group", "body": [{"blevel": 2, "type": "ord", "indent": 0, "text": ["Open the Python Panel Editor from the ", {"type": "ui", "text": ["Windows"]}, " menu or from the ", {"scheme": "Icon", "value": "BUTTONS/gear", "type": "link", "text": "", "fullpath": "/ref/windows/BUTTONS/gear"}, " toolbar button in a Python Panel pane tab."], "extent": [2328, 2462]}, {"blevel": 2, "type": "ord", "indent": 0, "text": ["Select the ", {"type": "ui", "text": ["Edit Menu"]}, " tab in the editor."], "extent": [2462, 2509]}, {"blevel": 2, "type": "ord", "indent": 0, "text": ["Drag and drop available interface definitions from the list on the left and into the menu list on the right. Entries in the menu list can also be reordered using drag and drop.  You can alternatively use the ", {"scheme": "Icon", "value": "BUTTONS/move_to_right", "type": "link", "text": "", "fullpath": "/ref/windows/BUTTONS/move_to_right"}, " button to add entries to the menu and the ", {"scheme": "Icon", "value": "BUTTONS/move_to_left", "type": "link", "text": "", "fullpath": "/ref/windows/BUTTONS/move_to_left"}, " button to remove entries. Multiple entries can be moved at the same time."], "extent": [2509, 2893]}], "container": true}, {"type": "note_group", "body": [{"type": "note", "indent": 0, "role": "item", "extent": [2893, 2899], "body": [{"type": "para", "indent": 4, "text": ["When editing the pane tab type menu note that any interfaces that are\n    already specified in the pane tab type menu XML file, PaneTabTypeMenu.xml,\n    are ignored from the Python Panel menu definition.  See the ", {"scheme": null, "value": "/ref/windows/pythonpaneleditor#pane-tab-type-menu", "type": "link", "text": ["Pane tab type\n    menu"], "fullpath": "/ref/windows/pythonpaneleditor#pane-tab-type-menu", "fragment": "#pane-tab-type-menu"}, " section for\n    details."], "extent": [2899, 3217]}], "container": true}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Deleting Interfaces"], "extent": [3217, 3243], "body": [{"type": "ord_group", "body": [{"blevel": 2, "type": "ord", "indent": 0, "text": ["Open the Delete Interfaces dialog from the Python Panel Editor or from the ", {"scheme": "Icon", "value": "BUTTONS/gear", "type": "link", "text": "", "fullpath": "/ref/windows/BUTTONS/gear"}, " toolbar button in a Python Panel pane tab."], "extent": [3243, 3385]}, {"blevel": 2, "type": "ord", "indent": 0, "text": ["In the dialog, select the interfaces to delete from the list. Multiple interfaces can be selected by holding the ", {"keys": ["Ctrl"], "type": "keys", "text": null}, " key during selection."], "extent": [3385, 3532]}, {"blevel": 2, "type": "ord", "indent": 0, "text": ["Press the ", {"type": "ui", "text": ["Delete"]}, " button to the delete the selected entries. A confirmation dialog will display before entries are deleted."], "extent": [3532, 3662]}], "container": true}, {"type": "warning_group", "body": [{"type": "warning", "indent": 0, "role": "item", "extent": [3662, 3671], "body": [{"type": "para", "indent": 4, "text": ["The deletion process is irreversible since interface definitions are also deleted from disk. To remove entries from the interface menu without deleting the definitions, please refer to the Editing the Interface Menu section above."], "extent": [3671, 3907]}], "container": true}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Interfaces tab"], "extent": [3907, 3928], "body": [{"type": "para", "indent": 0, "text": ["The interfaces tab is used to create and edit Python interfaces. The drop down\nmenu at the top can be used to select which interface to edit. ", {"type": "ui", "text": ["New\nInterface"]}, " creates a new interface and loads it into the editor. ", {"type": "ui", "text": ["Delete\nInterface"]}, " displays a dialog with a list of all interfaces that can be\ndeleted."], "extent": [3928, 4234]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 0, "text": ["Save To"], "extent": [4234, 4243], "body": [{"type": "para", "indent": 4, "text": ["The file path that the interface definition is saved to. The file\n    must be writeable by Houdini for changes to be saved correctly. If the path\n    is not writeable then an error message is displayed when attempting to\n    apply changes to the interface. The file path can be typed manually or\n    selected using the file browser on the right of the field."], "extent": [4264, 4628]}], "container": true, "attrs": {"id": "saveto"}}, {"type": "dt", "indent": 0, "text": ["Name"], "extent": [4628, 4634], "body": [{"type": "para", "indent": 4, "text": ["The internal name of the interface.  This must be unique across all loaded\n    Python interfaces.  That is, at most one interface is loaded into for a\n    given internal name.  The name must start with a letter and can contain\n    letters, numbers, and/or underscores."], "extent": [4653, 4927]}], "container": true, "attrs": {"id": "name"}}, {"type": "dt", "indent": 0, "text": ["Label"], "extent": [4927, 4934], "body": [{"type": "para", "indent": 4, "text": ["The human-readable name of the interface. The label is used in the Python\n    Panel pane tab and in the menu interfaces menu.  Multiple interfaces may\n    share the same Label."], "extent": [4954, 5136]}], "container": true, "attrs": {"id": "label"}}, {"type": "dt", "indent": 0, "text": ["Icon"], "extent": [5136, 5142], "body": [{"type": "para", "indent": 4, "text": ["Internal name, file path, or URL of the icon to use for the interface."], "extent": [5161, 5237]}, {"type": "para", "indent": 4, "text": ["Click the chooser button at the right end of the field to choose a file.\n    Note that you can choose a file contained in a digital asset (click\n    ", {"type": "code", "text": ["opdef:"]}, " on the left side of the file chooser)."], "extent": [5237, 5443]}, {"type": "para", "indent": 4, "text": ["If you don\u2019t supply an absolute path or URL, Houdini will look for the\n    icon using the path in the ", {"type": "code", "text": ["$HOUDINI_UI_ICON_PATH"]}, " environment variable."], "extent": [5443, 5600]}, {"type": "para", "indent": 4, "text": ["You can use an SVG file or any image format Houdini supports (such\n    as PNG or ", {"type": "code", "text": [".pic"]}, "). The icon image should be square."], "extent": [5600, 5732]}, {"type": "para", "indent": 4, "text": ["Houdini ships with a number of stock SVG icons. You can see bitmap\n    representations of these icons in ", {"type": "code", "text": ["$HFS/houdini/help/icons/large"]}, ". To specify a\n    stock icon, use the form ", {"type": "code", "text": [{"type": "var", "text": ["dirname"]}, "_", {"type": "var", "text": ["filename"]}]}, ", where\u2026"], "extent": [5732, 5958]}, {"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "var", "text": ["dirname"]}, " is the directory name under ", {"type": "code", "text": ["$HFS/houdini/help/icons/large"]}, ", such as ", {"type": "code", "text": ["OBJ"]}, ", ", {"type": "code", "text": ["SHELF"]}, ", or ", {"type": "code", "text": ["MISC"]}, ", and"], "extent": [5958, 6076]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "var", "text": ["filename"]}, " is the icon\u2019s filename minus any extension. For example, ", {"type": "code", "text": ["OBJ_sticky"]}, " specifies the standard icon for the Sticky object."], "extent": [6076, 6217]}], "container": true}], "container": true, "attrs": {"id": "icon"}}, {"type": "dt", "indent": 0, "text": ["Show Network Navigation Bar"], "extent": [6217, 6246], "body": [{"type": "para", "indent": 4, "text": ["When checked on, the pane tab containing the Python Panel interface will\n    show the controls for navigating around the Houdini network."], "extent": [6283, 6426]}], "container": true, "attrs": {"id": "show_network_navigation_bar"}}, {"type": "dt", "indent": 0, "text": ["Menu Hints"], "extent": [6426, 6438], "body": [{"type": "para", "indent": 4, "text": ["When no menu definition is loaded from disk then the interface menu hints\n    are used to instruct Houdini on whether to include the interface in the\n    menu and where to insert the interface into the menu."], "extent": [6459, 6672]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Include in Toolbar Menu"], "extent": [6672, 6701], "body": [{"type": "para", "indent": 8, "text": ["Check this option to include the interface in the toolbar menu\n        when no toolbar menu definition has been loaded from disk."], "extent": [6739, 6878]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["Menu Position"], "extent": [6878, 6901], "body": [{"type": "para", "indent": 12, "text": ["The position where the interface should be inserted into the menu.\n            The position is not absolute but instead relative to the specified\n            positions of the other interfaces.  For example, suppose there are\n            three interfaces in Houdini \u2013 interface A with position 4,\n            interface B with position 1 and interface C with position 25.  Then\n            interface B will appear first in the menu followed by A and then\n            followed by C."], "extent": [6941, 7435]}], "container": true, "attrs": {"id": "toolbar_menu_position"}}, {"type": "dt", "indent": 8, "text": ["Create Preceding Separator"], "extent": [7435, 7471], "body": [{"type": "para", "indent": 12, "text": ["Check this option to create a separator immediately before the\n            interface in the menu."], "extent": [7517, 7628]}], "container": true, "attrs": {"id": "create_separator_in_toolbar"}}], "container": true}], "container": true, "attrs": {"id": "include_in_toolbar_menu"}}, {"type": "dt", "indent": 4, "text": ["Include in Pane Tab Menu"], "extent": [7628, 7658], "body": [{"type": "para", "indent": 8, "text": ["Check this option to include the interface in the panetab menu when no panetab menu definition has been loaded from disk."], "extent": [7696, 7827]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["Menu Position"], "extent": [7827, 7850], "body": [{"type": "para", "indent": 12, "text": ["The position where the interface should be inserted into the menu.\n            The position is not absolute but instead relative to the specified\n            positions of the other interfaces.  For example, suppose there are\n            three interfaces in Houdini \u2013 interface A with position 4,\n            interface B with position 1 and interface C with position 25.  Then\n            interface B will appear first in the menu followed by A and then\n            followed by C."], "extent": [7890, 8384]}], "container": true, "attrs": {"id": "panetab_menu_position"}}, {"type": "dt", "indent": 8, "text": ["Create Preceding Separator"], "extent": [8384, 8420], "body": [{"type": "para", "indent": 12, "text": ["Check this option to create a separator immediately before the\n            interface in the menu."], "extent": [8466, 8577]}], "container": true, "attrs": {"id": "create_separator_in_panetab"}}], "container": true}], "container": true, "attrs": {"id": "include_in_panetab_menu"}}], "container": true}, {"type": "note_group", "body": [{"type": "note", "indent": 4, "role": "item", "extent": [8577, 8587], "body": [{"type": "para", "indent": 12, "text": ["If a menu definition has been loaded from disk then Houdini will ignore the interface\u2019s menu hints.  In this case a warning will appear below the menu hints."], "extent": [8587, 8758]}], "container": true}, {"type": "note", "indent": 4, "role": "item", "extent": [8758, 8768], "body": [{"type": "para", "indent": 12, "text": ["Menu hints for the pane tab type menu are also ignored if the interface has already been specified in the pane tab type menu XML file, ", {"type": "code", "text": ["PaneTabTypeMenu.xml"]}, ".  See the ", {"scheme": null, "value": "/ref/windows/pythonpaneleditor#pane-tab-type-menu", "type": "link", "text": ["Pane tab type menu"], "fullpath": "/ref/windows/pythonpaneleditor#pane-tab-type-menu", "fragment": "#pane-tab-type-menu"}, " section for details."], "extent": [8768, 9040]}], "container": true}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "menu_hints"}}, {"type": "dt", "indent": 0, "text": ["Parameters Pane Hints"], "extent": [9040, 9063], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 4, "text": ["Show in Parameters Pane"], "extent": [9089, 9118], "body": [{"type": "para", "indent": 8, "text": ["Check this option to show the interface in the Parameters pane.\n        The interface takes the place of the regular parameters dialog."], "extent": [9150, 9295]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 8, "text": ["For Operators"], "extent": [9295, 9318], "body": [{"type": "para", "indent": 12, "text": ["A comma-separated list of node operator types.  The interface will\n            be shown in the Parameters pane for any node whose operator type\n            matches any type in the list."], "extent": [9353, 9552]}, {"type": "para", "indent": 12, "text": ["You can specify an operator type pattern and use wildcards to match\n            multiple operator types."], "extent": [9552, 9670]}, {"type": "para", "indent": 12, "text": ["Examples:"], "extent": [9670, 9692]}, {"type": "bullet_group", "body": [{"blevel": 14, "type": "bullet", "indent": 12, "text": [{"type": "code", "text": ["Sop/null"]}, " matches Null SOP nodes."], "extent": [9692, 9741]}, {"blevel": 14, "type": "bullet", "indent": 12, "text": [{"type": "code", "text": ["Sop/*"]}, " matches all SOP nodes."], "extent": [9741, 9786]}, {"blevel": 14, "type": "bullet", "indent": 12, "text": [{"type": "code", "text": ["Sop/*, Object/null"]}, " matches all SOP nodes and Null OBJ nodes."], "extent": [9786, 9864]}], "container": true}, {"type": "para", "indent": 12, "text": ["Namespaces and version tags can also be specified in the operator\n            type pattern."], "extent": [9864, 9969]}, {"type": "para", "indent": 12, "text": ["For example:"], "extent": [9969, 9994]}, {"type": "bullet_group", "body": [{"blevel": 14, "type": "bullet", "indent": 12, "text": [{"type": "code", "text": ["namespaceX::Sop/null::2.0"]}, " matches version 2.0 of the custom\n              Null SOP defined in the ", {"type": "q", "text": ["namespaceX"]}, " namespace."], "extent": [9994, 10133]}], "container": true}], "container": true, "attrs": {"id": "parm_pane_optype"}}], "container": true}], "container": true, "attrs": {"id": "show_in_parm_pane"}}], "container": true}, {"type": "note_group", "body": [{"type": "note", "indent": 4, "role": "item", "extent": [10133, 10143], "body": [{"type": "para", "indent": 8, "text": ["The parameters dialog embedded in the Network View pane is also\n        affected by the Parameters Pane Hints parameters."], "extent": [10143, 10274]}], "container": true}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "parm_pane_hints"}}, {"type": "dt", "indent": 0, "text": ["Script"], "extent": [10274, 10282], "body": [{"type": "para", "indent": 4, "text": ["The script definition for the Python interface. This is where PySide2 or\n    PyQt5 code is written to build the interface. When the interface is loaded\n    in a Python Panel, the script is executed and the root widget returned by\n    the ", {"type": "code", "text": ["onCreateInterface()"]}, " function is embedded into the panel."], "extent": [10303, 10605]}, {"type": "para", "indent": 4, "text": ["Python Panels recognize and execute the following functions when certain\n    events occur:"], "extent": [10605, 10705]}, {"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["onCreateInterface()"]}, "  \u2192 ", {"type": "code", "text": ["PySide2.QWidget or PyQt5.QWidget"]}], "extent": [10705, 10771], "body": [{"type": "para", "indent": 8, "text": ["Executed when the Python Panel creates the Qt interface.\n        The function must return the root Qt widget of the interface."], "extent": [10771, 10907]}], "container": true}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["onDestroyInterface()"]}], "extent": [10907, 10936], "body": [{"type": "para", "indent": 8, "text": ["Executed when the Python Panel is about to destroy the Qt interface.\n        This can happen when the Python Panel pane tab is closed or if\n        the interface is reloaded."], "extent": [10936, 11120]}], "container": true}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["onActivateInterface()"]}], "extent": [11120, 11150], "body": [{"type": "para", "indent": 8, "text": ["Executed when the interface becomes active and visible."], "extent": [11150, 11215]}], "container": true}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["onDeactivateInterface()"]}], "extent": [11215, 11247], "body": [{"type": "para", "indent": 8, "text": ["Executed when the interface becomes inactive and hidden."], "extent": [11247, 11313]}], "container": true}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["onHipFileBeforeClear()"]}], "extent": [11313, 11344], "body": [{"type": "para", "indent": 8, "text": ["Executed before the hip file clear operation is performed."], "extent": [11344, 11412]}], "container": true}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["onHipFileAfterClear()"]}], "extent": [11412, 11442], "body": [{"type": "para", "indent": 8, "text": ["Executed after the hip file clear operation is performed."], "extent": [11442, 11509]}], "container": true}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["onHipFileBeforeLoad()"]}], "extent": [11509, 11539], "body": [{"type": "para", "indent": 8, "text": ["Executed before the hip file load operation is performed."], "extent": [11539, 11606]}], "container": true}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["onHipFileAfterLoad()"]}], "extent": [11606, 11635], "body": [{"type": "para", "indent": 8, "text": ["Executed after the hip file load operation is performed."], "extent": [11635, 11701]}], "container": true}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["onHipFileBeforeMerge()"]}], "extent": [11701, 11732], "body": [{"type": "para", "indent": 8, "text": ["Executed before the hip file merge operation is performed."], "extent": [11732, 11800]}], "container": true}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["onHipFileAfterMerge()"]}], "extent": [11800, 11830], "body": [{"type": "para", "indent": 8, "text": ["Executed after the hip file merge operation is performed."], "extent": [11830, 11897]}], "container": true}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["onHipFileBeforeSave()"]}], "extent": [11897, 11927], "body": [{"type": "para", "indent": 8, "text": ["Executed before the hip file save operation is performed."], "extent": [11927, 11994]}], "container": true}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["onHipFileAfterSave()"]}], "extent": [11994, 12023], "body": [{"type": "para", "indent": 8, "text": ["Executed after the hip file save operation is performed."], "extent": [12023, 12089]}], "container": true}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["onNodePathChanged(node)"]}], "extent": [12089, 12121], "body": [{"type": "para", "indent": 8, "text": ["Executed when Houdini has changed the current node.\n        This function hook is useful for when your Python Panel interface is\n        interested in following navigation around the Houdini node network."], "extent": [12121, 12335]}, {"type": "para", "indent": 8, "text": [{"type": "code", "text": ["node"]}, " is the current node and is a ", {"scheme": "Hom", "value": "/hom/hou/Node", "type": "link", "text": "", "fallback_text": "hou.Node", "fullpath": "/hom/hou/Node"}, " object.\n        If there is no current node then ", {"type": "code", "text": ["node"]}, " is set to ", {"type": "code", "text": ["None"]}, "."], "extent": [12335, 12469]}, {"type": "para", "indent": 8, "text": ["Note that this function hook is also called when the Python Panel\n        interface is first loaded."], "extent": [12469, 12579]}], "container": true}], "container": true}, {"type": "para", "indent": 4, "text": ["Only the ", {"type": "code", "text": ["onCreateInterface()"]}, " function is required by the interface.\n    The other functions are optional."], "extent": [12579, 12697]}, {"type": "note_group", "body": [{"type": "note", "indent": 4, "role": "item", "extent": [12697, 12707], "body": [{"type": "para", "indent": 12, "text": ["In older Houdini versions, the ", {"type": "code", "text": ["createInterface()"]}, " function was required.  This function is now deprecated and replaced by ", {"type": "code", "text": ["onCreateInterface()"]}, "."], "extent": [12707, 12866]}], "container": true}, {"type": "note", "indent": 4, "role": "item", "extent": [12866, 12876], "body": [{"type": "para", "indent": 12, "text": ["The kwargs dictionary is available in the interface script.  The dictionary contains the following entries:"], "extent": [12876, 12996]}, {"type": "bullet_group", "body": [{"blevel": 14, "type": "bullet", "indent": 12, "text": [{"type": "em", "text": ["paneTab"]}, " - The pane tab (", {"scheme": "Hom", "value": "/hom/hou/PaneTab", "type": "link", "text": "", "fallback_text": "hou.PaneTab", "fullpath": "/hom/hou/PaneTab"}, ") that contains the interface.\n              It is recommended that the result of ", {"type": "code", "text": ["kwargs[\"paneTab\"]"]}, " not be stored in a persistent variable because the ", {"scheme": "Hom", "value": "/hom/hou/PaneTab", "type": "link", "text": "", "fallback_text": "hou.PaneTab", "fullpath": "/hom/hou/PaneTab"}, " object may not be valid later on.  For example, switching to another pane tab type and then back to the Python Panel can cause the old pane tab object to be deleted and a new one created.  Instead, always call ", {"type": "code", "text": ["kwargs[\"paneTab\"]"]}, " when you need to access the pane tab."], "extent": [12996, 13493]}], "container": true}, {"type": "para", "indent": 12, "text": ["Here is an example of using kwargs in the script:"], "extent": [13493, 13555]}, {"lang": "python", "type": "pre", "indent": 12, "text": ["\n            from PySide2 import QtWidgets\n    \n            def onCreateInterface():\n                panetab = kwargs[\"paneTab\"]\n    \n                label = QtWidgets.QLabel()\n                label.setText(\"Running in pane tab '%s'\" % panetab.name())\n                return label\n            "], "extent": [13555, 13888]}], "container": true}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "script"}}], "container": true}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Menu tab"], "extent": [13888, 13904], "body": [{"type": "para", "indent": 0, "text": ["The menu tab can be used to reorder the entries in the interface drop down menu\nand to add separators between entries. Only entries in the menu are \ndisplayed when selecting an interface from within a Python Panel."], "extent": [13904, 14121]}, {"type": "para", "indent": 0, "text": ["On the left of the menu tab is a list of all interfaces currently loaded into\nHoudini. The list on the right displays the current state of the Python Panel\nmenu. Entries can be added and removed from the Menu Entries list using drag\nand drop actions or by clicking the arrows between the lists."], "extent": [14121, 14417]}, {"type": "para", "indent": 0, "text": ["Only a single copy of an interface can be in the menu at a given time, so\nAvailable Interfaces entries are disabled once they have been added to the\nmenu. An unlimited number of separators can be added to the Menu Entries list."], "extent": [14417, 14646]}, {"type": "para", "indent": 0, "text": ["The ", {"type": "ui", "text": ["Save To"]}, " field indicates which file the menu is saved to. This file must\nbe writeable by Houdini."], "extent": [14646, 14752]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Pane tab type menu"], "extent": [14752, 14777], "body": [{"type": "para", "indent": 0, "text": ["Aside from using menu hints or creating a Python Panel menu definition you can\ninsert Python Panel interfaces into the pane tab type menu using the menu\u2019s\nXML definition file, PaneTabTypeMenu.xml."], "extent": [14777, 14976]}, {"type": "para", "indent": 0, "text": ["There are several benefits to using the XML definition file:"], "extent": [14976, 15037]}, {"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": ["You can insert your interface anywhere in the pane tab type menu instead of\n  inserting only at the bottom of the menu."], "extent": [15037, 15159]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["You can place your interface in a submenu."], "extent": [15159, 15204]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["You can add an expression filter so that the interface appears in the menu\n  only when certain conditions are met."], "extent": [15204, 15323]}], "container": true}, {"type": "para", "indent": 0, "text": ["To insert the interface into the pane tab type menu using XML:"], "extent": [15323, 15386]}, {"type": "ord_group", "body": [{"blevel": 2, "type": "ord", "indent": 0, "text": ["Make a copy of ", {"type": "code", "text": ["$HFS/houdini/PaneTabTypeMenu.xml"]}, "."], "extent": [15386, 15439]}, {"blevel": 2, "type": "ord", "indent": 0, "text": ["Paste the copy into your Houdini user preferences directory (", {"type": "code", "text": ["$HOME/houdiniX.Y"]}, " on Linux and Windows, ", {"type": "code", "text": ["$HOME/Library/Preferences/houdini/X.Y"]}, " on macOS)."], "extent": [15439, 15594]}, {"blevel": 2, "type": "ord", "indent": 0, "text": ["In the pasted file,\nplace a new ", {"type": "code", "text": ["<actionItem>"]}, " element into the XML with the ", {"type": "code", "text": ["id"]}, " property set to\n", {"type": "q", "text": ["pythonpanel::<interface_name>"]}, "."], "extent": [15594, 15728], "body": [{"type": "dt_group", "body": [{"type": "dt", "indent": 2, "text": ["For example, suppose you had a Python Panel interface named ", {"type": "q", "text": ["myInterface"]}, ",\n  then your new action item would look like this~"], "extent": [15728, 15856], "body": [{"lang": "xml", "type": "pre", "indent": 4, "text": ["\n    <actionItem id=\"pythonpanel::myInterface\">\n        <label>Label for My Interface</label>\n    </actionItem>\n    "], "extent": [15856, 15993]}], "container": true}], "container": true}], "container": true}], "container": true}, {"type": "para", "indent": 0, "text": ["You can alternatively use any of the ", {"type": "code", "text": ["insertBefore"]}, " or ", {"type": "code", "text": ["insertAfter"]}, " elements\nthat are described in ", {"scheme": null, "value": "/basics/config_menus#reorganizing-menus", "type": "link", "text": ["Reorganizing\nmenus"], "fullpath": "/basics/config_menus#reorganizing-menus", "fragment": "#reorganizing-menus"}, " to insert the interface into the\nmenu without making a full copy of PaneTabTypeMenu.xml file."], "extent": [15993, 16250]}, {"type": "para", "indent": 0, "text": ["For more information on customizing menus in Houdini, see ", {"scheme": null, "value": "/basics/config_menus", "type": "link", "text": "", "fullpath": "/basics/config_menus"}, "."], "extent": [16250, 16333]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Python Panel files"], "extent": [16333, 16358], "body": [{"type": "para", "indent": 0, "text": ["Python Panel menu and interface definitions are stored in ", {"type": "code", "text": [".pypanel"]}, " files on disk."], "extent": [16358, 16444]}, {"type": "para", "indent": 0, "text": ["When Houdini starts up, it searches for ", {"type": "code", "text": [".pypanel"]}, " files in ", {"type": "code", "text": ["$HFS/houdini/python_panels"]}, " and then in ", {"type": "code", "text": ["$HOUDINI_USER_PREF_DIR/python_panels"]}, " by default and loads the definitions stored in those files."], "extent": [16444, 16645]}, {"type": "para", "indent": 0, "text": ["If ", {"type": "code", "text": ["$HOUDINI_PATH"]}, " is set, then Houdini instead searches for files in the ", {"type": "code", "text": ["python_panels"]}, " subdirectory for each path listed in ", {"type": "code", "text": ["$HOUDINI_PATH"]}, "."], "extent": [16645, 16790]}, {"type": "para", "indent": 0, "text": ["You can override the search path by setting ", {"type": "code", "text": ["$HOUDINI_PYTHON_PANEL_PATH"]}, "."], "extent": [16790, 16865]}, {"type": "note_group", "body": [{"type": "note", "indent": 0, "role": "item", "extent": [16865, 16871], "body": [{"type": "para", "indent": 4, "text": ["Houdini loads ", {"type": "code", "text": [".pypanel"]}, " files in the order of the directories specified by\n    ", {"type": "code", "text": ["$HOUDINI_PYTHON_PANEL_PATH"]}, " and then in alphabetical order by filename."], "extent": [16871, 17029]}, {"type": "para", "indent": 4, "text": ["If multiple Python Panel interfaces with the same internal name are found\n    on disk, then Houdini uses the last interface definition that it\n    loaded.  "], "extent": [17029, 17191]}, {"type": "para", "indent": 4, "text": ["Similarly, Houdini uses the last interfaces menu definition that it loaded."], "extent": [17191, 17272]}], "container": true}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Examples"], "extent": [17272, 17287], "body": [{"tag": "table", "attrs": {"class": "examplestable"}, "type": "xml", "text": ["\n", {"tag": "tbody", "attrs": {}, "type": "xml", "text": ["\n    ", {"tag": "tr", "attrs": {}, "type": "xml", "text": ["\n        ", {"tag": "th", "attrs": {}, "type": "xml", "text": ["Example name"]}, "\n        ", {"tag": "th", "attrs": {}, "type": "xml", "text": []}, "\n    "]}, "\n    ", {"tag": "tr", "attrs": {}, "type": "xml", "text": ["\n        ", {"tag": "td", "attrs": {"class": "examplelink"}, "type": "xml", "text": ["Linked Parameters"]}, "\n        ", {"tag": "td", "attrs": {"class": "exampleload"}, "type": "xml", "text": [{"tag": "strong", "attrs": {}, "type": "xml", "text": [{"tag": "a", "attrs": {"href": "javascript:loadExample('/examples/python_panels/linkedparameters.pypanel', false)"}, "type": "xml", "text": ["Load"]}]}, "\n        "]}, "\n    "]}, "\n    ", {"tag": "tr", "attrs": {}, "type": "xml", "text": ["\n        ", {"tag": "td", "attrs": {"colspan": "2", "class": "exampletext"}, "type": "xml", "text": ["\n        ", {"tag": "p", "attrs": {}, "type": "xml", "text": ["This example demonstrates how to link PySide2 parameter widgets (i.e. text fields and sliders) to Houdini node parameters and vice versa."]}, "\n        "]}, "\n    "]}, "\n    ", {"tag": "tr", "attrs": {}, "type": "xml", "text": ["\n        ", {"tag": "td", "attrs": {"class": "examplelink"}, "type": "xml", "text": ["Drag and Drop"]}, "\n        ", {"tag": "td", "attrs": {"class": "exampleload"}, "type": "xml", "text": [{"tag": "strong", "attrs": {}, "type": "xml", "text": [{"tag": "a", "attrs": {"href": "javascript:loadExample('/examples/python_panels/dragdrop.pypanel', false)"}, "type": "xml", "text": ["Load"]}]}, "\n        "]}, "\n    "]}, "\n    ", {"tag": "tr", "attrs": {}, "type": "xml", "text": ["\n        ", {"tag": "td", "attrs": {"colspan": "2", "class": "exampletext"}, "type": "xml", "text": ["\n        ", {"tag": "p", "attrs": {}, "type": "xml", "text": ["This example demonstrates how to respond to drag and drop events from Houdini."]}, "\n        "]}, "\n    "]}, "\n    ", {"tag": "tr", "attrs": {}, "type": "xml", "text": ["\n        ", {"tag": "td", "attrs": {"class": "examplelink"}, "type": "xml", "text": ["Custom Graphics Scene"]}, "\n        ", {"tag": "td", "attrs": {"class": "exampleload"}, "type": "xml", "text": [{"tag": "strong", "attrs": {}, "type": "xml", "text": [{"tag": "a", "attrs": {"href": "javascript:loadExample('/examples/python_panels/customgraphicsscene.pypanel', false)"}, "type": "xml", "text": ["Load"]}]}, "\n        "]}, "\n    "]}, "\n    ", {"tag": "tr", "attrs": {}, "type": "xml", "text": ["\n        ", {"tag": "td", "attrs": {"colspan": "2", "class": "exampletext"}, "type": "xml", "text": ["\n        ", {"tag": "p", "attrs": {}, "type": "xml", "text": ["This example demonstrates how to use a custom GraphicsScene subclass in a Python panel to make OpenGL calls."]}, "\n        "]}, "\n    "]}, "\n\n    ", {"tag": "tr", "attrs": {}, "type": "xml", "text": ["\n        ", {"tag": "td", "attrs": {"class": "examplelink"}, "type": "xml", "text": ["Qt Events"]}, "\n        ", {"tag": "td", "attrs": {"class": "exampleload"}, "type": "xml", "text": [{"tag": "strong", "attrs": {}, "type": "xml", "text": [{"tag": "a", "attrs": {"href": "javascript:loadExample('/examples/python_panels/qtevents.pypanel', false)"}, "type": "xml", "text": ["Load"]}]}, "\n        "]}, "\n    "]}, "\n    ", {"tag": "tr", "attrs": {}, "type": "xml", "text": ["\n        ", {"tag": "td", "attrs": {"colspan": "2", "class": "exampletext"}, "type": "xml", "text": ["\n        ", {"tag": "p", "attrs": {}, "type": "xml", "text": ["This example demonstrates how to handle widget events in a Python Panel."]}, "\n        "]}, "\n    "]}, "\n    ", {"tag": "tr", "attrs": {}, "type": "xml", "text": ["\n        ", {"tag": "td", "attrs": {"class": "examplelink"}, "type": "xml", "text": ["Qt Designer"]}, "\n        ", {"tag": "td", "attrs": {"class": "exampleload"}, "type": "xml", "text": [{"tag": "strong", "attrs": {}, "type": "xml", "text": [{"tag": "a", "attrs": {"href": "javascript:loadExample('/examples/python_panels/qtdesigner.pypanel', false)"}, "type": "xml", "text": ["Load"]}]}, "\n        "]}, "\n    "]}, "\n    ", {"tag": "tr", "attrs": {}, "type": "xml", "text": ["\n        ", {"tag": "td", "attrs": {"colspan": "2", "class": "exampletext"}, "type": "xml", "text": ["\n        ", {"tag": "p", "attrs": {}, "type": "xml", "text": ["This example demonstrates how to load an interface created by ", {"tag": "a", "attrs": {"href": "http://qt-project.org/doc/qt-4.8/designer-manual.html"}, "type": "xml", "text": ["Qt Designer"]}, "."]}, "\n        "]}, "\n    "]}, "\n    ", {"tag": "tr", "attrs": {}, "type": "xml", "text": ["\n        ", {"tag": "td", "attrs": {"class": "examplelink"}, "type": "xml", "text": ["Viewport Color Editor"]}, "\n        ", {"tag": "td", "attrs": {"class": "exampleload"}, "type": "xml", "text": [{"tag": "strong", "attrs": {}, "type": "xml", "text": [{"tag": "a", "attrs": {"href": "javascript:loadExample('/examples/python_panels/viewportcoloreditor.pypanel', false)"}, "type": "xml", "text": ["Load"]}]}, "\n        "]}, "\n    "]}, "\n    ", {"tag": "tr", "attrs": {}, "type": "xml", "text": ["\n        ", {"tag": "td", "attrs": {"colspan": "2", "class": "exampletext"}, "type": "xml", "text": ["\n        ", {"tag": "p", "attrs": {}, "type": "xml", "text": ["This example provides a PySide2 interface for editing viewport colors."]}, "\n        "]}, "\n    "]}, "\n"]}, "\n"]}, {"type": "load_example_group", "body": [{"ext": null, "type": "load_example", "indent": 0, "role": "item", "extent": [19986, 20001], "body": [], "container": true, "attrs": {"path": "/examples/python_panels/viewportcoloreditor"}}], "container": true, "role": "item_group"}]}, {"level": 1, "id": "related", "container": true, "type": "related_section", "indent": 0, "role": "section", "extent": [20057, 20066], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": null, "value": "/ref/panes/pythonpanel", "type": "link", "text": ["Python Panel"], "fullpath": "/ref/panes/pythonpanel"}], "extent": [20066, 20106]}], "container": true}], "text": "Related"}], "title": ["Python Panel Editor"]}