{"type": "root", "attrs": {}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["Using MaterialX with Karma"], "extent": [0, 31]}, {"type": "summary", "indent": 0, "text": ["Houdini has VOP node equivalents of the MaterialX shader nodes. You can build a shader network using these nodes, or import an existing MaterialX shader, and use them with Karma (Houdini\u2019s USD renderer)."], "extent": [31, 244]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Overview"], "extent": [244, 259], "body": [{"type": "para", "indent": 0, "text": [{"scheme": "Image", "value": "/images/solaris/materialx/banner.jpg", "type": "link", "text": "", "fullpath": "/images/solaris/materialx/banner.jpg"}], "extent": [259, 306]}, {"type": "para", "indent": 0, "text": [{"scheme": null, "value": "http://www.materialx.org/", "type": "link", "text": ["MaterialX"], "exists": true}, " is an open source standard for describing shading networks. MaterialX shading networks are designed to be portable between applications and renderers."], "extent": [306, 496]}, {"type": "para", "indent": 0, "text": ["Because ", {"scheme": null, "value": "/solaris/karma_xpu", "type": "link", "text": ["Karma XPU"], "fullpath": "/solaris/karma_xpu"}, " will never support the traditional VEX-based shaders used by Mantra and Karma CPU, MaterialX is probably the future of writing shaders for the Karma renderer."], "extent": [496, 695]}, {"type": "para", "indent": 0, "text": ["A MaterialX material can be defined by a ", {"type": "code", "text": [".mtlx"]}, " file on disk (this is an XML format that describes the network using elements), or encoded as a ", {"type": "code", "text": ["UsdShade"]}, " prim in a USD stage. Houdini lets you build MaterialX materials in VOPs and translate it into a ", {"type": "code", "text": ["UsdShade"]}, " prim automatically."], "extent": [695, 979]}, {"type": "tip_group", "body": [{"type": "tip", "indent": 0, "role": "item", "extent": [979, 984], "body": [{"type": "para", "indent": 5, "text": ["Referencing specific materials out of a MaterialX definition file helps to keep scenes cleaner and easier to navigate."], "extent": [984, 1109]}], "container": true}], "container": true, "role": "item_group"}, {"type": "para", "indent": 0, "text": ["The official MaterialX specification and documentation used in Houdini are in the following documents:"], "extent": [1109, 1213]}, {"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": null, "value": "http://www.materialx.org/assets/MaterialX.v1.38.Spec.pdf", "type": "link", "text": ["Specification (PDF)"], "exists": true}], "extent": [1213, 1294], "body": [], "container": true, "attrs": {"glyph": "fa-file-pdf-o"}}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": null, "value": "http://www.materialx.org/assets/MaterialX.v1.38.PBRSpec.pdf", "type": "link", "text": ["Physically Based Shading Nodes (PDF)"], "exists": true}], "extent": [1321, 1422], "body": [], "container": true, "attrs": {"glyph": "fa-file-pdf-o"}}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": null, "value": "http://www.materialx.org/assets/MaterialX.v1.38.Supplement.pdf", "type": "link", "text": ["Supplemental Notes (PDF)"], "exists": true}], "extent": [1449, 1541], "body": [], "container": true, "attrs": {"glyph": "fa-file-pdf-o"}}], "container": true}, {"type": "tip_group", "body": [{"type": "tip", "indent": 0, "role": "item", "extent": [1568, 1573], "body": [{"type": "para", "indent": 4, "text": ["Houdini\u2019s MaterialX support includes the ", {"scheme": "Node", "value": "/nodes/vop/mtlxstandard_surface", "type": "link", "text": ["MtlX Standard Surface node"], "fullpath": "/nodes/vop/mtlxstandard_surface"}, ", a physically-based uber-shader, similar to the Principled shader. You can use this node for most needs rather than defining your own shaders."], "extent": [1573, 1822]}], "container": true}], "container": true, "role": "item_group"}]}, {"level": 2, "id": "limitations", "container": true, "type": "h", "indent": 0, "text": ["Limitations"], "extent": [1822, 1854], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": ["Currently, Karma does not support MaterialX ", {"scheme": "Node", "value": "/nodes/vop/mtlxlight", "type": "link", "text": ["light shaders"], "fullpath": "/nodes/vop/mtlxlight"}, "."], "extent": [1854, 1938]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["MaterialX nodes have Color Space parameters, but this is actually metadata which USD\u2019s Hydra interface currently doesn\u2019t pass on to the render delegate."], "extent": [1938, 2094]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["MaterialX defines a few tokens (for example ", {"type": "code", "text": ["{frame}"]}, " for time) for use in file paths, but these are currently not used by Karma or Houdini. You can use the ", {"type": "code", "text": ["<UDIM>"]}, " token, however."], "extent": [2094, 2279]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["Karma only supports Volume materials on volume primitives (VDBs)."], "extent": [2279, 2348]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["Karma does not currently support Surface and Volume materials on the same prim."], "extent": [2348, 2431]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["The Compositing nodes are not supported by Karma."], "extent": [2431, 2485]}], "container": true}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Material types"], "extent": [2485, 2506], "body": [{"type": "para", "indent": 0, "text": ["The two primary types of materials created with MaterialX are Surface and Volume materials."], "extent": [2506, 2600]}, {"type": "para", "indent": 0, "text": ["Materials can contain different shader types:"], "extent": [2600, 2647]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 0, "text": ["BSDF"], "extent": [2647, 2653], "body": [{"type": "para", "indent": 4, "text": ["Describes how surfaces absorb, reflect, and refract light. Used in Surface materials."], "extent": [2653, 2744]}], "container": true}, {"type": "dt", "indent": 0, "text": ["VDF"], "extent": [2744, 2749], "body": [{"type": "para", "indent": 4, "text": ["Describes shading specific to volumes. Used in Volume materials."], "extent": [2749, 2819]}], "container": true}, {"type": "dt", "indent": 0, "text": ["EDF"], "extent": [2819, 2824], "body": [{"type": "para", "indent": 4, "text": ["Adds emission/illumination properties. Can be used in both Surface and Volume materials."], "extent": [2824, 2919]}], "container": true}], "container": true}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Surface materials"], "extent": [2919, 2945], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": ["The ", {"scheme": "Node", "value": "/nodes/vop/mtlxsurfacematerial", "type": "link", "text": ["MtlX Surface Material node"], "fullpath": "/nodes/vop/mtlxsurfacematerial"}, " defines a Surface material. You can wire a network of MaterialX surface shading nodes into it to define the surface shader. It also lets you wire in a displacement shader network if you want displacement. This is similar to the ", {"scheme": "Node", "value": "/nodes/vop/collect", "type": "link", "text": ["Collect VOP"], "fullpath": "/nodes/vop/collect"}, " in Houdini-native materials, and in fact you can use a Collect VOP in place of a MtlX Surface Material VOP when building a network."], "extent": [2945, 3402], "body": [{"type": "para", "indent": 4, "text": ["(Similarly to Houdini-native materials, you can use most MaterialX surface-shading nodes as a stand-along material. However, if you want to add a displacement shader to the surface shader, you need to use a MtlX Surface Material or Collect to have a place you can wire the displacement network in.)"], "extent": [3402, 3706]}], "container": true}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["You define surface shading by wiring BSDF, EDF, and/or Opacity nodes into a ", {"scheme": "Node", "value": "/nodes/vop/mtlxsurface", "type": "link", "text": ["MtlX Surface node"], "fullpath": "/nodes/vop/mtlxsurface"}, "."], "extent": [3706, 3827], "body": [{"type": "para", "indent": 4, "text": ["You can use the ", {"scheme": "Node", "value": "/nodes/vop/mtlxthin_surface", "type": "link", "text": ["MtlX Thin Surface node"], "fullpath": "/nodes/vop/mtlxthin_surface"}, " to create the look of a thin, two-sided geometry, where eash side can have a different BSDF and EDF."], "extent": [3827, 4000]}], "container": true}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["You can combine BSDFs using ", {"scheme": "Node", "value": "/nodes/vop/mtlxlayer", "type": "link", "text": ["MtlX Layer"], "fullpath": "/nodes/vop/mtlxlayer"}, ", ", {"scheme": "Node", "value": "/nodes/vop/mtlxadd", "type": "link", "text": ["MtlX Add"], "fullpath": "/nodes/vop/mtlxadd"}, ", ", {"scheme": "Node", "value": "/nodes/vop/mtlxmultiply", "type": "link", "text": ["MtlX Multiply"], "fullpath": "/nodes/vop/mtlxmultiply"}, ", or ", {"scheme": "Node", "value": "/nodes/vop/mtlxmix", "type": "link", "text": ["MtlX Mix"], "fullpath": "/nodes/vop/mtlxmix"}, "."], "extent": [4000, 4164]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["You define displacement using the ", {"scheme": "Node", "value": "/nodes/vop/mtlxdisplacement", "type": "link", "text": ["MtlX Displacement node"], "fullpath": "/nodes/vop/mtlxdisplacement"}, "."], "extent": [4164, 4253]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["You can use the ", {"scheme": "Node", "value": "/nodes/vop/mtlxuniform_edf", "type": "link", "text": ["Uniform EDF"], "fullpath": "/nodes/vop/mtlxuniform_edf"}, " node to add emissive properties to a MtlX Surface."], "extent": [4253, 4363]}], "container": true}]}, {"level": 3, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Volume materials"], "extent": [4363, 4388], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": ["Use the ", {"scheme": "Node", "value": "/nodes/vop/mtlxvolume", "type": "link", "text": ["MtlX Volume node"], "fullpath": "/nodes/vop/mtlxvolume"}, " to define scattering, absorbtion, and emission for volumes."], "extent": [4388, 4499]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["You can bind volume fields by name with the ", {"scheme": "Node", "value": "/nodes/vop/mtlxgeompropvalue", "type": "link", "text": ["MtlX Geompropvalue node"], "fullpath": "/nodes/vop/mtlxgeompropvalue"}, "."], "extent": [4499, 4601]}], "container": true}]}]}, {"level": 2, "id": "textures", "container": true, "type": "h", "indent": 0, "text": ["Textures and patterns"], "extent": [4601, 4640], "body": [{"type": "para", "indent": 0, "text": ["MaterialX includes many nodes for working with textures."], "extent": [4640, 4699]}, {"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/vop/mtlximage", "type": "link", "text": ["MtlX Image"], "fullpath": "/nodes/vop/mtlximage"}, ", ", {"scheme": "Node", "value": "/nodes/vop/mtlxtiledimage", "type": "link", "text": ["MtlX Tiled Image"], "fullpath": "/nodes/vop/mtlxtiledimage"}, ", and ", {"scheme": "Node", "value": "/nodes/vop/mtlxtriplanarprojection", "type": "link", "text": ["MtlX Triplaner"], "fullpath": "/nodes/vop/mtlxtriplanarprojection"}, " import texture images. You can use the ", {"type": "code", "text": ["<UDIM>"]}, " token in texture filenames. (See ", {"scheme": null, "value": "#limitations", "type": "link", "text": ["limitations"], "fullpath": "/solaris/materialx#limitations", "fragment": "#limitations"}, " above.)"], "extent": [4699, 4949]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["The ", {"scheme": "Node", "value": "/nodes/vop/mtlxnormalmap", "type": "link", "text": ["MtlX Normalmap node"], "fullpath": "/nodes/vop/mtlxnormalmap"}, " can transform a normal map texture to a world-space normal, for use as input to the ", {"scheme": "Node", "value": "/nodes/vop/mtlxstandard_surface", "type": "link", "text": ["MtlX Standard Surface node"], "fullpath": "/nodes/vop/mtlxstandard_surface"}, "'s ", {"type": "code", "text": ["normal"]}, " input."], "extent": [4949, 5162], "body": [{"type": "para", "indent": 4, "text": ["MtlX Normalmap\u2019s ", {"type": "code", "text": ["in"]}, " input expects a typical normal map, with a tangent-space normal vector from ", {"type": "code", "text": ["0"]}, " to ", {"type": "code", "text": ["1"]}, " range (that is, centered on ", {"type": "code", "text": ["0.5"]}, "). The node\u2019s ", {"type": "code", "text": ["normal"]}, " and ", {"type": "code", "text": ["tangent"]}, " must be vectors from ", {"type": "code", "text": ["0"]}, " to ", {"type": "code", "text": ["1"]}, "."], "extent": [5162, 5379]}, {"type": "note_group", "body": [{"type": "note", "indent": 4, "role": "item", "extent": [5379, 5389], "body": [{"type": "para", "indent": 8, "text": ["When reading any ", {"type": "strong", "text": ["normal maps"]}, " with a MaterialX node, set the ", {"type": "ui", "text": ["Signature"]}, " to ", {"type": "ui", "text": ["Vector3"]}, " to make sure a color space is not applied to the incoming data."], "extent": [5389, 5553]}], "container": true}], "container": true, "role": "item_group"}], "container": true}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["The MaterialX specification does not currently include ready-made procedural patterns. However, the low-level math nodes are fairly complete. For an example of how to use them to make a procedural pattern, see the ", {"scheme": null, "value": "#how_to", "type": "link", "text": ["how to"], "fullpath": "/solaris/materialx#how_to", "fragment": "#how_to"}, " section below."], "extent": [5553, 5803]}], "container": true}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Primvars and geometry attributes"], "extent": [5803, 5842], "body": [{"type": "para", "indent": 0, "text": ["MaterialX shaders can read arbitrary primvars from USD prims. You should set the ", {"type": "ui", "text": ["Signature"]}, " to the primvar\u2019s data type. The nodes will automatically detect the primvar\u2019s interpolation."], "extent": [5842, 6032]}, {"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": ["The ", {"scheme": "Node", "value": "/nodes/vop/mtlxgeompropvalue", "type": "link", "text": ["MtlX Geompropvalue node"], "fullpath": "/nodes/vop/mtlxgeompropvalue"}, " can read any primvar. (You do not need to include the ", {"type": "code", "text": ["primvars:"]}, " prefix)."], "extent": [6032, 6167], "body": [{"type": "para", "indent": 4, "text": ["(In Karma CPU only, you can also use the Geompropvalue node to import global VEX variables.)"], "extent": [6167, 6265]}], "container": true}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/vop/mtlxgeomcolor", "type": "link", "text": ["MtlX Geometry Color"], "fullpath": "/nodes/vop/mtlxgeomcolor"}, " reads the ", {"type": "code", "text": ["primvars:displayColor"]}, " primvar."], "extent": [6265, 6356]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/vop/mtlxnormal", "type": "link", "text": ["MtlX Normal"], "fullpath": "/nodes/vop/mtlxnormal"}, " reads ", {"type": "code", "text": ["normals"]}, " (", {"type": "code", "text": ["vector3"]}, ")."], "extent": [6356, 6422]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Node", "value": "/nodes/vop/mtlxtexcoord", "type": "link", "text": ["MtlX Texcoord"], "fullpath": "/nodes/vop/mtlxtexcoord"}, " reads ", {"type": "code", "text": ["primvars:st"]}, " or ", {"type": "code", "text": ["primvars:uv"]}, " (", {"type": "code", "text": ["vector2"]}, " or ", {"type": "code", "text": ["vector3"]}, ")."], "extent": [6422, 6527]}], "container": true}]}, {"level": 2, "id": "how_to", "container": true, "type": "h", "indent": 0, "text": ["How To"], "extent": [6527, 6549], "body": [{"type": "task_group", "body": [{"ext": null, "type": "task", "indent": 0, "text": [" Reference a material from an external ", {"type": "code", "text": [".mtlx"]}, " file"], "role": "item", "extent": [6549, 6610], "body": [{"type": "ord_group", "body": [{"blevel": 6, "type": "ord", "indent": 4, "text": ["Create a ", {"scheme": "Node", "value": "/nodes/lop/reference", "type": "link", "text": ["Reference LOP"], "fullpath": "/nodes/lop/reference"}, "."], "extent": [6610, 6662]}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["Set the ", {"type": "ui", "text": ["Reference file"]}, " to the file path of the MaterialX ", {"type": "code", "text": [".mtlx"]}, " file on disk."], "extent": [6662, 6752]}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["Use the ", {"type": "ui", "text": ["Reference primitive"]}, " pop-up menu to select the specific material to load in."], "extent": [6752, 6847]}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["Add an ", {"scheme": "Node", "value": "/nodes/lop/assignmaterial", "type": "link", "text": ["Assign Material node"], "fullpath": "/nodes/lop/assignmaterial"}, " and set up its parameters to assign the referenced material to a USD prim."], "extent": [6847, 6983]}], "container": true}, {"type": "para", "indent": 4, "text": ["Houdini includes some example materials in ", {"type": "code", "text": ["$HFS/houdini/materialx/resources/Materials/Examples/StandardSurface/"]}], "extent": [6983, 7102]}], "container": true}, {"ext": null, "type": "task", "indent": 0, "text": [" Create a Standard Surface material"], "role": "item", "extent": [7102, 7146], "body": [{"type": "para", "indent": 4, "text": ["The MtlX Standard Surface node is a physically-based uber-shader, similar to the Principled shader. You can use this node for most needs rather than defining your own shaders."], "extent": [7146, 7327]}, {"type": "ord_group", "body": [{"blevel": 6, "type": "ord", "indent": 4, "text": ["Create a ", {"scheme": "Node", "value": "/nodes/lop/materiallibrary", "type": "link", "text": ["Material Library LOP"], "fullpath": "/nodes/lop/materiallibrary"}, "."], "extent": [7327, 7392]}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["Double-click the Material Library node to dive into the VOP network inside."], "extent": [7392, 7475]}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["Inside, create a ", {"scheme": "Node", "value": "/nodes/vop/mtlxstandard_surface", "type": "link", "text": ["MtlX Standard Surface VOP"], "fullpath": "/nodes/vop/mtlxstandard_surface"}, "."], "extent": [7475, 7558]}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["Set up the parameters of the node. You can also load and wire textures into the Standard Surface node\u2019s texture inputs (see below)."], "extent": [7558, 7697]}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["Give the material VOP a menaingful name (for example, ", {"type": "code", "text": ["red_car_paint"]}, ")."], "extent": [7697, 7776]}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["Go back up to the parent LOP network."], "extent": [7776, 7821]}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["Use the parameters on the ", {"scheme": "Node", "value": "/nodes/lop/materiallibrary", "type": "link", "text": ["Material Library"], "fullpath": "/nodes/lop/materiallibrary"}, " to import the material and assign it to USD geometry."], "extent": [7821, 7952]}], "container": true}], "container": true}, {"ext": null, "type": "task", "indent": 0, "text": [" Use textures with the Standard Surface material"], "role": "item", "extent": [7952, 8009], "body": [{"type": "ord_group", "body": [{"blevel": 6, "type": "ord", "indent": 4, "text": ["See above for how to create a Standard Surface material."], "extent": [8009, 8073]}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["Go inside the ", {"scheme": "Node", "value": "/nodes/lop/materiallibrary", "type": "link", "text": ["Material Library LOP"], "fullpath": "/nodes/lop/materiallibrary"}, " containing the Standard Surface node."], "extent": [8073, 8180]}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["Create a ", {"scheme": "Node", "value": "/nodes/vop/mtlxtexcoord", "type": "link", "text": ["MtlX Texcoord VOP"], "fullpath": "/nodes/vop/mtlxtexcoord"}, ". Change the ", {"type": "ui", "text": ["Signature"]}, " to ", {"type": "ui", "text": ["Vector2"]}, "."], "extent": [8180, 8280]}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["Create a ", {"scheme": "Node", "value": "/nodes/vop/mtlximage", "type": "link", "text": ["MtlX Image VOP"], "fullpath": "/nodes/vop/mtlximage"}, "."], "extent": [8280, 8333], "body": [{"type": "bullet_group", "body": [{"blevel": 10, "type": "bullet", "indent": 8, "text": ["Change the ", {"type": "ui", "text": ["Signature"]}, " to ", {"type": "ui", "text": ["Color"]}, "."], "extent": [8333, 8391]}, {"blevel": 10, "type": "bullet", "indent": 8, "text": ["Set the ", {"type": "ui", "text": ["Filename"]}, " to the file path of the texture image file."], "extent": [8391, 8475]}, {"blevel": 10, "type": "bullet", "indent": 8, "text": ["Wire the MtlX Texcoord node\u2019s output to the MtlX Image node\u2019s ", {"type": "code", "text": ["texcoord"]}, " input."], "extent": [8475, 8574]}, {"blevel": 10, "type": "bullet", "indent": 8, "text": ["Wire the MtlX Image node\u2019s output to a texture input (for example, ", {"type": "code", "text": ["base_color"]}, ") on the Standard Surface node."], "extent": [8574, 8696]}], "container": true}], "container": true}], "container": true}], "container": true}, {"ext": null, "type": "task", "indent": 0, "text": [" Create a surface shader from scratch using a BSDF"], "role": "item", "extent": [8696, 8755], "body": [{"type": "ord_group", "body": [{"blevel": 6, "type": "ord", "indent": 4, "text": ["Create a ", {"scheme": "Node", "value": "/nodes/lop/materiallibrary", "type": "link", "text": ["Material Library LOP"], "fullpath": "/nodes/lop/materiallibrary"}, ". Double-click the Material Library node to dive into the VOP network inside."], "extent": [8755, 8896]}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["Create a ", {"scheme": "Node", "value": "/nodes/vop/mtlxsurfacematerial", "type": "link", "text": ["MtlX Surface Material VOP"], "fullpath": "/nodes/vop/mtlxsurfacematerial"}, "."], "extent": [8896, 8970], "body": [{"type": "para", "indent": 6, "text": ["(You can also use a ", {"scheme": "Node", "value": "/nodes/vop/collect", "type": "link", "text": ["Collect VOP"], "fullpath": "/nodes/vop/collect"}, " as the material output. This is necessary if you want to connect multiple shaders for different renderers, or author a USD Preview shader manually.)"], "extent": [8970, 9177]}], "container": true}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["Create a ", {"scheme": "Node", "value": "/nodes/vop/mtlxsurface", "type": "link", "text": ["MtlX Surface"], "fullpath": "/nodes/vop/mtlxsurface"}, ". Wire its output to the MtlX Surface Material node\u2019s ", {"type": "code", "text": ["surfaceshader"]}, " input."], "extent": [9177, 9305]}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["Create a MaterialX BSDF node (for example, the ", {"scheme": "Node", "value": "/nodes/vop/mtlxconductor_bsdf", "type": "link", "text": ["MtlX Conductor BSDF"], "fullpath": "/nodes/vop/mtlxconductor_bsdf"}, "). Wire its output into the MtlX Surface node\u2019s ", {"type": "code", "text": ["bsdf"]}, " input."], "extent": [9305, 9470]}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["Set up the parameters on the BSDF node."], "extent": [9470, 9517]}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["Give the MtlX Surface node a meaningful name (for example, ", {"type": "code", "text": ["red_metallic"]}, ")."], "extent": [9517, 9600]}], "container": true}], "container": true}, {"ext": null, "type": "task", "indent": 0, "text": [" Create a procedural pattern"], "role": "item", "extent": [9600, 9637], "body": [{"type": "para", "indent": 4, "text": ["MaterialX includes very low-level nodes for manipulating values. With enough patience, you can use them to build procedural patterns such as stripes or checkerboards."], "extent": [9637, 9809]}, {"type": "para", "indent": 4, "text": ["The following example shows how to use math nodes to make a procedural stripe texture."], "extent": [9809, 9901]}, {"type": "ord_group", "body": [{"blevel": 6, "type": "ord", "indent": 4, "text": ["Create a ", {"scheme": "Node", "value": "/nodes/lop/materiallibrary", "type": "link", "text": ["Material Library LOP"], "fullpath": "/nodes/lop/materiallibrary"}, ". Double-click the Material Library node to dive into the VOP network inside."], "extent": [9901, 10042]}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["Create a ", {"scheme": "Node", "value": "/nodes/vop/mtlxstandard_surface", "type": "link", "text": ["MtlX Standard Surface VOP"], "fullpath": "/nodes/vop/mtlxstandard_surface"}, "."], "extent": [10042, 10117]}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["Create a ", {"scheme": "Node", "value": "/nodes/vop/mtlxtexcoord", "type": "link", "text": ["MtlX Texcoord VOP"], "fullpath": "/nodes/vop/mtlxtexcoord"}, ". Change the ", {"type": "ui", "text": ["Signature"]}, " to ", {"type": "ui", "text": ["Vector2"]}, "."], "extent": [10117, 10217]}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["Wire the MtlX Texcoord node\u2019s output to a ", {"scheme": "Node", "value": "/nodes/vop/mtlxseparate2", "type": "link", "text": ["MtlX Separate2"], "fullpath": "/nodes/vop/mtlxseparate2"}, "."], "extent": [10217, 10307], "body": [{"type": "para", "indent": 8, "text": ["This splits the texture coordinates ", {"type": "code", "text": ["vector2"]}, " output into separate wires."], "extent": [10307, 10390]}], "container": true}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["Create a ", {"scheme": "Node", "value": "/nodes/vop/mtlxmultiply", "type": "link", "text": ["MtlX Multiply"], "fullpath": "/nodes/vop/mtlxmultiply"}, ". Wire the Separate2 node\u2019s ", {"type": "code", "text": ["outx"]}, " to this node\u2019s ", {"type": "code", "text": ["in1"]}, "."], "extent": [10390, 10500], "body": [{"type": "para", "indent": 8, "text": ["This node\u2019s ", {"type": "ui", "text": ["in2"]}, " parameter will control the stripe frequency. Set it to ", {"type": "code", "text": ["5"]}, " for now."], "extent": [10500, 10597]}], "container": true}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["Create a ", {"scheme": "Node", "value": "/nodes/vop/mtlxsin", "type": "link", "text": ["MtlX Sin node"], "fullpath": "/nodes/vop/mtlxsin"}, " and a ", {"scheme": "Node", "value": "/nodes/vop/mtlxceil", "type": "link", "text": ["MtlX Ceil node"], "fullpath": "/nodes/vop/mtlxceil"}, ". Wire the MtlX Multiply\u2019s output to the MtlX Sin\u2019s input, and the MtlX Sin\u2019s output to the MtlX Ceil\u2019s input."], "extent": [10597, 10797]}, {"blevel": 6, "type": "ord", "indent": 4, "text": ["Create a ", {"scheme": "Node", "value": "/nodes/vop/mtlxmix", "type": "link", "text": ["MtlX Mix"], "fullpath": "/nodes/vop/mtlxmix"}, " node."], "extent": [10797, 10847], "body": [{"type": "bullet_group", "body": [{"blevel": 10, "type": "bullet", "indent": 8, "text": ["Change the ", {"type": "ui", "text": ["Signature"]}, " to ", {"type": "ui", "text": ["Color"]}, "."], "extent": [10847, 10897]}, {"blevel": 10, "type": "bullet", "indent": 8, "text": ["Set the ", {"type": "ui", "text": ["fg"]}, " and ", {"type": "ui", "text": ["bg"]}, " colors to the alternating colors for the stripes."], "extent": [10897, 10984]}, {"blevel": 10, "type": "bullet", "indent": 8, "text": ["Wire the MtlX Ceil\u2019s output to the MtlX Mix\u2019s ", {"type": "code", "text": ["mix"]}, " input."], "extent": [10984, 11054]}, {"blevel": 10, "type": "bullet", "indent": 8, "text": ["Wire the MtlX Mix\u2019s output into the Standard Surface node\u2019s ", {"type": "code", "text": ["base_color"]}, " input."], "extent": [11054, 11146]}], "container": true}], "container": true}], "container": true}], "container": true}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["List of MaterialX VOP nodes"], "extent": [11146, 11180], "body": [{"type": "list_group", "body": [{"ext": null, "type": "list", "indent": 0, "role": "item", "extent": [11180, 11188], "body": [], "container": true, "attrs": {"query": "path:/nodes/vop/mtlx*", "sortedby": "title"}}], "container": true, "role": "item_group"}]}], "title": ["Using MaterialX with Karma"], "summary": ["Houdini has VOP node equivalents of the MaterialX shader nodes. You can build a shader network using these nodes, or import an existing MaterialX shader, and use them with Karma (Houdini\u2019s USD renderer)."]}