{"type": "root", "attrs": {}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["Arrays"], "extent": [0, 11]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Overview"], "extent": [11, 27], "body": [{"type": "para", "indent": 0, "text": ["VEX includes an array datatype. This is useful in several places:"], "extent": [27, 95]}, {"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": ["Supporting ramp parameters."], "extent": [95, 126]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["Reading capture data from surface nodes using the ", {"scheme": "Vex", "value": "/vex/functions/import", "type": "link", "text": "", "fallback_text": "import()", "fullpath": "/vex/functions/import"}, " function."], "extent": [126, 202]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["General programming, wherever arrays would be useful."], "extent": [202, 259]}], "container": true}, {"type": "note_group", "body": [{"type": "note", "indent": 0, "role": "item", "extent": [259, 265], "body": [{"type": "para", "indent": 4, "text": ["Currently VEX does not support multi-dimensional arrays."], "extent": [265, 327]}], "container": true}, {"type": "note", "indent": 0, "role": "item", "extent": [327, 333], "body": [{"type": "para", "indent": 4, "text": ["A function that returns an array defined inside a Snippet,\n    Wrangle, or other function should have the function keyword."], "extent": [333, 462]}], "container": true}], "container": true, "role": "item_group"}, {"type": "para", "indent": 0, "text": ["This example shows off some of the crazy things that you can do with arrays:"], "extent": [462, 540]}, {"lang": "vex", "type": "pre", "indent": 0, "text": ["\nsurface\ncrazy(\n      string maps[] = { \"Mandril.rat\", \"default.pic\" };\n      export float alength = 0;\n      )\n{\n    vector texclr, av[];\n\n    texclr = texture(maps[s+t > 1], s, t);\n    av = array( {1,0,0}, vector(nrandom()), t, texclr, {.5,0,0});\n\n    if (fit(noise(s*8), 0, 1, .3, .7) > t)\n        av = array(1, {0,1,0}, 0);\n\n    Cf = spline(\"linear\", s, av);\n    alength = len(av);\n}\n"], "extent": [540, 941]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Declaring array types"], "extent": [941, 971], "body": [{"type": "para", "indent": 0, "text": ["To declare an array variable, the general form is\n", {"type": "code", "text": [{"type": "var", "text": ["member_type"]}, " ", {"type": "var", "text": ["var_name"]}, "[]"]}, ":"], "extent": [971, 1057]}, {"lang": "vex", "type": "pre", "indent": 0, "text": ["\n// my_array is an array of floats\nfloat   my_array[];\n\n// v is a single vector, vector_array is an array of vectors\nvector  v, vector_array[];\n\n// str_array is an array of strings\nstring  str_array[];\n"], "extent": [1057, 1272]}, {"type": "para", "indent": 0, "text": ["You can optionally put a size inside the square brackets, but the\nVEX compiler currently ignores it."], "extent": [1272, 1375]}, {"type": "para", "indent": 0, "text": ["To declare a function that returns an array:"], "extent": [1375, 1421]}, {"lang": "vex", "type": "pre", "indent": 0, "text": ["\n// A function which returns an array of vectors\n// DOES NOT WORK IN A WRANGLE/SNIPPET: use function keyword then.\nvector[] rgb_array()\n{\n...\n};    \n"], "extent": [1421, 1583]}, {"type": "para", "indent": 0, "text": ["It is ambiguous if you are a nested funnction, however.   Note that\nWrangles and Snippets are always implicitly nested.  To declare a\nnested function that returns an array:"], "extent": [1583, 1758]}, {"lang": "vex", "type": "pre", "indent": 0, "text": ["\n// A function which returns an array of vectors\ncvex\nfoo()\n{\n    // Use the optional 'function' keyword to avoid type ambiguity\n    function vector[] rgb_array()\n    {\n    ...\n    };    \n}\n"], "extent": [1758, 1961]}, {"type": "para", "indent": 0, "text": ["To specify a literal array, use curly braces, with the array members\nseparated by commas:"], "extent": [1961, 2053]}, {"lang": "vex", "type": "pre", "indent": 0, "text": ["\nvector an_array[] = { {1, 2, 3}, {2, 3, 4}, {4, 5, 6} };\n\nvector[] rgb_array()\n{\n    return { {1, 0, 0}, {0, 1, 0}, {0, 0, 1} };\n}\n"], "extent": [2053, 2198]}, {"type": "note_group", "body": [{"type": "note", "indent": 0, "role": "item", "extent": [2198, 2205], "body": [{"type": "para", "indent": 4, "text": ["Literal arrays are constructed ", {"type": "em", "text": ["at compile time"]}, ", so they ", {"type": "strong", "text": ["cannot\n    include variables"]}, "."], "extent": [2205, 2300]}, {"type": "para", "indent": 4, "text": ["For example, this is an error:"], "extent": [2300, 2336]}, {"lang": "vex", "type": "pre", "indent": 4, "text": ["\n    int arr[] = { my_var, other_var + 2 }; // Error\n    "], "extent": [2336, 2414]}, {"type": "para", "indent": 4, "text": ["To avoid this error, use the ", {"type": "code", "text": ["array()"]}, " function which constructs\n    the array at runtime from any number of arguments:"], "extent": [2414, 2540]}, {"lang": "vex", "type": "pre", "indent": 4, "text": ["\n    int arr[] = array( my_var, other_var + 2 );\n    "], "extent": [2540, 2614]}], "container": true}], "container": true, "role": "item_group"}, {"type": "para", "indent": 0, "text": ["If you specify scalars where a vector is expected, the compiler assigns\nthe scalar value to all components of the vector:"], "extent": [2614, 2739]}, {"lang": "vex", "type": "pre", "indent": 0, "text": ["\nvector an_array[] = { 1, 2, 3};\n// an_array[] == { {1, 1, 1}, {2, 2, 2}, {3, 3, 3} }\n"], "extent": [2739, 2838]}, {"type": "para", "indent": 0, "text": ["The ", {"type": "code", "text": ["array()"]}, " function creates an array from its arguments."], "extent": [2838, 2900]}, {"lang": "vex", "type": "pre", "indent": 0, "text": ["\nint my_array[] = array(1, 2, 3, 4, 5);\n"], "extent": [2900, 2953]}, {"type": "para", "indent": 0, "text": ["You can use ", {"type": "code", "text": ["array()"]}, " to generate an array of any type.\nTo force ", {"type": "code", "text": ["array()"]}, " to generate vectors (for example):"], "extent": [2953, 3065]}, {"lang": "vex", "type": "pre", "indent": 0, "text": ["\nvector (array (value1, value2, ...) );\n"], "extent": [3065, 3118]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Accessing and setting array values"], "extent": [3118, 3161], "body": [{"type": "para", "indent": 0, "text": ["Use ", {"type": "code", "text": [{"type": "var", "text": ["arrayname"]}, "[", {"type": "var", "text": ["index"]}, "]"]}, " to look up a value by its position in the\narray."], "extent": [3161, 3243]}, {"lang": "vex", "type": "pre", "indent": 0, "text": ["\nvector bw[] = { 0, 1 };\n// bw[] == { {0, 0, 0}, {1, 1, 1} }\nCf = bw[index];\n"], "extent": [3243, 3333]}, {"type": "para", "indent": 0, "text": ["Array bounds are checked at run time.  Reading out of bounds will return ", {"type": "code", "text": ["0"]}, " or\n", {"type": "code", "text": ["\"\""]}, ".  This may generate a warning or optional run-time error in the future.\nWriting past the end of an array will resize the array to include the\nindex written to.  The new entries will be set to ", {"type": "code", "text": ["0"]}, " or ", {"type": "code", "text": ["\"\""]}, "."], "extent": [3333, 3625]}, {"type": "para", "indent": 0, "text": ["Python-style indexing is used.  This means negative indices refer to positions\nfrom the end of the array."], "extent": [3625, 3732]}, {"lang": "vex", "type": "pre", "indent": 0, "text": ["\nint nums[] = { 0, 1, 2, 3, 4, 5 };\nint n = nums[10];  // Returns 0\nint b = nums[-2];  // Returns 4\n\nstring strs[] = { };\nstring s = strs[20];  // Returns \"\"\n"], "extent": [3732, 3903]}, {"type": "para", "indent": 0, "text": ["You can also assign values using the square brackets notation:"], "extent": [3903, 3968]}, {"lang": "vex", "type": "pre", "indent": 0, "text": ["\nfloat nums[] = { };\nnums[0] = 3.14;\n"], "extent": [3968, 4018]}, {"type": "para", "indent": 0, "text": ["(The ", {"scheme": "Vex", "value": "/vex/functions/getcomp", "type": "link", "text": "", "fallback_text": "getcomp()", "fullpath": "/vex/functions/getcomp"}, " and ", {"scheme": "Vex", "value": "/vex/functions/setcomp", "type": "link", "text": "", "fallback_text": "setcomp()", "fullpath": "/vex/functions/setcomp"}, " functions are equivalents for using\nthe square brackets notation.)"], "extent": [4018, 4124]}, {"type": "note_group", "body": [{"type": "note", "indent": 0, "role": "item", "extent": [4124, 4130], "body": [{"type": "para", "indent": 4, "text": ["The square-brackets operator also works on vectors. You can use it with\n    matrices as well using a pair of brackets: ", {"type": "code", "text": ["float a = m3[0][1];"]}], "extent": [4130, 4277]}], "container": true}], "container": true, "role": "item_group"}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Slicing Arrays"], "extent": [4277, 4298], "body": [{"type": "para", "indent": 0, "text": ["The square-brackets can be used to extract sub-arrays using the Python slicing notation."], "extent": [4298, 4389]}, {"lang": "vex", "type": "pre", "indent": 0, "text": ["\nint nums[] = { 0, 1, 2, 3, 4, 5 };\nint start[] = nums[0:2];  // { 0, 1 }\nint end[] = nums[-2:];  // { 4, 5 }\nint rev[] = nums[::-1];  // { 5, 4, 3, 2, 1, 0 }\nint odd[] = nums[1::2]; // { 1, 3, 5 }\n"], "extent": [4389, 4600]}, {"type": "para", "indent": 0, "text": ["The ", {"scheme": "Vex", "value": "/vex/functions/slice", "type": "link", "text": "", "fallback_text": "slice()", "fullpath": "/vex/functions/slice"}, " function is the equivalent for using the slice-based square\nbrackets notation."], "extent": [4600, 4698]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Copying between arrays and vectors/matrices"], "extent": [4698, 4748], "body": [{"type": "para", "indent": 0, "text": ["The assignment operator supports assigning values between vector types and\narrays of floats:"], "extent": [4748, 4843]}, {"lang": "vex", "type": "pre", "indent": 0, "text": ["\nfloat x[];\n// Cf and P are vectors\n\nx = set(P);   // Assigns the components of P to the corresponding\n              // members of the array x\n\nCf = set(x);  // Assigns the first 3 members of x as the\n              // components of the vector Cf\n"], "extent": [4843, 5102]}, {"type": "para", "indent": 0, "text": ["If the array is not long enough to fill the vector/matrix, the last member is\nrepeated as often as necessary."], "extent": [5102, 5214]}, {"lang": "vex", "type": "pre", "indent": 0, "text": ["\nfloat x[] = {1, 2} // Not long enough to fill a vector\nCf = set(x);  // Cf == {1, 2, 2}\n"], "extent": [5214, 5316]}, {"type": "para", "indent": 0, "text": ["You can also assign between matrix types and arrays of ", {"type": "code", "text": ["vector2"]}, "/", {"type": "code", "text": ["vector"]}, "/", {"type": "code", "text": ["vector4"]}, ":"], "extent": [5316, 5403]}, {"lang": "vex", "type": "pre", "indent": 0, "text": ["\nvector2     v2[];\nvector      v[];\nvector4     v4[];\nmatrix2     m2 = 1;\nmatrix3     m3 = 1;\nmatrix      m4 = 1;\n\nv = set(m3);   // Each row of the 3x3 matrix is put into a vector\nm3 = set(v);   // Copy the vectors into the row vectors of the matrix\nv4 = set(m4);  // Extract the rows of the matrix into the vector4 array\nm4 = set(v4);  // Create a matrix using the vector4's in the array as row vectors\n"], "extent": [5403, 5821]}, {"type": "para", "indent": 0, "text": ["In summary:"], "extent": [5821, 5835]}, {"tag": "table", "attrs": {}, "type": "pxml", "indent": 0, "extent": [5835, 5843], "body": [{"tag": "tr", "attrs": {}, "type": "pxml", "indent": 4, "extent": [5843, 5852], "body": [{"tag": "th", "attrs": {}, "type": "pxml", "indent": 8, "text": ["Left side ="], "extent": [5852, 5876]}, {"tag": "th", "attrs": {}, "type": "pxml", "indent": 8, "text": ["Right side"], "extent": [5876, 5899]}, {"tag": "th", "attrs": {}, "type": "pxml", "indent": 8, "text": ["Notes"], "extent": [5899, 5917]}], "container": true}, {"tag": "tr", "attrs": {}, "type": "pxml", "indent": 4, "extent": [5917, 5926], "body": [{"tag": "td", "attrs": {}, "type": "pxml", "indent": 8, "text": [{"type": "code", "text": ["vector2"]}], "extent": [5926, 5948]}, {"tag": "td", "attrs": {}, "type": "pxml", "indent": 8, "text": [{"type": "code", "text": ["float[]"]}], "extent": [5948, 5970]}, {"tag": "td", "attrs": {}, "type": "pxml", "indent": 8, "text": ["E.g. ", {"type": "code", "text": ["vector2  v = {1,2}"]}], "extent": [5970, 6008]}], "container": true}, {"tag": "tr", "attrs": {}, "type": "pxml", "indent": 4, "extent": [6008, 6017], "body": [{"tag": "td", "attrs": {}, "type": "pxml", "indent": 8, "text": [{"type": "code", "text": ["vector"]}], "extent": [6017, 6038]}, {"tag": "td", "attrs": {}, "type": "pxml", "indent": 8, "text": [{"type": "code", "text": ["float[]"]}], "extent": [6038, 6060]}, {"tag": "td", "attrs": {}, "type": "pxml", "indent": 8, "text": ["E.g. ", {"type": "code", "text": ["vector  v = {1,2,3}"]}], "extent": [6060, 6099]}], "container": true}, {"tag": "tr", "attrs": {}, "type": "pxml", "indent": 4, "text": [" "], "extent": [6099, 6109], "body": [{"tag": "td", "attrs": {}, "type": "pxml", "indent": 8, "text": [{"type": "code", "text": ["vector4"]}], "extent": [6109, 6131]}, {"tag": "td", "attrs": {}, "type": "pxml", "indent": 8, "text": [{"type": "code", "text": ["float[]"]}], "extent": [6131, 6153]}, {"tag": "td", "attrs": {}, "type": "pxml", "indent": 8, "text": ["E.g. ", {"type": "code", "text": ["vector4 v = {1,2,3,4};"]}], "extent": [6153, 6195]}], "container": true}, {"tag": "tr", "attrs": {}, "type": "pxml", "indent": 4, "extent": [6195, 6204], "body": [{"tag": "td", "attrs": {}, "type": "pxml", "indent": 8, "text": [{"type": "code", "text": ["matrix2"]}], "extent": [6204, 6226]}, {"tag": "td", "attrs": {}, "type": "pxml", "indent": 8, "text": [{"type": "code", "text": ["float[]"]}], "extent": [6226, 6248]}, {"tag": "td", "attrs": {}, "type": "pxml", "indent": 8, "text": ["E.g. ", {"type": "code", "text": ["matrix2 m = {1,2,3,4};"]}], "extent": [6248, 6290]}], "container": true}, {"tag": "tr", "attrs": {}, "type": "pxml", "indent": 4, "extent": [6290, 6299], "body": [{"tag": "td", "attrs": {}, "type": "pxml", "indent": 8, "text": [{"type": "code", "text": ["matrix2"]}], "extent": [6299, 6321]}, {"tag": "td", "attrs": {}, "type": "pxml", "indent": 8, "text": [{"type": "code", "text": ["vector2[]"]}], "extent": [6321, 6345]}, {"tag": "td", "attrs": {}, "type": "pxml", "indent": 8, "text": ["E.g. ", {"type": "code", "text": ["matrix2 m = { {1,2}, {4,5} };"]}], "extent": [6345, 6394]}], "container": true}, {"tag": "tr", "attrs": {}, "type": "pxml", "indent": 4, "extent": [6394, 6403], "body": [{"tag": "td", "attrs": {}, "type": "pxml", "indent": 8, "text": [{"type": "code", "text": ["matrix3"]}], "extent": [6403, 6425]}, {"tag": "td", "attrs": {}, "type": "pxml", "indent": 8, "text": [{"type": "code", "text": ["float[]"]}], "extent": [6425, 6447]}, {"tag": "td", "attrs": {}, "type": "pxml", "indent": 8, "text": ["E.g. ", {"type": "code", "text": ["matrix3 m = {1,2,3,4,5,6,7,8,9};"]}], "extent": [6447, 6499]}], "container": true}, {"tag": "tr", "attrs": {}, "type": "pxml", "indent": 4, "extent": [6499, 6508], "body": [{"tag": "td", "attrs": {}, "type": "pxml", "indent": 8, "text": [{"type": "code", "text": ["matrix3"]}], "extent": [6508, 6530]}, {"tag": "td", "attrs": {}, "type": "pxml", "indent": 8, "text": [{"type": "code", "text": ["vector[]"]}], "extent": [6530, 6553]}, {"tag": "td", "attrs": {}, "type": "pxml", "indent": 8, "text": ["E.g. ", {"type": "code", "text": ["matrix3 m = { {1,2,3}, {4,5,6}, {7,8,9}};"]}], "extent": [6553, 6614]}], "container": true}, {"tag": "tr", "attrs": {}, "type": "pxml", "indent": 4, "extent": [6614, 6623], "body": [{"tag": "td", "attrs": {}, "type": "pxml", "indent": 8, "text": [{"type": "code", "text": ["matrix"]}], "extent": [6623, 6644]}, {"tag": "td", "attrs": {}, "type": "pxml", "indent": 8, "text": [{"type": "code", "text": ["float[]"]}], "extent": [6644, 6666]}, {"tag": "td", "attrs": {}, "type": "pxml", "indent": 8, "text": ["E.g. ", {"type": "code", "text": ["matrix  m = {1,2,3,4,5,6,7,8,9.., 16};"]}], "extent": [6666, 6724]}], "container": true}, {"tag": "tr", "attrs": {}, "type": "pxml", "indent": 4, "extent": [6724, 6733], "body": [{"tag": "td", "attrs": {}, "type": "pxml", "indent": 8, "text": [{"type": "code", "text": ["matrix"]}], "extent": [6733, 6754]}, {"tag": "td", "attrs": {}, "type": "pxml", "indent": 8, "text": [{"type": "code", "text": ["vector4[]"]}], "extent": [6754, 6778]}, {"tag": "td", "attrs": {}, "type": "pxml", "indent": 8, "text": ["E.g. ", {"type": "code", "text": ["matrix  m = { {1,2,3,4}, {5,6,7,8}, ... {13,14,15,16}};"]}], "extent": [6778, 6853]}], "container": true}, {"tag": "tr", "attrs": {}, "type": "pxml", "indent": 4, "extent": [6853, 6862], "body": [{"tag": "td", "attrs": {}, "type": "pxml", "indent": 8, "text": [{"type": "code", "text": ["float[]"]}], "extent": [6862, 6884]}, {"tag": "td", "attrs": {}, "type": "pxml", "indent": 8, "text": [{"type": "code", "text": ["vector2"]}], "extent": [6884, 6906]}, {"tag": "td", "attrs": {}, "type": "pxml", "indent": 8, "text": ["Create an array of 2 floats from the components"], "extent": [6906, 6966]}], "container": true}, {"tag": "tr", "attrs": {}, "type": "pxml", "indent": 4, "extent": [6966, 6975], "body": [{"tag": "td", "attrs": {}, "type": "pxml", "indent": 8, "text": [{"type": "code", "text": ["float[]"]}], "extent": [6975, 6997]}, {"tag": "td", "attrs": {}, "type": "pxml", "indent": 8, "text": [{"type": "code", "text": ["vector"]}], "extent": [6997, 7018]}, {"tag": "td", "attrs": {}, "type": "pxml", "indent": 8, "text": ["Create an array of 3 floats from the components"], "extent": [7018, 7078]}], "container": true}, {"tag": "tr", "attrs": {}, "type": "pxml", "indent": 4, "extent": [7078, 7087], "body": [{"tag": "td", "attrs": {}, "type": "pxml", "indent": 8, "text": [{"type": "code", "text": ["float[]"]}], "extent": [7087, 7109]}, {"tag": "td", "attrs": {}, "type": "pxml", "indent": 8, "text": [{"type": "code", "text": ["vector4"]}], "extent": [7109, 7131]}, {"tag": "td", "attrs": {}, "type": "pxml", "indent": 8, "text": ["Create an array of 4 floats from the components"], "extent": [7131, 7191]}], "container": true}, {"tag": "tr", "attrs": {}, "type": "pxml", "indent": 4, "extent": [7191, 7200], "body": [{"tag": "td", "attrs": {}, "type": "pxml", "indent": 8, "text": [{"type": "code", "text": ["float[]"]}], "extent": [7200, 7222]}, {"tag": "td", "attrs": {}, "type": "pxml", "indent": 8, "text": [{"type": "code", "text": ["matrix2"]}], "extent": [7222, 7244]}, {"tag": "td", "attrs": {}, "type": "pxml", "indent": 8, "text": ["Create an array of 4 floats from the matrix2"], "extent": [7244, 7301]}], "container": true}, {"tag": "tr", "attrs": {}, "type": "pxml", "indent": 4, "extent": [7301, 7310], "body": [{"tag": "td", "attrs": {}, "type": "pxml", "indent": 8, "text": [{"type": "code", "text": ["vector2[]"]}], "extent": [7310, 7334]}, {"tag": "td", "attrs": {}, "type": "pxml", "indent": 8, "text": [{"type": "code", "text": ["matrix2"]}], "extent": [7334, 7356]}, {"tag": "td", "attrs": {}, "type": "pxml", "indent": 8, "text": ["Create an array of 2 vector2s from the matrix2"], "extent": [7356, 7415]}], "container": true}, {"tag": "tr", "attrs": {}, "type": "pxml", "indent": 4, "extent": [7415, 7424], "body": [{"tag": "td", "attrs": {}, "type": "pxml", "indent": 8, "text": [{"type": "code", "text": ["float[]"]}], "extent": [7424, 7446]}, {"tag": "td", "attrs": {}, "type": "pxml", "indent": 8, "text": [{"type": "code", "text": ["matrix3"]}], "extent": [7446, 7468]}, {"tag": "td", "attrs": {}, "type": "pxml", "indent": 8, "text": ["Create an array of 9 floats from the matrix3"], "extent": [7468, 7525]}], "container": true}, {"tag": "tr", "attrs": {}, "type": "pxml", "indent": 4, "extent": [7525, 7534], "body": [{"tag": "td", "attrs": {}, "type": "pxml", "indent": 8, "text": [{"type": "code", "text": ["vector[]"]}], "extent": [7534, 7557]}, {"tag": "td", "attrs": {}, "type": "pxml", "indent": 8, "text": [{"type": "code", "text": ["matrix3"]}], "extent": [7557, 7579]}, {"tag": "td", "attrs": {}, "type": "pxml", "indent": 8, "text": ["Create an array of 3 vectors from the matrix3"], "extent": [7579, 7637]}], "container": true}, {"tag": "tr", "attrs": {}, "type": "pxml", "indent": 4, "extent": [7637, 7646], "body": [{"tag": "td", "attrs": {}, "type": "pxml", "indent": 8, "text": [{"type": "code", "text": ["float[]"]}], "extent": [7646, 7668]}, {"tag": "td", "attrs": {}, "type": "pxml", "indent": 8, "text": [{"type": "code", "text": ["matrix4"]}], "extent": [7668, 7690]}, {"tag": "td", "attrs": {}, "type": "pxml", "indent": 8, "text": ["Create an array of 16 floats"], "extent": [7690, 7731]}], "container": true}, {"tag": "tr", "attrs": {}, "type": "pxml", "indent": 4, "extent": [7731, 7740], "body": [{"tag": "td", "attrs": {}, "type": "pxml", "indent": 8, "text": [{"type": "code", "text": ["vector4[]"]}], "extent": [7740, 7764]}, {"tag": "td", "attrs": {}, "type": "pxml", "indent": 8, "text": [{"type": "code", "text": ["matrix4"]}], "extent": [7764, 7786]}, {"tag": "td", "attrs": {}, "type": "pxml", "indent": 8, "text": ["Create an array of 4 ", {"type": "code", "text": ["vector4"]}, "s."], "extent": [7786, 7831]}], "container": true}], "container": true}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Looping over an array"], "extent": [7831, 7861], "body": [{"type": "para", "indent": 0, "text": ["See ", {"scheme": "Vex", "value": "/vex/functions/foreach", "type": "link", "text": "", "fallback_text": "foreach()", "fullpath": "/vex/functions/foreach"}, "."], "extent": [7861, 7883]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Working with arrays"], "extent": [7883, 7909], "body": [{"type": "para", "indent": 0, "text": ["The following functions let you query and manipulate arrays."], "extent": [7909, 7972]}, {"type": "dt_group", "body": [{"type": "dt", "indent": 0, "text": [{"scheme": "Vex", "value": "/vex/functions/resize", "type": "link", "text": "", "fallback_text": "resize()", "fullpath": "/vex/functions/resize"}], "extent": [7972, 7986], "body": [{"type": "para", "indent": 4, "text": ["Sets the length of the array. If the array is enlarged, intermediate values\n    will be ", {"type": "code", "text": ["0"]}, " or ", {"type": "code", "text": ["\"\""]}, "."], "extent": [7986, 8096]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"scheme": "Vex", "value": "/vex/functions/len", "type": "link", "text": "", "fallback_text": "len()", "fullpath": "/vex/functions/len"}], "extent": [8096, 8107], "body": [{"type": "para", "indent": 4, "text": ["Returns the length of an array."], "extent": [8107, 8144]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"scheme": "Vex", "value": "/vex/functions/pop", "type": "link", "text": "", "fallback_text": "pop()", "fullpath": "/vex/functions/pop"}], "extent": [8144, 8155], "body": [{"type": "para", "indent": 4, "text": ["Removes the last item from the array (decreasing the size of the array by 1)\n    and returns it."], "extent": [8155, 8257]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"scheme": "Vex", "value": "/vex/functions/removevalue", "type": "link", "text": "", "fallback_text": "removevalue()", "fullpath": "/vex/functions/removevalue"}], "extent": [8257, 8276], "body": [{"type": "para", "indent": 4, "text": ["Removes the first instance of a value in the array. Returns ", {"type": "code", "text": ["1"]}, " if an item was removed, or ", {"type": "code", "text": ["0"]}, " otherwise."], "extent": [8276, 8387]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"scheme": "Vex", "value": "/vex/functions/removeindex", "type": "link", "text": "", "fallback_text": "removeindex()", "fullpath": "/vex/functions/removeindex"}], "extent": [8387, 8406], "body": [{"type": "para", "indent": 4, "text": ["Removes an item at the given index and returns it."], "extent": [8406, 8462]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"scheme": "Vex", "value": "/vex/functions/push", "type": "link", "text": "", "fallback_text": "push()", "fullpath": "/vex/functions/push"}], "extent": [8462, 8474], "body": [{"type": "para", "indent": 4, "text": ["Adds an item to the end of an array (increasing the size of the array by 1)."], "extent": [8474, 8560]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"scheme": "Vex", "value": "/vex/functions/getcomp", "type": "link", "text": "", "fallback_text": "getcomp()", "fullpath": "/vex/functions/getcomp"}], "extent": [8560, 8575], "body": [{"type": "para", "indent": 4, "text": ["Gets the value of an array component, the same as ", {"type": "code", "text": ["array[", {"type": "var", "text": ["num"]}, "]"]}, "."], "extent": [8575, 8648]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"scheme": "Vex", "value": "/vex/functions/setcomp", "type": "link", "text": "", "fallback_text": "setcomp()", "fullpath": "/vex/functions/setcomp"}], "extent": [8648, 8663], "body": [{"type": "para", "indent": 4, "text": ["Sets the value of an array component, the same as ", {"type": "code", "text": ["array[", {"type": "var", "text": ["num"]}, "] = ", {"type": "var", "text": ["value"]}]}, "."], "extent": [8663, 8752]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"scheme": "Vex", "value": "/vex/functions/array", "type": "link", "text": "", "fallback_text": "array()", "fullpath": "/vex/functions/array"}], "extent": [8752, 8765], "body": [{"type": "para", "indent": 4, "text": ["Efficiently creates an array from its arguments."], "extent": [8765, 8823]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"scheme": "Vex", "value": "/vex/functions/serialize", "type": "link", "text": "", "fallback_text": "serialize()", "fullpath": "/vex/functions/serialize"}], "extent": [8823, 8840], "body": [{"type": "para", "indent": 4, "text": ["Flattens an array of vectors or matrices into an array of floats."], "extent": [8840, 8915]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"scheme": "Vex", "value": "/vex/functions/unserialize", "type": "link", "text": "", "fallback_text": "unserialize()", "fullpath": "/vex/functions/unserialize"}], "extent": [8915, 8934], "body": [{"type": "para", "indent": 4, "text": ["Reverses the effect of ", {"scheme": "Vex", "value": "/vex/functions/serialize", "type": "link", "text": "", "fallback_text": "serialize()", "fullpath": "/vex/functions/serialize"}, ": assembles a flat array of floats\n    into an array of vectors or matrices."], "extent": [8934, 9058]}], "container": true}, {"type": "dt", "indent": 0, "text": [{"scheme": "Vex", "value": "/vex/functions/neighbours", "type": "link", "text": "", "fallback_text": "neighbours()", "fullpath": "/vex/functions/neighbours"}], "extent": [9058, 9076], "body": [{"type": "para", "indent": 4, "text": ["An array-based replacement for the ", {"scheme": "Vex", "value": "/vex/functions/neighbourcount", "type": "link", "text": "", "fallback_text": "neighbourcount()", "fullpath": "/vex/functions/neighbourcount"}, "/", {"scheme": "Vex", "value": "/vex/functions/neighbour", "type": "link", "text": "", "fallback_text": "neighbour()", "fullpath": "/vex/functions/neighbour"}, "\n    combo. Returns an array of the point numbers of the\n    neighbors of a given point."], "extent": [9076, 9245]}], "container": true}], "container": true}, {"type": "para", "indent": 0, "text": ["In addition, the following functions work with arrays:"], "extent": [9245, 9301]}, {"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Vex", "value": "/vex/functions/min", "type": "link", "text": "", "fallback_text": "min()", "fullpath": "/vex/functions/min"}], "extent": [9301, 9313]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Vex", "value": "/vex/functions/avg", "type": "link", "text": "", "fallback_text": "avg()", "fullpath": "/vex/functions/avg"}], "extent": [9313, 9325]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Vex", "value": "/vex/functions/spline", "type": "link", "text": "", "fallback_text": "spline()", "fullpath": "/vex/functions/spline"}], "extent": [9325, 9340]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Vex", "value": "/vex/functions/import", "type": "link", "text": "", "fallback_text": "import()", "fullpath": "/vex/functions/import"}], "extent": [9340, 9355]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Vex", "value": "/vex/functions/addattribute", "type": "link", "text": "", "fallback_text": "addattribute()", "fullpath": "/vex/functions/addattribute"}], "extent": [9355, 9376]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Vex", "value": "/vex/functions/metaimport", "type": "link", "text": "", "fallback_text": "metaimport()", "fullpath": "/vex/functions/metaimport"}], "extent": [9376, 9397]}], "container": true}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["VCC pragmas"], "extent": [9397, 9415], "body": [{"type": "para", "indent": 0, "text": ["The ", {"type": "code", "text": ["ramp"]}, " pragma lets you specify a ramp user interface for a set of\nparameters."], "extent": [9415, 9499]}, {"lang": null, "type": "pre", "indent": 0, "text": ["\n#pragma ramp <ramp_parm> <basis_parm> <keys_parm> <values_parm>\n"], "extent": [9499, 9571]}, {"type": "para", "indent": 0, "text": ["See ", {"scheme": null, "value": "pragmas", "type": "link", "text": ["VCC pragmas"], "fullpath": "/vex/pragmas"}, " for more information."], "extent": [9571, 9622]}]}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Limitations"], "extent": [9622, 9640], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": ["Currently VEX does not support multi-dimensional arrays."], "extent": [9640, 9700]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["Arrays cannot be passed between shaders (through ", {"scheme": "Vex", "value": "/vex/functions/simport", "type": "link", "text": "", "fallback_text": "simport()", "fullpath": "/vex/functions/simport"}, ", etc.)."], "extent": [9700, 9773]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": ["Arrays cannot be written to image planes."], "extent": [9773, 9817]}], "container": true}]}], "title": ["Arrays"]}