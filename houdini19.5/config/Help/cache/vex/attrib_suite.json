{"type": "root", "attrs": {"type": "vexsuite"}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["Reading attributes"], "extent": [0, 23]}, {"level": 1, "id": "suite", "container": true, "type": "suite_section", "indent": 0, "role": "section", "extent": [42, 49], "body": [{"level": 2, "id": "unchecked", "container": true, "type": "h", "indent": 0, "text": ["Without existence check"], "extent": [49, 92], "body": [{"type": "para", "indent": 0, "text": ["These functions return the attribute value if the given detail/primitive/point/vertex exists and has the given attribute, or a zero/empty value otherwise."], "extent": [92, 249]}, {"type": "para", "indent": 0, "text": ["If you need to distinguish between the attribute value actually being zero/empty vs. the function returning zero/empty value because the attribute didn\u2019t exist, use the ", {"scheme": null, "value": "#checked", "type": "link", "text": ["checked versions"], "fullpath": "/vex/attrib_suite#checked", "fragment": "#checked"}, " below."], "extent": [249, 454]}, {"type": "suite_item_group", "body": [{"ext": null, "type": "suite_item", "indent": 0, "text": [{"scheme": "Vex", "value": "/vex/functions/attrib", "type": "link", "text": "", "fallback_text": "attrib()", "fullpath": "/vex/functions/attrib"}], "role": "item", "extent": [454, 469]}, {"ext": null, "type": "suite_item", "indent": 0, "text": [{"scheme": "Vex", "value": "/vex/functions/detail", "type": "link", "text": "", "fallback_text": "detail()", "fullpath": "/vex/functions/detail"}], "role": "item", "extent": [469, 484]}, {"ext": null, "type": "suite_item", "indent": 0, "text": [{"scheme": "Vex", "value": "/vex/functions/prim", "type": "link", "text": "", "fallback_text": "prim()", "fullpath": "/vex/functions/prim"}], "role": "item", "extent": [484, 497]}, {"ext": null, "type": "suite_item", "indent": 0, "text": [{"scheme": "Vex", "value": "/vex/functions/point", "type": "link", "text": "", "fallback_text": "point()", "fullpath": "/vex/functions/point"}], "role": "item", "extent": [497, 511]}, {"ext": null, "type": "suite_item", "indent": 0, "text": [{"scheme": "Vex", "value": "/vex/functions/vertex", "type": "link", "text": "", "fallback_text": "vertex()", "fullpath": "/vex/functions/vertex"}], "role": "item", "extent": [511, 527]}], "container": true, "role": "item_group"}, {"type": "tip_group", "body": [{"type": "tip", "indent": 0, "role": "item", "extent": [527, 532], "body": [{"type": "para", "indent": 4, "text": ["See ", {"scheme": null, "value": "/vex/snippets#setgeoattr", "type": "link", "text": ["how setting attributes in VEX works"], "fullpath": "/vex/snippets#setgeoattr", "fragment": "#setgeoattr"}, " for information on how setting attributes interacts with reading attribute values."], "extent": [532, 688]}], "container": true}], "container": true, "role": "item_group"}]}, {"level": 2, "id": "checked", "container": true, "type": "h", "indent": 0, "text": ["With existence check"], "extent": [688, 725], "body": [{"type": "para", "indent": 0, "text": ["These functions take an additional argument. The functions will overwrite the integer variable you pass to this argument with ", {"type": "code", "text": ["1"]}, " if the read succeeded or ", {"type": "code", "text": ["0"]}, " if it failed. This lets you distinguish when the function returns ", {"type": "code", "text": ["0"]}, " because the attribute value is actually zero, or because the read failed."], "extent": [725, 1030]}, {"type": "para", "indent": 0, "text": ["If it doesn\u2019t matter in your code whether the attribute doesn\u2019t exist or is actually ", {"type": "code", "text": ["0"]}, ", using the ", {"scheme": null, "value": "#unchecked", "type": "link", "text": ["unchecked versions"], "fullpath": "/vex/attrib_suite#unchecked", "fragment": "#unchecked"}, " above is slightly easier because you don\u2019t have to create the variable to overwrite."], "extent": [1030, 1248]}, {"type": "suite_item_group", "body": [{"ext": null, "type": "suite_item", "indent": 0, "text": [{"scheme": "Vex", "value": "/vex/functions/getattrib", "type": "link", "text": "", "fallback_text": "getattrib()", "fullpath": "/vex/functions/getattrib"}], "role": "item", "extent": [1248, 1266]}, {"ext": null, "type": "suite_item", "indent": 0, "text": [{"scheme": "Vex", "value": "/vex/functions/detailattrib", "type": "link", "text": "", "fallback_text": "detailattrib()", "fullpath": "/vex/functions/detailattrib"}], "role": "item", "extent": [1266, 1287]}, {"ext": null, "type": "suite_item", "indent": 0, "text": [{"scheme": "Vex", "value": "/vex/functions/primattrib", "type": "link", "text": "", "fallback_text": "primattrib()", "fullpath": "/vex/functions/primattrib"}], "role": "item", "extent": [1287, 1306]}, {"ext": null, "type": "suite_item", "indent": 0, "text": [{"scheme": "Vex", "value": "/vex/functions/pointattrib", "type": "link", "text": "", "fallback_text": "pointattrib()", "fullpath": "/vex/functions/pointattrib"}], "role": "item", "extent": [1306, 1326]}, {"ext": null, "type": "suite_item", "indent": 0, "text": [{"scheme": "Vex", "value": "/vex/functions/vertexattrib", "type": "link", "text": "", "fallback_text": "vertexattrib()", "fullpath": "/vex/functions/vertexattrib"}], "role": "item", "extent": [1326, 1349]}], "container": true, "role": "item_group"}]}], "text": "Suite"}, {"level": 1, "id": "examples", "container": true, "type": "examples_section", "indent": 0, "role": "section", "extent": [1349, 1359], "body": [{"lang": "vex", "type": "pre", "indent": 0, "text": ["\n// Get the value of the \"uv\" attribute for the detail.\nvector uv = detail(\"defgeo.bgeo\", \"uv\");\n"], "extent": [1359, 1470]}, {"lang": "vex", "type": "pre", "indent": 0, "text": ["\n// Get the value of the \"Cd\" attribute for primitive 7\n// in the SOP specified by the path \"/obj/geo1/color1\" (Houdini\n// only)\nvector clr = prim(\"op:/obj/geo1/color1\", \"Cd\", 7);\n"], "extent": [1470, 1664]}, {"lang": "vex", "type": "pre", "indent": 0, "text": ["\n// Get the position of point 3 in \"defgeo.bgeo\"\nvector pos = point(\"defgeo.bgeo\", \"P\", 3);\n"], "extent": [1664, 1770]}, {"lang": "vex", "type": "pre", "indent": 0, "text": ["\n// Get the value of the \"uv\" attribute for vertex 2 of primitive\n// number 3 in the file defgeo.bgeo\nvector uv = vertex(\"defgeo.bgeo\", \"uv\", 3, 2);\n"], "extent": [1770, 1933]}], "text": "Examples"}], "title": ["Reading attributes"]}