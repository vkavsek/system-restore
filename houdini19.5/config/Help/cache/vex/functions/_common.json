{"type": "root", "attrs": {"type": "include"}, "body": [{"type": "arg_group", "body": [{"ext": null, "type": "arg", "indent": 0, "text": [{"type": "code", "text": ["<geometry>"]}], "role": "item", "extent": [16, 35], "body": [{"type": "para", "indent": 4, "text": ["When running in the context of a node (such as a wrangle SOP), this argument can be an integer representing the input number (starting at 0) to read the geometry from."], "extent": [58, 235]}, {"type": "para", "indent": 4, "text": ["Alternatively, the argument can be a string specifying a geometry file (for example, a ", {"type": "code", "text": [".bgeo"]}, ") to read from. When running inside Houdini, this can be an ", {"type": "code", "text": ["op:/path/to/sop"]}, " reference."], "extent": [235, 423]}], "container": true, "attrs": {"id": "geometry"}}, {"ext": null, "type": "arg", "indent": 0, "text": {"type": "code", "text": ["opinput"]}, "role": "item", "extent": [423, 437], "body": [{"type": "para", "indent": 4, "text": ["The input number to read from, starting from 0. For example, the first input is 0, the second input is 1, and so on."], "extent": [463, 585]}], "container": true, "attrs": {"id": "opinput_arg"}}, {"ext": null, "type": "arg", "indent": 0, "text": {"type": "code", "text": ["opinput"]}, "role": "item", "extent": [585, 599], "body": [{"type": "para", "indent": 4, "text": ["The input number to read from, starting from 0. For example, the first input is 0, the second input is 1, and so on."], "extent": [630, 756]}, {"type": "para", "indent": 4, "text": ["If you specify ", {"type": "code", "text": ["-1"]}, ", the function uses the current CHOP node or input ", {"type": "code", "text": ["0"]}, " if it is connected."], "extent": [756, 855]}], "container": true, "attrs": {"id": "chop_opinput_arg"}}, {"ext": null, "type": "arg", "indent": 0, "text": {"type": "code", "text": ["geometry"]}, "role": "item", "extent": [855, 870], "body": [{"type": "para", "indent": 4, "text": ["A string specifying a geometry file (for example, a ", {"type": "code", "text": [".bgeo"]}, ") to read from. When running inside Houdini, this can be an ", {"type": "code", "text": ["op:/path/to/sop"]}, " reference."], "extent": [900, 1053]}], "container": true, "attrs": {"id": "geometry_output"}}, {"ext": null, "type": "arg", "indent": 0, "text": {"type": "code", "text": ["geohandle"]}, "role": "item", "extent": [1053, 1069], "body": [{"type": "para", "indent": 4, "text": ["A handle to the geometry to write to. Currently the only valid value is ", {"type": "code", "text": ["0"]}, " or ", {"scheme": "Vex", "value": "/vex/functions/geoself", "type": "link", "text": "", "fallback_text": "geoself()", "fullpath": "/vex/functions/geoself"}, ", which means the current geometry in a node. (This argument may be used in the future to allow writing to other geometries.)"], "extent": [1097, 1320]}], "container": true, "attrs": {"id": "geohandle_arg"}}, {"ext": null, "type": "arg", "indent": 0, "text": {"type": "code", "text": ["attribclass"]}, "role": "item", "extent": [1320, 1338], "body": [{"type": "para", "indent": 4, "text": ["One of ", {"type": "code", "text": ["\"detail\""]}, " (or ", {"type": "code", "text": ["\"global\""]}, "), ", {"type": "code", "text": ["\"point\""]}, ", ", {"type": "code", "text": ["\"prim\""]}, ", or ", {"type": "code", "text": ["\"vertex\""]}, "."], "extent": [1371, 1447]}], "container": true, "attrs": {"id": "attribclassnogroup"}}, {"ext": null, "type": "arg", "indent": 0, "text": {"type": "code", "text": ["attribclass"]}, "role": "item", "extent": [1447, 1465], "body": [{"type": "para", "indent": 4, "text": ["One of ", {"type": "code", "text": ["\"detail\""]}, " (or ", {"type": "code", "text": ["\"global\""]}, "), ", {"type": "code", "text": ["\"point\""]}, ", ", {"type": "code", "text": ["\"prim\""]}, ", or ", {"type": "code", "text": ["\"vertex\""]}, "."], "extent": [1491, 1571]}, {"type": "para", "indent": 4, "text": ["You can also use ", {"type": "code", "text": ["\"primgroup\""]}, ", ", {"type": "code", "text": ["\"pointgroup\""]}, " or ", {"type": "code", "text": ["\"vertexgroup\""]}, " to ", {"scheme": null, "value": "/vex/groups", "type": "link", "text": ["read from groups"], "fullpath": "/vex/groups"}, "."], "extent": [1571, 1677]}], "container": true, "attrs": {"id": "attribclass"}}, {"ext": null, "type": "arg", "indent": 0, "text": {"type": "code", "text": ["attribute_name"]}, "role": "item", "extent": [1677, 1698], "body": [{"type": "para", "indent": 4, "text": ["The name of the attribute to read."], "extent": [1730, 1770]}], "container": true, "attrs": {"id": "attribnamenogroup"}}, {"ext": null, "type": "arg", "indent": 0, "text": {"type": "code", "text": ["attribute_name"]}, "role": "item", "extent": [1770, 1791], "body": [{"type": "para", "indent": 4, "text": ["The name of the attribute (or intrinsic) to read."], "extent": [1816, 1871]}], "container": true, "attrs": {"id": "attribname"}}, {"ext": null, "type": "arg", "indent": 0, "text": {"type": "code", "text": ["elemnum"]}, "role": "item", "extent": [1871, 1885], "body": [{"type": "para", "indent": 4, "text": ["The point/primitive/vertex number to read the attribute value from. For detail attributes, use ", {"type": "code", "text": ["0"]}, " here (the argument is ignored for detail attributes)."], "extent": [1907, 2069]}, {"type": "para", "indent": 4, "text": ["To get the linear vertex number given a primitive number and the vertex number on the primitive, use the ", {"scheme": "Vex", "value": "/vex/functions/primvertex", "type": "link", "text": "", "fallback_text": "primvertex()", "fullpath": "/vex/functions/primvertex"}, " function."], "extent": [2069, 2206]}], "container": true, "attrs": {"id": "elemnum"}}, {"ext": null, "type": "arg", "indent": 0, "text": {"type": "code", "text": ["intrinsic_name"]}, "role": "item", "extent": [2206, 2227], "body": [{"type": "para", "indent": 4, "text": ["The name of the intrinsic to read. For example, ", {"type": "code", "text": ["\"pointattributes\""]}, ", ", {"type": "code", "text": ["\"pointcount\""]}, ", or ", {"type": "code", "text": ["\"bounds\""]}, "."], "extent": [2255, 2360]}], "container": true, "attrs": {"id": "intrinsicname"}}], "container": true, "role": "item_group"}, {"ext": null, "type": "null", "indent": 0, "role": "item", "extent": [2360, 2367], "body": [{"type": "table", "thead": [], "body": [{"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["\"none\""]}, " "], "role": "td", "extent": [2404, 2419], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Don\u2019t transform."], "extent": [2419, 2444]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["\"point\""]}, " "], "role": "td", "extent": [2444, 2460], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Apply scales, rotations, and transformations."], "extent": [2460, 2514]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["\"hpoint\""]}, " "], "role": "td", "extent": [2514, 2531], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Apply scales, rotations, and transformations to this vector4."], "extent": [2531, 2601]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["\"vector\""]}, " "], "role": "td", "extent": [2601, 2618], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Apply scales and rotations, but not transformations."], "extent": [2618, 2679]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["\"normal\""]}, " "], "role": "td", "extent": [2679, 2696], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Apply rotations, apply scales with inverse-transpose."], "extent": [2696, 2758]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["\"color\""]}, " "], "role": "td", "extent": [2758, 2774], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Don\u2019t transform."], "extent": [2774, 2799]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["\"matrix\""]}, " "], "role": "td", "extent": [2799, 2816], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Apply scales, rotations, and transformations to this matrix."], "extent": [2816, 2885]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["\"quaternion\""]}, " "], "role": "td", "extent": [2885, 2906], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Apply rotations."], "extent": [2906, 2931]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["\"indexpair\""]}, " "], "role": "td", "extent": [2931, 2951], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Don\u2019t transform."], "extent": [2951, 2976]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["\"integer\""]}, " "], "role": "td", "extent": [2976, 2994], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Do not blend this value when points are averaged."], "extent": [2994, 3052]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["\"integer-blend\""]}, " "], "role": "td", "extent": [3052, 3076], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Integer values that blend when points are averaged."], "extent": [3076, 3136]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["\"texturecoord\""]}, " "], "role": "td", "extent": [3136, 3159], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Don\u2019t transform, and try to preserve seams when interpolating.\n        Attributes with this type will show up in the UV viewport menu."], "extent": [3159, 3303]}]}], "divider": false}]}], "container": true, "attrs": {"id": "attrib_typeinfo_values"}}, {"ext": null, "type": "null", "indent": 0, "role": "item", "extent": [3303, 3310], "body": [{"type": "para", "indent": 4, "text": ["Returns the value of ", {"type": "code", "text": ["geohandle"]}, " on success or ", {"type": "code", "text": ["-1"]}, " on failure."], "extent": [3340, 3413]}, {"type": "note_group", "body": [{"type": "note", "indent": 4, "role": "item", "extent": [3413, 3423], "body": [{"type": "para", "indent": 8, "text": ["If the attribute does not exist, this function ", {"type": "strong", "text": ["creates the attribute"]}, " with a default value of zero, empty string, or an empty array.\n        If you want to control the default value of a numeric attribute, use ", {"scheme": "Vex", "value": "/vex/functions/addattrib", "type": "link", "text": "", "fallback_text": "addattrib()", "fullpath": "/vex/functions/addattrib"}, " before setting the attribute."], "extent": [3423, 3689]}], "container": true}], "container": true, "role": "item_group"}], "container": true, "attrs": {"id": "set_attrib_info"}}, {"type": "arg_group", "body": [{"ext": null, "type": "arg", "indent": 0, "text": {"type": "code", "text": ["mode"]}, "role": "item", "extent": [3689, 3700], "body": [{"type": "para", "indent": 4, "text": ["(Optional) if given, this controls how the function modifies any existing value in the attribute."], "extent": [3730, 3833]}, {"type": "table", "thead": [], "body": [{"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["\"set\""]}, " "], "role": "td", "extent": [3833, 3847], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Overwrite the attribute with the given value."], "extent": [3847, 3901]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["\"add\""]}, " "], "role": "td", "extent": [3901, 3915], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Add to the attribute the value."], "extent": [3915, 3955]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["\"min\""]}, ", ", {"type": "code", "text": ["\"minimum\""]}, " "], "role": "td", "extent": [3955, 3982], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Set the attribute to the minimum of itself and the value."], "extent": [3982, 4048]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["\"max\""]}, ", ", {"type": "code", "text": ["\"maximum\""]}, " "], "role": "td", "extent": [4048, 4075], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Set the attribute to the maximum of itself and the value."], "extent": [4075, 4141]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["\"mult\""]}, ", ", {"type": "code", "text": ["\"multiply\""]}, " "], "role": "td", "extent": [4141, 4170], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Multiply the attribute by the value.  For matrices, this will do matrix multiplication.  For vectors, component-wise."], "extent": [4170, 4296]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["\"toggle\""]}, " "], "role": "td", "extent": [4296, 4313], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Toggles the attribute, independent of the source value.  Useful for toggling group membership."], "extent": [4313, 4416]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["\"append\""]}, " "], "role": "td", "extent": [4416, 4433], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Valid for string and array attributes.  Appends the source value to the end of the original value."], "extent": [4433, 4541]}]}], "divider": false}]}], "container": true, "attrs": {"id": "set_attrib_mode"}}, {"ext": null, "type": "arg", "indent": 0, "text": {"type": "code", "text": ["linearvertex"]}, "role": "item", "extent": [4541, 4560], "body": [{"type": "para", "indent": 4, "text": ["The linear index of a vertex.\n    If you have a point number and point vertex number, you can use ", {"scheme": "Vex", "value": "/vex/functions/vertexindex", "type": "link", "text": "", "fallback_text": "vertexindex()", "fullpath": "/vex/functions/vertexindex"}, " to convert them to a linear index."], "extent": [4587, 4743]}], "container": true, "attrs": {"id": "linearvertex"}}, {"ext": null, "type": "arg", "indent": 0, "text": [{"type": "code", "text": ["<stage>"]}], "role": "item", "extent": [4743, 4759], "body": [{"type": "para", "indent": 4, "text": ["When running in the context of a node (such as a wrangle LOP), this argument can be an integer representing the input number (starting at 0) to read the stage from. The integer is equivalent to the string form referencing a particular input, e.g., ", {"type": "q", "text": ["opinput:0"]}, "."], "extent": [4783, 5049]}, {"type": "para", "indent": 4, "text": ["You can also use this argument to refer to a USD file (e.g., ", {"type": "q", "text": ["/path/to/file.usd"]}, "), or to another LOP node\u2019s cooked stage using the ", {"type": "code", "text": ["op:"]}, " as the path prefix (e.g., ", {"type": "q", "text": ["op:/stage/lop_node"]}, ")."], "extent": [5049, 5241]}], "container": true, "attrs": {"id": "usd_stage"}}, {"ext": null, "type": "arg", "indent": 0, "text": {"type": "code", "text": ["stagehandle"]}, "role": "item", "extent": [5241, 5259], "body": [{"type": "para", "indent": 4, "text": ["A handle to the stage to write to. Currently the only valid value is ", {"type": "code", "text": ["0"]}, ", which means the current stage in a node. (This argument may be used in the future to allow writing to other stages.)"], "extent": [5289, 5485]}], "container": true, "attrs": {"id": "usd_stagehandle"}}, {"ext": null, "type": "arg", "indent": 0, "text": {"type": "code", "text": ["path"]}, "role": "item", "extent": [5485, 5496], "body": [{"type": "para", "indent": 4, "text": ["The path to the object. I.e, a primitive, an attribute, or a relationship."], "extent": [5519, 5599]}], "container": true, "attrs": {"id": "usd_path"}}, {"ext": null, "type": "arg", "indent": 0, "text": {"type": "code", "text": ["primpath"]}, "role": "item", "extent": [5599, 5614], "body": [{"type": "para", "indent": 4, "text": ["The path to the primitive."], "extent": [5641, 5673]}], "container": true, "attrs": {"id": "usd_primpath"}}, {"ext": null, "type": "arg", "indent": 0, "text": {"type": "code", "text": ["collectionpath"]}, "role": "item", "extent": [5673, 5694], "body": [{"type": "para", "indent": 4, "text": ["The path to the collection."], "extent": [5727, 5760]}], "container": true, "attrs": {"id": "usd_collectionpath"}}, {"ext": null, "type": "arg", "indent": 0, "text": {"type": "code", "text": ["name"]}, "role": "item", "extent": [5760, 5771], "body": [{"type": "para", "indent": 4, "text": ["The metadata name."], "extent": [5802, 5826]}, {"type": "para", "indent": 4, "text": ["The name can be namespaced to acces values inside (possibly nested) VtDictionaries, such as custom data dictionary, e.g., ", {"type": "q", "text": ["customData:name"]}, " or ", {"type": "q", "text": ["customData:name:subname"]}, ". For non-namespaced names, the object schema needs to declare a given metadata for it to be accessible, e.g., ", {"type": "q", "text": ["active"]}, " or ", {"type": "q", "text": ["documentation"]}, "."], "extent": [5826, 6139]}], "container": true, "attrs": {"id": "usd_metadataname"}}, {"ext": null, "type": "arg", "indent": 0, "text": {"type": "code", "text": ["timecode"]}, "role": "item", "extent": [6139, 6154], "body": [{"type": "para", "indent": 4, "text": ["The USD time code at which to evaluate the attribute. A USD time code roughly corresponds to a frame in Houdini. If not given, the time code corresponding to the current frame is used."], "extent": [6181, 6371]}], "container": true, "attrs": {"id": "usd_timecode"}}, {"ext": null, "type": "arg", "indent": 0, "text": {"type": "code", "text": ["suffix"]}, "role": "item", "extent": [6371, 6384], "body": [{"type": "para", "indent": 4, "text": ["The transform operation suffix."], "extent": [6412, 6449]}, {"type": "para", "indent": 4, "text": ["USD primitives are transformed in space by a series of transform operations whose full names are sequentially listed in the ", {"type": "code", "text": ["xformOpOrder"]}, " attribute.  Full names are namespaced, encode the operation transform type (e.g., translation or rotation), and can also contain a suffix. If primitive has a few operations of the same type, it\u2019s necessary to specify the suffix to differentiate between them. This parameter specifies such a suffix."], "extent": [6449, 6892]}], "container": true, "attrs": {"id": "usd_xformopsuffix"}}, {"ext": null, "type": "arg", "indent": 0, "text": {"type": "code", "text": ["scale_inherit_mode"]}, "role": "item", "extent": [6892, 6917], "body": [{"type": "para", "indent": 4, "text": ["Specifies how scale inheritance from the parent transform is applied to the result. It is one of the following defines from ", {"type": "code", "text": ["math.h"]}, ":"], "extent": [6946, 7084]}, {"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["SCALE_INHERIT_DEFAULT"]}, " (0) - simple inheritance:"], "extent": [7084, 7140], "body": [{"lang": null, "type": "pre", "indent": 6, "text": ["\n      world = local * parent_world\n      "], "extent": [7140, 7195]}], "container": true}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["SCALE_INHERIT_OFFSET_ONLY"]}, " (1) - child doesn\u2019t scale with the parent local scales, but local translation is scaled:"], "extent": [7195, 7318], "body": [{"lang": null, "type": "pre", "indent": 6, "text": ["\n      world = local_scale_rotates * invert(parent_local_scales) * local_translates * parent_world\n      "], "extent": [7318, 7436]}], "container": true}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["SCALE_INHERIT_OFFSET_AND_SCALE"]}, " (2) - local translation is scaled as before but parent local scaling is also reapplied by the child in local space:"], "extent": [7436, 7591], "body": [{"lang": null, "type": "pre", "indent": 6, "text": ["\n      world = parent_local_scales * local_scale_rotates * invert(parent_local_scales) * T * parent_world\n      "], "extent": [7591, 7716]}], "container": true}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["SCALE_INHERIT_SCALE_ONLY"]}, " (3) - local translation is not scaled, but parent local scaling is reapplied by the child in local space:"], "extent": [7716, 7855], "body": [{"lang": null, "type": "pre", "indent": 6, "text": ["\n      world = parent_local_scales * local * invert(parent_local_scales) * parent_world\n      "], "extent": [7855, 7962]}], "container": true}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"type": "code", "text": ["SCALE_INHERIT_IGNORE"]}, " (4) - child completely ignores any parent local scaling:"], "extent": [7962, 8048], "body": [{"lang": null, "type": "pre", "indent": 6, "text": ["\n      world = local * invert(parent_local_scales) * parent_world\n      "], "extent": [8048, 8133]}], "container": true}], "container": true}], "container": true, "attrs": {"id": "scale_inherit_mode"}}], "container": true, "role": "item_group"}, {"ext": null, "type": "null", "indent": 0, "role": "item", "extent": [8133, 8141], "body": [{"type": "bullet_group", "body": [{"blevel": 6, "type": "bullet", "indent": 4, "text": [{"scheme": null, "value": "/vex/random", "type": "link", "text": "", "fullpath": "/vex/random"}], "extent": [8162, 8182]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"scheme": "Vex", "value": "/vex/functions/anoise", "type": "link", "text": "", "fallback_text": "anoise()", "fullpath": "/vex/functions/anoise"}], "extent": [8182, 8201]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"scheme": "Vex", "value": "/vex/functions/curlnoise", "type": "link", "text": "", "fallback_text": "curlnoise()", "fullpath": "/vex/functions/curlnoise"}], "extent": [8201, 8223]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"scheme": "Vex", "value": "/vex/functions/flownoise", "type": "link", "text": "", "fallback_text": "flownoise()", "fullpath": "/vex/functions/flownoise"}], "extent": [8223, 8245]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"scheme": "Vex", "value": "/vex/functions/noise", "type": "link", "text": "", "fallback_text": "noise()", "fullpath": "/vex/functions/noise"}], "extent": [8245, 8263]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"scheme": "Vex", "value": "/vex/functions/onoise", "type": "link", "text": "", "fallback_text": "onoise()", "fullpath": "/vex/functions/onoise"}], "extent": [8263, 8282]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"scheme": "Vex", "value": "/vex/functions/pnoise", "type": "link", "text": "", "fallback_text": "pnoise()", "fullpath": "/vex/functions/pnoise"}], "extent": [8282, 8301]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"scheme": "Vex", "value": "/vex/functions/snoise", "type": "link", "text": "", "fallback_text": "snoise()", "fullpath": "/vex/functions/snoise"}], "extent": [8301, 8320]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"scheme": "Vex", "value": "/vex/functions/vnoise", "type": "link", "text": "", "fallback_text": "vnoise()", "fullpath": "/vex/functions/vnoise"}], "extent": [8320, 8339]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"scheme": "Vex", "value": "/vex/functions/wnoise", "type": "link", "text": "", "fallback_text": "wnoise()", "fullpath": "/vex/functions/wnoise"}], "extent": [8339, 8358]}, {"blevel": 6, "type": "bullet", "indent": 4, "text": [{"scheme": "Vex", "value": "/vex/functions/xnoise", "type": "link", "text": "", "fallback_text": "xnoise()", "fullpath": "/vex/functions/xnoise"}], "extent": [8358, 8378]}], "container": true}], "container": true, "attrs": {"id": "noiselinks"}}, {"type": "arg_group", "body": [{"ext": null, "type": "arg", "indent": 0, "text": {"type": "code", "text": ["clipindex"]}, "role": "item", "extent": [8378, 8394], "body": [{"type": "para", "indent": 4, "text": ["Index of a clip in the agent\u2019s definition.\n    A clip\u2019s index can be obtained via ", {"scheme": "Vex", "value": "/vex/functions/agentfindclip", "type": "link", "text": "", "fallback_text": "agentfindclip()", "fullpath": "/vex/functions/agentfindclip"}, "."], "extent": [8420, 8527]}], "container": true, "attrs": {"id": "agent_clipindex"}}], "container": true, "role": "item_group"}]}