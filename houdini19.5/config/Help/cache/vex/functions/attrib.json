{"type": "root", "attrs": {"type": "vex", "context": "all", "tags": "attrib", "group": "attrib", "redirect": "../attrib_suite#attrib", "showtags": "true"}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["attrib"], "extent": [0, 11]}, {"type": "summary", "indent": 0, "text": ["Reads the value of an attribute from geometry."], "extent": [101, 155]}, {"type": "usage_group", "body": [{"ext": null, "type": "usage", "indent": 0, "text": [" ", {"type": "code", "text": ["<type> attrib(<geometry>, string attribclass, string name, int elemnum)"]}], "role": "item", "extent": [155, 237]}, {"ext": null, "type": "usage", "indent": 0, "text": [" ", {"type": "code", "text": ["<type>[] attrib(<geometry>, string attribclass, string name, int elemnum)"]}], "role": "item", "extent": [237, 322], "body": [{"type": "para", "indent": 4, "text": ["This general form lets you specify the attribute ", {"type": "q", "text": ["class"]}, " at run-time. This can be useful for writing general code that can work on different classes.\n    If you know the class of attribute you want to read ahead of time, using ", {"scheme": "Vex", "value": "/vex/functions/detail", "type": "link", "text": "", "fallback_text": "detail()", "fullpath": "/vex/functions/detail"}, ", ", {"scheme": "Vex", "value": "/vex/functions/prim", "type": "link", "text": "", "fallback_text": "prim()", "fullpath": "/vex/functions/prim"}, ", ", {"scheme": "Vex", "value": "/vex/functions/point", "type": "link", "text": "", "fallback_text": "point()", "fullpath": "/vex/functions/point"}, ", or ", {"scheme": "Vex", "value": "/vex/functions/vertex", "type": "link", "text": "", "fallback_text": "vertex()", "fullpath": "/vex/functions/vertex"}, " may be faster."], "extent": [322, 624]}], "container": true}], "container": true, "role": "item_group"}, {"type": "arg_group", "body": [{"ext": null, "type": "arg", "indent": 0, "text": [{"type": "code", "text": ["<geometry>"]}], "role": "item", "extent": [16, 35], "body": [{"type": "para", "indent": 4, "text": ["When running in the context of a node (such as a wrangle SOP), this argument can be an integer representing the input number (starting at 0) to read the geometry from."], "extent": [58, 235]}, {"type": "para", "indent": 4, "text": ["Alternatively, the argument can be a string specifying a geometry file (for example, a ", {"type": "code", "text": [".bgeo"]}, ") to read from. When running inside Houdini, this can be an ", {"type": "code", "text": ["op:/path/to/sop"]}, " reference."], "extent": [235, 423]}], "container": true, "attrs": {"id": "geometry"}}, {"ext": null, "type": "arg", "indent": 0, "text": {"type": "code", "text": {"type": "code", "text": ["attribclass"]}}, "role": "item", "extent": [1447, 1465], "body": [{"type": "para", "indent": 4, "text": ["One of ", {"type": "code", "text": ["\"detail\""]}, " (or ", {"type": "code", "text": ["\"global\""]}, "), ", {"type": "code", "text": ["\"point\""]}, ", ", {"type": "code", "text": ["\"prim\""]}, ", or ", {"type": "code", "text": ["\"vertex\""]}, "."], "extent": [1491, 1571]}, {"type": "para", "indent": 4, "text": ["You can also use ", {"type": "code", "text": ["\"primgroup\""]}, ", ", {"type": "code", "text": ["\"pointgroup\""]}, " or ", {"type": "code", "text": ["\"vertexgroup\""]}, " to ", {"scheme": null, "value": "/vex/groups", "type": "link", "text": ["read from groups"], "fullpath": "/vex/groups"}, "."], "extent": [1571, 1677]}], "container": true, "attrs": {"id": "attribclass"}}, {"ext": null, "type": "arg", "indent": 0, "text": {"type": "code", "text": ["name"]}, "role": "item", "extent": [683, 694], "body": [{"type": "para", "indent": 4, "text": ["The name of the attribute, group, or intrinsic to read from."], "extent": [694, 760]}], "container": true}, {"ext": null, "type": "arg", "indent": 0, "text": {"type": "code", "text": ["elemnum"]}, "role": "item", "extent": [760, 774], "body": [{"type": "para", "indent": 4, "text": ["Which element (e.g. point number, primitive number, vertex number) to read from. Ignored for detail attributes.  You can use ", {"scheme": "Vex", "value": "/vex/functions/vertexindex", "type": "link", "text": "", "fallback_text": "vertexindex()", "fullpath": "/vex/functions/vertexindex"}, " to convert a primitive/point pair into a vertex number."], "extent": [774, 978]}], "container": true}, {"ext": null, "type": "arg", "indent": 0, "role": "item", "extent": [978, 988], "body": [{"type": "para", "indent": 4, "text": ["Zero/empty value if the attribute does not exist. Use ", {"scheme": "Vex", "value": "/vex/functions/getattrib", "type": "link", "text": "", "fallback_text": "getattrib()", "fullpath": "/vex/functions/getattrib"}, " if you want to check whether the attribute existed."], "extent": [988, 1116]}], "container": true, "returns": true}], "container": true, "role": "item_group"}], "title": ["attrib"], "summary": ["Reads the value of an attribute from geometry."], "included": ["/vex/functions/_common"]}