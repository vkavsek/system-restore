{"type": "root", "attrs": {"type": "vex", "context": "all", "tags": "attrib", "group": "attrib", "redirect": "../attribtypeinfo_suite", "showtags": "true"}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["attribtypeinfo"], "extent": [0, 19]}, {"type": "summary", "indent": 0, "text": ["Returns the transformation metadata of a geometry attribute."], "extent": [110, 178]}, {"type": "usage_group", "body": [{"ext": null, "type": "usage", "indent": 0, "text": [{"type": "code", "text": ["string attribtypeinfo(<geometry>, string attribclass, string attribute_name)"]}], "role": "item", "extent": [178, 265], "body": [{"type": "para", "indent": 4, "text": ["This general form lets you specify the attribute ", {"type": "q", "text": ["class"]}, " at run-time. This can be useful for writing general code that can work on different classes.\n    If you know the attribute class ahead of time, using ", {"scheme": "Vex", "value": "/vex/functions/detailattribtypeinfo", "type": "link", "text": "", "fallback_text": "detailattribtypeinfo()", "fullpath": "/vex/functions/detailattribtypeinfo"}, ", ", {"scheme": "Vex", "value": "/vex/functions/primattribtypeinfo", "type": "link", "text": "", "fallback_text": "primattribtypeinfo()", "fullpath": "/vex/functions/primattribtypeinfo"}, ", ", {"scheme": "Vex", "value": "/vex/functions/pointattribtypeinfo", "type": "link", "text": "", "fallback_text": "pointattribtypeinfo()", "fullpath": "/vex/functions/pointattribtypeinfo"}, ", or ", {"scheme": "Vex", "value": "/vex/functions/vertexattribtypeinfo", "type": "link", "text": "", "fallback_text": "vertexattribtypeinfo()", "fullpath": "/vex/functions/vertexattribtypeinfo"}, " may be faster."], "extent": [265, 603]}], "container": true}], "container": true, "role": "item_group"}, {"type": "arg_group", "body": [{"ext": null, "type": "arg", "indent": 0, "text": [{"type": "code", "text": ["<geometry>"]}], "role": "item", "extent": [16, 35], "body": [{"type": "para", "indent": 4, "text": ["When running in the context of a node (such as a wrangle SOP), this argument can be an integer representing the input number (starting at 0) to read the geometry from."], "extent": [58, 235]}, {"type": "para", "indent": 4, "text": ["Alternatively, the argument can be a string specifying a geometry file (for example, a ", {"type": "code", "text": [".bgeo"]}, ") to read from. When running inside Houdini, this can be an ", {"type": "code", "text": ["op:/path/to/sop"]}, " reference."], "extent": [235, 423]}], "container": true, "attrs": {"id": "geometry"}}, {"ext": null, "type": "arg", "indent": 0, "text": {"type": "code", "text": {"type": "code", "text": ["attribclass"]}}, "role": "item", "extent": [1447, 1465], "body": [{"type": "para", "indent": 4, "text": ["One of ", {"type": "code", "text": ["\"detail\""]}, " (or ", {"type": "code", "text": ["\"global\""]}, "), ", {"type": "code", "text": ["\"point\""]}, ", ", {"type": "code", "text": ["\"prim\""]}, ", or ", {"type": "code", "text": ["\"vertex\""]}, "."], "extent": [1491, 1571]}, {"type": "para", "indent": 4, "text": ["You can also use ", {"type": "code", "text": ["\"primgroup\""]}, ", ", {"type": "code", "text": ["\"pointgroup\""]}, " or ", {"type": "code", "text": ["\"vertexgroup\""]}, " to ", {"scheme": null, "value": "/vex/groups", "type": "link", "text": ["read from groups"], "fullpath": "/vex/groups"}, "."], "extent": [1571, 1677]}], "container": true, "attrs": {"id": "attribclass"}}, {"ext": null, "type": "arg", "indent": 0, "text": {"type": "code", "text": {"type": "code", "text": ["attribute_name"]}}, "role": "item", "extent": [1770, 1791], "body": [{"type": "para", "indent": 4, "text": ["The name of the attribute (or intrinsic) to read."], "extent": [1816, 1871]}], "container": true, "attrs": {"id": "attribname"}}, {"ext": null, "type": "arg", "indent": 0, "role": "item", "extent": [692, 703], "body": [{"type": "para", "indent": 4, "text": ["A string indicating the metadata for a given geometry attribute, or the empty string (", {"type": "code", "text": ["\"\""]}, ") if the attribute does not exist."], "extent": [703, 833]}, {"type": "table", "thead": [], "body": [{"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["\"none\""]}, " "], "role": "td", "extent": [2404, 2419], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Don\u2019t transform."], "extent": [2419, 2444]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["\"point\""]}, " "], "role": "td", "extent": [2444, 2460], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Apply scales, rotations, and transformations."], "extent": [2460, 2514]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["\"hpoint\""]}, " "], "role": "td", "extent": [2514, 2531], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Apply scales, rotations, and transformations to this vector4."], "extent": [2531, 2601]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["\"vector\""]}, " "], "role": "td", "extent": [2601, 2618], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Apply scales and rotations, but not transformations."], "extent": [2618, 2679]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["\"normal\""]}, " "], "role": "td", "extent": [2679, 2696], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Apply rotations, apply scales with inverse-transpose."], "extent": [2696, 2758]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["\"color\""]}, " "], "role": "td", "extent": [2758, 2774], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Don\u2019t transform."], "extent": [2774, 2799]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["\"matrix\""]}, " "], "role": "td", "extent": [2799, 2816], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Apply scales, rotations, and transformations to this matrix."], "extent": [2816, 2885]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["\"quaternion\""]}, " "], "role": "td", "extent": [2885, 2906], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Apply rotations."], "extent": [2906, 2931]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["\"indexpair\""]}, " "], "role": "td", "extent": [2931, 2951], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Don\u2019t transform."], "extent": [2951, 2976]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["\"integer\""]}, " "], "role": "td", "extent": [2976, 2994], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Do not blend this value when points are averaged."], "extent": [2994, 3052]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["\"integer-blend\""]}, " "], "role": "td", "extent": [3052, 3076], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Integer values that blend when points are averaged."], "extent": [3076, 3136]}]}], "divider": false}, {"type": "row", "body": [{"type": "cell", "indent": 4, "text": [{"type": "code", "text": ["\"texturecoord\""]}, " "], "role": "td", "extent": [3136, 3159], "container": true}, {"type": "cell", "role": "td", "body": [{"type": "para", "indent": 8, "text": ["Don\u2019t transform, and try to preserve seams when interpolating.\n        Attributes with this type will show up in the UV viewport menu."], "extent": [3159, 3303]}]}], "divider": false}]}], "container": true, "returns": true}], "container": true, "role": "item_group"}], "title": ["attribtypeinfo"], "summary": ["Returns the transformation metadata of a geometry attribute."], "included": ["/vex/functions/_common"]}