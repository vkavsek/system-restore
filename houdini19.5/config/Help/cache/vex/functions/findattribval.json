{"type": "root", "attrs": {"type": "vex", "context": "all", "tags": "attrib, search", "group": "attrib", "showtags": "true"}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["findattribval"], "extent": [0, 18]}, {"type": "summary", "indent": 0, "text": ["Finds a primitive/point/vertex that has a certain attribute value."], "extent": [82, 156]}, {"type": "usage_group", "body": [{"ext": null, "type": "usage", "indent": 0, "text": [" ", {"type": "code", "text": ["int findattribval( <geometry>, string attribclass, string attribute_name, int|string value, int which=0)"]}], "role": "item", "extent": [156, 271]}, {"ext": null, "type": "usage", "indent": 0, "text": [" ", {"type": "code", "text": ["int[] findattribval( <geometry>, string attribclass, string attribute_name, int|string value)"]}], "role": "item", "extent": [271, 376]}], "container": true, "role": "item_group"}, {"type": "arg_group", "body": [{"ext": null, "type": "arg", "indent": 0, "text": [{"type": "code", "text": ["<geometry>"]}], "role": "item", "extent": [16, 35], "body": [{"type": "para", "indent": 4, "text": ["When running in the context of a node (such as a wrangle SOP), this argument can be an integer representing the input number (starting at 0) to read the geometry from."], "extent": [58, 235]}, {"type": "para", "indent": 4, "text": ["Alternatively, the argument can be a string specifying a geometry file (for example, a ", {"type": "code", "text": [".bgeo"]}, ") to read from. When running inside Houdini, this can be an ", {"type": "code", "text": ["op:/path/to/sop"]}, " reference."], "extent": [235, 423]}], "container": true, "attrs": {"id": "geometry"}}, {"ext": null, "type": "arg", "indent": 0, "text": {"type": "code", "text": {"type": "code", "text": ["attribclass"]}}, "role": "item", "extent": [1320, 1338], "body": [{"type": "para", "indent": 4, "text": ["One of ", {"type": "code", "text": ["\"detail\""]}, " (or ", {"type": "code", "text": ["\"global\""]}, "), ", {"type": "code", "text": ["\"point\""]}, ", ", {"type": "code", "text": ["\"prim\""]}, ", or ", {"type": "code", "text": ["\"vertex\""]}, "."], "extent": [1371, 1447]}], "container": true, "attrs": {"id": "attribclassnogroup"}}, {"ext": null, "type": "arg", "indent": 0, "text": {"type": "code", "text": {"type": "code", "text": ["attribute_name"]}}, "role": "item", "extent": [1677, 1698], "body": [{"type": "para", "indent": 4, "text": ["The name of the attribute to read."], "extent": [1730, 1770]}], "container": true, "attrs": {"id": "attribnamenogroup"}}, {"ext": null, "type": "arg", "indent": 0, "text": {"type": "code", "text": ["value"]}, "role": "item", "extent": [480, 492], "body": [{"type": "para", "indent": 4, "text": ["The value to look for in the attribute."], "extent": [492, 537]}], "container": true}, {"ext": null, "type": "arg", "indent": 0, "text": {"type": "code", "text": ["which"]}, "role": "item", "extent": [537, 549], "body": [{"type": "para", "indent": 4, "text": ["If multiple elements have the given value in the attribute, this controls which match to return."], "extent": [549, 655]}, {"type": "para", "indent": 4, "text": ["If you're searching for multiple elements with the same attribute value, you can use ", {"scheme": "Vex", "value": "/vex/functions/findattribvalcount", "type": "link", "text": "", "fallback_text": "findattribvalcount()", "fullpath": "/vex/functions/findattribvalcount"}, " to get the total number of matches and then iterate through them by increasing the ", {"type": "code", "text": ["which"]}, " argument to this function in a loop. See the examples below.\n    The array signature can also be used to return a list of all of the matching elements."], "extent": [655, 1013]}], "container": true}, {"ext": null, "type": "arg", "indent": 0, "role": "item", "extent": [1013, 1023], "body": [{"type": "para", "indent": 4, "text": ["The number of the first point/primitive/vertex where the named attribute matches the given ", {"type": "code", "text": ["value"]}, ". Returns ", {"type": "code", "text": ["-1"]}, " if no element has the given attribute value.\n    The array signature returns the numbers of all of the points/primitives/vertices where the named attribute matches the given ", {"type": "code", "text": ["value"]}, "."], "extent": [1023, 1324]}], "container": true, "returns": true}], "container": true, "role": "item_group"}, {"type": "tip_group", "body": [{"type": "tip", "indent": 0, "role": "item", "extent": [1324, 1329], "body": [{"type": "para", "indent": 4, "text": ["The most common use cases (finding an point/primitive by its ", {"type": "code", "text": ["name"]}, " or ", {"type": "code", "text": ["id"]}, " attribute) have easier-to-use dedicated wrapper functions: ", {"scheme": "Vex", "value": "/vex/functions/nametopoint", "type": "link", "text": "", "fallback_text": "nametopoint()", "fullpath": "/vex/functions/nametopoint"}, ", ", {"scheme": "Vex", "value": "/vex/functions/nametoprim", "type": "link", "text": "", "fallback_text": "nametoprim()", "fullpath": "/vex/functions/nametoprim"}, ", ", {"scheme": "Vex", "value": "/vex/functions/idtopoint", "type": "link", "text": "", "fallback_text": "idtopoint()", "fullpath": "/vex/functions/idtopoint"}, ", and ", {"scheme": "Vex", "value": "/vex/functions/idtoprim", "type": "link", "text": "", "fallback_text": "idtoprim()", "fullpath": "/vex/functions/idtoprim"}, "."], "extent": [1329, 1543]}], "container": true}], "container": true, "role": "item_group"}, {"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": ["You can only search for integer or string values."], "extent": [1543, 1597]}], "container": true}, {"level": 1, "id": "examples", "container": true, "type": "examples_section", "indent": 0, "role": "section", "extent": [1597, 1607], "body": [{"type": "box_group", "body": [{"ext": null, "type": "box", "indent": 0, "text": ["Find the primitive with ", {"type": "code", "text": ["@id"]}, " == 10"], "role": "item", "extent": [1607, 1649], "body": [{"lang": "vex", "type": "pre", "indent": 4, "text": ["\n    int prim_num = findattribval(0, \"prim\", \"id\", 10);\n    // Note: you can use idtoprim(0, 10) instead\n    "], "extent": [1649, 1779]}], "container": true}, {"ext": null, "type": "box", "indent": 0, "text": ["Find all points with ", {"type": "code", "text": ["@age"]}, " == 10"], "role": "item", "extent": [1779, 1819], "body": [{"lang": "vex", "type": "pre", "indent": 4, "text": ["\n    for (int point_num : findattribval(0, \"point\", \"age\", 10))\n    {\n        // ...do something with the point...\n    }\n    "], "extent": [1819, 1965]}], "container": true}, {"ext": null, "type": "box", "indent": 0, "text": ["Find all points with ", {"type": "code", "text": ["@age"]}, " == 10, using ", {"scheme": "Vex", "value": "/vex/functions/findattribvalcount", "type": "link", "text": "", "fallback_text": "findattribvalcount()", "fullpath": "/vex/functions/findattribvalcount"}, "."], "role": "item", "extent": [1965, 2038], "body": [{"lang": "vex", "type": "pre", "indent": 4, "text": ["\n    int count = findattribvalcount(0, \"point\", \"age\", 10);\n    int point_num;\n    for (int i = 0; i < count; i++) {\n        point_num = findattribval(0, \"point\", \"age\", 10, i);\n        // ...do something with the point...\n    }\n    "], "extent": [2038, 2292]}], "container": true}], "container": true, "role": "item_group"}], "text": "Examples"}, {"level": 1, "id": "related", "container": true, "type": "related_section", "indent": 0, "role": "section", "extent": [2292, 2303], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Vex", "value": "/vex/functions/nametopoint", "type": "link", "text": "", "fallback_text": "nametopoint()", "fullpath": "/vex/functions/nametopoint"}], "extent": [2303, 2324]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Vex", "value": "/vex/functions/nametoprim", "type": "link", "text": "", "fallback_text": "nametoprim()", "fullpath": "/vex/functions/nametoprim"}], "extent": [2324, 2343]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Vex", "value": "/vex/functions/idtopoint", "type": "link", "text": "", "fallback_text": "idtopoint()", "fullpath": "/vex/functions/idtopoint"}], "extent": [2343, 2361]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Vex", "value": "/vex/functions/idtoprim", "type": "link", "text": "", "fallback_text": "idtoprim()", "fullpath": "/vex/functions/idtoprim"}], "extent": [2361, 2378]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Vex", "value": "/vex/functions/findattribvalcount", "type": "link", "text": "", "fallback_text": "findattribvalcount()", "fullpath": "/vex/functions/findattribvalcount"}], "extent": [2378, 2405]}], "container": true}], "text": "Related"}], "title": ["findattribval"], "summary": ["Finds a primitive/point/vertex that has a certain attribute value."], "included": ["/vex/functions/_common"]}