{"type": "root", "attrs": {"type": "vex", "context": "all", "tags": "matrix", "group": "transform", "showtags": "true"}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["maketransform"], "extent": [0, 18]}, {"type": "summary", "indent": 0, "text": ["Builds a 3\u00d73 or 4\u00d74 transform matrix."], "extent": [77, 122]}, {"type": "usage_group", "body": [{"ext": null, "type": "usage", "indent": 0, "text": [" ", {"type": "code", "text": ["matrix3 maketransform(vector zaxis, vector yaxis)"]}], "role": "item", "extent": [122, 182]}, {"ext": null, "type": "usage", "indent": 0, "text": [" ", {"type": "code", "text": ["matrix3 maketransform(int xyz, vector angles)"]}], "role": "item", "extent": [182, 238]}, {"ext": null, "type": "usage", "indent": 0, "text": [" ", {"type": "code", "text": ["matrix maketransform(vector zaxis, vector yaxis, vector translate)"]}], "role": "item", "extent": [238, 315]}, {"ext": null, "type": "usage", "indent": 0, "text": [" ", {"type": "code", "text": ["matrix maketransform(int trs, int xyz; const vector t, vector r)"]}], "role": "item", "extent": [315, 390]}, {"ext": null, "type": "usage", "indent": 0, "text": [" ", {"type": "code", "text": ["matrix maketransform(int trs, int xyz; const vector t, vector r, vector s)"]}], "role": "item", "extent": [390, 475]}, {"ext": null, "type": "usage", "indent": 0, "text": [" ", {"type": "code", "text": ["matrix maketransform(int trs, int xyz; const vector t, vector r, vector s, vector p)"]}], "role": "item", "extent": [475, 570]}, {"ext": null, "type": "usage", "indent": 0, "text": [" ", {"type": "code", "text": ["matrix maketransform(int trs, int xyz; const vector t, vector r, vector s, vector p, vector pr)"]}], "role": "item", "extent": [570, 676]}, {"ext": null, "type": "usage", "indent": 0, "text": [" ", {"type": "code", "text": ["matrix maketransform(int trs, int xyz; const vector t, vector r, vector s, vector p, vector pr, vector shears)"]}], "role": "item", "extent": [676, 798]}], "container": true, "role": "item_group"}, {"type": "para", "indent": 0, "text": ["Builds a 3\u00d73 or 4\u00d74 transform matrix."], "extent": [798, 837]}, {"type": "para", "indent": 0, "text": [{"type": "code", "text": ["maketransform(int trs, ...)"]}, " builds a general 4\u00d74 transform matrix\ngiven an order of transformations (", {"type": "var", "text": ["trs"]}, "), an order for rotations\n(", {"type": "var", "text": ["xyz"]}, "), a vector representing the translation (", {"type": "var", "text": ["t"]}, "), rotation\n(", {"type": "var", "text": ["r"]}, "), scale (", {"type": "var", "text": ["s"]}, ") (and optionally a pivot (", {"type": "var", "text": ["p"]}, "), pivot rotation\n(", {"type": "var", "text": ["pr"]}, "), and shears (", {"type": "var", "text": ["shears"]}, ")). The specifications for the ", {"type": "var", "text": ["trs"]}, " and\n", {"type": "var", "text": ["xyz"]}, " parameters can be found in ", {"type": "code", "text": ["$HFS/houdini/vex/include/math.h"]}, ".  For example, XFORM_SRT will do the trs order Scale, Rotate, Translate; and XFORM_XYZ will do the xyz rotation order X, Y, Z."], "extent": [837, 1383]}, {"type": "para", "indent": 0, "text": [{"type": "code", "text": ["maketransform(int xyz, vector angles)"]}, " builds a 3\u00d73 rotation matrix\nusing the same rules as ", {"type": "code", "text": ["maketransform(int trs, ...)"]}, " but only using\nthe rotation parameters."], "extent": [1383, 1547]}, {"type": "para", "indent": 0, "text": [{"type": "code", "text": ["maketransform(vector zaxis, yaxis, ...)"]}, " builds either a 3\u00d73 transform\nmatrix or a 4\u00d74 transform matrix. The matrix will be constructed so that the \nz-axis will be transformed to the z-axis specified with the given up vector \n(yaxis). Thus, maketransform({0,0,1}, {0,1,0}) will result in an identity \nmatrix. The version which returns a 4\u00d74 transform will apply the translation \nto the 4\u00d74 matrix. This function is very similar to the ", {"scheme": "Vex", "value": "/vex/functions/lookat", "type": "link", "text": ["lookat"], "fallback_text": "lookat()", "fullpath": "/vex/functions/lookat"}, " \nfunction. The vectors passed in are ", {"type": "em", "text": ["not"]}, " normalized meaning that scales \nshould be preserved in construction of the transform."], "extent": [1547, 2133]}, {"type": "note_group", "body": [{"type": "note", "indent": 0, "role": "item", "extent": [2133, 2139], "body": [{"type": "para", "indent": 4, "text": ["Unlike most VEX functions, this function expects rotations \n    in ", {"type": "em", "text": ["degrees"]}, ", not radians."], "extent": [2139, 2234]}], "container": true}], "container": true, "role": "item_group"}], "title": ["maketransform"], "summary": ["Builds a 3\u00d73 or 4\u00d74 transform matrix."]}