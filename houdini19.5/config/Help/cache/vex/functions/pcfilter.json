{"type": "root", "attrs": {"type": "vex", "context": "all", "tags": "ptcloud", "group": "ptcloud", "showtags": "true"}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["pcfilter"], "extent": [0, 13]}, {"type": "summary", "indent": 0, "text": ["Filters points found by ", {"type": "code", "text": ["pcopen"]}, " using a simple reconstruction filter."], "extent": [71, 149]}, {"type": "usage_group", "body": [{"ext": null, "type": "usage", "indent": 0, "text": [" ", {"type": "code", "text": ["<type> pcfilter(int handle, string channel_name, ...)"]}], "role": "item", "extent": [149, 214]}], "container": true, "role": "item_group"}, {"type": "para", "indent": 0, "text": ["Filters the points queued up by ", {"scheme": "Vex", "value": "/vex/functions/pcopen", "type": "link", "text": "", "fallback_text": "pcopen()", "fullpath": "/vex/functions/pcopen"}, "\nusing a simple reconstruction filter."], "extent": [214, 298]}, {"type": "para", "indent": 0, "text": ["This function is roughly equivalent to:"], "extent": [298, 339]}, {"lang": "vex", "type": "pre", "indent": 0, "text": ["\nfloat pcfilter(int handle; string channel)\n{\n    float    sum, w, d;\n    float    value, result = 0;\n    while (pciterate(handle))\n    {\n        pcimport(handle, \"point.distance\", d);\n        pcimport(handle, channel, value);\n        w = 1 - smooth(0, radius, d);\n        sum += w;\n        result += w * value;\n    }\n    result /= sum;\n    return result;\n}\n"], "extent": [339, 710]}, {"type": "para", "indent": 0, "text": [{"type": "code", "text": ["pcfilter"]}, " takes the points that were opened by the point cloud and produces a filtered value. The following equation shows how the individual points are weighted."], "extent": [710, 876]}, {"lang": "vex", "type": "pre", "indent": 0, "text": ["\nw_i = 1-smooth(0, maxd*1.1, d_i);\n"], "extent": [876, 924]}, {"type": "para", "indent": 0, "text": [{"type": "code", "text": ["maxd"]}, " is the farthest point, and ", {"type": "code", "text": ["w_i"]}, " is the weight for a given point at distance (", {"type": "code", "text": ["d_i"]}, "). Points that are closer to the center will be weighted higher with that formula, rather than it being an average."], "extent": [924, 1133]}, {"level": 1, "id": "related", "container": true, "type": "related_section", "indent": 0, "role": "section", "extent": [1133, 1142], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Vex", "value": "/vex/functions/pcopen", "type": "link", "text": "", "fallback_text": "pcopen()", "fullpath": "/vex/functions/pcopen"}], "extent": [1142, 1158]}], "container": true}], "text": "Related"}], "title": ["pcfilter"], "summary": ["Filters points found by ", {"type": "code", "text": ["pcopen"]}, " using a simple reconstruction filter."]}