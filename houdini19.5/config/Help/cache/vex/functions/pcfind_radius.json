{"type": "root", "attrs": {"type": "vex", "context": "all", "tags": "ptcloud, proximity", "group": "ptcloud", "showtags": "true"}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["pcfind_radius"], "extent": [0, 18]}, {"type": "summary", "indent": 0, "text": ["Returns a list of closest points from a file taking into account their radii."], "extent": [87, 172]}, {"type": "usage_group", "body": [{"ext": null, "type": "usage", "indent": 0, "text": [" ", {"type": "code", "text": ["int[] pcfind_radius(<geometry>, string Pchannel, string RadChannel, float radscale, vector P, float radius, int maxpoints)"]}], "role": "item", "extent": [172, 305]}, {"ext": null, "type": "usage", "indent": 0, "text": [" ", {"type": "code", "text": ["int[] pcfind_radius(<geometry>, string ptgroup, string Pchannel, string RadChannel, float radscale, vector P, float radius, int maxpoints)"]}], "role": "item", "extent": [305, 454]}, {"ext": null, "type": "usage", "indent": 0, "text": [" ", {"type": "code", "text": ["int[] pcfind_radius(<geometry>, string Pchannel, string RadChannel, float radscale, vector P, float radius, int maxpoints, float &distances[])"]}], "role": "item", "extent": [454, 607]}, {"ext": null, "type": "usage", "indent": 0, "text": [" ", {"type": "code", "text": ["int[] pcfind_radius(<geometry>, string ptgroup, string Pchannel, string RadChannel, float radscale, vector P, float radius, int maxpoints, float &distances[])"]}], "role": "item", "extent": [607, 777]}], "container": true, "role": "item_group"}, {"type": "arg_group", "body": [{"ext": null, "type": "arg", "indent": 0, "text": [{"type": "code", "text": ["<geometry>"]}], "role": "item", "extent": [16, 35], "body": [{"type": "para", "indent": 4, "text": ["When running in the context of a node (such as a wrangle SOP), this argument can be an integer representing the input number (starting at 0) to read the geometry from."], "extent": [58, 235]}, {"type": "para", "indent": 4, "text": ["Alternatively, the argument can be a string specifying a geometry file (for example, a ", {"type": "code", "text": [".bgeo"]}, ") to read from. When running inside Houdini, this can be an ", {"type": "code", "text": ["op:/path/to/sop"]}, " reference."], "extent": [235, 423]}], "container": true, "attrs": {"id": "geometry"}}], "container": true, "role": "item_group"}, {"type": "para", "indent": 0, "text": ["These functions open a geometry file and return a list of points with the\nlocation ", {"type": "var", "text": ["P"]}, " within ", {"type": "var", "text": ["radius"]}, ", based on point positions found in\n", {"type": "var", "text": ["Pchannel"]}, ".  Each of the points will be expanded by their ", {"type": "var", "text": ["RadChannel"]}, "\nattribute, which will be dilated by ", {"type": "var", "text": ["radscale"]}, ". ", {"type": "var", "text": ["radscale"]}, " scales the sizes of the ", {"type": "code", "text": ["pscale"]}, " attribute to scale the spheres you calculate the distance to. A value of ", {"type": "code", "text": ["0"]}, " turns the spheres into points and distance can only be positive."], "extent": [805, 1261]}, {"type": "para", "indent": 0, "text": ["Using a radius channel allows intersection detection between spheres of varying radii.  In this case you cannot use only your own sphere radius, as the intersecting sphere may have a much larger radius so not be in your search window.  Because of this, it is also sensible to use a 0.0 ", {"type": "var", "text": ["radius"]}, " with this function just find all the source spheres that your query position is inside of."], "extent": [1261, 1650]}, {"type": "para", "indent": 0, "text": ["Only the ", {"type": "var", "text": ["maxpoints"]}, " closest points within the given radius\nwill be returned. The file name may use the ", {"type": "code", "text": ["op:"]}, " syntax to reference SOP\ngeometry in the OP contexts.  The ", {"type": "var", "text": ["Pchannel"]}, " parameter indicates the\nattribute which contains the positions to be searched."], "extent": [1650, 1913]}, {"type": "para", "indent": 0, "text": ["You can also query is the distance to the surface of the found particle. If the particle has a radius, you either clamp at zero when you are inside the particle, or go negative like with a signed distance field. The latter gives you a lot more flexibility for interpreting the results."], "extent": [1913, 2200]}, {"type": "para", "indent": 0, "text": ["The ", {"type": "var", "text": ["ptgroup"]}, " is a point group that limits the points to search.  This is a ", {"scheme": null, "value": "/model/groups#manual", "type": "link", "text": ["SOP-style group pattern"], "fullpath": "/model/groups#manual", "fragment": "#manual"}, ", so can be something like ", {"type": "code", "text": ["0-10"]}, " or ", {"type": "code", "text": ["@Cd.x>0.5"]}, ".  A blank string is treated as matching all points."], "extent": [2200, 2426]}, {"type": "para", "indent": 0, "text": ["The function also optionally takes a float array ", {"type": "code", "text": ["distances"]}, ", which it modifies with the distances to each point."], "extent": [2426, 2541]}, {"type": "note_group", "body": [{"type": "note", "indent": 0, "role": "item", "extent": [2541, 2547], "body": [{"type": "para", "indent": 4, "text": ["The radius attribute and radius scale apply to the points being searched, not to the point you are doing the searching with!"], "extent": [2547, 2677]}], "container": true}, {"type": "note", "indent": 0, "role": "item", "extent": [2677, 2683], "body": [{"type": "para", "indent": 4, "text": ["If the radius attribute does not exist, this becomes equivalent to ", {"type": "code", "text": ["pcfind"]}, "."], "extent": [2683, 2766]}], "container": true}], "container": true, "role": "item_group"}, {"level": 1, "id": "examples", "container": true, "type": "examples_section", "indent": 0, "role": "section", "extent": [2766, 2776], "body": [{"type": "para", "indent": 0, "text": ["Performing a proximity query:"], "extent": [2776, 2808]}, {"lang": "vex", "type": "pre", "indent": 0, "text": ["\nint closept[] = pcfind_radius(filename, \"P\", \"pscale\", 1.0, P, maxdistance, maxpoints);\nP = 0;\nforeach (int ptnum; closept)\n{\n    vector closepos = point(filename, \"P\", ptnum);\n    P += closepos;\n}\nP /= len(closept);\n"], "extent": [2808, 3039]}], "text": "Examples"}, {"level": 1, "id": "related", "container": true, "type": "related_section", "indent": 0, "role": "section", "extent": [3039, 3050], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Vex", "value": "/vex/functions/nearpoint", "type": "link", "text": "", "fallback_text": "nearpoint()", "fullpath": "/vex/functions/nearpoint"}], "extent": [3050, 3069]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Vex", "value": "/vex/functions/nearpoints", "type": "link", "text": "", "fallback_text": "nearpoints()", "fullpath": "/vex/functions/nearpoints"}], "extent": [3069, 3088]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Vex", "value": "/vex/functions/pcfind", "type": "link", "text": "", "fallback_text": "pcfind()", "fullpath": "/vex/functions/pcfind"}], "extent": [3088, 3104]}], "container": true}], "text": "Related"}], "title": ["pcfind_radius"], "summary": ["Returns a list of closest points from a file taking into account their radii."], "included": ["/vex/functions/_common"]}