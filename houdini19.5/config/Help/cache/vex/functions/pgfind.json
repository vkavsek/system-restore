{"type": "root", "attrs": {"type": "vex", "context": "all", "tags": "ptcloud, proximity", "group": "ptcloud", "showtags": "true"}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["pgfind"], "extent": [0, 11]}, {"type": "summary", "indent": 0, "text": ["Returns a list of closest points from a file."], "extent": [80, 133]}, {"type": "usage_group", "body": [{"ext": null, "type": "usage", "indent": 0, "text": [" ", {"type": "code", "text": ["int [] pgfind(<geometry>, vector P, float radius, int maxpoints, float divsize)"]}], "role": "item", "extent": [133, 223]}, {"ext": null, "type": "usage", "indent": 0, "text": [" ", {"type": "code", "text": ["int [] pgfind(<geometry>, string ptgroup, vector P, float radius, int maxpoints, float divsize)"]}], "role": "item", "extent": [223, 330]}], "container": true, "role": "item_group"}, {"type": "arg_group", "body": [{"ext": null, "type": "arg", "indent": 0, "text": [{"type": "code", "text": ["<geometry>"]}], "role": "item", "extent": [16, 35], "body": [{"type": "para", "indent": 4, "text": ["When running in the context of a node (such as a wrangle SOP), this argument can be an integer representing the input number (starting at 0) to read the geometry from."], "extent": [58, 235]}, {"type": "para", "indent": 4, "text": ["Alternatively, the argument can be a string specifying a geometry file (for example, a ", {"type": "code", "text": [".bgeo"]}, ") to read from. When running inside Houdini, this can be an ", {"type": "code", "text": ["op:/path/to/sop"]}, " reference."], "extent": [235, 423]}], "container": true, "attrs": {"id": "geometry"}}], "container": true, "role": "item_group"}, {"type": "para", "indent": 0, "text": ["These functions are very similar to the ", {"type": "code", "text": ["pcfind"]}, " functions.  The difference is that they use a grid-based acceleration structure.  This can provide faster initialization and lookups, provided the right grid size tuning parameter is used."], "extent": [358, 597]}, {"type": "para", "indent": 0, "text": ["If you are searching a point cloud using an near-constant search radius, that radius can be used as the division size."], "extent": [597, 717]}, {"type": "note_group", "body": [{"type": "note", "indent": 0, "role": "item", "extent": [717, 723], "body": [{"type": "para", "indent": 2, "text": ["The division size must be not vary per point."], "extent": [723, 772]}], "container": true}, {"type": "note", "indent": 0, "role": "item", "extent": [772, 778], "body": [{"type": "para", "indent": 2, "text": ["The division size is clamped above 3.0\u00d710", {"tag": "sup", "attrs": {}, "type": "xml", "text": ["5"]}, "."], "extent": [778, 836]}], "container": true}], "container": true, "role": "item_group"}, {"type": "para", "indent": 0, "text": ["The ", {"type": "code", "text": ["ptgroup"]}, " is a point group that limits the points to search.  This is a SOP-style group pattern, so can be something like ", {"type": "code", "text": ["0-10"]}, " or ", {"type": "code", "text": ["@Cd.x>0.5"]}, ".  A blank string is treated as matching all points."], "extent": [836, 1038]}, {"level": 1, "id": "related", "container": true, "type": "related_section", "indent": 0, "role": "section", "extent": [1038, 1047], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Vex", "value": "/vex/functions/pcfind", "type": "link", "text": "", "fallback_text": "pcfind()", "fullpath": "/vex/functions/pcfind"}], "extent": [1047, 1063]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Vex", "value": "/vex/functions/pcfind_radius", "type": "link", "text": "", "fallback_text": "pcfind_radius()", "fullpath": "/vex/functions/pcfind_radius"}], "extent": [1063, 1085]}], "container": true}], "text": "Related"}], "title": ["pgfind"], "summary": ["Returns a list of closest points from a file."], "included": ["/vex/functions/_common"]}