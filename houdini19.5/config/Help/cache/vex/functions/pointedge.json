{"type": "root", "attrs": {"type": "vex", "context": "all", "tags": "hedge", "group": "hedge", "showtags": "true"}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["pointedge"], "extent": [0, 14]}, {"type": "summary", "indent": 0, "text": ["Finds and returns a half-edge with the given endpoints."], "extent": [68, 131]}, {"type": "usage_group", "body": [{"ext": null, "type": "usage", "indent": 0, "text": [" ", {"type": "code", "text": ["int pointedge(<geometry>, int point1, int point2)"]}], "role": "item", "extent": [131, 192]}], "container": true, "role": "item_group"}, {"type": "para", "indent": 0, "text": ["Returns ", {"type": "code", "text": ["-1"]}, " if no such half-edge exists. Otherwise returns the number of a half-edge that either has ", {"type": "code", "text": ["point1"]}, " as source or has ", {"type": "code", "text": ["point2"]}, " as desination, or the other way around."], "extent": [192, 370]}, {"type": "arg_group", "body": [{"ext": null, "type": "arg", "indent": 0, "text": [{"type": "code", "text": ["<geometry>"]}], "role": "item", "extent": [16, 35], "body": [{"type": "para", "indent": 4, "text": ["When running in the context of a node (such as a wrangle SOP), this argument can be an integer representing the input number (starting at 0) to read the geometry from."], "extent": [58, 235]}, {"type": "para", "indent": 4, "text": ["Alternatively, the argument can be a string specifying a geometry file (for example, a ", {"type": "code", "text": [".bgeo"]}, ") to read from. When running inside Houdini, this can be an ", {"type": "code", "text": ["op:/path/to/sop"]}, " reference."], "extent": [235, 423]}], "container": true, "attrs": {"id": "geometry"}}, {"ext": null, "type": "arg", "indent": 0, "text": [{"type": "code", "text": ["point1"]}, ", ", {"type": "code", "text": ["point2"]}], "role": "item", "extent": [398, 423], "body": [{"type": "para", "indent": 4, "text": ["The point numbers in the geometry for the two endpoints of the returned half-edge.  ", {"type": "code", "text": ["0"]}, " is the first point."], "extent": [423, 537]}], "container": true}], "container": true, "role": "item_group"}, {"level": 1, "id": "examples", "container": true, "type": "examples_section", "indent": 0, "role": "section", "extent": [537, 547], "body": [{"lang": "vex", "type": "pre", "indent": 0, "text": ["\n\nint edge_count = 0;\n\n// Determine if there is an edge between points 23 and 25:\nint h0 = pointedge(\"defgeo.bgeo\", 23, 25);\nif (h0 != -1)\n{\n// Edge exists!\n}\n"], "extent": [547, 720]}], "text": "Examples"}], "title": ["pointedge"], "summary": ["Finds and returns a half-edge with the given endpoints."], "included": ["/vex/functions/_common"]}