{"type": "root", "attrs": {"type": "vex", "context": "all", "tags": "proximity", "group": "geo", "since": "17.0", "showtags": "true"}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["polyneighbours"], "extent": [0, 19]}, {"type": "summary", "indent": 0, "text": ["Returns an array of the primitive numbers of the edge-neighbours of a polygon."], "extent": [88, 174]}, {"type": "usage_group", "body": [{"ext": null, "type": "usage", "indent": 0, "text": [" ", {"type": "code", "text": ["int[] polyneighbours(<geometry>, int primnum)"]}], "role": "item", "extent": [174, 231]}], "container": true, "role": "item_group"}, {"type": "arg_group", "body": [{"ext": null, "type": "arg", "indent": 0, "text": [{"type": "code", "text": ["<geometry>"]}], "role": "item", "extent": [16, 35], "body": [{"type": "para", "indent": 4, "text": ["When running in the context of a node (such as a wrangle SOP), this argument can be an integer representing the input number (starting at 0) to read the geometry from."], "extent": [58, 235]}, {"type": "para", "indent": 4, "text": ["Alternatively, the argument can be a string specifying a geometry file (for example, a ", {"type": "code", "text": [".bgeo"]}, ") to read from. When running inside Houdini, this can be an ", {"type": "code", "text": ["op:/path/to/sop"]}, " reference."], "extent": [235, 423]}], "container": true, "attrs": {"id": "geometry"}}], "container": true, "role": "item_group"}, {"type": "para", "indent": 0, "text": ["This returns an array of primitive numbers of polygons that share an\nedge with this polygon.  It uses the Half-Edge data structure so will\nwork wtih geometry that supports that (ie, polygons)"], "extent": [260, 453]}, {"level": 1, "id": "examples", "container": true, "type": "examples_section", "indent": 0, "role": "section", "extent": [453, 463], "body": [{"type": "para", "indent": 0, "text": ["This is roughly equivalent to the following code:"], "extent": [463, 515]}, {"lang": "vex", "type": "pre", "indent": 0, "text": ["\nint[] polyneighbours(const string opname; const int primnum)\n{\n    int result[] = {};\n\n    int start = primhedge(opname, primnum);\n\n    for (int hedge = start; hedge != -1; )\n    {\n        for (int nh = hedge_nextequiv(opname, hedge);\n             nh != hedge;\n             nh = hedge_nextequiv(opname, nh))\n        {\n            int prim = hedge_prim(opname, nh);\n            if (prim != -1 && prim != primnum)\n            {\n                append(result, prim);\n            }\n        }\n        hedge = hedge_next(opname, hedge);\n        if (hedge == start)\n            break;\n    }\n\n    return result;\n}\n"], "extent": [515, 1135]}], "text": "Examples"}, {"level": 1, "id": "related", "container": true, "type": "related_section", "indent": 0, "role": "section", "extent": [1135, 1146], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Vex", "value": "/vex/functions/neighbours", "type": "link", "text": "", "fallback_text": "neighbours()", "fullpath": "/vex/functions/neighbours"}], "extent": [1146, 1166]}], "container": true}], "text": "Related"}], "title": ["polyneighbours"], "summary": ["Returns an array of the primitive numbers of the edge-neighbours of a polygon."], "included": ["/vex/functions/_common"]}