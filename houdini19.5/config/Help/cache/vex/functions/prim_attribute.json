{"type": "root", "attrs": {"type": "vex", "context": "all", "tags": "prim, attrib", "group": "attrib", "showtags": "true"}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["prim_attribute"], "extent": [0, 19]}, {"type": "summary", "indent": 0, "text": ["Interpolates the value of an attribute at a certain parametric (u, v) position and copies it into a variable."], "extent": [81, 198]}, {"type": "para", "indent": 0, "text": ["This function specifies the position using ", {"type": "em", "text": ["intrinsic primitive UVs"]}, ". To use UVs stored in UV attribute, use ", {"scheme": "Vex", "value": "/vex/functions/uvsample", "type": "link", "text": "", "fallback_text": "uvsample()", "fullpath": "/vex/functions/uvsample"}, " instead."], "extent": [198, 332]}, {"type": "usage_group", "body": [{"ext": null, "type": "usage", "indent": 0, "text": [" ", {"type": "code", "text": ["int prim_attribute(<geometry>, <type> &value, string attribute_name, int prim_number, float u, float v)"]}], "role": "item", "extent": [332, 446]}, {"ext": null, "type": "usage", "indent": 0, "text": [" ", {"type": "code", "text": ["int prim_attribute(<geometry>, <type> &value[], string attribute_name, int prim_number, float u, float v)"]}], "role": "item", "extent": [446, 563], "body": [{"type": "para", "indent": 4, "text": ["Samples the attribute value at the given UV coordinates on the primitive."], "extent": [563, 642]}], "container": true}, {"ext": null, "type": "usage", "indent": 0, "text": [" ", {"type": "code", "text": ["int prim_attribute(<geometry>, <type> &value, string attribute_name, int prim_number, vector uvw)"]}], "role": "item", "extent": [642, 750]}, {"ext": null, "type": "usage", "indent": 0, "text": [" ", {"type": "code", "text": ["int prim_attribute(<geometry>, <type> &value[], string attribute_name, int prim_number, vector uvw)"]}], "role": "item", "extent": [750, 865], "body": [{"type": "para", "indent": 4, "text": ["Specify the UVW coordinates using a vector instead of two floats."], "extent": [865, 936]}], "container": true}], "container": true, "role": "item_group"}, {"type": "para", "indent": 0, "text": ["If you don\u2019t need to test for errors, you can use ", {"scheme": "Vex", "value": "/vex/functions/primuv", "type": "link", "text": "", "fallback_text": "primuv()", "fullpath": "/vex/functions/primuv"}, " instead.\nThis function does not work with certain primitive types such as tetrahedra and polysoups."], "extent": [936, 1100]}, {"type": "arg_group", "body": [{"ext": null, "type": "arg", "indent": 0, "text": [{"type": "code", "text": ["<geometry>"]}], "role": "item", "extent": [16, 35], "body": [{"type": "para", "indent": 4, "text": ["When running in the context of a node (such as a wrangle SOP), this argument can be an integer representing the input number (starting at 0) to read the geometry from."], "extent": [58, 235]}, {"type": "para", "indent": 4, "text": ["Alternatively, the argument can be a string specifying a geometry file (for example, a ", {"type": "code", "text": [".bgeo"]}, ") to read from. When running inside Houdini, this can be an ", {"type": "code", "text": ["op:/path/to/sop"]}, " reference."], "extent": [235, 423]}], "container": true, "attrs": {"id": "geometry"}}, {"ext": null, "type": "arg", "indent": 0, "text": {"type": "code", "text": ["value"]}, "role": "item", "extent": [1128, 1140], "body": [{"type": "para", "indent": 4, "text": ["The function overwrites this variable with the interpolated value from the primitive."], "extent": [1140, 1231]}], "container": true}, {"ext": null, "type": "arg", "indent": 0, "text": {"type": "code", "text": ["attribute_name"]}, "role": "item", "extent": [1231, 1252], "body": [{"type": "para", "indent": 4, "text": ["The name of the attribute to read. ", {"type": "strong", "text": ["For point and vertex attributes, the value will at the given UV coordinates will be interpolated"]}, " from the surrounding points/vertices."], "extent": [1252, 1429]}], "container": true}, {"ext": null, "type": "arg", "indent": 0, "text": {"type": "code", "text": ["prim_number"]}, "role": "item", "extent": [1429, 1447], "body": [{"type": "para", "indent": 4, "text": ["The primitive number to read the attribute from."], "extent": [1447, 1501]}], "container": true}, {"ext": null, "type": "arg", "indent": 0, "text": [{"type": "code", "text": ["u"]}, ", ", {"type": "code", "text": ["v"]}], "role": "item", "extent": [1501, 1516], "body": [{"type": "para", "indent": 4, "text": ["The primitive UV coordinates at which to read the attribute."], "extent": [1516, 1582]}], "container": true}, {"ext": null, "type": "arg", "indent": 0, "role": "item", "extent": [1582, 1592], "body": [{"type": "para", "indent": 4, "text": ["Returns ", {"type": "code", "text": ["1"]}, " on success or ", {"type": "code", "text": ["0"]}, " on an error (for example, the attribute doesn\u2019t exist)."], "extent": [1592, 1683]}, {"type": "para", "indent": 4, "text": ["Returns ", {"type": "code", "text": ["0"]}, " if the type of ", {"type": "code", "text": ["value"]}, " is larger than the primitive type. For example, you can\u2019t read a vector attribute into a matrix variable."], "extent": [1683, 1830]}], "container": true, "returns": true}], "container": true, "role": "item_group"}, {"level": 1, "id": "related", "container": true, "type": "related_section", "indent": 0, "role": "section", "extent": [1830, 1839], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Vex", "value": "/vex/functions/primuv", "type": "link", "text": "", "fallback_text": "primuv()", "fullpath": "/vex/functions/primuv"}], "extent": [1839, 1855]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Vex", "value": "/vex/functions/uvsample", "type": "link", "text": "", "fallback_text": "uvsample()", "fullpath": "/vex/functions/uvsample"}], "extent": [1855, 1872]}], "container": true}], "text": "Related"}], "title": ["prim_attribute"], "summary": ["Interpolates the value of an attribute at a certain parametric (u, v) position and copies it into a variable."], "included": ["/vex/functions/_common"]}