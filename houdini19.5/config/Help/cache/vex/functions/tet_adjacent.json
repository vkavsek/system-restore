{"type": "root", "attrs": {"type": "vex", "context": "all", "tags": "tet, proximity", "group": "tet", "showtags": "true"}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["tet_adjacent"], "extent": [0, 17]}, {"type": "summary", "indent": 0, "text": ["Returns primitive number of an adjacent tetrahedron."], "extent": [78, 138]}, {"type": "usage_group", "body": [{"ext": null, "type": "usage", "indent": 0, "text": [" ", {"type": "code", "text": ["int tet_adjacent(<geometry>, int primindex, int faceno)"]}], "role": "item", "extent": [138, 205]}], "container": true, "role": "item_group"}, {"type": "arg_group", "body": [{"ext": null, "type": "arg", "indent": 0, "text": [{"type": "code", "text": ["<geometry>"]}], "role": "item", "extent": [16, 35], "body": [{"type": "para", "indent": 4, "text": ["When running in the context of a node (such as a wrangle SOP), this argument can be an integer representing the input number (starting at 0) to read the geometry from."], "extent": [58, 235]}, {"type": "para", "indent": 4, "text": ["Alternatively, the argument can be a string specifying a geometry file (for example, a ", {"type": "code", "text": [".bgeo"]}, ") to read from. When running inside Houdini, this can be an ", {"type": "code", "text": ["op:/path/to/sop"]}, " reference."], "extent": [235, 423]}], "container": true, "attrs": {"id": "geometry"}}, {"ext": null, "type": "arg", "indent": 0, "text": {"type": "code", "text": ["primindex"]}, "role": "item", "extent": [233, 249], "body": [{"type": "para", "indent": 4, "text": ["The primitive number."], "extent": [249, 276]}], "container": true}, {"ext": null, "type": "arg", "indent": 0, "text": {"type": "code", "text": ["faceno"]}, "role": "item", "extent": [276, 289], "body": [{"type": "para", "indent": 4, "text": ["The face on the tetrahedron.  Face 0 is the triangle that doesn\u2019t\n    have vertex 0."], "extent": [289, 379]}], "container": true}, {"ext": null, "type": "arg", "indent": 0, "role": "item", "extent": [379, 389], "body": [{"type": "para", "indent": 4, "text": ["The primitive number of the tetrahedron opposite the given vertex.\n    Returns ", {"type": "code", "text": ["-1"]}, " f the primitive is not a tet or doesn\u2019t have an adjacent tetrahedron."], "extent": [389, 548]}], "container": true, "returns": true}], "container": true, "role": "item_group"}, {"type": "para", "indent": 0, "text": ["Use ", {"scheme": "Vex", "value": "/vex/functions/tet_faceindex", "type": "link", "text": "", "fallback_text": "tet_faceindex()", "fullpath": "/vex/functions/tet_faceindex"}, " to get the vertex indices of each face of a tetrahedron."], "extent": [548, 631]}, {"level": 1, "id": "related", "container": true, "type": "related_section", "indent": 0, "role": "section", "extent": [631, 640], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Vex", "value": "/vex/functions/tet_faceindex", "type": "link", "text": "", "fallback_text": "tet_faceindex()", "fullpath": "/vex/functions/tet_faceindex"}], "extent": [640, 663]}], "container": true}], "text": "Related"}], "title": ["tet_adjacent"], "summary": ["Returns primitive number of an adjacent tetrahedron."], "included": ["/vex/functions/_common"]}