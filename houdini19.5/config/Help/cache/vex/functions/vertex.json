{"type": "root", "attrs": {"type": "vex", "context": "all", "tags": "vertex, attrib", "group": "attrib", "redirect": "../attrib_suite#vertex", "showtags": "true"}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["vertex"], "extent": [0, 11]}, {"type": "summary", "indent": 0, "text": ["Reads a vertex attribute value from a geometry."], "extent": [109, 164]}, {"type": "usage_group", "body": [{"ext": null, "type": "usage", "indent": 0, "text": [" ", {"type": "code", "text": ["<type> vertex(<geometry>, string attribute_name, int linear_vertex_index)"]}], "role": "item", "extent": [164, 248]}, {"ext": null, "type": "usage", "indent": 0, "text": [" ", {"type": "code", "text": ["<type>[] vertex(<geometry>, string attribute_name, int linear_vertex_index)"]}], "role": "item", "extent": [248, 335], "body": [{"type": "para", "indent": 4, "text": ["Specifies the vertex using the linear index into the list of all vertices."], "extent": [335, 415]}], "container": true}, {"ext": null, "type": "usage", "indent": 0, "text": [" ", {"type": "code", "text": ["<type> vertex(<geometry>, string attribute_name, int prim_num, int vertex_num)"]}], "role": "item", "extent": [415, 504]}, {"ext": null, "type": "usage", "indent": 0, "text": [" ", {"type": "code", "text": ["<type>[] vertex(<geometry>, string attribute_name, int prim_num, int vertex_num)"]}], "role": "item", "extent": [504, 596], "body": [{"type": "para", "indent": 4, "text": ["Specifies the vertex as a primitive number and then an offset into the list of vertices on that primitive."], "extent": [596, 708]}], "container": true}], "container": true, "role": "item_group"}, {"type": "arg_group", "body": [{"ext": null, "type": "arg", "indent": 0, "text": [{"type": "code", "text": ["<geometry>"]}], "role": "item", "extent": [16, 35], "body": [{"type": "para", "indent": 4, "text": ["When running in the context of a node (such as a wrangle SOP), this argument can be an integer representing the input number (starting at 0) to read the geometry from."], "extent": [58, 235]}, {"type": "para", "indent": 4, "text": ["Alternatively, the argument can be a string specifying a geometry file (for example, a ", {"type": "code", "text": [".bgeo"]}, ") to read from. When running inside Houdini, this can be an ", {"type": "code", "text": ["op:/path/to/sop"]}, " reference."], "extent": [235, 423]}], "container": true, "attrs": {"id": "geometry"}}, {"ext": null, "type": "arg", "indent": 0, "text": {"type": "code", "text": {"type": "code", "text": ["attribute_name"]}}, "role": "item", "extent": [1770, 1791], "body": [{"type": "para", "indent": 4, "text": ["The name of the attribute (or intrinsic) to read."], "extent": [1816, 1871]}], "container": true, "attrs": {"id": "attribname"}}, {"ext": null, "type": "arg", "indent": 0, "role": "item", "extent": [766, 776], "body": [{"type": "para", "indent": 4, "text": ["The value of the given attribute on the given vertex, or ", {"type": "code", "text": ["0"]}, " if the attribute or vertex do not exist."], "extent": [776, 882]}], "container": true, "returns": true}], "container": true, "role": "item_group"}], "title": ["vertex"], "summary": ["Reads a vertex attribute value from a geometry."], "included": ["/vex/functions/_common"]}