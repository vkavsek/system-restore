{"type": "root", "attrs": {"type": "vex", "context": "all", "tags": "shading, volume", "group": "volume", "showtags": "true"}, "body": [{"level": 0, "type": "title", "indent": 0, "text": ["volume"], "extent": [0, 11]}, {"type": "summary", "indent": 0, "text": ["Returns the volume of the microvoxel containing a variable such as P."], "extent": [76, 153]}, {"type": "usage_group", "body": [{"ext": null, "type": "usage", "indent": 0, "text": [" ", {"type": "code", "text": ["float volume(vector pos, ...)"]}], "role": "item", "extent": [153, 194]}], "container": true, "role": "item_group"}, {"type": "note_group", "body": [{"type": "note", "indent": 0, "role": "item", "extent": [194, 200], "body": [{"type": "para", "indent": 4, "text": ["This function relies on the fact that VEX ", {"type": "q", "text": ["knows"]}, " that ", {"type": "code", "text": ["pos"]}, " has\n    derivatives (", {"type": "code", "text": ["dPdu"]}, ", ", {"type": "code", "text": ["dPdv"]}, ", and ", {"type": "code", "text": ["dPdz"]}, ").\n    Passing a literal vector instead of a special variables such as ", {"type": "code", "text": ["P"]}, "\n    will return ", {"type": "code", "text": ["0"]}, " since VEX will not be able to access the derivatives."], "extent": [200, 462]}], "container": true}], "container": true, "role": "item_group"}, {"level": 2, "id": null, "container": true, "type": "h", "indent": 0, "text": ["Derivatives options"], "extent": [16, 42], "body": [{"type": "para", "indent": 0, "text": ["Functions which compute derivatives take additional arguments to\nallow tuning of the derivative computation."], "extent": [42, 153]}, {"type": "arg_group", "body": [{"ext": null, "type": "arg", "indent": 0, "text": {"type": "code", "text": ["extrapolate"]}, "role": "item", "extent": [153, 172], "body": [{"type": "para", "indent": 4, "text": ["Whether derivatives are\n    ", {"type": "q", "text": ["smooth"]}, " across patch boundaries. In most cases this is true and if\n    extrapolation is turned on, derivative computation should be exact\n    for C2 surfaces. However, when the VEX variables are changing with a\n    high frequency (for example, a high frequency displacement map\n    causing high frequency changes to the P variable), extrapolation of\n    derivative computation may cause exaggeration of discontinuities\n    between patch boundaries."], "extent": [208, 695]}], "container": true, "attrs": {"type": "int", "default": "0"}, "variadic": true}, {"ext": null, "type": "arg", "indent": 0, "text": {"type": "code", "text": ["smooth"]}, "role": "item", "extent": [695, 709], "body": [{"type": "para", "indent": 4, "text": ["Adjust the magnitude of the\n    differentials non-uniformly over patches. This will usually reduce\n    patch discontinuities in displacement/textured shaders. However, in\n    some odd cases you may want to turn this feature off."], "extent": [745, 979]}], "container": true, "attrs": {"type": "int", "default": "1"}, "variadic": true}], "container": true, "role": "item_group"}, {"lang": "vex", "type": "pre", "indent": 0, "text": ["\nN = computenormal(P, \"extrapolate\", 1, \"smooth\", 0);\n"], "extent": [979, 1046]}]}, {"level": 1, "id": "examples", "container": true, "type": "examples_section", "indent": 0, "role": "section", "extent": [491, 501], "body": [{"type": "para", "indent": 0, "text": ["Return the volume of the current micro-voxel in camera space:"], "extent": [501, 565]}, {"lang": "vex", "type": "pre", "indent": 0, "text": ["\nvolume(P)\n"], "extent": [565, 589]}, {"type": "para", "indent": 0, "text": ["Returns ", {"type": "code", "text": ["0"]}, ", since the argument is not a variable VEX knows the derivatives for:"], "extent": [589, 672]}, {"lang": "vex", "type": "pre", "indent": 0, "text": ["\nvolume({0.1, 2.3, 4.5})\n"], "extent": [672, 710]}], "text": "Examples"}, {"level": 1, "id": "related", "container": true, "type": "related_section", "indent": 0, "role": "section", "extent": [710, 721], "body": [{"type": "bullet_group", "body": [{"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Vex", "value": "/vex/functions/area", "type": "link", "text": "", "fallback_text": "area()", "fullpath": "/vex/functions/area"}], "extent": [721, 735]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Vex", "value": "/vex/functions/gradient", "type": "link", "text": "", "fallback_text": "gradient()", "fullpath": "/vex/functions/gradient"}], "extent": [735, 752]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Vex", "value": "/vex/functions/Du", "type": "link", "text": "", "fallback_text": "Du()", "fullpath": "/vex/functions/Du"}], "extent": [752, 763]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Vex", "value": "/vex/functions/Dv", "type": "link", "text": "", "fallback_text": "Dv()", "fullpath": "/vex/functions/Dv"}], "extent": [763, 774]}, {"blevel": 2, "type": "bullet", "indent": 0, "text": [{"scheme": "Vex", "value": "/vex/functions/Dw", "type": "link", "text": "", "fallback_text": "Dw()", "fullpath": "/vex/functions/Dw"}], "extent": [774, 786]}], "container": true}], "text": "Related"}], "title": ["volume"], "summary": ["Returns the volume of the microvoxel containing a variable such as P."], "included": ["/vex/functions/_derive_variadic"]}